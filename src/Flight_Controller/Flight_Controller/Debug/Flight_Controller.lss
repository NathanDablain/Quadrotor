
Flight_Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001e2  00804000  000055e4  00005678  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000055e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000af1  008041e2  008041e2  0000585a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000585a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000058b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  000058f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006fd7  00000000  00000000  00005aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003b04  00000000  00000000  0000ca7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000027da  00000000  00000000  00010583  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000874  00000000  00000000  00012d60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0001c6ed  00000000  00000000  000135d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000318b  00000000  00000000  0002fcc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f0  00000000  00000000  00032e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00007d3a  00000000  00000000  0003303c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__ctors_end>
       4:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
       8:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
       c:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      10:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      14:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__vector_5>
      18:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      1c:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      20:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      24:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      28:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      2c:	0c 94 36 09 	jmp	0x126c	; 0x126c <__vector_11>
      30:	0c 94 52 09 	jmp	0x12a4	; 0x12a4 <__vector_12>
      34:	0c 94 6e 09 	jmp	0x12dc	; 0x12dc <__vector_13>
      38:	0c 94 1c 0c 	jmp	0x1838	; 0x1838 <__vector_14>
      3c:	0c 94 49 0c 	jmp	0x1892	; 0x1892 <__vector_15>
      40:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      44:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      48:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      4c:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      50:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      54:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      58:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      5c:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      60:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      64:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      68:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      6c:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      70:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      74:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      78:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      7c:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      80:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      84:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      88:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      8c:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      90:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      94:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      98:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      9c:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      a0:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      a4:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      a8:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      ac:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      b0:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      b4:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      b8:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      bc:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      c0:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      c4:	0c 94 8a 09 	jmp	0x1314	; 0x1314 <__vector_49>
      c8:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      cc:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      d0:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      d4:	0c 94 18 1a 	jmp	0x3430	; 0x3430 <__vector_53>
      d8:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      dc:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      e0:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      e4:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      e8:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      ec:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      f0:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      f4:	05 06       	cpc	r0, r21
      f6:	14 06       	cpc	r1, r20
      f8:	14 06       	cpc	r1, r20
      fa:	14 06       	cpc	r1, r20
      fc:	14 06       	cpc	r1, r20
      fe:	14 06       	cpc	r1, r20
     100:	0f 06       	cpc	r0, r31
     102:	14 06       	cpc	r1, r20
     104:	0a 06       	cpc	r0, r26
     106:	00 06       	cpc	r0, r16
     108:	bf 05       	cpc	r27, r15
     10a:	14 06       	cpc	r1, r20
     10c:	92 05       	cpc	r25, r2
     10e:	19 06       	cpc	r1, r25
     110:	97 05       	cpc	r25, r7
     112:	9c 05       	cpc	r25, r12
     114:	a1 05       	cpc	r26, r1
     116:	a6 05       	cpc	r26, r6
     118:	ab 05       	cpc	r26, r11
     11a:	b0 05       	cpc	r27, r0
     11c:	b5 05       	cpc	r27, r5
     11e:	ba 05       	cpc	r27, r10
     120:	14 06       	cpc	r1, r20
     122:	14 06       	cpc	r1, r20
     124:	14 06       	cpc	r1, r20
     126:	14 06       	cpc	r1, r20
     128:	14 06       	cpc	r1, r20
     12a:	14 06       	cpc	r1, r20
     12c:	14 06       	cpc	r1, r20
     12e:	ec 05       	cpc	r30, r12
     130:	14 06       	cpc	r1, r20
     132:	f1 05       	cpc	r31, r1
     134:	fb 05       	cpc	r31, r11
     136:	d8 05       	cpc	r29, r8
     138:	f6 05       	cpc	r31, r6
     13a:	c4 05       	cpc	r28, r4
     13c:	d3 05       	cpc	r29, r3
     13e:	14 06       	cpc	r1, r20
     140:	14 06       	cpc	r1, r20
     142:	14 06       	cpc	r1, r20
     144:	dd 05       	cpc	r29, r13
     146:	ce 05       	cpc	r28, r14
     148:	c9 05       	cpc	r28, r9
     14a:	e2 05       	cpc	r30, r2
     14c:	14 06       	cpc	r1, r20
     14e:	14 06       	cpc	r1, r20
     150:	e7 05       	cpc	r30, r7
     152:	46 06       	cpc	r4, r22
     154:	56 06       	cpc	r5, r22
     156:	66 06       	cpc	r6, r22
     158:	76 06       	cpc	r7, r22
     15a:	86 06       	cpc	r8, r22
     15c:	96 06       	cpc	r9, r22
     15e:	a6 06       	cpc	r10, r22
     160:	b6 06       	cpc	r11, r22
     162:	0a 08       	sbc	r0, r10
     164:	1a 08       	sbc	r1, r10
     166:	2a 08       	sbc	r2, r10
     168:	3b 08       	sbc	r3, r11
     16a:	4b 08       	sbc	r4, r11
     16c:	5b 08       	sbc	r5, r11
     16e:	6b 08       	sbc	r6, r11
     170:	08 4a       	sbci	r16, 0xA8	; 168
     172:	d7 3b       	cpi	r29, 0xB7	; 183
     174:	3b ce       	rjmp	.-906    	; 0xfffffdec <__eeprom_end+0xff7efdec>
     176:	01 6e       	ori	r16, 0xE1	; 225
     178:	84 bc       	out	0x24, r8	; 36
     17a:	bf fd       	.word	0xfdbf	; ????
     17c:	c1 2f       	mov	r28, r17
     17e:	3d 6c       	ori	r19, 0xCD	; 205
     180:	74 31       	cpi	r23, 0x14	; 20
     182:	9a bd       	out	0x2a, r25	; 42
     184:	56 83       	std	Z+6, r21	; 0x06
     186:	3d da       	rcall	.-2950   	; 0xfffff602 <__eeprom_end+0xff7ef602>
     188:	3d 00       	.word	0x003d	; ????
     18a:	c7 7f       	andi	r28, 0xF7	; 247
     18c:	11 be       	out	0x31, r1	; 49
     18e:	d9 e4       	ldi	r29, 0x49	; 73
     190:	bb 4c       	sbci	r27, 0xCB	; 203
     192:	3e 91       	ld	r19, -X
     194:	6b aa       	std	Y+51, r6	; 0x33
     196:	aa be       	out	0x3a, r10	; 58
     198:	00 00       	nop
     19a:	00 80       	ld	r0, Z
     19c:	3f 05       	cpc	r19, r15
     19e:	a8 4c       	sbci	r26, 0xC8	; 200
     1a0:	cd b2       	in	r12, 0x1d	; 29
     1a2:	d4 4e       	sbci	r29, 0xE4	; 228
     1a4:	b9 38       	cpi	r27, 0x89	; 137
     1a6:	36 a9       	ldd	r19, Z+54	; 0x36
     1a8:	02 0c       	add	r0, r2
     1aa:	50 b9       	out	0x00, r21	; 0
     1ac:	91 86       	std	Z+9, r9	; 0x09
     1ae:	88 08       	sbc	r8, r8
     1b0:	3c a6       	std	Y+44, r3	; 0x2c
     1b2:	aa aa       	std	Y+50, r10	; 0x32
     1b4:	2a be       	out	0x3a, r2	; 58
     1b6:	00 00       	nop
     1b8:	00 80       	ld	r0, Z
     1ba:	3f 06       	cpc	r3, r31
     1bc:	64 ec       	ldi	r22, 0xC4	; 196
     1be:	1b 3c       	cpi	r17, 0xCB	; 203
     1c0:	04 bc       	out	0x24, r0	; 36
     1c2:	16 3e       	cpi	r17, 0xE6	; 230
     1c4:	3b e5       	ldi	r19, 0x5B	; 91
     1c6:	b9 3c       	cpi	r27, 0xC9	; 201
     1c8:	c9 3c       	cpi	r28, 0xC9	; 201
     1ca:	37 c2       	rjmp	.+1134   	; 0x63a <Write_SPI+0xdc>
     1cc:	9e 5a       	subi	r25, 0xAE	; 174
     1ce:	3d 66       	ori	r19, 0x6D	; 109
     1d0:	04 98       	cbi	0x00, 4	; 0
     1d2:	08 3e       	cpi	r16, 0xE8	; 232
     1d4:	ea 69       	ori	r30, 0x9A	; 154
     1d6:	aa aa       	std	Y+50, r10	; 0x32
     1d8:	3e 00       	.word	0x003e	; ????
     1da:	00 00       	nop
     1dc:	80 3f       	cpi	r24, 0xF0	; 240
     1de:	07 63       	ori	r16, 0x37	; 55
     1e0:	42 36       	cpi	r20, 0x62	; 98
     1e2:	b7 9b       	sbis	0x16, 7	; 22
     1e4:	d8 a7       	std	Y+40, r29	; 0x28
     1e6:	1a 39       	cpi	r17, 0x9A	; 154
     1e8:	68 56       	subi	r22, 0x68	; 104
     1ea:	18 ae       	std	Y+56, r1	; 0x38
     1ec:	ba ab       	std	Y+50, r27	; 0x32
     1ee:	55 8c       	ldd	r5, Z+29	; 0x1d
     1f0:	1d 3c       	cpi	r17, 0xCD	; 205
     1f2:	b7 cc       	rjmp	.-1682   	; 0xfffffb62 <__eeprom_end+0xff7efb62>
     1f4:	57 63       	ori	r21, 0x37	; 55
     1f6:	bd 6d       	ori	r27, 0xDD	; 221
     1f8:	ed fd       	.word	0xfded	; ????
     1fa:	75 3e       	cpi	r23, 0xE5	; 229
     1fc:	f6 17       	cp	r31, r22
     1fe:	72 31       	cpi	r23, 0x12	; 18
     200:	bf 00       	.word	0x00bf	; ????
     202:	00 00       	nop
     204:	80 3f       	cpi	r24, 0xF0	; 240
     206:	08 00       	.word	0x0008	; ????
     208:	00 00       	nop
     20a:	be 92       	st	-X, r11
     20c:	24 49       	sbci	r18, 0x94	; 148
     20e:	12 3e       	cpi	r17, 0xE2	; 226
     210:	ab aa       	std	Y+51, r10	; 0x33
     212:	aa 2a       	or	r10, r26
     214:	be cd       	rjmp	.-1156   	; 0xfffffd92 <__eeprom_end+0xff7efd92>
     216:	cc cc       	rjmp	.-1640   	; 0xfffffbb0 <__eeprom_end+0xff7efbb0>
     218:	4c 3e       	cpi	r20, 0xEC	; 236
     21a:	00 00       	nop
     21c:	00 80       	ld	r0, Z
     21e:	be ab       	std	Y+54, r27	; 0x36
     220:	aa aa       	std	Y+50, r10	; 0x32
     222:	aa 3e       	cpi	r26, 0xEA	; 234
     224:	00 00       	nop
     226:	00 00       	nop
     228:	bf 00       	.word	0x00bf	; ????
     22a:	00 00       	nop
     22c:	80 3f       	cpi	r24, 0xF0	; 240
     22e:	00 00       	nop
     230:	00 00       	nop
     232:	00 08       	sbc	r0, r0
     234:	41 78       	andi	r20, 0x81	; 129
     236:	d3 bb       	out	0x13, r29	; 19
     238:	43 87       	std	Z+11, r20	; 0x0b
     23a:	d1 13       	cpse	r29, r17
     23c:	3d 19       	sub	r19, r13
     23e:	0e 3c       	cpi	r16, 0xCE	; 206
     240:	c3 bd       	out	0x23, r28	; 35
     242:	42 82       	std	Z+2, r4	; 0x02
     244:	ad 2b       	or	r26, r29
     246:	3e 68       	ori	r19, 0x8E	; 142
     248:	ec 82       	std	Y+4, r14	; 0x04
     24a:	76 be       	out	0x36, r7	; 54
     24c:	d9 8f       	std	Y+25, r29	; 0x19
     24e:	e1 a9       	ldd	r30, Z+49	; 0x31
     250:	3e 4c       	sbci	r19, 0xCE	; 206
     252:	80 ef       	ldi	r24, 0xF0	; 240
     254:	ff be       	out	0x3f, r15	; 63
     256:	01 c4       	rjmp	.+2050   	; 0xa5a <Write_Character+0x148>
     258:	ff 7f       	andi	r31, 0xFF	; 255
     25a:	3f 00       	.word	0x003f	; ????
     25c:	00 00       	nop
	...

00000260 <__trampolines_end>:
     260:	6e 61       	ori	r22, 0x1E	; 30
     262:	6e 00       	.word	0x006e	; ????

00000264 <__c.2332>:
     264:	69 6e 66 00                                         inf.

00000268 <pstr_nan>:
     268:	4e 41 4e                                            NAN

0000026b <pstr_inity>:
     26b:	49 4e 49 54 59                                      INITY

00000270 <pstr_inf>:
     270:	49 4e 46                                            INF

00000273 <pwr_m10>:
     273:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     283:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

0000028b <pwr_p10>:
     28b:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     29b:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
     2ab:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
     2bb:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
     2cb:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
     2db:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
     2eb:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
     2fb:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     30b:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     31b:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     32b:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     33b:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     34b:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     35b:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     36b:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     37b:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     38b:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     39b:	3d 27 00                                            ='.

0000039e <__ctors_end>:
     39e:	11 24       	eor	r1, r1
     3a0:	1f be       	out	0x3f, r1	; 63
     3a2:	cf ef       	ldi	r28, 0xFF	; 255
     3a4:	cd bf       	out	0x3d, r28	; 61
     3a6:	df e7       	ldi	r29, 0x7F	; 127
     3a8:	de bf       	out	0x3e, r29	; 62

000003aa <__do_copy_data>:
     3aa:	11 e4       	ldi	r17, 0x41	; 65
     3ac:	a0 e0       	ldi	r26, 0x00	; 0
     3ae:	b0 e4       	ldi	r27, 0x40	; 64
     3b0:	e4 ee       	ldi	r30, 0xE4	; 228
     3b2:	f5 e5       	ldi	r31, 0x55	; 85
     3b4:	00 e0       	ldi	r16, 0x00	; 0
     3b6:	0b bf       	out	0x3b, r16	; 59
     3b8:	02 c0       	rjmp	.+4      	; 0x3be <__do_copy_data+0x14>
     3ba:	07 90       	elpm	r0, Z+
     3bc:	0d 92       	st	X+, r0
     3be:	a2 3e       	cpi	r26, 0xE2	; 226
     3c0:	b1 07       	cpc	r27, r17
     3c2:	d9 f7       	brne	.-10     	; 0x3ba <__do_copy_data+0x10>

000003c4 <__do_clear_bss>:
     3c4:	2c e4       	ldi	r18, 0x4C	; 76
     3c6:	a2 ee       	ldi	r26, 0xE2	; 226
     3c8:	b1 e4       	ldi	r27, 0x41	; 65
     3ca:	01 c0       	rjmp	.+2      	; 0x3ce <.do_clear_bss_start>

000003cc <.do_clear_bss_loop>:
     3cc:	1d 92       	st	X+, r1

000003ce <.do_clear_bss_start>:
     3ce:	a3 3d       	cpi	r26, 0xD3	; 211
     3d0:	b2 07       	cpc	r27, r18
     3d2:	e1 f7       	brne	.-8      	; 0x3cc <.do_clear_bss_loop>
     3d4:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <main>
     3d8:	0c 94 f0 2a 	jmp	0x55e0	; 0x55e0 <_exit>

000003dc <__bad_interrupt>:
     3dc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003e0 <Setup_SPI>:
inline unsigned char Write_Display_Double(unsigned char Address_Byte, unsigned char Data_Byte){
	unsigned char input_data[2] = {Address_Byte, Data_Byte};
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x00, input_data, 2);
	
	return (TWI_status == 4) ? 1 : 0;
}
     3e0:	e0 e0       	ldi	r30, 0x00	; 0
     3e2:	f4 e0       	ldi	r31, 0x04	; 4
     3e4:	80 81       	ld	r24, Z
     3e6:	80 6e       	ori	r24, 0xE0	; 224
     3e8:	80 83       	st	Z, r24
     3ea:	e0 e2       	ldi	r30, 0x20	; 32
     3ec:	f4 e0       	ldi	r31, 0x04	; 4
     3ee:	80 81       	ld	r24, Z
     3f0:	8c 60       	ori	r24, 0x0C	; 12
     3f2:	80 83       	st	Z, r24
     3f4:	e0 e4       	ldi	r30, 0x40	; 64
     3f6:	f4 e0       	ldi	r31, 0x04	; 4
     3f8:	80 81       	ld	r24, Z
     3fa:	85 60       	ori	r24, 0x05	; 5
     3fc:	80 83       	st	Z, r24
     3fe:	e4 e0       	ldi	r30, 0x04	; 4
     400:	f4 e0       	ldi	r31, 0x04	; 4
     402:	80 81       	ld	r24, Z
     404:	80 6e       	ori	r24, 0xE0	; 224
     406:	80 83       	st	Z, r24
     408:	e4 e2       	ldi	r30, 0x24	; 36
     40a:	f4 e0       	ldi	r31, 0x04	; 4
     40c:	80 81       	ld	r24, Z
     40e:	8c 60       	ori	r24, 0x0C	; 12
     410:	80 83       	st	Z, r24
     412:	e0 e6       	ldi	r30, 0x60	; 96
     414:	f9 e0       	ldi	r31, 0x09	; 9
     416:	80 81       	ld	r24, Z
     418:	81 62       	ori	r24, 0x21	; 33
     41a:	80 83       	st	Z, r24
     41c:	08 95       	ret

0000041e <Read_SPI>:
     41e:	af 92       	push	r10
     420:	bf 92       	push	r11
     422:	cf 92       	push	r12
     424:	df 92       	push	r13
     426:	ef 92       	push	r14
     428:	ff 92       	push	r15
     42a:	0f 93       	push	r16
     42c:	1f 93       	push	r17
     42e:	cf 93       	push	r28
     430:	df 93       	push	r29
     432:	18 2f       	mov	r17, r24
     434:	b6 2e       	mov	r11, r22
     436:	e9 01       	movw	r28, r18
     438:	81 34       	cpi	r24, 0x41	; 65
     43a:	71 f4       	brne	.+28     	; 0x458 <Read_SPI+0x3a>
     43c:	e4 e0       	ldi	r30, 0x04	; 4
     43e:	f4 e0       	ldi	r31, 0x04	; 4
     440:	20 81       	ld	r18, Z
     442:	81 e0       	ldi	r24, 0x01	; 1
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	02 c0       	rjmp	.+4      	; 0x44c <Read_SPI+0x2e>
     448:	88 0f       	add	r24, r24
     44a:	99 1f       	adc	r25, r25
     44c:	6a 95       	dec	r22
     44e:	e2 f7       	brpl	.-8      	; 0x448 <Read_SPI+0x2a>
     450:	80 95       	com	r24
     452:	82 23       	and	r24, r18
     454:	80 83       	st	Z, r24
     456:	10 c0       	rjmp	.+32     	; 0x478 <Read_SPI+0x5a>
     458:	82 34       	cpi	r24, 0x42	; 66
     45a:	09 f0       	breq	.+2      	; 0x45e <Read_SPI+0x40>
     45c:	70 c0       	rjmp	.+224    	; 0x53e <Read_SPI+0x120>
     45e:	e4 e2       	ldi	r30, 0x24	; 36
     460:	f4 e0       	ldi	r31, 0x04	; 4
     462:	20 81       	ld	r18, Z
     464:	81 e0       	ldi	r24, 0x01	; 1
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	02 c0       	rjmp	.+4      	; 0x46e <Read_SPI+0x50>
     46a:	88 0f       	add	r24, r24
     46c:	99 1f       	adc	r25, r25
     46e:	6a 95       	dec	r22
     470:	e2 f7       	brpl	.-8      	; 0x46a <Read_SPI+0x4c>
     472:	80 95       	com	r24
     474:	82 23       	and	r24, r18
     476:	80 83       	st	Z, r24
     478:	40 93 64 09 	sts	0x0964, r20	; 0x800964 <__TEXT_REGION_LENGTH__+0x7e0964>
     47c:	c1 2c       	mov	r12, r1
     47e:	d1 2c       	mov	r13, r1
     480:	76 01       	movw	r14, r12
     482:	12 c0       	rjmp	.+36     	; 0x4a8 <Read_SPI+0x8a>
     484:	8f ef       	ldi	r24, 0xFF	; 255
     486:	c8 1a       	sub	r12, r24
     488:	d8 0a       	sbc	r13, r24
     48a:	e8 0a       	sbc	r14, r24
     48c:	f8 0a       	sbc	r15, r24
     48e:	c7 01       	movw	r24, r14
     490:	b6 01       	movw	r22, r12
     492:	0e 94 a0 1e 	call	0x3d40	; 0x3d40 <__floatunsisf>
     496:	20 e0       	ldi	r18, 0x00	; 0
     498:	30 e5       	ldi	r19, 0x50	; 80
     49a:	43 ec       	ldi	r20, 0xC3	; 195
     49c:	57 e4       	ldi	r21, 0x47	; 71
     49e:	0e 94 b8 1f 	call	0x3f70	; 0x3f70 <__gesf2>
     4a2:	18 16       	cp	r1, r24
     4a4:	0c f4       	brge	.+2      	; 0x4a8 <Read_SPI+0x8a>
     4a6:	4d c0       	rjmp	.+154    	; 0x542 <Read_SPI+0x124>
     4a8:	80 91 63 09 	lds	r24, 0x0963	; 0x800963 <__TEXT_REGION_LENGTH__+0x7e0963>
     4ac:	88 23       	and	r24, r24
     4ae:	54 f7       	brge	.-44     	; 0x484 <Read_SPI+0x66>
     4b0:	e3 e6       	ldi	r30, 0x63	; 99
     4b2:	f9 e0       	ldi	r31, 0x09	; 9
     4b4:	80 81       	ld	r24, Z
     4b6:	8f 77       	andi	r24, 0x7F	; 127
     4b8:	80 83       	st	Z, r24
     4ba:	80 e0       	ldi	r24, 0x00	; 0
     4bc:	1d c0       	rjmp	.+58     	; 0x4f8 <Read_SPI+0xda>
     4be:	10 92 64 09 	sts	0x0964, r1	; 0x800964 <__TEXT_REGION_LENGTH__+0x7e0964>
     4c2:	11 c0       	rjmp	.+34     	; 0x4e6 <Read_SPI+0xc8>
     4c4:	8f ef       	ldi	r24, 0xFF	; 255
     4c6:	c8 1a       	sub	r12, r24
     4c8:	d8 0a       	sbc	r13, r24
     4ca:	e8 0a       	sbc	r14, r24
     4cc:	f8 0a       	sbc	r15, r24
     4ce:	c7 01       	movw	r24, r14
     4d0:	b6 01       	movw	r22, r12
     4d2:	0e 94 a0 1e 	call	0x3d40	; 0x3d40 <__floatunsisf>
     4d6:	20 e0       	ldi	r18, 0x00	; 0
     4d8:	30 e5       	ldi	r19, 0x50	; 80
     4da:	43 ec       	ldi	r20, 0xC3	; 195
     4dc:	57 e4       	ldi	r21, 0x47	; 71
     4de:	0e 94 b8 1f 	call	0x3f70	; 0x3f70 <__gesf2>
     4e2:	18 16       	cp	r1, r24
     4e4:	84 f1       	brlt	.+96     	; 0x546 <Read_SPI+0x128>
     4e6:	80 91 63 09 	lds	r24, 0x0963	; 0x800963 <__TEXT_REGION_LENGTH__+0x7e0963>
     4ea:	88 23       	and	r24, r24
     4ec:	5c f7       	brge	.-42     	; 0x4c4 <Read_SPI+0xa6>
     4ee:	80 91 64 09 	lds	r24, 0x0964	; 0x800964 <__TEXT_REGION_LENGTH__+0x7e0964>
     4f2:	88 83       	st	Y, r24
     4f4:	8a 2d       	mov	r24, r10
     4f6:	21 96       	adiw	r28, 0x01	; 1
     4f8:	aa 24       	eor	r10, r10
     4fa:	a3 94       	inc	r10
     4fc:	a8 0e       	add	r10, r24
     4fe:	80 17       	cp	r24, r16
     500:	f0 f2       	brcs	.-68     	; 0x4be <Read_SPI+0xa0>
     502:	11 34       	cpi	r17, 0x41	; 65
     504:	71 f4       	brne	.+28     	; 0x522 <Read_SPI+0x104>
     506:	e4 e0       	ldi	r30, 0x04	; 4
     508:	f4 e0       	ldi	r31, 0x04	; 4
     50a:	20 81       	ld	r18, Z
     50c:	81 e0       	ldi	r24, 0x01	; 1
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	02 c0       	rjmp	.+4      	; 0x516 <Read_SPI+0xf8>
     512:	88 0f       	add	r24, r24
     514:	99 1f       	adc	r25, r25
     516:	ba 94       	dec	r11
     518:	e2 f7       	brpl	.-8      	; 0x512 <Read_SPI+0xf4>
     51a:	82 2b       	or	r24, r18
     51c:	80 83       	st	Z, r24
     51e:	82 e0       	ldi	r24, 0x02	; 2
     520:	13 c0       	rjmp	.+38     	; 0x548 <Read_SPI+0x12a>
     522:	e4 e2       	ldi	r30, 0x24	; 36
     524:	f4 e0       	ldi	r31, 0x04	; 4
     526:	20 81       	ld	r18, Z
     528:	81 e0       	ldi	r24, 0x01	; 1
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	02 c0       	rjmp	.+4      	; 0x532 <Read_SPI+0x114>
     52e:	88 0f       	add	r24, r24
     530:	99 1f       	adc	r25, r25
     532:	ba 94       	dec	r11
     534:	e2 f7       	brpl	.-8      	; 0x52e <Read_SPI+0x110>
     536:	82 2b       	or	r24, r18
     538:	80 83       	st	Z, r24
     53a:	82 e0       	ldi	r24, 0x02	; 2
     53c:	05 c0       	rjmp	.+10     	; 0x548 <Read_SPI+0x12a>
     53e:	80 e0       	ldi	r24, 0x00	; 0
     540:	03 c0       	rjmp	.+6      	; 0x548 <Read_SPI+0x12a>
     542:	81 e0       	ldi	r24, 0x01	; 1
     544:	01 c0       	rjmp	.+2      	; 0x548 <Read_SPI+0x12a>
     546:	81 e0       	ldi	r24, 0x01	; 1
     548:	df 91       	pop	r29
     54a:	cf 91       	pop	r28
     54c:	1f 91       	pop	r17
     54e:	0f 91       	pop	r16
     550:	ff 90       	pop	r15
     552:	ef 90       	pop	r14
     554:	df 90       	pop	r13
     556:	cf 90       	pop	r12
     558:	bf 90       	pop	r11
     55a:	af 90       	pop	r10
     55c:	08 95       	ret

0000055e <Write_SPI>:
     55e:	cf 92       	push	r12
     560:	df 92       	push	r13
     562:	ef 92       	push	r14
     564:	ff 92       	push	r15
     566:	1f 93       	push	r17
     568:	cf 93       	push	r28
     56a:	df 93       	push	r29
     56c:	81 34       	cpi	r24, 0x41	; 65
     56e:	79 f4       	brne	.+30     	; 0x58e <Write_SPI+0x30>
     570:	a4 e0       	ldi	r26, 0x04	; 4
     572:	b4 e0       	ldi	r27, 0x04	; 4
     574:	9c 91       	ld	r25, X
     576:	e1 e0       	ldi	r30, 0x01	; 1
     578:	f0 e0       	ldi	r31, 0x00	; 0
     57a:	06 2e       	mov	r0, r22
     57c:	02 c0       	rjmp	.+4      	; 0x582 <Write_SPI+0x24>
     57e:	ee 0f       	add	r30, r30
     580:	ff 1f       	adc	r31, r31
     582:	0a 94       	dec	r0
     584:	e2 f7       	brpl	.-8      	; 0x57e <Write_SPI+0x20>
     586:	e0 95       	com	r30
     588:	e9 23       	and	r30, r25
     58a:	ec 93       	st	X, r30
     58c:	11 c0       	rjmp	.+34     	; 0x5b0 <Write_SPI+0x52>
     58e:	82 34       	cpi	r24, 0x42	; 66
     590:	09 f0       	breq	.+2      	; 0x594 <Write_SPI+0x36>
     592:	62 c0       	rjmp	.+196    	; 0x658 <Write_SPI+0xfa>
     594:	a4 e2       	ldi	r26, 0x24	; 36
     596:	b4 e0       	ldi	r27, 0x04	; 4
     598:	9c 91       	ld	r25, X
     59a:	e1 e0       	ldi	r30, 0x01	; 1
     59c:	f0 e0       	ldi	r31, 0x00	; 0
     59e:	06 2e       	mov	r0, r22
     5a0:	02 c0       	rjmp	.+4      	; 0x5a6 <Write_SPI+0x48>
     5a2:	ee 0f       	add	r30, r30
     5a4:	ff 1f       	adc	r31, r31
     5a6:	0a 94       	dec	r0
     5a8:	e2 f7       	brpl	.-8      	; 0x5a2 <Write_SPI+0x44>
     5aa:	e0 95       	com	r30
     5ac:	e9 23       	and	r30, r25
     5ae:	ec 93       	st	X, r30
     5b0:	12 2f       	mov	r17, r18
     5b2:	d6 2f       	mov	r29, r22
     5b4:	c8 2f       	mov	r28, r24
     5b6:	40 93 64 09 	sts	0x0964, r20	; 0x800964 <__TEXT_REGION_LENGTH__+0x7e0964>
     5ba:	c1 2c       	mov	r12, r1
     5bc:	d1 2c       	mov	r13, r1
     5be:	76 01       	movw	r14, r12
     5c0:	11 c0       	rjmp	.+34     	; 0x5e4 <Write_SPI+0x86>
     5c2:	8f ef       	ldi	r24, 0xFF	; 255
     5c4:	c8 1a       	sub	r12, r24
     5c6:	d8 0a       	sbc	r13, r24
     5c8:	e8 0a       	sbc	r14, r24
     5ca:	f8 0a       	sbc	r15, r24
     5cc:	c7 01       	movw	r24, r14
     5ce:	b6 01       	movw	r22, r12
     5d0:	0e 94 a0 1e 	call	0x3d40	; 0x3d40 <__floatunsisf>
     5d4:	20 e0       	ldi	r18, 0x00	; 0
     5d6:	30 e5       	ldi	r19, 0x50	; 80
     5d8:	43 ec       	ldi	r20, 0xC3	; 195
     5da:	57 e4       	ldi	r21, 0x47	; 71
     5dc:	0e 94 b8 1f 	call	0x3f70	; 0x3f70 <__gesf2>
     5e0:	18 16       	cp	r1, r24
     5e2:	e4 f1       	brlt	.+120    	; 0x65c <Write_SPI+0xfe>
     5e4:	90 91 63 09 	lds	r25, 0x0963	; 0x800963 <__TEXT_REGION_LENGTH__+0x7e0963>
     5e8:	99 23       	and	r25, r25
     5ea:	5c f7       	brge	.-42     	; 0x5c2 <Write_SPI+0x64>
     5ec:	10 93 64 09 	sts	0x0964, r17	; 0x800964 <__TEXT_REGION_LENGTH__+0x7e0964>
     5f0:	11 c0       	rjmp	.+34     	; 0x614 <Write_SPI+0xb6>
     5f2:	8f ef       	ldi	r24, 0xFF	; 255
     5f4:	c8 1a       	sub	r12, r24
     5f6:	d8 0a       	sbc	r13, r24
     5f8:	e8 0a       	sbc	r14, r24
     5fa:	f8 0a       	sbc	r15, r24
     5fc:	c7 01       	movw	r24, r14
     5fe:	b6 01       	movw	r22, r12
     600:	0e 94 a0 1e 	call	0x3d40	; 0x3d40 <__floatunsisf>
     604:	20 e0       	ldi	r18, 0x00	; 0
     606:	30 e5       	ldi	r19, 0x50	; 80
     608:	43 ec       	ldi	r20, 0xC3	; 195
     60a:	57 e4       	ldi	r21, 0x47	; 71
     60c:	0e 94 b8 1f 	call	0x3f70	; 0x3f70 <__gesf2>
     610:	18 16       	cp	r1, r24
     612:	34 f1       	brlt	.+76     	; 0x660 <Write_SPI+0x102>
     614:	90 91 63 09 	lds	r25, 0x0963	; 0x800963 <__TEXT_REGION_LENGTH__+0x7e0963>
     618:	99 23       	and	r25, r25
     61a:	5c f7       	brge	.-42     	; 0x5f2 <Write_SPI+0x94>
     61c:	c1 34       	cpi	r28, 0x41	; 65
     61e:	71 f4       	brne	.+28     	; 0x63c <Write_SPI+0xde>
     620:	e4 e0       	ldi	r30, 0x04	; 4
     622:	f4 e0       	ldi	r31, 0x04	; 4
     624:	20 81       	ld	r18, Z
     626:	81 e0       	ldi	r24, 0x01	; 1
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	02 c0       	rjmp	.+4      	; 0x630 <Write_SPI+0xd2>
     62c:	88 0f       	add	r24, r24
     62e:	99 1f       	adc	r25, r25
     630:	da 95       	dec	r29
     632:	e2 f7       	brpl	.-8      	; 0x62c <Write_SPI+0xce>
     634:	82 2b       	or	r24, r18
     636:	80 83       	st	Z, r24
     638:	82 e0       	ldi	r24, 0x02	; 2
     63a:	13 c0       	rjmp	.+38     	; 0x662 <Write_SPI+0x104>
     63c:	e4 e2       	ldi	r30, 0x24	; 36
     63e:	f4 e0       	ldi	r31, 0x04	; 4
     640:	20 81       	ld	r18, Z
     642:	81 e0       	ldi	r24, 0x01	; 1
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	02 c0       	rjmp	.+4      	; 0x64c <Write_SPI+0xee>
     648:	88 0f       	add	r24, r24
     64a:	99 1f       	adc	r25, r25
     64c:	da 95       	dec	r29
     64e:	e2 f7       	brpl	.-8      	; 0x648 <Write_SPI+0xea>
     650:	82 2b       	or	r24, r18
     652:	80 83       	st	Z, r24
     654:	82 e0       	ldi	r24, 0x02	; 2
     656:	05 c0       	rjmp	.+10     	; 0x662 <Write_SPI+0x104>
     658:	80 e0       	ldi	r24, 0x00	; 0
     65a:	03 c0       	rjmp	.+6      	; 0x662 <Write_SPI+0x104>
     65c:	81 e0       	ldi	r24, 0x01	; 1
     65e:	01 c0       	rjmp	.+2      	; 0x662 <Write_SPI+0x104>
     660:	81 e0       	ldi	r24, 0x01	; 1
     662:	df 91       	pop	r29
     664:	cf 91       	pop	r28
     666:	1f 91       	pop	r17
     668:	ff 90       	pop	r15
     66a:	ef 90       	pop	r14
     66c:	df 90       	pop	r13
     66e:	cf 90       	pop	r12
     670:	08 95       	ret

00000672 <Setup_TWI>:
     672:	e0 e0       	ldi	r30, 0x00	; 0
     674:	f9 e0       	ldi	r31, 0x09	; 9
     676:	80 81       	ld	r24, Z
     678:	8c 60       	ori	r24, 0x0C	; 12
     67a:	80 83       	st	Z, r24
     67c:	89 e1       	ldi	r24, 0x19	; 25
     67e:	80 93 06 09 	sts	0x0906, r24	; 0x800906 <__TEXT_REGION_LENGTH__+0x7e0906>
     682:	e3 e0       	ldi	r30, 0x03	; 3
     684:	f9 e0       	ldi	r31, 0x09	; 9
     686:	80 81       	ld	r24, Z
     688:	83 61       	ori	r24, 0x13	; 19
     68a:	80 83       	st	Z, r24
     68c:	e5 e0       	ldi	r30, 0x05	; 5
     68e:	f9 e0       	ldi	r31, 0x09	; 9
     690:	80 81       	ld	r24, Z
     692:	81 60       	ori	r24, 0x01	; 1
     694:	80 83       	st	Z, r24
     696:	e2 e1       	ldi	r30, 0x12	; 18
     698:	f4 e0       	ldi	r31, 0x04	; 4
     69a:	80 81       	ld	r24, Z
     69c:	88 60       	ori	r24, 0x08	; 8
     69e:	80 83       	st	Z, r24
     6a0:	e3 e1       	ldi	r30, 0x13	; 19
     6a2:	f4 e0       	ldi	r31, 0x04	; 4
     6a4:	80 81       	ld	r24, Z
     6a6:	88 60       	ori	r24, 0x08	; 8
     6a8:	80 83       	st	Z, r24
     6aa:	08 95       	ret

000006ac <Write_TWI>:
     6ac:	af 92       	push	r10
     6ae:	bf 92       	push	r11
     6b0:	cf 92       	push	r12
     6b2:	df 92       	push	r13
     6b4:	ef 92       	push	r14
     6b6:	ff 92       	push	r15
     6b8:	0f 93       	push	r16
     6ba:	1f 93       	push	r17
     6bc:	cf 93       	push	r28
     6be:	df 93       	push	r29
     6c0:	b6 2e       	mov	r11, r22
     6c2:	ea 01       	movw	r28, r20
     6c4:	12 2f       	mov	r17, r18
     6c6:	88 0f       	add	r24, r24
     6c8:	80 93 07 09 	sts	0x0907, r24	; 0x800907 <__TEXT_REGION_LENGTH__+0x7e0907>
     6cc:	c1 2c       	mov	r12, r1
     6ce:	d1 2c       	mov	r13, r1
     6d0:	76 01       	movw	r14, r12
     6d2:	12 c0       	rjmp	.+36     	; 0x6f8 <Write_TWI+0x4c>
     6d4:	8f ef       	ldi	r24, 0xFF	; 255
     6d6:	c8 1a       	sub	r12, r24
     6d8:	d8 0a       	sbc	r13, r24
     6da:	e8 0a       	sbc	r14, r24
     6dc:	f8 0a       	sbc	r15, r24
     6de:	c7 01       	movw	r24, r14
     6e0:	b6 01       	movw	r22, r12
     6e2:	0e 94 a0 1e 	call	0x3d40	; 0x3d40 <__floatunsisf>
     6e6:	20 e0       	ldi	r18, 0x00	; 0
     6e8:	34 e2       	ldi	r19, 0x24	; 36
     6ea:	44 e7       	ldi	r20, 0x74	; 116
     6ec:	59 e4       	ldi	r21, 0x49	; 73
     6ee:	0e 94 b8 1f 	call	0x3f70	; 0x3f70 <__gesf2>
     6f2:	18 16       	cp	r1, r24
     6f4:	0c f4       	brge	.+2      	; 0x6f8 <Write_TWI+0x4c>
     6f6:	54 c0       	rjmp	.+168    	; 0x7a0 <Write_TWI+0xf4>
     6f8:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
     6fc:	86 ff       	sbrs	r24, 6
     6fe:	ea cf       	rjmp	.-44     	; 0x6d4 <Write_TWI+0x28>
     700:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
     704:	84 fd       	sbrc	r24, 4
     706:	4e c0       	rjmp	.+156    	; 0x7a4 <Write_TWI+0xf8>
     708:	b0 92 08 09 	sts	0x0908, r11	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
     70c:	11 c0       	rjmp	.+34     	; 0x730 <Write_TWI+0x84>
     70e:	8f ef       	ldi	r24, 0xFF	; 255
     710:	c8 1a       	sub	r12, r24
     712:	d8 0a       	sbc	r13, r24
     714:	e8 0a       	sbc	r14, r24
     716:	f8 0a       	sbc	r15, r24
     718:	c7 01       	movw	r24, r14
     71a:	b6 01       	movw	r22, r12
     71c:	0e 94 a0 1e 	call	0x3d40	; 0x3d40 <__floatunsisf>
     720:	20 e0       	ldi	r18, 0x00	; 0
     722:	34 e2       	ldi	r19, 0x24	; 36
     724:	44 e7       	ldi	r20, 0x74	; 116
     726:	59 e4       	ldi	r21, 0x49	; 73
     728:	0e 94 b8 1f 	call	0x3f70	; 0x3f70 <__gesf2>
     72c:	18 16       	cp	r1, r24
     72e:	e4 f1       	brlt	.+120    	; 0x7a8 <Write_TWI+0xfc>
     730:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
     734:	86 ff       	sbrs	r24, 6
     736:	eb cf       	rjmp	.-42     	; 0x70e <Write_TWI+0x62>
     738:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
     73c:	84 fd       	sbrc	r24, 4
     73e:	36 c0       	rjmp	.+108    	; 0x7ac <Write_TWI+0x100>
     740:	80 e0       	ldi	r24, 0x00	; 0
     742:	23 c0       	rjmp	.+70     	; 0x78a <Write_TWI+0xde>
     744:	5e 01       	movw	r10, r28
     746:	8f ef       	ldi	r24, 0xFF	; 255
     748:	a8 1a       	sub	r10, r24
     74a:	b8 0a       	sbc	r11, r24
     74c:	88 81       	ld	r24, Y
     74e:	80 93 08 09 	sts	0x0908, r24	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
     752:	11 c0       	rjmp	.+34     	; 0x776 <Write_TWI+0xca>
     754:	8f ef       	ldi	r24, 0xFF	; 255
     756:	c8 1a       	sub	r12, r24
     758:	d8 0a       	sbc	r13, r24
     75a:	e8 0a       	sbc	r14, r24
     75c:	f8 0a       	sbc	r15, r24
     75e:	c7 01       	movw	r24, r14
     760:	b6 01       	movw	r22, r12
     762:	0e 94 a0 1e 	call	0x3d40	; 0x3d40 <__floatunsisf>
     766:	20 e0       	ldi	r18, 0x00	; 0
     768:	34 e2       	ldi	r19, 0x24	; 36
     76a:	44 e7       	ldi	r20, 0x74	; 116
     76c:	59 e4       	ldi	r21, 0x49	; 73
     76e:	0e 94 b8 1f 	call	0x3f70	; 0x3f70 <__gesf2>
     772:	18 16       	cp	r1, r24
     774:	ec f0       	brlt	.+58     	; 0x7b0 <Write_TWI+0x104>
     776:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
     77a:	86 ff       	sbrs	r24, 6
     77c:	eb cf       	rjmp	.-42     	; 0x754 <Write_TWI+0xa8>
     77e:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
     782:	80 2f       	mov	r24, r16
     784:	94 fd       	sbrc	r25, 4
     786:	16 c0       	rjmp	.+44     	; 0x7b4 <Write_TWI+0x108>
     788:	e5 01       	movw	r28, r10
     78a:	01 e0       	ldi	r16, 0x01	; 1
     78c:	08 0f       	add	r16, r24
     78e:	81 17       	cp	r24, r17
     790:	c8 f2       	brcs	.-78     	; 0x744 <Write_TWI+0x98>
     792:	e4 e0       	ldi	r30, 0x04	; 4
     794:	f9 e0       	ldi	r31, 0x09	; 9
     796:	80 81       	ld	r24, Z
     798:	83 60       	ori	r24, 0x03	; 3
     79a:	80 83       	st	Z, r24
     79c:	84 e0       	ldi	r24, 0x04	; 4
     79e:	0b c0       	rjmp	.+22     	; 0x7b6 <Write_TWI+0x10a>
     7a0:	83 e0       	ldi	r24, 0x03	; 3
     7a2:	09 c0       	rjmp	.+18     	; 0x7b6 <Write_TWI+0x10a>
     7a4:	80 e0       	ldi	r24, 0x00	; 0
     7a6:	07 c0       	rjmp	.+14     	; 0x7b6 <Write_TWI+0x10a>
     7a8:	83 e0       	ldi	r24, 0x03	; 3
     7aa:	05 c0       	rjmp	.+10     	; 0x7b6 <Write_TWI+0x10a>
     7ac:	81 e0       	ldi	r24, 0x01	; 1
     7ae:	03 c0       	rjmp	.+6      	; 0x7b6 <Write_TWI+0x10a>
     7b0:	83 e0       	ldi	r24, 0x03	; 3
     7b2:	01 c0       	rjmp	.+2      	; 0x7b6 <Write_TWI+0x10a>
     7b4:	82 e0       	ldi	r24, 0x02	; 2
     7b6:	df 91       	pop	r29
     7b8:	cf 91       	pop	r28
     7ba:	1f 91       	pop	r17
     7bc:	0f 91       	pop	r16
     7be:	ff 90       	pop	r15
     7c0:	ef 90       	pop	r14
     7c2:	df 90       	pop	r13
     7c4:	cf 90       	pop	r12
     7c6:	bf 90       	pop	r11
     7c8:	af 90       	pop	r10
     7ca:	08 95       	ret

000007cc <Setup_LoRa>:
     7cc:	0f 93       	push	r16
     7ce:	1f 93       	push	r17
     7d0:	cf 93       	push	r28
     7d2:	df 93       	push	r29
     7d4:	1f 92       	push	r1
     7d6:	cd b7       	in	r28, 0x3d	; 61
     7d8:	de b7       	in	r29, 0x3e	; 62
     7da:	19 82       	std	Y+1, r1	; 0x01
     7dc:	01 e0       	ldi	r16, 0x01	; 1
     7de:	9e 01       	movw	r18, r28
     7e0:	2f 5f       	subi	r18, 0xFF	; 255
     7e2:	3f 4f       	sbci	r19, 0xFF	; 255
     7e4:	42 e4       	ldi	r20, 0x42	; 66
     7e6:	65 e0       	ldi	r22, 0x05	; 5
     7e8:	81 e4       	ldi	r24, 0x41	; 65
     7ea:	0e 94 0f 02 	call	0x41e	; 0x41e <Read_SPI>
     7ee:	18 2f       	mov	r17, r24
     7f0:	12 70       	andi	r17, 0x02	; 2
     7f2:	20 e8       	ldi	r18, 0x80	; 128
     7f4:	41 e8       	ldi	r20, 0x81	; 129
     7f6:	65 e0       	ldi	r22, 0x05	; 5
     7f8:	81 e4       	ldi	r24, 0x41	; 65
     7fa:	0e 94 af 02 	call	0x55e	; 0x55e <Write_SPI>
     7fe:	18 23       	and	r17, r24
     800:	24 ee       	ldi	r18, 0xE4	; 228
     802:	46 e8       	ldi	r20, 0x86	; 134
     804:	65 e0       	ldi	r22, 0x05	; 5
     806:	81 e4       	ldi	r24, 0x41	; 65
     808:	0e 94 af 02 	call	0x55e	; 0x55e <Write_SPI>
     80c:	18 23       	and	r17, r24
     80e:	20 ec       	ldi	r18, 0xC0	; 192
     810:	47 e8       	ldi	r20, 0x87	; 135
     812:	65 e0       	ldi	r22, 0x05	; 5
     814:	81 e4       	ldi	r24, 0x41	; 65
     816:	0e 94 af 02 	call	0x55e	; 0x55e <Write_SPI>
     81a:	18 23       	and	r17, r24
     81c:	20 e0       	ldi	r18, 0x00	; 0
     81e:	48 e8       	ldi	r20, 0x88	; 136
     820:	65 e0       	ldi	r22, 0x05	; 5
     822:	81 e4       	ldi	r24, 0x41	; 65
     824:	0e 94 af 02 	call	0x55e	; 0x55e <Write_SPI>
     828:	18 23       	and	r17, r24
     82a:	25 e0       	ldi	r18, 0x05	; 5
     82c:	41 e8       	ldi	r20, 0x81	; 129
     82e:	65 e0       	ldi	r22, 0x05	; 5
     830:	81 e4       	ldi	r24, 0x41	; 65
     832:	0e 94 af 02 	call	0x55e	; 0x55e <Write_SPI>
     836:	18 23       	and	r17, r24
     838:	21 e1       	ldi	r18, 0x11	; 17
     83a:	49 e8       	ldi	r20, 0x89	; 137
     83c:	65 e0       	ldi	r22, 0x05	; 5
     83e:	81 e4       	ldi	r24, 0x41	; 65
     840:	0e 94 af 02 	call	0x55e	; 0x55e <Write_SPI>
     844:	18 23       	and	r17, r24
     846:	81 e0       	ldi	r24, 0x01	; 1
     848:	12 30       	cpi	r17, 0x02	; 2
     84a:	09 f0       	breq	.+2      	; 0x84e <Setup_LoRa+0x82>
     84c:	80 e0       	ldi	r24, 0x00	; 0
     84e:	0f 90       	pop	r0
     850:	df 91       	pop	r29
     852:	cf 91       	pop	r28
     854:	1f 91       	pop	r17
     856:	0f 91       	pop	r16
     858:	08 95       	ret

0000085a <Read_LoRa>:
     85a:	ef 92       	push	r14
     85c:	ff 92       	push	r15
     85e:	0f 93       	push	r16
     860:	1f 93       	push	r17
     862:	cf 93       	push	r28
     864:	df 93       	push	r29
     866:	cd b7       	in	r28, 0x3d	; 61
     868:	de b7       	in	r29, 0x3e	; 62
     86a:	26 97       	sbiw	r28, 0x06	; 6
     86c:	cd bf       	out	0x3d, r28	; 61
     86e:	de bf       	out	0x3e, r29	; 62
     870:	19 82       	std	Y+1, r1	; 0x01
     872:	01 e0       	ldi	r16, 0x01	; 1
     874:	9e 01       	movw	r18, r28
     876:	2f 5f       	subi	r18, 0xFF	; 255
     878:	3f 4f       	sbci	r19, 0xFF	; 255
     87a:	43 e1       	ldi	r20, 0x13	; 19
     87c:	65 e0       	ldi	r22, 0x05	; 5
     87e:	81 e4       	ldi	r24, 0x41	; 65
     880:	0e 94 0f 02 	call	0x41e	; 0x41e <Read_SPI>
     884:	19 81       	ldd	r17, Y+1	; 0x01
     886:	81 2f       	mov	r24, r17
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	0e 94 2e 26 	call	0x4c5c	; 0x4c5c <malloc>
     88e:	7c 01       	movw	r14, r24
     890:	15 30       	cpi	r17, 0x05	; 5
     892:	80 f1       	brcs	.+96     	; 0x8f4 <Read_LoRa+0x9a>
     894:	1e 82       	std	Y+6, r1	; 0x06
     896:	9e 01       	movw	r18, r28
     898:	2a 5f       	subi	r18, 0xFA	; 250
     89a:	3f 4f       	sbci	r19, 0xFF	; 255
     89c:	40 e1       	ldi	r20, 0x10	; 16
     89e:	65 e0       	ldi	r22, 0x05	; 5
     8a0:	81 e4       	ldi	r24, 0x41	; 65
     8a2:	0e 94 0f 02 	call	0x41e	; 0x41e <Read_SPI>
     8a6:	2e 81       	ldd	r18, Y+6	; 0x06
     8a8:	4d e8       	ldi	r20, 0x8D	; 141
     8aa:	65 e0       	ldi	r22, 0x05	; 5
     8ac:	81 e4       	ldi	r24, 0x41	; 65
     8ae:	0e 94 af 02 	call	0x55e	; 0x55e <Write_SPI>
     8b2:	09 81       	ldd	r16, Y+1	; 0x01
     8b4:	97 01       	movw	r18, r14
     8b6:	40 e0       	ldi	r20, 0x00	; 0
     8b8:	65 e0       	ldi	r22, 0x05	; 5
     8ba:	81 e4       	ldi	r24, 0x41	; 65
     8bc:	0e 94 0f 02 	call	0x41e	; 0x41e <Read_SPI>
     8c0:	f7 01       	movw	r30, r14
     8c2:	80 81       	ld	r24, Z
     8c4:	85 33       	cpi	r24, 0x35	; 53
     8c6:	b1 f4       	brne	.+44     	; 0x8f4 <Read_LoRa+0x9a>
     8c8:	81 81       	ldd	r24, Z+1	; 0x01
     8ca:	82 33       	cpi	r24, 0x32	; 50
     8cc:	99 f4       	brne	.+38     	; 0x8f4 <Read_LoRa+0x9a>
     8ce:	82 81       	ldd	r24, Z+2	; 0x02
     8d0:	8a 83       	std	Y+2, r24	; 0x02
     8d2:	83 81       	ldd	r24, Z+3	; 0x03
     8d4:	8b 83       	std	Y+3, r24	; 0x03
     8d6:	84 81       	ldd	r24, Z+4	; 0x04
     8d8:	8c 83       	std	Y+4, r24	; 0x04
     8da:	1d 82       	std	Y+5, r1	; 0x05
     8dc:	ce 01       	movw	r24, r28
     8de:	02 96       	adiw	r24, 0x02	; 2
     8e0:	0e 94 ab 28 	call	0x5156	; 0x5156 <atoi>
     8e4:	08 2f       	mov	r16, r24
     8e6:	19 2f       	mov	r17, r25
     8e8:	c7 01       	movw	r24, r14
     8ea:	0e 94 c6 26 	call	0x4d8c	; 0x4d8c <free>
     8ee:	80 2f       	mov	r24, r16
     8f0:	91 2f       	mov	r25, r17
     8f2:	05 c0       	rjmp	.+10     	; 0x8fe <Read_LoRa+0xa4>
     8f4:	c7 01       	movw	r24, r14
     8f6:	0e 94 c6 26 	call	0x4d8c	; 0x4d8c <free>
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	26 96       	adiw	r28, 0x06	; 6
     900:	cd bf       	out	0x3d, r28	; 61
     902:	de bf       	out	0x3e, r29	; 62
     904:	df 91       	pop	r29
     906:	cf 91       	pop	r28
     908:	1f 91       	pop	r17
     90a:	0f 91       	pop	r16
     90c:	ff 90       	pop	r15
     90e:	ef 90       	pop	r14
     910:	08 95       	ret

00000912 <Write_Character>:

unsigned char Write_Character(char Character_to_write){
     912:	0f 93       	push	r16
     914:	1f 93       	push	r17
     916:	cf 93       	push	r28
     918:	df 93       	push	r29
     91a:	cd b7       	in	r28, 0x3d	; 61
     91c:	de b7       	in	r29, 0x3e	; 62
     91e:	cb 57       	subi	r28, 0x7B	; 123
     920:	d1 09       	sbc	r29, r1
     922:	cd bf       	out	0x3d, r28	; 61
     924:	de bf       	out	0x3e, r29	; 62
	const unsigned char 
		SSD_space[3] = {0x00, 0x00, 0x00},
     926:	19 82       	std	Y+1, r1	; 0x01
     928:	1a 82       	std	Y+2, r1	; 0x02
     92a:	1b 82       	std	Y+3, r1	; 0x03
		SSD_dot[3] = {0x00, 0b01000000, 0x00},
     92c:	1c 82       	std	Y+4, r1	; 0x04
     92e:	40 e4       	ldi	r20, 0x40	; 64
     930:	4d 83       	std	Y+5, r20	; 0x05
     932:	1e 82       	std	Y+6, r1	; 0x06
		SSD_dash[3] = {0b00001000, 0b00001000, 0b00001000},
     934:	58 e0       	ldi	r21, 0x08	; 8
     936:	5f 83       	std	Y+7, r21	; 0x07
     938:	58 87       	std	Y+8, r21	; 0x08
     93a:	59 87       	std	Y+9, r21	; 0x09
		SSD_comma[3] = {0b00100000, 0b01100000, 0b00000000},
     93c:	90 e2       	ldi	r25, 0x20	; 32
     93e:	9a 87       	std	Y+10, r25	; 0x0a
     940:	90 e6       	ldi	r25, 0x60	; 96
     942:	9b 87       	std	Y+11, r25	; 0x0b
     944:	1c 86       	std	Y+12, r1	; 0x0c
		SSD_asterisk[3] = {0b00000010, 0b00000111, 0b00000010},
     946:	92 e0       	ldi	r25, 0x02	; 2
     948:	9d 87       	std	Y+13, r25	; 0x0d
     94a:	27 e0       	ldi	r18, 0x07	; 7
     94c:	2e 87       	std	Y+14, r18	; 0x0e
     94e:	9f 87       	std	Y+15, r25	; 0x0f
		SSD_dollar[5] = {0b01001111, 0b01001001, 0b011111111, 0b01001001, 0b01111001},
     950:	95 e0       	ldi	r25, 0x05	; 5
     952:	e6 e0       	ldi	r30, 0x06	; 6
     954:	f0 e4       	ldi	r31, 0x40	; 64
     956:	de 01       	movw	r26, r28
     958:	50 96       	adiw	r26, 0x10	; 16
     95a:	01 90       	ld	r0, Z+
     95c:	0d 92       	st	X+, r0
     95e:	9a 95       	dec	r25
     960:	e1 f7       	brne	.-8      	; 0x95a <Write_Character+0x48>
		SSD_0[4] = {0b00111110, 0b01000001, 0b01000001, 0b00111110},
     962:	6e e3       	ldi	r22, 0x3E	; 62
     964:	6d 8b       	std	Y+21, r22	; 0x15
     966:	31 e4       	ldi	r19, 0x41	; 65
     968:	3e 8b       	std	Y+22, r19	; 0x16
     96a:	3f 8b       	std	Y+23, r19	; 0x17
     96c:	68 8f       	std	Y+24, r22	; 0x18
		SSD_1[3] = {0b01000010, 0b01111111, 0b01000000},
     96e:	92 e4       	ldi	r25, 0x42	; 66
     970:	99 8f       	std	Y+25, r25	; 0x19
     972:	9f e7       	ldi	r25, 0x7F	; 127
     974:	9a 8f       	std	Y+26, r25	; 0x1a
     976:	4b 8f       	std	Y+27, r20	; 0x1b
		SSD_2[4] = {0b01111001, 0b01001001, 0b01001001, 0b01001111},
     978:	79 e7       	ldi	r23, 0x79	; 121
     97a:	7c 8f       	std	Y+28, r23	; 0x1c
     97c:	29 e4       	ldi	r18, 0x49	; 73
     97e:	2d 8f       	std	Y+29, r18	; 0x1d
     980:	2e 8f       	std	Y+30, r18	; 0x1e
     982:	1f e4       	ldi	r17, 0x4F	; 79
     984:	1f 8f       	std	Y+31, r17	; 0x1f
		SSD_3[5] = {0b01000001, 0b01001001, 0b01001001, 0b01010101, 0b00110110},
     986:	05 e0       	ldi	r16, 0x05	; 5
     988:	eb e0       	ldi	r30, 0x0B	; 11
     98a:	f0 e4       	ldi	r31, 0x40	; 64
     98c:	de 01       	movw	r26, r28
     98e:	90 96       	adiw	r26, 0x20	; 32
     990:	01 90       	ld	r0, Z+
     992:	0d 92       	st	X+, r0
     994:	0a 95       	dec	r16
     996:	e1 f7       	brne	.-8      	; 0x990 <Write_Character+0x7e>
		SSD_4[5] = {0b00010000, 0b00011000, 0b00010100, 0b00010010, 0b01111111},
     998:	05 e0       	ldi	r16, 0x05	; 5
     99a:	e0 e1       	ldi	r30, 0x10	; 16
     99c:	f0 e4       	ldi	r31, 0x40	; 64
     99e:	de 01       	movw	r26, r28
     9a0:	95 96       	adiw	r26, 0x25	; 37
     9a2:	01 90       	ld	r0, Z+
     9a4:	0d 92       	st	X+, r0
     9a6:	0a 95       	dec	r16
     9a8:	e1 f7       	brne	.-8      	; 0x9a2 <Write_Character+0x90>
		SSD_5[4] = {0b01001111, 0b01001001, 0b01001001, 0b01111001},
     9aa:	1a a7       	std	Y+42, r17	; 0x2a
     9ac:	2b a7       	std	Y+43, r18	; 0x2b
     9ae:	2c a7       	std	Y+44, r18	; 0x2c
     9b0:	7d a7       	std	Y+45, r23	; 0x2d
		SSD_6[5] = {0b00011100, 0b00101010, 0b01001001, 0b00101001, 0b00010000},
     9b2:	75 e0       	ldi	r23, 0x05	; 5
     9b4:	e5 e1       	ldi	r30, 0x15	; 21
     9b6:	f0 e4       	ldi	r31, 0x40	; 64
     9b8:	de 01       	movw	r26, r28
     9ba:	9e 96       	adiw	r26, 0x2e	; 46
     9bc:	01 90       	ld	r0, Z+
     9be:	0d 92       	st	X+, r0
     9c0:	7a 95       	dec	r23
     9c2:	e1 f7       	brne	.-8      	; 0x9bc <Write_Character+0xaa>
		SSD_7[6] = {0b01000001, 0b00100001, 0b00010001, 0b00001001, 0b00000101, 0b00000011},
     9c4:	76 e0       	ldi	r23, 0x06	; 6
     9c6:	ea e1       	ldi	r30, 0x1A	; 26
     9c8:	f0 e4       	ldi	r31, 0x40	; 64
     9ca:	de 01       	movw	r26, r28
     9cc:	d3 96       	adiw	r26, 0x33	; 51
     9ce:	01 90       	ld	r0, Z+
     9d0:	0d 92       	st	X+, r0
     9d2:	7a 95       	dec	r23
     9d4:	e1 f7       	brne	.-8      	; 0x9ce <Write_Character+0xbc>
		SSD_8[5] = {0b00010100, 0b00101010, 0b01001001, 0b00101010, 0b00010100},
     9d6:	75 e0       	ldi	r23, 0x05	; 5
     9d8:	e0 e2       	ldi	r30, 0x20	; 32
     9da:	f0 e4       	ldi	r31, 0x40	; 64
     9dc:	de 01       	movw	r26, r28
     9de:	d9 96       	adiw	r26, 0x39	; 57
     9e0:	01 90       	ld	r0, Z+
     9e2:	0d 92       	st	X+, r0
     9e4:	7a 95       	dec	r23
     9e6:	e1 f7       	brne	.-8      	; 0x9e0 <Write_Character+0xce>
		SSD_9[5] = {0b01000110, 0b00101010, 0b00011001, 0b00001010, 0b00000100},
     9e8:	75 e0       	ldi	r23, 0x05	; 5
     9ea:	e5 e2       	ldi	r30, 0x25	; 37
     9ec:	f0 e4       	ldi	r31, 0x40	; 64
     9ee:	de 01       	movw	r26, r28
     9f0:	de 96       	adiw	r26, 0x3e	; 62
     9f2:	01 90       	ld	r0, Z+
     9f4:	0d 92       	st	X+, r0
     9f6:	7a 95       	dec	r23
     9f8:	e1 f7       	brne	.-8      	; 0x9f2 <Write_Character+0xe0>
		SSD_G[5] = {0b00011100, 0b00100010, 0b01010001, 0b01010001, 0b01110010},
     9fa:	75 e0       	ldi	r23, 0x05	; 5
     9fc:	ea e2       	ldi	r30, 0x2A	; 42
     9fe:	f0 e4       	ldi	r31, 0x40	; 64
     a00:	de 01       	movw	r26, r28
     a02:	ad 5b       	subi	r26, 0xBD	; 189
     a04:	bf 4f       	sbci	r27, 0xFF	; 255
     a06:	01 90       	ld	r0, Z+
     a08:	0d 92       	st	X+, r0
     a0a:	7a 95       	dec	r23
     a0c:	e1 f7       	brne	.-8      	; 0xa06 <Write_Character+0xf4>
		SSD_N[7] = {0b01111111, 0b00000010, 0b00000100, 0b00001000, 0b00010000, 0b00100000, 0b01111111},
     a0e:	77 e0       	ldi	r23, 0x07	; 7
     a10:	ef e2       	ldi	r30, 0x2F	; 47
     a12:	f0 e4       	ldi	r31, 0x40	; 64
     a14:	de 01       	movw	r26, r28
     a16:	a8 5b       	subi	r26, 0xB8	; 184
     a18:	bf 4f       	sbci	r27, 0xFF	; 255
     a1a:	01 90       	ld	r0, Z+
     a1c:	0d 92       	st	X+, r0
     a1e:	7a 95       	dec	r23
     a20:	e1 f7       	brne	.-8      	; 0xa1a <Write_Character+0x108>
		SSD_M[5] = {0b01111111, 0b00000010, 0b00000100, 0b00000010, 0b01111111},
     a22:	75 e0       	ldi	r23, 0x05	; 5
     a24:	e6 e3       	ldi	r30, 0x36	; 54
     a26:	f0 e4       	ldi	r31, 0x40	; 64
     a28:	de 01       	movw	r26, r28
     a2a:	a1 5b       	subi	r26, 0xB1	; 177
     a2c:	bf 4f       	sbci	r27, 0xFF	; 255
     a2e:	01 90       	ld	r0, Z+
     a30:	0d 92       	st	X+, r0
     a32:	7a 95       	dec	r23
     a34:	e1 f7       	brne	.-8      	; 0xa2e <Write_Character+0x11c>
		SSD_h[4] = {0b01111111, 0b00001000, 0b00001000, 0b01111111},
     a36:	65 96       	adiw	r28, 0x15	; 21
     a38:	9f af       	std	Y+63, r25	; 0x3f
     a3a:	65 97       	sbiw	r28, 0x15	; 21
     a3c:	66 96       	adiw	r28, 0x16	; 22
     a3e:	5f af       	std	Y+63, r21	; 0x3f
     a40:	66 97       	sbiw	r28, 0x16	; 22
     a42:	67 96       	adiw	r28, 0x17	; 23
     a44:	5f af       	std	Y+63, r21	; 0x3f
     a46:	67 97       	sbiw	r28, 0x17	; 23
     a48:	68 96       	adiw	r28, 0x18	; 24
     a4a:	9f af       	std	Y+63, r25	; 0x3f
     a4c:	68 97       	sbiw	r28, 0x18	; 24
		SSD_E[4] = {0b01111111, 0b01001001, 0b01001001, 0b01001001},
     a4e:	69 96       	adiw	r28, 0x19	; 25
     a50:	9f af       	std	Y+63, r25	; 0x3f
     a52:	69 97       	sbiw	r28, 0x19	; 25
     a54:	6a 96       	adiw	r28, 0x1a	; 26
     a56:	2f af       	std	Y+63, r18	; 0x3f
     a58:	6a 97       	sbiw	r28, 0x1a	; 26
     a5a:	6b 96       	adiw	r28, 0x1b	; 27
     a5c:	2f af       	std	Y+63, r18	; 0x3f
     a5e:	6b 97       	sbiw	r28, 0x1b	; 27
     a60:	6c 96       	adiw	r28, 0x1c	; 28
     a62:	2f af       	std	Y+63, r18	; 0x3f
     a64:	6c 97       	sbiw	r28, 0x1c	; 28
		SSD_L[4] = {0b01111111, 0b01000000, 0b01000000, 0b01000000},
     a66:	6d 96       	adiw	r28, 0x1d	; 29
     a68:	9f af       	std	Y+63, r25	; 0x3f
     a6a:	6d 97       	sbiw	r28, 0x1d	; 29
     a6c:	6e 96       	adiw	r28, 0x1e	; 30
     a6e:	4f af       	std	Y+63, r20	; 0x3f
     a70:	6e 97       	sbiw	r28, 0x1e	; 30
     a72:	6f 96       	adiw	r28, 0x1f	; 31
     a74:	4f af       	std	Y+63, r20	; 0x3f
     a76:	6f 97       	sbiw	r28, 0x1f	; 31
     a78:	a0 96       	adiw	r28, 0x20	; 32
     a7a:	4f af       	std	Y+63, r20	; 0x3f
     a7c:	a0 97       	sbiw	r28, 0x20	; 32
		SSD_O[4] = {0b00111110, 0b01000001, 0b01000001, 0b00111110},
     a7e:	a1 96       	adiw	r28, 0x21	; 33
     a80:	6f af       	std	Y+63, r22	; 0x3f
     a82:	a1 97       	sbiw	r28, 0x21	; 33
     a84:	a2 96       	adiw	r28, 0x22	; 34
     a86:	3f af       	std	Y+63, r19	; 0x3f
     a88:	a2 97       	sbiw	r28, 0x22	; 34
     a8a:	a3 96       	adiw	r28, 0x23	; 35
     a8c:	3f af       	std	Y+63, r19	; 0x3f
     a8e:	a3 97       	sbiw	r28, 0x23	; 35
     a90:	a4 96       	adiw	r28, 0x24	; 36
     a92:	6f af       	std	Y+63, r22	; 0x3f
     a94:	a4 97       	sbiw	r28, 0x24	; 36
		SSD_R[5] = {0b01111111, 0b00001001, 0b00011001, 0b00100110, 0b01000000},
     a96:	25 e0       	ldi	r18, 0x05	; 5
     a98:	eb e3       	ldi	r30, 0x3B	; 59
     a9a:	f0 e4       	ldi	r31, 0x40	; 64
     a9c:	de 01       	movw	r26, r28
     a9e:	ac 59       	subi	r26, 0x9C	; 156
     aa0:	bf 4f       	sbci	r27, 0xFF	; 255
     aa2:	01 90       	ld	r0, Z+
     aa4:	0d 92       	st	X+, r0
     aa6:	2a 95       	dec	r18
     aa8:	e1 f7       	brne	.-8      	; 0xaa2 <Write_Character+0x190>
		SSD_A[7] = {0b01000000, 0b00010000, 0b00010100, 0b00000010, 0b00010100, 0b00010000, 0b01000000},
     aaa:	27 e0       	ldi	r18, 0x07	; 7
     aac:	e0 e4       	ldi	r30, 0x40	; 64
     aae:	f0 e4       	ldi	r31, 0x40	; 64
     ab0:	de 01       	movw	r26, r28
     ab2:	a7 59       	subi	r26, 0x97	; 151
     ab4:	bf 4f       	sbci	r27, 0xFF	; 255
     ab6:	01 90       	ld	r0, Z+
     ab8:	0d 92       	st	X+, r0
     aba:	2a 95       	dec	r18
     abc:	e1 f7       	brne	.-8      	; 0xab6 <Write_Character+0x1a4>
		SSD_C[4] = {0b00011100, 0b00100010, 0b01000001, 0b00100010},
     abe:	4c e1       	ldi	r20, 0x1C	; 28
     ac0:	e1 96       	adiw	r28, 0x31	; 49
     ac2:	4f af       	std	Y+63, r20	; 0x3f
     ac4:	e1 97       	sbiw	r28, 0x31	; 49
     ac6:	22 e2       	ldi	r18, 0x22	; 34
     ac8:	e2 96       	adiw	r28, 0x32	; 50
     aca:	2f af       	std	Y+63, r18	; 0x3f
     acc:	e2 97       	sbiw	r28, 0x32	; 50
     ace:	e3 96       	adiw	r28, 0x33	; 51
     ad0:	3f af       	std	Y+63, r19	; 0x3f
     ad2:	e3 97       	sbiw	r28, 0x33	; 51
     ad4:	e4 96       	adiw	r28, 0x34	; 52
     ad6:	2f af       	std	Y+63, r18	; 0x3f
     ad8:	e4 97       	sbiw	r28, 0x34	; 52
		SSD_F[4] = {0b01111111, 0b00010001, 0b00010001, 0b00000001},
     ada:	e5 96       	adiw	r28, 0x35	; 53
     adc:	9f af       	std	Y+63, r25	; 0x3f
     ade:	e5 97       	sbiw	r28, 0x35	; 53
     ae0:	51 e1       	ldi	r21, 0x11	; 17
     ae2:	e6 96       	adiw	r28, 0x36	; 54
     ae4:	5f af       	std	Y+63, r21	; 0x3f
     ae6:	e6 97       	sbiw	r28, 0x36	; 54
     ae8:	e7 96       	adiw	r28, 0x37	; 55
     aea:	5f af       	std	Y+63, r21	; 0x3f
     aec:	e7 97       	sbiw	r28, 0x37	; 55
     aee:	51 e0       	ldi	r21, 0x01	; 1
     af0:	e8 96       	adiw	r28, 0x38	; 56
     af2:	5f af       	std	Y+63, r21	; 0x3f
     af4:	e8 97       	sbiw	r28, 0x38	; 56
		SSD_D[4] = {0b01111111, 0b01000001, 0b00100010, 0b00011100};
     af6:	e9 96       	adiw	r28, 0x39	; 57
     af8:	9f af       	std	Y+63, r25	; 0x3f
     afa:	e9 97       	sbiw	r28, 0x39	; 57
     afc:	ea 96       	adiw	r28, 0x3a	; 58
     afe:	3f af       	std	Y+63, r19	; 0x3f
     b00:	ea 97       	sbiw	r28, 0x3a	; 58
     b02:	eb 96       	adiw	r28, 0x3b	; 59
     b04:	2f af       	std	Y+63, r18	; 0x3f
     b06:	eb 97       	sbiw	r28, 0x3b	; 59
     b08:	ec 96       	adiw	r28, 0x3c	; 60
     b0a:	4f af       	std	Y+63, r20	; 0x3f
     b0c:	ec 97       	sbiw	r28, 0x3c	; 60
	
	const unsigned char *output;
	unsigned char output_size;
	switch (Character_to_write){
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	fc 01       	movw	r30, r24
     b12:	b4 97       	sbiw	r30, 0x24	; 36
     b14:	ef 32       	cpi	r30, 0x2F	; 47
     b16:	f1 05       	cpc	r31, r1
     b18:	08 f0       	brcs	.+2      	; 0xb1c <Write_Character+0x20a>
     b1a:	86 c0       	rjmp	.+268    	; 0xc28 <Write_Character+0x316>
     b1c:	e6 58       	subi	r30, 0x86	; 134
     b1e:	ff 4f       	sbci	r31, 0xFF	; 255
     b20:	0c 94 cf 25 	jmp	0x4b9e	; 0x4b9e <__tablejump2__>
		case '0':
		output = SSD_0;
		output_size = sizeof(SSD_0);
     b24:	24 e0       	ldi	r18, 0x04	; 4
	
	const unsigned char *output;
	unsigned char output_size;
	switch (Character_to_write){
		case '0':
		output = SSD_0;
     b26:	ae 01       	movw	r20, r28
     b28:	4b 5e       	subi	r20, 0xEB	; 235
     b2a:	5f 4f       	sbci	r21, 0xFF	; 255
     b2c:	86 c0       	rjmp	.+268    	; 0xc3a <Write_Character+0x328>
		output = SSD_1;
		output_size = sizeof(SSD_1);
		break;
		case '2':
		output = SSD_2;
		output_size = sizeof(SSD_2);
     b2e:	24 e0       	ldi	r18, 0x04	; 4
		case '1':
		output = SSD_1;
		output_size = sizeof(SSD_1);
		break;
		case '2':
		output = SSD_2;
     b30:	ae 01       	movw	r20, r28
     b32:	44 5e       	subi	r20, 0xE4	; 228
     b34:	5f 4f       	sbci	r21, 0xFF	; 255
		output_size = sizeof(SSD_2);
		break;
     b36:	81 c0       	rjmp	.+258    	; 0xc3a <Write_Character+0x328>
		case '3':
		output = SSD_3;
		output_size = sizeof(SSD_3);
     b38:	25 e0       	ldi	r18, 0x05	; 5
		case '2':
		output = SSD_2;
		output_size = sizeof(SSD_2);
		break;
		case '3':
		output = SSD_3;
     b3a:	ae 01       	movw	r20, r28
     b3c:	40 5e       	subi	r20, 0xE0	; 224
     b3e:	5f 4f       	sbci	r21, 0xFF	; 255
		output_size = sizeof(SSD_3);
		break;
     b40:	7c c0       	rjmp	.+248    	; 0xc3a <Write_Character+0x328>
		case '4':
		output = SSD_4;
		output_size = sizeof(SSD_4);
     b42:	25 e0       	ldi	r18, 0x05	; 5
		case '3':
		output = SSD_3;
		output_size = sizeof(SSD_3);
		break;
		case '4':
		output = SSD_4;
     b44:	ae 01       	movw	r20, r28
     b46:	4b 5d       	subi	r20, 0xDB	; 219
     b48:	5f 4f       	sbci	r21, 0xFF	; 255
		output_size = sizeof(SSD_4);
		break;
     b4a:	77 c0       	rjmp	.+238    	; 0xc3a <Write_Character+0x328>
		case '5':
		output = SSD_5;
		output_size = sizeof(SSD_5);
     b4c:	24 e0       	ldi	r18, 0x04	; 4
		case '4':
		output = SSD_4;
		output_size = sizeof(SSD_4);
		break;
		case '5':
		output = SSD_5;
     b4e:	ae 01       	movw	r20, r28
     b50:	46 5d       	subi	r20, 0xD6	; 214
     b52:	5f 4f       	sbci	r21, 0xFF	; 255
		output_size = sizeof(SSD_5);
		break;
     b54:	72 c0       	rjmp	.+228    	; 0xc3a <Write_Character+0x328>
		case '6':
		output = SSD_6;
		output_size = sizeof(SSD_6);
     b56:	25 e0       	ldi	r18, 0x05	; 5
		case '5':
		output = SSD_5;
		output_size = sizeof(SSD_5);
		break;
		case '6':
		output = SSD_6;
     b58:	ae 01       	movw	r20, r28
     b5a:	42 5d       	subi	r20, 0xD2	; 210
     b5c:	5f 4f       	sbci	r21, 0xFF	; 255
		output_size = sizeof(SSD_6);
		break;
     b5e:	6d c0       	rjmp	.+218    	; 0xc3a <Write_Character+0x328>
		case '7':
		output = SSD_7;
		output_size = sizeof(SSD_7);
     b60:	26 e0       	ldi	r18, 0x06	; 6
		case '6':
		output = SSD_6;
		output_size = sizeof(SSD_6);
		break;
		case '7':
		output = SSD_7;
     b62:	ae 01       	movw	r20, r28
     b64:	4d 5c       	subi	r20, 0xCD	; 205
     b66:	5f 4f       	sbci	r21, 0xFF	; 255
		output_size = sizeof(SSD_7);
		break;
     b68:	68 c0       	rjmp	.+208    	; 0xc3a <Write_Character+0x328>
		case '8':
		output = SSD_8;
		output_size = sizeof(SSD_8);
     b6a:	25 e0       	ldi	r18, 0x05	; 5
		case '7':
		output = SSD_7;
		output_size = sizeof(SSD_7);
		break;
		case '8':
		output = SSD_8;
     b6c:	ae 01       	movw	r20, r28
     b6e:	47 5c       	subi	r20, 0xC7	; 199
     b70:	5f 4f       	sbci	r21, 0xFF	; 255
		output_size = sizeof(SSD_8);
		break;
     b72:	63 c0       	rjmp	.+198    	; 0xc3a <Write_Character+0x328>
		case '9':
		output = SSD_9;
		output_size = sizeof(SSD_9);
     b74:	25 e0       	ldi	r18, 0x05	; 5
		case '8':
		output = SSD_8;
		output_size = sizeof(SSD_8);
		break;
		case '9':
		output = SSD_9;
     b76:	ae 01       	movw	r20, r28
     b78:	42 5c       	subi	r20, 0xC2	; 194
     b7a:	5f 4f       	sbci	r21, 0xFF	; 255
		output_size = sizeof(SSD_9);
		break;
     b7c:	5e c0       	rjmp	.+188    	; 0xc3a <Write_Character+0x328>
		case '.':
		output = SSD_dot;
		output_size = sizeof(SSD_dot);
     b7e:	23 e0       	ldi	r18, 0x03	; 3
		case '9':
		output = SSD_9;
		output_size = sizeof(SSD_9);
		break;
		case '.':
		output = SSD_dot;
     b80:	ae 01       	movw	r20, r28
     b82:	4c 5f       	subi	r20, 0xFC	; 252
     b84:	5f 4f       	sbci	r21, 0xFF	; 255
		output_size = sizeof(SSD_dot);
		break;
     b86:	59 c0       	rjmp	.+178    	; 0xc3a <Write_Character+0x328>
		case 'G':
		output = SSD_G;
		output_size = sizeof(SSD_G);
     b88:	25 e0       	ldi	r18, 0x05	; 5
		case '.':
		output = SSD_dot;
		output_size = sizeof(SSD_dot);
		break;
		case 'G':
		output = SSD_G;
     b8a:	ae 01       	movw	r20, r28
     b8c:	4d 5b       	subi	r20, 0xBD	; 189
     b8e:	5f 4f       	sbci	r21, 0xFF	; 255
		output_size = sizeof(SSD_G);
		break;
     b90:	54 c0       	rjmp	.+168    	; 0xc3a <Write_Character+0x328>
		case 'N':
		output = SSD_N;
		output_size = sizeof(SSD_N);
     b92:	27 e0       	ldi	r18, 0x07	; 7
		case 'G':
		output = SSD_G;
		output_size = sizeof(SSD_G);
		break;
		case 'N':
		output = SSD_N;
     b94:	ae 01       	movw	r20, r28
     b96:	48 5b       	subi	r20, 0xB8	; 184
     b98:	5f 4f       	sbci	r21, 0xFF	; 255
		output_size = sizeof(SSD_N);
		break;
     b9a:	4f c0       	rjmp	.+158    	; 0xc3a <Write_Character+0x328>
		case 'M':
		output = SSD_M;
		output_size = sizeof(SSD_M);
     b9c:	25 e0       	ldi	r18, 0x05	; 5
		case 'N':
		output = SSD_N;
		output_size = sizeof(SSD_N);
		break;
		case 'M':
		output = SSD_M;
     b9e:	ae 01       	movw	r20, r28
     ba0:	41 5b       	subi	r20, 0xB1	; 177
     ba2:	5f 4f       	sbci	r21, 0xFF	; 255
		output_size = sizeof(SSD_M);
		break;
     ba4:	4a c0       	rjmp	.+148    	; 0xc3a <Write_Character+0x328>
		case 'H':
		output = SSD_h;
		output_size = sizeof(SSD_h);
     ba6:	24 e0       	ldi	r18, 0x04	; 4
		case 'M':
		output = SSD_M;
		output_size = sizeof(SSD_M);
		break;
		case 'H':
		output = SSD_h;
     ba8:	ae 01       	movw	r20, r28
     baa:	4c 5a       	subi	r20, 0xAC	; 172
     bac:	5f 4f       	sbci	r21, 0xFF	; 255
		output_size = sizeof(SSD_h);
		break;
     bae:	45 c0       	rjmp	.+138    	; 0xc3a <Write_Character+0x328>
		case 'E':
		output = SSD_E;
		output_size = sizeof(SSD_E);
     bb0:	24 e0       	ldi	r18, 0x04	; 4
		case 'H':
		output = SSD_h;
		output_size = sizeof(SSD_h);
		break;
		case 'E':
		output = SSD_E;
     bb2:	ae 01       	movw	r20, r28
     bb4:	48 5a       	subi	r20, 0xA8	; 168
     bb6:	5f 4f       	sbci	r21, 0xFF	; 255
		output_size = sizeof(SSD_E);
		break;
     bb8:	40 c0       	rjmp	.+128    	; 0xc3a <Write_Character+0x328>
		case 'L':
		output = SSD_L;
		output_size = sizeof(SSD_L);
     bba:	24 e0       	ldi	r18, 0x04	; 4
		case 'E':
		output = SSD_E;
		output_size = sizeof(SSD_E);
		break;
		case 'L':
		output = SSD_L;
     bbc:	ae 01       	movw	r20, r28
     bbe:	44 5a       	subi	r20, 0xA4	; 164
     bc0:	5f 4f       	sbci	r21, 0xFF	; 255
		output_size = sizeof(SSD_L);
		break;
     bc2:	3b c0       	rjmp	.+118    	; 0xc3a <Write_Character+0x328>
		case 'O':
		output = SSD_O;
		output_size = sizeof(SSD_O);
     bc4:	24 e0       	ldi	r18, 0x04	; 4
		case 'L':
		output = SSD_L;
		output_size = sizeof(SSD_L);
		break;
		case 'O':
		output = SSD_O;
     bc6:	ae 01       	movw	r20, r28
     bc8:	40 5a       	subi	r20, 0xA0	; 160
     bca:	5f 4f       	sbci	r21, 0xFF	; 255
		output_size = sizeof(SSD_O);
		break;
     bcc:	36 c0       	rjmp	.+108    	; 0xc3a <Write_Character+0x328>
		case 'R':
		output = SSD_R;
		output_size = sizeof(SSD_R);
     bce:	25 e0       	ldi	r18, 0x05	; 5
		case 'O':
		output = SSD_O;
		output_size = sizeof(SSD_O);
		break;
		case 'R':
		output = SSD_R;
     bd0:	ae 01       	movw	r20, r28
     bd2:	4c 59       	subi	r20, 0x9C	; 156
     bd4:	5f 4f       	sbci	r21, 0xFF	; 255
		output_size = sizeof(SSD_R);
		break;
     bd6:	31 c0       	rjmp	.+98     	; 0xc3a <Write_Character+0x328>
		case 'A':
		output = SSD_A;
		output_size = sizeof(SSD_A);
     bd8:	27 e0       	ldi	r18, 0x07	; 7
		case 'R':
		output = SSD_R;
		output_size = sizeof(SSD_R);
		break;
		case 'A':
		output = SSD_A;
     bda:	ae 01       	movw	r20, r28
     bdc:	47 59       	subi	r20, 0x97	; 151
     bde:	5f 4f       	sbci	r21, 0xFF	; 255
		output_size = sizeof(SSD_A);
		break;
     be0:	2c c0       	rjmp	.+88     	; 0xc3a <Write_Character+0x328>
		case 'C':
		output = SSD_C;
		output_size = sizeof(SSD_C);
     be2:	24 e0       	ldi	r18, 0x04	; 4
		case 'A':
		output = SSD_A;
		output_size = sizeof(SSD_A);
		break;
		case 'C':
		output = SSD_C;
     be4:	ae 01       	movw	r20, r28
     be6:	40 59       	subi	r20, 0x90	; 144
     be8:	5f 4f       	sbci	r21, 0xFF	; 255
		output_size = sizeof(SSD_C);
		break;
     bea:	27 c0       	rjmp	.+78     	; 0xc3a <Write_Character+0x328>
		case 'F':
		output = SSD_F;
		output_size = sizeof(SSD_F);
     bec:	24 e0       	ldi	r18, 0x04	; 4
		case 'C':
		output = SSD_C;
		output_size = sizeof(SSD_C);
		break;
		case 'F':
		output = SSD_F;
     bee:	ae 01       	movw	r20, r28
     bf0:	4c 58       	subi	r20, 0x8C	; 140
     bf2:	5f 4f       	sbci	r21, 0xFF	; 255
		output_size = sizeof(SSD_F);
		break;
     bf4:	22 c0       	rjmp	.+68     	; 0xc3a <Write_Character+0x328>
		case 'D':
		output = SSD_D;
		output_size = sizeof(SSD_D);
     bf6:	24 e0       	ldi	r18, 0x04	; 4
		case 'F':
		output = SSD_F;
		output_size = sizeof(SSD_F);
		break;
		case 'D':
		output = SSD_D;
     bf8:	ae 01       	movw	r20, r28
     bfa:	48 58       	subi	r20, 0x88	; 136
     bfc:	5f 4f       	sbci	r21, 0xFF	; 255
		output_size = sizeof(SSD_D);
		break;
     bfe:	1d c0       	rjmp	.+58     	; 0xc3a <Write_Character+0x328>
		case '-':
		output = SSD_dash;
		output_size = sizeof(SSD_dash);
     c00:	23 e0       	ldi	r18, 0x03	; 3
		case 'D':
		output = SSD_D;
		output_size = sizeof(SSD_D);
		break;
		case '-':
		output = SSD_dash;
     c02:	ae 01       	movw	r20, r28
     c04:	49 5f       	subi	r20, 0xF9	; 249
     c06:	5f 4f       	sbci	r21, 0xFF	; 255
		output_size = sizeof(SSD_dash);
		break;
     c08:	18 c0       	rjmp	.+48     	; 0xc3a <Write_Character+0x328>
		case '$':
		output = SSD_dollar;
		output_size = sizeof(SSD_dollar);
     c0a:	25 e0       	ldi	r18, 0x05	; 5
		case '-':
		output = SSD_dash;
		output_size = sizeof(SSD_dash);
		break;
		case '$':
		output = SSD_dollar;
     c0c:	ae 01       	movw	r20, r28
     c0e:	40 5f       	subi	r20, 0xF0	; 240
     c10:	5f 4f       	sbci	r21, 0xFF	; 255
		output_size = sizeof(SSD_dollar);
		break;
     c12:	13 c0       	rjmp	.+38     	; 0xc3a <Write_Character+0x328>
		case ',':
		output = SSD_comma;
		output_size = sizeof(SSD_comma);
     c14:	23 e0       	ldi	r18, 0x03	; 3
		case '$':
		output = SSD_dollar;
		output_size = sizeof(SSD_dollar);
		break;
		case ',':
		output = SSD_comma;
     c16:	ae 01       	movw	r20, r28
     c18:	46 5f       	subi	r20, 0xF6	; 246
     c1a:	5f 4f       	sbci	r21, 0xFF	; 255
		output_size = sizeof(SSD_comma);
		break;
     c1c:	0e c0       	rjmp	.+28     	; 0xc3a <Write_Character+0x328>
		case '*':
		output = SSD_asterisk;
		output_size = sizeof(SSD_asterisk);
     c1e:	23 e0       	ldi	r18, 0x03	; 3
		case ',':
		output = SSD_comma;
		output_size = sizeof(SSD_comma);
		break;
		case '*':
		output = SSD_asterisk;
     c20:	ae 01       	movw	r20, r28
     c22:	43 5f       	subi	r20, 0xF3	; 243
     c24:	5f 4f       	sbci	r21, 0xFF	; 255
		output_size = sizeof(SSD_asterisk);
		break;
     c26:	09 c0       	rjmp	.+18     	; 0xc3a <Write_Character+0x328>
		default:
		output = SSD_space;
		output_size = sizeof(SSD_space);
     c28:	23 e0       	ldi	r18, 0x03	; 3
		case '*':
		output = SSD_asterisk;
		output_size = sizeof(SSD_asterisk);
		break;
		default:
		output = SSD_space;
     c2a:	ae 01       	movw	r20, r28
     c2c:	4f 5f       	subi	r20, 0xFF	; 255
     c2e:	5f 4f       	sbci	r21, 0xFF	; 255
		output_size = sizeof(SSD_space);
		break;
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <Write_Character+0x328>
		output = SSD_0;
		output_size = sizeof(SSD_0);
		break;
		case '1':
		output = SSD_1;
		output_size = sizeof(SSD_1);
     c32:	23 e0       	ldi	r18, 0x03	; 3
		case '0':
		output = SSD_0;
		output_size = sizeof(SSD_0);
		break;
		case '1':
		output = SSD_1;
     c34:	ae 01       	movw	r20, r28
     c36:	47 5e       	subi	r20, 0xE7	; 231
     c38:	5f 4f       	sbci	r21, 0xFF	; 255
		default:
		output = SSD_space;
		output_size = sizeof(SSD_space);
		break;
	}
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x40, (unsigned char *)output, output_size);
     c3a:	60 e4       	ldi	r22, 0x40	; 64
     c3c:	8c e3       	ldi	r24, 0x3C	; 60
     c3e:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
     c42:	91 e0       	ldi	r25, 0x01	; 1
     c44:	84 30       	cpi	r24, 0x04	; 4
     c46:	09 f0       	breq	.+2      	; 0xc4a <Write_Character+0x338>
     c48:	90 e0       	ldi	r25, 0x00	; 0
}
     c4a:	89 2f       	mov	r24, r25
     c4c:	c5 58       	subi	r28, 0x85	; 133
     c4e:	df 4f       	sbci	r29, 0xFF	; 255
     c50:	cd bf       	out	0x3d, r28	; 61
     c52:	de bf       	out	0x3e, r29	; 62
     c54:	df 91       	pop	r29
     c56:	cf 91       	pop	r28
     c58:	1f 91       	pop	r17
     c5a:	0f 91       	pop	r16
     c5c:	08 95       	ret

00000c5e <Clear_Display>:

unsigned char Clear_Display(){
     c5e:	ff 92       	push	r15
     c60:	0f 93       	push	r16
     c62:	1f 93       	push	r17
     c64:	cf 93       	push	r28
     c66:	df 93       	push	r29
     c68:	cd b7       	in	r28, 0x3d	; 61
     c6a:	de b7       	in	r29, 0x3e	; 62
     c6c:	6e 97       	sbiw	r28, 0x1e	; 30
     c6e:	cd bf       	out	0x3d, r28	; 61
     c70:	de bf       	out	0x3e, r29	; 62
	unsigned char 
		page = 0,
		Clear_Status = 1;
     c72:	01 e0       	ldi	r16, 0x01	; 1
	return (TWI_status == 4) ? 1 : 0;
}

unsigned char Clear_Display(){
	unsigned char 
		page = 0,
     c74:	f1 2c       	mov	r15, r1
		Clear_Status = 1;
	
	while(1){
		switch (page){
     c76:	8f 2d       	mov	r24, r15
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	88 30       	cpi	r24, 0x08	; 8
     c7c:	91 05       	cpc	r25, r1
     c7e:	08 f0       	brcs	.+2      	; 0xc82 <Clear_Display+0x24>
     c80:	84 c0       	rjmp	.+264    	; 0xd8a <Clear_Display+0x12c>
     c82:	fc 01       	movw	r30, r24
     c84:	e7 55       	subi	r30, 0x57	; 87
     c86:	ff 4f       	sbci	r31, 0xFF	; 255
     c88:	0c 94 cf 25 	jmp	0x4b9e	; 0x4b9e <__tablejump2__>
     c8c:	80 eb       	ldi	r24, 0xB0	; 176
     c8e:	8e 8f       	std	Y+30, r24	; 0x1e
	
	return Setup_status;
}

inline unsigned char Write_Display(unsigned char Data_Byte){
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x80, &Data_Byte, 1);
     c90:	21 e0       	ldi	r18, 0x01	; 1
     c92:	ae 01       	movw	r20, r28
     c94:	42 5e       	subi	r20, 0xE2	; 226
     c96:	5f 4f       	sbci	r21, 0xFF	; 255
     c98:	60 e8       	ldi	r22, 0x80	; 128
     c9a:	8c e3       	ldi	r24, 0x3C	; 60
     c9c:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
     ca0:	91 e0       	ldi	r25, 0x01	; 1
     ca2:	84 30       	cpi	r24, 0x04	; 4
     ca4:	09 f0       	breq	.+2      	; 0xca8 <Clear_Display+0x4a>
     ca6:	90 e0       	ldi	r25, 0x00	; 0
		Clear_Status = 1;
	
	while(1){
		switch (page){
			case 0:
			Clear_Status &= Write_Display(SSD_PAGE0);
     ca8:	09 23       	and	r16, r25
			break;
     caa:	6f c0       	rjmp	.+222    	; 0xd8a <Clear_Display+0x12c>
     cac:	81 eb       	ldi	r24, 0xB1	; 177
     cae:	8d 8f       	std	Y+29, r24	; 0x1d
	
	return Setup_status;
}

inline unsigned char Write_Display(unsigned char Data_Byte){
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x80, &Data_Byte, 1);
     cb0:	21 e0       	ldi	r18, 0x01	; 1
     cb2:	ae 01       	movw	r20, r28
     cb4:	43 5e       	subi	r20, 0xE3	; 227
     cb6:	5f 4f       	sbci	r21, 0xFF	; 255
     cb8:	60 e8       	ldi	r22, 0x80	; 128
     cba:	8c e3       	ldi	r24, 0x3C	; 60
     cbc:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
     cc0:	91 e0       	ldi	r25, 0x01	; 1
     cc2:	84 30       	cpi	r24, 0x04	; 4
     cc4:	09 f0       	breq	.+2      	; 0xcc8 <Clear_Display+0x6a>
     cc6:	90 e0       	ldi	r25, 0x00	; 0
		switch (page){
			case 0:
			Clear_Status &= Write_Display(SSD_PAGE0);
			break;
			case 1:
			Clear_Status &= Write_Display(SSD_PAGE1);
     cc8:	09 23       	and	r16, r25
			break;
     cca:	5f c0       	rjmp	.+190    	; 0xd8a <Clear_Display+0x12c>
     ccc:	82 eb       	ldi	r24, 0xB2	; 178
     cce:	8c 8f       	std	Y+28, r24	; 0x1c
	
	return Setup_status;
}

inline unsigned char Write_Display(unsigned char Data_Byte){
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x80, &Data_Byte, 1);
     cd0:	21 e0       	ldi	r18, 0x01	; 1
     cd2:	ae 01       	movw	r20, r28
     cd4:	44 5e       	subi	r20, 0xE4	; 228
     cd6:	5f 4f       	sbci	r21, 0xFF	; 255
     cd8:	60 e8       	ldi	r22, 0x80	; 128
     cda:	8c e3       	ldi	r24, 0x3C	; 60
     cdc:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
     ce0:	91 e0       	ldi	r25, 0x01	; 1
     ce2:	84 30       	cpi	r24, 0x04	; 4
     ce4:	09 f0       	breq	.+2      	; 0xce8 <Clear_Display+0x8a>
     ce6:	90 e0       	ldi	r25, 0x00	; 0
			break;
			case 1:
			Clear_Status &= Write_Display(SSD_PAGE1);
			break;
			case 2:
			Clear_Status &= Write_Display(SSD_PAGE2);
     ce8:	09 23       	and	r16, r25
			break;
     cea:	4f c0       	rjmp	.+158    	; 0xd8a <Clear_Display+0x12c>
     cec:	83 eb       	ldi	r24, 0xB3	; 179
     cee:	8b 8f       	std	Y+27, r24	; 0x1b
	
	return Setup_status;
}

inline unsigned char Write_Display(unsigned char Data_Byte){
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x80, &Data_Byte, 1);
     cf0:	21 e0       	ldi	r18, 0x01	; 1
     cf2:	ae 01       	movw	r20, r28
     cf4:	45 5e       	subi	r20, 0xE5	; 229
     cf6:	5f 4f       	sbci	r21, 0xFF	; 255
     cf8:	60 e8       	ldi	r22, 0x80	; 128
     cfa:	8c e3       	ldi	r24, 0x3C	; 60
     cfc:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
     d00:	91 e0       	ldi	r25, 0x01	; 1
     d02:	84 30       	cpi	r24, 0x04	; 4
     d04:	09 f0       	breq	.+2      	; 0xd08 <Clear_Display+0xaa>
     d06:	90 e0       	ldi	r25, 0x00	; 0
			break;
			case 2:
			Clear_Status &= Write_Display(SSD_PAGE2);
			break;
			case 3:
			Clear_Status &= Write_Display(SSD_PAGE3);
     d08:	09 23       	and	r16, r25
			break;
     d0a:	3f c0       	rjmp	.+126    	; 0xd8a <Clear_Display+0x12c>
     d0c:	84 eb       	ldi	r24, 0xB4	; 180
     d0e:	8a 8f       	std	Y+26, r24	; 0x1a
	
	return Setup_status;
}

inline unsigned char Write_Display(unsigned char Data_Byte){
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x80, &Data_Byte, 1);
     d10:	21 e0       	ldi	r18, 0x01	; 1
     d12:	ae 01       	movw	r20, r28
     d14:	46 5e       	subi	r20, 0xE6	; 230
     d16:	5f 4f       	sbci	r21, 0xFF	; 255
     d18:	60 e8       	ldi	r22, 0x80	; 128
     d1a:	8c e3       	ldi	r24, 0x3C	; 60
     d1c:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
     d20:	91 e0       	ldi	r25, 0x01	; 1
     d22:	84 30       	cpi	r24, 0x04	; 4
     d24:	09 f0       	breq	.+2      	; 0xd28 <Clear_Display+0xca>
     d26:	90 e0       	ldi	r25, 0x00	; 0
			break;
			case 3:
			Clear_Status &= Write_Display(SSD_PAGE3);
			break;
			case 4:
			Clear_Status &= Write_Display(SSD_PAGE4);
     d28:	09 23       	and	r16, r25
			break;
     d2a:	2f c0       	rjmp	.+94     	; 0xd8a <Clear_Display+0x12c>
     d2c:	85 eb       	ldi	r24, 0xB5	; 181
     d2e:	89 8f       	std	Y+25, r24	; 0x19
	
	return Setup_status;
}

inline unsigned char Write_Display(unsigned char Data_Byte){
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x80, &Data_Byte, 1);
     d30:	21 e0       	ldi	r18, 0x01	; 1
     d32:	ae 01       	movw	r20, r28
     d34:	47 5e       	subi	r20, 0xE7	; 231
     d36:	5f 4f       	sbci	r21, 0xFF	; 255
     d38:	60 e8       	ldi	r22, 0x80	; 128
     d3a:	8c e3       	ldi	r24, 0x3C	; 60
     d3c:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
     d40:	91 e0       	ldi	r25, 0x01	; 1
     d42:	84 30       	cpi	r24, 0x04	; 4
     d44:	09 f0       	breq	.+2      	; 0xd48 <Clear_Display+0xea>
     d46:	90 e0       	ldi	r25, 0x00	; 0
			break;
			case 4:
			Clear_Status &= Write_Display(SSD_PAGE4);
			break;
			case 5:
			Clear_Status &= Write_Display(SSD_PAGE5);
     d48:	09 23       	and	r16, r25
			break;
     d4a:	1f c0       	rjmp	.+62     	; 0xd8a <Clear_Display+0x12c>
     d4c:	86 eb       	ldi	r24, 0xB6	; 182
     d4e:	88 8f       	std	Y+24, r24	; 0x18
	
	return Setup_status;
}

inline unsigned char Write_Display(unsigned char Data_Byte){
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x80, &Data_Byte, 1);
     d50:	21 e0       	ldi	r18, 0x01	; 1
     d52:	ae 01       	movw	r20, r28
     d54:	48 5e       	subi	r20, 0xE8	; 232
     d56:	5f 4f       	sbci	r21, 0xFF	; 255
     d58:	60 e8       	ldi	r22, 0x80	; 128
     d5a:	8c e3       	ldi	r24, 0x3C	; 60
     d5c:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
     d60:	91 e0       	ldi	r25, 0x01	; 1
     d62:	84 30       	cpi	r24, 0x04	; 4
     d64:	09 f0       	breq	.+2      	; 0xd68 <Clear_Display+0x10a>
     d66:	90 e0       	ldi	r25, 0x00	; 0
			break;
			case 5:
			Clear_Status &= Write_Display(SSD_PAGE5);
			break;
			case 6:
			Clear_Status &= Write_Display(SSD_PAGE6);
     d68:	09 23       	and	r16, r25
			break;
     d6a:	0f c0       	rjmp	.+30     	; 0xd8a <Clear_Display+0x12c>
     d6c:	87 eb       	ldi	r24, 0xB7	; 183
     d6e:	8f 8b       	std	Y+23, r24	; 0x17
	
	return Setup_status;
}

inline unsigned char Write_Display(unsigned char Data_Byte){
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x80, &Data_Byte, 1);
     d70:	21 e0       	ldi	r18, 0x01	; 1
     d72:	ae 01       	movw	r20, r28
     d74:	49 5e       	subi	r20, 0xE9	; 233
     d76:	5f 4f       	sbci	r21, 0xFF	; 255
     d78:	60 e8       	ldi	r22, 0x80	; 128
     d7a:	8c e3       	ldi	r24, 0x3C	; 60
     d7c:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
     d80:	91 e0       	ldi	r25, 0x01	; 1
     d82:	84 30       	cpi	r24, 0x04	; 4
     d84:	09 f0       	breq	.+2      	; 0xd88 <Clear_Display+0x12a>
     d86:	90 e0       	ldi	r25, 0x00	; 0
			break;
			case 6:
			Clear_Status &= Write_Display(SSD_PAGE6);
			break;
			case 7:
			Clear_Status &= Write_Display(SSD_PAGE7);
     d88:	09 23       	and	r16, r25
			break;
			default:
			break;
		}
		page++;
     d8a:	f3 94       	inc	r15
		if (page > 8){break;}
     d8c:	88 e0       	ldi	r24, 0x08	; 8
     d8e:	8f 15       	cp	r24, r15
     d90:	80 f1       	brcs	.+96     	; 0xdf2 <Clear_Display+0x194>
     d92:	1d 8a       	std	Y+21, r1	; 0x15
	
	return Setup_status;
}

inline unsigned char Write_Display(unsigned char Data_Byte){
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x80, &Data_Byte, 1);
     d94:	21 e0       	ldi	r18, 0x01	; 1
     d96:	ae 01       	movw	r20, r28
     d98:	4b 5e       	subi	r20, 0xEB	; 235
     d9a:	5f 4f       	sbci	r21, 0xFF	; 255
     d9c:	60 e8       	ldi	r22, 0x80	; 128
     d9e:	8c e3       	ldi	r24, 0x3C	; 60
     da0:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
     da4:	91 e0       	ldi	r25, 0x01	; 1
     da6:	84 30       	cpi	r24, 0x04	; 4
     da8:	09 f0       	breq	.+2      	; 0xdac <Clear_Display+0x14e>
     daa:	90 e0       	ldi	r25, 0x00	; 0
			break;
		}
		page++;
		if (page > 8){break;}
		else{
			Clear_Status &= Write_Display(0x00);
     dac:	09 23       	and	r16, r25
     dae:	80 e1       	ldi	r24, 0x10	; 16
     db0:	8e 8b       	std	Y+22, r24	; 0x16
	
	return Setup_status;
}

inline unsigned char Write_Display(unsigned char Data_Byte){
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x80, &Data_Byte, 1);
     db2:	21 e0       	ldi	r18, 0x01	; 1
     db4:	ae 01       	movw	r20, r28
     db6:	4a 5e       	subi	r20, 0xEA	; 234
     db8:	5f 4f       	sbci	r21, 0xFF	; 255
     dba:	60 e8       	ldi	r22, 0x80	; 128
     dbc:	8c e3       	ldi	r24, 0x3C	; 60
     dbe:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
     dc2:	91 e0       	ldi	r25, 0x01	; 1
     dc4:	84 30       	cpi	r24, 0x04	; 4
     dc6:	09 f0       	breq	.+2      	; 0xdca <Clear_Display+0x16c>
     dc8:	90 e0       	ldi	r25, 0x00	; 0
		}
		page++;
		if (page > 8){break;}
		else{
			Clear_Status &= Write_Display(0x00);
			Clear_Status &= Write_Display(0x10);
     dca:	09 23       	and	r16, r25
			for (unsigned char j = 0;j<7;j++){
     dcc:	10 e0       	ldi	r17, 0x00	; 0
     dce:	0e c0       	rjmp	.+28     	; 0xdec <Clear_Display+0x18e>
				unsigned char input_data[20] = {0};
     dd0:	ae 01       	movw	r20, r28
     dd2:	4f 5f       	subi	r20, 0xFF	; 255
     dd4:	5f 4f       	sbci	r21, 0xFF	; 255
     dd6:	84 e1       	ldi	r24, 0x14	; 20
     dd8:	fa 01       	movw	r30, r20
     dda:	11 92       	st	Z+, r1
     ddc:	8a 95       	dec	r24
     dde:	e9 f7       	brne	.-6      	; 0xdda <Clear_Display+0x17c>
				(void)Write_TWI(SSD_ADR, 0x40, input_data, 20);
     de0:	24 e1       	ldi	r18, 0x14	; 20
     de2:	60 e4       	ldi	r22, 0x40	; 64
     de4:	8c e3       	ldi	r24, 0x3C	; 60
     de6:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
		page++;
		if (page > 8){break;}
		else{
			Clear_Status &= Write_Display(0x00);
			Clear_Status &= Write_Display(0x10);
			for (unsigned char j = 0;j<7;j++){
     dea:	1f 5f       	subi	r17, 0xFF	; 255
     dec:	17 30       	cpi	r17, 0x07	; 7
     dee:	80 f3       	brcs	.-32     	; 0xdd0 <Clear_Display+0x172>
     df0:	42 cf       	rjmp	.-380    	; 0xc76 <Clear_Display+0x18>
				(void)Write_TWI(SSD_ADR, 0x40, input_data, 20);
			}
		}
	}
	return Clear_Status;
}
     df2:	80 2f       	mov	r24, r16
     df4:	6e 96       	adiw	r28, 0x1e	; 30
     df6:	cd bf       	out	0x3d, r28	; 61
     df8:	de bf       	out	0x3e, r29	; 62
     dfa:	df 91       	pop	r29
     dfc:	cf 91       	pop	r28
     dfe:	1f 91       	pop	r17
     e00:	0f 91       	pop	r16
     e02:	ff 90       	pop	r15
     e04:	08 95       	ret

00000e06 <Setup_SSD>:
	free(buffer);
	return 0;
}

// SOLOMON SYSTECH DRIVER (SSD) 1306 CODE
unsigned char Setup_SSD(){
     e06:	1f 93       	push	r17
     e08:	cf 93       	push	r28
     e0a:	df 93       	push	r29
     e0c:	cd b7       	in	r28, 0x3d	; 61
     e0e:	de b7       	in	r29, 0x3e	; 62
     e10:	27 97       	sbiw	r28, 0x07	; 7
     e12:	cd bf       	out	0x3d, r28	; 61
     e14:	de bf       	out	0x3e, r29	; 62
	
	return (TWI_status == 4) ? 1 : 0;
}

inline unsigned char Write_Display_Double(unsigned char Address_Byte, unsigned char Data_Byte){
	unsigned char input_data[2] = {Address_Byte, Data_Byte};
     e16:	88 ea       	ldi	r24, 0xA8	; 168
     e18:	89 83       	std	Y+1, r24	; 0x01
     e1a:	8f e3       	ldi	r24, 0x3F	; 63
     e1c:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x00, input_data, 2);
     e1e:	22 e0       	ldi	r18, 0x02	; 2
     e20:	ae 01       	movw	r20, r28
     e22:	4f 5f       	subi	r20, 0xFF	; 255
     e24:	5f 4f       	sbci	r21, 0xFF	; 255
     e26:	60 e0       	ldi	r22, 0x00	; 0
     e28:	8c e3       	ldi	r24, 0x3C	; 60
     e2a:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
     e2e:	11 e0       	ldi	r17, 0x01	; 1
     e30:	84 30       	cpi	r24, 0x04	; 4
     e32:	09 f0       	breq	.+2      	; 0xe36 <Setup_SSD+0x30>
     e34:	10 e0       	ldi	r17, 0x00	; 0
	
	return (TWI_status == 4) ? 1 : 0;
}

inline unsigned char Write_Display_Double(unsigned char Address_Byte, unsigned char Data_Byte){
	unsigned char input_data[2] = {Address_Byte, Data_Byte};
     e36:	83 ed       	ldi	r24, 0xD3	; 211
     e38:	89 83       	std	Y+1, r24	; 0x01
     e3a:	1a 82       	std	Y+2, r1	; 0x02
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x00, input_data, 2);
     e3c:	22 e0       	ldi	r18, 0x02	; 2
     e3e:	ae 01       	movw	r20, r28
     e40:	4f 5f       	subi	r20, 0xFF	; 255
     e42:	5f 4f       	sbci	r21, 0xFF	; 255
     e44:	60 e0       	ldi	r22, 0x00	; 0
     e46:	8c e3       	ldi	r24, 0x3C	; 60
     e48:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
     e4c:	91 e0       	ldi	r25, 0x01	; 1
     e4e:	84 30       	cpi	r24, 0x04	; 4
     e50:	09 f0       	breq	.+2      	; 0xe54 <Setup_SSD+0x4e>
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	19 23       	and	r17, r25
     e56:	80 e4       	ldi	r24, 0x40	; 64
     e58:	8b 83       	std	Y+3, r24	; 0x03
	
	return Setup_status;
}

inline unsigned char Write_Display(unsigned char Data_Byte){
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x80, &Data_Byte, 1);
     e5a:	21 e0       	ldi	r18, 0x01	; 1
     e5c:	ae 01       	movw	r20, r28
     e5e:	4d 5f       	subi	r20, 0xFD	; 253
     e60:	5f 4f       	sbci	r21, 0xFF	; 255
     e62:	60 e8       	ldi	r22, 0x80	; 128
     e64:	8c e3       	ldi	r24, 0x3C	; 60
     e66:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
     e6a:	91 e0       	ldi	r25, 0x01	; 1
     e6c:	84 30       	cpi	r24, 0x04	; 4
     e6e:	09 f0       	breq	.+2      	; 0xe72 <Setup_SSD+0x6c>
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	19 23       	and	r17, r25
     e74:	80 ea       	ldi	r24, 0xA0	; 160
     e76:	8c 83       	std	Y+4, r24	; 0x04
	
	return Setup_status;
}

inline unsigned char Write_Display(unsigned char Data_Byte){
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x80, &Data_Byte, 1);
     e78:	21 e0       	ldi	r18, 0x01	; 1
     e7a:	ae 01       	movw	r20, r28
     e7c:	4c 5f       	subi	r20, 0xFC	; 252
     e7e:	5f 4f       	sbci	r21, 0xFF	; 255
     e80:	60 e8       	ldi	r22, 0x80	; 128
     e82:	8c e3       	ldi	r24, 0x3C	; 60
     e84:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
     e88:	91 e0       	ldi	r25, 0x01	; 1
     e8a:	84 30       	cpi	r24, 0x04	; 4
     e8c:	09 f0       	breq	.+2      	; 0xe90 <Setup_SSD+0x8a>
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	19 23       	and	r17, r25
     e92:	80 ec       	ldi	r24, 0xC0	; 192
     e94:	8d 83       	std	Y+5, r24	; 0x05
	
	return Setup_status;
}

inline unsigned char Write_Display(unsigned char Data_Byte){
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x80, &Data_Byte, 1);
     e96:	21 e0       	ldi	r18, 0x01	; 1
     e98:	ae 01       	movw	r20, r28
     e9a:	4b 5f       	subi	r20, 0xFB	; 251
     e9c:	5f 4f       	sbci	r21, 0xFF	; 255
     e9e:	60 e8       	ldi	r22, 0x80	; 128
     ea0:	8c e3       	ldi	r24, 0x3C	; 60
     ea2:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
     ea6:	91 e0       	ldi	r25, 0x01	; 1
     ea8:	84 30       	cpi	r24, 0x04	; 4
     eaa:	09 f0       	breq	.+2      	; 0xeae <Setup_SSD+0xa8>
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	19 23       	and	r17, r25
}

inline unsigned char Write_Display_Double(unsigned char Address_Byte, unsigned char Data_Byte){
	unsigned char input_data[2] = {Address_Byte, Data_Byte};
     eb0:	8a ed       	ldi	r24, 0xDA	; 218
     eb2:	89 83       	std	Y+1, r24	; 0x01
     eb4:	82 e0       	ldi	r24, 0x02	; 2
     eb6:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x00, input_data, 2);
     eb8:	22 e0       	ldi	r18, 0x02	; 2
     eba:	ae 01       	movw	r20, r28
     ebc:	4f 5f       	subi	r20, 0xFF	; 255
     ebe:	5f 4f       	sbci	r21, 0xFF	; 255
     ec0:	60 e0       	ldi	r22, 0x00	; 0
     ec2:	8c e3       	ldi	r24, 0x3C	; 60
     ec4:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
     ec8:	91 e0       	ldi	r25, 0x01	; 1
     eca:	84 30       	cpi	r24, 0x04	; 4
     ecc:	09 f0       	breq	.+2      	; 0xed0 <Setup_SSD+0xca>
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	19 23       	and	r17, r25
	
	return (TWI_status == 4) ? 1 : 0;
}

inline unsigned char Write_Display_Double(unsigned char Address_Byte, unsigned char Data_Byte){
	unsigned char input_data[2] = {Address_Byte, Data_Byte};
     ed2:	81 e8       	ldi	r24, 0x81	; 129
     ed4:	89 83       	std	Y+1, r24	; 0x01
     ed6:	8f e7       	ldi	r24, 0x7F	; 127
     ed8:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x00, input_data, 2);
     eda:	22 e0       	ldi	r18, 0x02	; 2
     edc:	ae 01       	movw	r20, r28
     ede:	4f 5f       	subi	r20, 0xFF	; 255
     ee0:	5f 4f       	sbci	r21, 0xFF	; 255
     ee2:	60 e0       	ldi	r22, 0x00	; 0
     ee4:	8c e3       	ldi	r24, 0x3C	; 60
     ee6:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
     eea:	91 e0       	ldi	r25, 0x01	; 1
     eec:	84 30       	cpi	r24, 0x04	; 4
     eee:	09 f0       	breq	.+2      	; 0xef2 <Setup_SSD+0xec>
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	19 23       	and	r17, r25
     ef4:	84 ea       	ldi	r24, 0xA4	; 164
     ef6:	8e 83       	std	Y+6, r24	; 0x06
	
	return Setup_status;
}

inline unsigned char Write_Display(unsigned char Data_Byte){
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x80, &Data_Byte, 1);
     ef8:	21 e0       	ldi	r18, 0x01	; 1
     efa:	ae 01       	movw	r20, r28
     efc:	4a 5f       	subi	r20, 0xFA	; 250
     efe:	5f 4f       	sbci	r21, 0xFF	; 255
     f00:	60 e8       	ldi	r22, 0x80	; 128
     f02:	8c e3       	ldi	r24, 0x3C	; 60
     f04:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
     f08:	91 e0       	ldi	r25, 0x01	; 1
     f0a:	84 30       	cpi	r24, 0x04	; 4
     f0c:	09 f0       	breq	.+2      	; 0xf10 <Setup_SSD+0x10a>
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	19 23       	and	r17, r25
     f12:	86 ea       	ldi	r24, 0xA6	; 166
     f14:	8f 83       	std	Y+7, r24	; 0x07
	
	return Setup_status;
}

inline unsigned char Write_Display(unsigned char Data_Byte){
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x80, &Data_Byte, 1);
     f16:	21 e0       	ldi	r18, 0x01	; 1
     f18:	ae 01       	movw	r20, r28
     f1a:	49 5f       	subi	r20, 0xF9	; 249
     f1c:	5f 4f       	sbci	r21, 0xFF	; 255
     f1e:	60 e8       	ldi	r22, 0x80	; 128
     f20:	8c e3       	ldi	r24, 0x3C	; 60
     f22:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
     f26:	91 e0       	ldi	r25, 0x01	; 1
     f28:	84 30       	cpi	r24, 0x04	; 4
     f2a:	09 f0       	breq	.+2      	; 0xf2e <Setup_SSD+0x128>
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	19 23       	and	r17, r25
}

inline unsigned char Write_Display_Double(unsigned char Address_Byte, unsigned char Data_Byte){
	unsigned char input_data[2] = {Address_Byte, Data_Byte};
     f30:	85 ed       	ldi	r24, 0xD5	; 213
     f32:	89 83       	std	Y+1, r24	; 0x01
     f34:	80 e8       	ldi	r24, 0x80	; 128
     f36:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x00, input_data, 2);
     f38:	22 e0       	ldi	r18, 0x02	; 2
     f3a:	ae 01       	movw	r20, r28
     f3c:	4f 5f       	subi	r20, 0xFF	; 255
     f3e:	5f 4f       	sbci	r21, 0xFF	; 255
     f40:	60 e0       	ldi	r22, 0x00	; 0
     f42:	8c e3       	ldi	r24, 0x3C	; 60
     f44:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
     f48:	91 e0       	ldi	r25, 0x01	; 1
     f4a:	84 30       	cpi	r24, 0x04	; 4
     f4c:	09 f0       	breq	.+2      	; 0xf50 <Setup_SSD+0x14a>
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	19 23       	and	r17, r25
	
	return (TWI_status == 4) ? 1 : 0;
}

inline unsigned char Write_Display_Double(unsigned char Address_Byte, unsigned char Data_Byte){
	unsigned char input_data[2] = {Address_Byte, Data_Byte};
     f52:	8d e8       	ldi	r24, 0x8D	; 141
     f54:	89 83       	std	Y+1, r24	; 0x01
     f56:	84 e1       	ldi	r24, 0x14	; 20
     f58:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x00, input_data, 2);
     f5a:	22 e0       	ldi	r18, 0x02	; 2
     f5c:	ae 01       	movw	r20, r28
     f5e:	4f 5f       	subi	r20, 0xFF	; 255
     f60:	5f 4f       	sbci	r21, 0xFF	; 255
     f62:	60 e0       	ldi	r22, 0x00	; 0
     f64:	8c e3       	ldi	r24, 0x3C	; 60
     f66:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
     f6a:	91 e0       	ldi	r25, 0x01	; 1
     f6c:	84 30       	cpi	r24, 0x04	; 4
     f6e:	09 f0       	breq	.+2      	; 0xf72 <Setup_SSD+0x16c>
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	19 23       	and	r17, r25
     f74:	8f ea       	ldi	r24, 0xAF	; 175
     f76:	89 83       	std	Y+1, r24	; 0x01
	
	return Setup_status;
}

inline unsigned char Write_Display(unsigned char Data_Byte){
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x80, &Data_Byte, 1);
     f78:	21 e0       	ldi	r18, 0x01	; 1
     f7a:	ae 01       	movw	r20, r28
     f7c:	4f 5f       	subi	r20, 0xFF	; 255
     f7e:	5f 4f       	sbci	r21, 0xFF	; 255
     f80:	60 e8       	ldi	r22, 0x80	; 128
     f82:	8c e3       	ldi	r24, 0x3C	; 60
     f84:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
     f88:	91 e0       	ldi	r25, 0x01	; 1
     f8a:	84 30       	cpi	r24, 0x04	; 4
     f8c:	09 f0       	breq	.+2      	; 0xf90 <Setup_SSD+0x18a>
     f8e:	90 e0       	ldi	r25, 0x00	; 0
	// 10. Set Oscillator Frequency -> 0xD5, 0x80
	Setup_status &= Write_Display_Double(SSD_OSC_FREQUENCY, 0x80);
	// 11. Enable charge pump regulator -> 0x8D, 0x14
	Setup_status &= Write_Display_Double(SSD_CHARGE_PUMP, 0x14);
	// 12. Display On -> 0xAF
	Setup_status &= Write_Display(SSD_DISPLAY_ON);
     f90:	19 23       	and	r17, r25

	Setup_status &= Clear_Display();
     f92:	0e 94 2f 06 	call	0xc5e	; 0xc5e <Clear_Display>
	
	return Setup_status;
}
     f96:	81 23       	and	r24, r17
     f98:	27 96       	adiw	r28, 0x07	; 7
     f9a:	cd bf       	out	0x3d, r28	; 61
     f9c:	de bf       	out	0x3e, r29	; 62
     f9e:	df 91       	pop	r29
     fa0:	cf 91       	pop	r28
     fa2:	1f 91       	pop	r17
     fa4:	08 95       	ret

00000fa6 <Print_Page>:
		}
	}
	return Clear_Status;
}

unsigned char Print_Page(unsigned char page, char *to_print, unsigned char length_to_print){
     fa6:	df 92       	push	r13
     fa8:	ef 92       	push	r14
     faa:	ff 92       	push	r15
     fac:	0f 93       	push	r16
     fae:	1f 93       	push	r17
     fb0:	cf 93       	push	r28
     fb2:	df 93       	push	r29
     fb4:	cd b7       	in	r28, 0x3d	; 61
     fb6:	de b7       	in	r29, 0x3e	; 62
     fb8:	2a 97       	sbiw	r28, 0x0a	; 10
     fba:	cd bf       	out	0x3d, r28	; 61
     fbc:	de bf       	out	0x3e, r29	; 62
     fbe:	08 2f       	mov	r16, r24
     fc0:	7b 01       	movw	r14, r22
     fc2:	d4 2e       	mov	r13, r20
     fc4:	19 86       	std	Y+9, r1	; 0x09
	
	return Setup_status;
}

inline unsigned char Write_Display(unsigned char Data_Byte){
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x80, &Data_Byte, 1);
     fc6:	21 e0       	ldi	r18, 0x01	; 1
     fc8:	ae 01       	movw	r20, r28
     fca:	47 5f       	subi	r20, 0xF7	; 247
     fcc:	5f 4f       	sbci	r21, 0xFF	; 255
     fce:	60 e8       	ldi	r22, 0x80	; 128
     fd0:	8c e3       	ldi	r24, 0x3C	; 60
     fd2:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
     fd6:	11 e0       	ldi	r17, 0x01	; 1
     fd8:	84 30       	cpi	r24, 0x04	; 4
     fda:	09 f0       	breq	.+2      	; 0xfde <Print_Page+0x38>
     fdc:	10 e0       	ldi	r17, 0x00	; 0
     fde:	80 e1       	ldi	r24, 0x10	; 16
     fe0:	8a 87       	std	Y+10, r24	; 0x0a
	
	return Setup_status;
}

inline unsigned char Write_Display(unsigned char Data_Byte){
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x80, &Data_Byte, 1);
     fe2:	21 e0       	ldi	r18, 0x01	; 1
     fe4:	ae 01       	movw	r20, r28
     fe6:	46 5f       	subi	r20, 0xF6	; 246
     fe8:	5f 4f       	sbci	r21, 0xFF	; 255
     fea:	60 e8       	ldi	r22, 0x80	; 128
     fec:	8c e3       	ldi	r24, 0x3C	; 60
     fee:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
     ff2:	91 e0       	ldi	r25, 0x01	; 1
     ff4:	84 30       	cpi	r24, 0x04	; 4
     ff6:	09 f0       	breq	.+2      	; 0xffa <Print_Page+0x54>
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	19 23       	and	r17, r25
	unsigned char 
		counter = 0,
		Print_status = 1;
	Print_status &= Write_Display(0x00);
	Print_status &= Write_Display(0x10);
	switch (page){
     ffc:	80 2f       	mov	r24, r16
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	fc 01       	movw	r30, r24
    1002:	31 97       	sbiw	r30, 0x01	; 1
    1004:	e7 30       	cpi	r30, 0x07	; 7
    1006:	f1 05       	cpc	r31, r1
    1008:	08 f0       	brcs	.+2      	; 0x100c <Print_Page+0x66>
    100a:	75 c0       	rjmp	.+234    	; 0x10f6 <Print_Page+0x150>
    100c:	ef 54       	subi	r30, 0x4F	; 79
    100e:	ff 4f       	sbci	r31, 0xFF	; 255
    1010:	0c 94 cf 25 	jmp	0x4b9e	; 0x4b9e <__tablejump2__>
    1014:	81 eb       	ldi	r24, 0xB1	; 177
    1016:	88 87       	std	Y+8, r24	; 0x08
	
	return Setup_status;
}

inline unsigned char Write_Display(unsigned char Data_Byte){
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x80, &Data_Byte, 1);
    1018:	21 e0       	ldi	r18, 0x01	; 1
    101a:	ae 01       	movw	r20, r28
    101c:	48 5f       	subi	r20, 0xF8	; 248
    101e:	5f 4f       	sbci	r21, 0xFF	; 255
    1020:	60 e8       	ldi	r22, 0x80	; 128
    1022:	8c e3       	ldi	r24, 0x3C	; 60
    1024:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
    1028:	91 e0       	ldi	r25, 0x01	; 1
    102a:	84 30       	cpi	r24, 0x04	; 4
    102c:	09 f0       	breq	.+2      	; 0x1030 <Print_Page+0x8a>
    102e:	90 e0       	ldi	r25, 0x00	; 0
		Print_status = 1;
	Print_status &= Write_Display(0x00);
	Print_status &= Write_Display(0x10);
	switch (page){
		case 1:
		Print_status &= Write_Display(SSD_PAGE1);
    1030:	19 23       	and	r17, r25
		break;
    1032:	1f c0       	rjmp	.+62     	; 0x1072 <Print_Page+0xcc>
    1034:	82 eb       	ldi	r24, 0xB2	; 178
    1036:	8f 83       	std	Y+7, r24	; 0x07
	
	return Setup_status;
}

inline unsigned char Write_Display(unsigned char Data_Byte){
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x80, &Data_Byte, 1);
    1038:	21 e0       	ldi	r18, 0x01	; 1
    103a:	ae 01       	movw	r20, r28
    103c:	49 5f       	subi	r20, 0xF9	; 249
    103e:	5f 4f       	sbci	r21, 0xFF	; 255
    1040:	60 e8       	ldi	r22, 0x80	; 128
    1042:	8c e3       	ldi	r24, 0x3C	; 60
    1044:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
    1048:	91 e0       	ldi	r25, 0x01	; 1
    104a:	84 30       	cpi	r24, 0x04	; 4
    104c:	09 f0       	breq	.+2      	; 0x1050 <Print_Page+0xaa>
    104e:	90 e0       	ldi	r25, 0x00	; 0
	switch (page){
		case 1:
		Print_status &= Write_Display(SSD_PAGE1);
		break;
		case 2:
		Print_status &= Write_Display(SSD_PAGE2);
    1050:	19 23       	and	r17, r25
		break;
    1052:	0f c0       	rjmp	.+30     	; 0x1072 <Print_Page+0xcc>
    1054:	83 eb       	ldi	r24, 0xB3	; 179
    1056:	8e 83       	std	Y+6, r24	; 0x06
	
	return Setup_status;
}

inline unsigned char Write_Display(unsigned char Data_Byte){
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x80, &Data_Byte, 1);
    1058:	21 e0       	ldi	r18, 0x01	; 1
    105a:	ae 01       	movw	r20, r28
    105c:	4a 5f       	subi	r20, 0xFA	; 250
    105e:	5f 4f       	sbci	r21, 0xFF	; 255
    1060:	60 e8       	ldi	r22, 0x80	; 128
    1062:	8c e3       	ldi	r24, 0x3C	; 60
    1064:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
    1068:	91 e0       	ldi	r25, 0x01	; 1
    106a:	84 30       	cpi	r24, 0x04	; 4
    106c:	09 f0       	breq	.+2      	; 0x1070 <Print_Page+0xca>
    106e:	90 e0       	ldi	r25, 0x00	; 0
		break;
		case 2:
		Print_status &= Write_Display(SSD_PAGE2);
		break;
		case 3:
		Print_status &= Write_Display(SSD_PAGE3);
    1070:	19 23       	and	r17, r25
		}
	}
	return Clear_Status;
}

unsigned char Print_Page(unsigned char page, char *to_print, unsigned char length_to_print){
    1072:	00 e0       	ldi	r16, 0x00	; 0
    1074:	5c c0       	rjmp	.+184    	; 0x112e <Print_Page+0x188>
    1076:	84 eb       	ldi	r24, 0xB4	; 180
    1078:	8d 83       	std	Y+5, r24	; 0x05
	
	return Setup_status;
}

inline unsigned char Write_Display(unsigned char Data_Byte){
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x80, &Data_Byte, 1);
    107a:	21 e0       	ldi	r18, 0x01	; 1
    107c:	ae 01       	movw	r20, r28
    107e:	4b 5f       	subi	r20, 0xFB	; 251
    1080:	5f 4f       	sbci	r21, 0xFF	; 255
    1082:	60 e8       	ldi	r22, 0x80	; 128
    1084:	8c e3       	ldi	r24, 0x3C	; 60
    1086:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
    108a:	91 e0       	ldi	r25, 0x01	; 1
    108c:	84 30       	cpi	r24, 0x04	; 4
    108e:	09 f0       	breq	.+2      	; 0x1092 <Print_Page+0xec>
    1090:	90 e0       	ldi	r25, 0x00	; 0
		break;
		case 3:
		Print_status &= Write_Display(SSD_PAGE3);
		break;
		case 4:
		Print_status &= Write_Display(SSD_PAGE4);
    1092:	19 23       	and	r17, r25
		break;
    1094:	ee cf       	rjmp	.-36     	; 0x1072 <Print_Page+0xcc>
    1096:	85 eb       	ldi	r24, 0xB5	; 181
    1098:	8c 83       	std	Y+4, r24	; 0x04
	
	return Setup_status;
}

inline unsigned char Write_Display(unsigned char Data_Byte){
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x80, &Data_Byte, 1);
    109a:	21 e0       	ldi	r18, 0x01	; 1
    109c:	ae 01       	movw	r20, r28
    109e:	4c 5f       	subi	r20, 0xFC	; 252
    10a0:	5f 4f       	sbci	r21, 0xFF	; 255
    10a2:	60 e8       	ldi	r22, 0x80	; 128
    10a4:	8c e3       	ldi	r24, 0x3C	; 60
    10a6:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
    10aa:	91 e0       	ldi	r25, 0x01	; 1
    10ac:	84 30       	cpi	r24, 0x04	; 4
    10ae:	09 f0       	breq	.+2      	; 0x10b2 <Print_Page+0x10c>
    10b0:	90 e0       	ldi	r25, 0x00	; 0
		break;
		case 4:
		Print_status &= Write_Display(SSD_PAGE4);
		break;
		case 5:
		Print_status &= Write_Display(SSD_PAGE5);
    10b2:	19 23       	and	r17, r25
		break;
    10b4:	de cf       	rjmp	.-68     	; 0x1072 <Print_Page+0xcc>
    10b6:	86 eb       	ldi	r24, 0xB6	; 182
    10b8:	8b 83       	std	Y+3, r24	; 0x03
	
	return Setup_status;
}

inline unsigned char Write_Display(unsigned char Data_Byte){
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x80, &Data_Byte, 1);
    10ba:	21 e0       	ldi	r18, 0x01	; 1
    10bc:	ae 01       	movw	r20, r28
    10be:	4d 5f       	subi	r20, 0xFD	; 253
    10c0:	5f 4f       	sbci	r21, 0xFF	; 255
    10c2:	60 e8       	ldi	r22, 0x80	; 128
    10c4:	8c e3       	ldi	r24, 0x3C	; 60
    10c6:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
    10ca:	91 e0       	ldi	r25, 0x01	; 1
    10cc:	84 30       	cpi	r24, 0x04	; 4
    10ce:	09 f0       	breq	.+2      	; 0x10d2 <Print_Page+0x12c>
    10d0:	90 e0       	ldi	r25, 0x00	; 0
		break;
		case 5:
		Print_status &= Write_Display(SSD_PAGE5);
		break;
		case 6:
		Print_status &= Write_Display(SSD_PAGE6);
    10d2:	19 23       	and	r17, r25
		break;
    10d4:	ce cf       	rjmp	.-100    	; 0x1072 <Print_Page+0xcc>
    10d6:	87 eb       	ldi	r24, 0xB7	; 183
    10d8:	8a 83       	std	Y+2, r24	; 0x02
	
	return Setup_status;
}

inline unsigned char Write_Display(unsigned char Data_Byte){
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x80, &Data_Byte, 1);
    10da:	21 e0       	ldi	r18, 0x01	; 1
    10dc:	ae 01       	movw	r20, r28
    10de:	4e 5f       	subi	r20, 0xFE	; 254
    10e0:	5f 4f       	sbci	r21, 0xFF	; 255
    10e2:	60 e8       	ldi	r22, 0x80	; 128
    10e4:	8c e3       	ldi	r24, 0x3C	; 60
    10e6:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
    10ea:	91 e0       	ldi	r25, 0x01	; 1
    10ec:	84 30       	cpi	r24, 0x04	; 4
    10ee:	09 f0       	breq	.+2      	; 0x10f2 <Print_Page+0x14c>
    10f0:	90 e0       	ldi	r25, 0x00	; 0
		break;
		case 6:
		Print_status &= Write_Display(SSD_PAGE6);
		break;
		case 7:
		Print_status &= Write_Display(SSD_PAGE7);
    10f2:	19 23       	and	r17, r25
		break;
    10f4:	be cf       	rjmp	.-132    	; 0x1072 <Print_Page+0xcc>
    10f6:	80 eb       	ldi	r24, 0xB0	; 176
    10f8:	89 83       	std	Y+1, r24	; 0x01
	
	return Setup_status;
}

inline unsigned char Write_Display(unsigned char Data_Byte){
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x80, &Data_Byte, 1);
    10fa:	21 e0       	ldi	r18, 0x01	; 1
    10fc:	ae 01       	movw	r20, r28
    10fe:	4f 5f       	subi	r20, 0xFF	; 255
    1100:	5f 4f       	sbci	r21, 0xFF	; 255
    1102:	60 e8       	ldi	r22, 0x80	; 128
    1104:	8c e3       	ldi	r24, 0x3C	; 60
    1106:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
    110a:	91 e0       	ldi	r25, 0x01	; 1
    110c:	84 30       	cpi	r24, 0x04	; 4
    110e:	09 f0       	breq	.+2      	; 0x1112 <Print_Page+0x16c>
    1110:	90 e0       	ldi	r25, 0x00	; 0
		break;
		case 7:
		Print_status &= Write_Display(SSD_PAGE7);
		break;
		default:
		Print_status &= Write_Display(SSD_PAGE0);
    1112:	19 23       	and	r17, r25
		break;
    1114:	ae cf       	rjmp	.-164    	; 0x1072 <Print_Page+0xcc>
	}
	while(counter <= length_to_print){
		Print_status &= Write_Character(to_print[counter]);
    1116:	f7 01       	movw	r30, r14
    1118:	e0 0f       	add	r30, r16
    111a:	f1 1d       	adc	r31, r1
    111c:	80 81       	ld	r24, Z
    111e:	0e 94 89 04 	call	0x912	; 0x912 <Write_Character>
    1122:	18 23       	and	r17, r24
		Print_status &= Write_Character(' ');
    1124:	80 e2       	ldi	r24, 0x20	; 32
    1126:	0e 94 89 04 	call	0x912	; 0x912 <Write_Character>
    112a:	18 23       	and	r17, r24
		counter++;
    112c:	0f 5f       	subi	r16, 0xFF	; 255
		break;
		default:
		Print_status &= Write_Display(SSD_PAGE0);
		break;
	}
	while(counter <= length_to_print){
    112e:	d0 16       	cp	r13, r16
    1130:	90 f7       	brcc	.-28     	; 0x1116 <Print_Page+0x170>
		Print_status &= Write_Character(to_print[counter]);
		Print_status &= Write_Character(' ');
		counter++;
	}
	return Print_status;
    1132:	81 2f       	mov	r24, r17
    1134:	2a 96       	adiw	r28, 0x0a	; 10
    1136:	cd bf       	out	0x3d, r28	; 61
    1138:	de bf       	out	0x3e, r29	; 62
    113a:	df 91       	pop	r29
    113c:	cf 91       	pop	r28
    113e:	1f 91       	pop	r17
    1140:	0f 91       	pop	r16
    1142:	ff 90       	pop	r15
    1144:	ef 90       	pop	r14
    1146:	df 90       	pop	r13
    1148:	08 95       	ret

0000114a <Run_Motors>:
// Outputs - Desired throttle command on each of 4 BLDC motors 

// ESC Interface - PPM (OneShot) control
// Inputs - Desired motor throttles (0-100)
// Outputs - 100 Hz, 1-2us waveform to ESC 
void Run_Motors(unsigned int Throttle_Commands[4]){
    114a:	cf 93       	push	r28
    114c:	df 93       	push	r29
    114e:	cd b7       	in	r28, 0x3d	; 61
    1150:	de b7       	in	r29, 0x3e	; 62
    1152:	28 97       	sbiw	r28, 0x08	; 8
    1154:	cd bf       	out	0x3d, r28	; 61
    1156:	de bf       	out	0x3e, r29	; 62
	// We want to map 0:1000 to 3000:6000 (1000:2000 us)
	static unsigned int motor_lookup[1001] = {0};
	// Build the lookup table if it hasn't been built yet, enable pins for output
	if (!(motor_lookup[0])){ 
    1158:	20 91 e2 41 	lds	r18, 0x41E2	; 0x8041e2 <__data_end>
    115c:	30 91 e3 41 	lds	r19, 0x41E3	; 0x8041e3 <__data_end+0x1>
    1160:	23 2b       	or	r18, r19
    1162:	89 f0       	breq	.+34     	; 0x1186 <Run_Motors+0x3c>
    1164:	1b c0       	rjmp	.+54     	; 0x119c <Run_Motors+0x52>
		for (unsigned int i=0;i<1001;i++){
			motor_lookup[i] = 3*i + 3000;
    1166:	a9 01       	movw	r20, r18
    1168:	44 0f       	add	r20, r20
    116a:	55 1f       	adc	r21, r21
    116c:	ba 01       	movw	r22, r20
    116e:	62 0f       	add	r22, r18
    1170:	73 1f       	adc	r23, r19
    1172:	68 54       	subi	r22, 0x48	; 72
    1174:	74 4f       	sbci	r23, 0xF4	; 244
    1176:	fa 01       	movw	r30, r20
    1178:	ee 51       	subi	r30, 0x1E	; 30
    117a:	fe 4b       	sbci	r31, 0xBE	; 190
    117c:	60 83       	st	Z, r22
    117e:	71 83       	std	Z+1, r23	; 0x01
void Run_Motors(unsigned int Throttle_Commands[4]){
	// We want to map 0:1000 to 3000:6000 (1000:2000 us)
	static unsigned int motor_lookup[1001] = {0};
	// Build the lookup table if it hasn't been built yet, enable pins for output
	if (!(motor_lookup[0])){ 
		for (unsigned int i=0;i<1001;i++){
    1180:	2f 5f       	subi	r18, 0xFF	; 255
    1182:	3f 4f       	sbci	r19, 0xFF	; 255
    1184:	02 c0       	rjmp	.+4      	; 0x118a <Run_Motors+0x40>
    1186:	20 e0       	ldi	r18, 0x00	; 0
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	29 3e       	cpi	r18, 0xE9	; 233
    118c:	43 e0       	ldi	r20, 0x03	; 3
    118e:	34 07       	cpc	r19, r20
    1190:	50 f3       	brcs	.-44     	; 0x1166 <Run_Motors+0x1c>
			motor_lookup[i] = 3*i + 3000;
		}
		PORTD_DIR |= PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm; 
    1192:	e0 e6       	ldi	r30, 0x60	; 96
    1194:	f4 e0       	ldi	r31, 0x04	; 4
    1196:	20 81       	ld	r18, Z
    1198:	2f 60       	ori	r18, 0x0F	; 15
    119a:	20 83       	st	Z, r18
	}
	unsigned int mapped_throttle_commands[4] = {0};
    119c:	fe 01       	movw	r30, r28
    119e:	31 96       	adiw	r30, 0x01	; 1
    11a0:	28 e0       	ldi	r18, 0x08	; 8
    11a2:	df 01       	movw	r26, r30
    11a4:	1d 92       	st	X+, r1
    11a6:	2a 95       	dec	r18
    11a8:	e9 f7       	brne	.-6      	; 0x11a4 <Run_Motors+0x5a>
	// Map commands, saturate if out of bounds
	for (unsigned char i=0;i<4;i++){
    11aa:	60 e0       	ldi	r22, 0x00	; 0
    11ac:	25 c0       	rjmp	.+74     	; 0x11f8 <Run_Motors+0xae>
		Throttle_Commands[i] = (Throttle_Commands[i]>1000)?1000:Throttle_Commands[i];
    11ae:	e6 2f       	mov	r30, r22
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	ee 0f       	add	r30, r30
    11b4:	ff 1f       	adc	r31, r31
    11b6:	e8 0f       	add	r30, r24
    11b8:	f9 1f       	adc	r31, r25
    11ba:	20 81       	ld	r18, Z
    11bc:	31 81       	ldd	r19, Z+1	; 0x01
    11be:	29 3e       	cpi	r18, 0xE9	; 233
    11c0:	b3 e0       	ldi	r27, 0x03	; 3
    11c2:	3b 07       	cpc	r19, r27
    11c4:	10 f0       	brcs	.+4      	; 0x11ca <Run_Motors+0x80>
    11c6:	28 ee       	ldi	r18, 0xE8	; 232
    11c8:	33 e0       	ldi	r19, 0x03	; 3
    11ca:	20 83       	st	Z, r18
    11cc:	31 83       	std	Z+1, r19	; 0x01
		mapped_throttle_commands[i] = motor_lookup[Throttle_Commands[i]];
    11ce:	46 2f       	mov	r20, r22
    11d0:	50 e0       	ldi	r21, 0x00	; 0
    11d2:	22 0f       	add	r18, r18
    11d4:	33 1f       	adc	r19, r19
    11d6:	f9 01       	movw	r30, r18
    11d8:	ee 51       	subi	r30, 0x1E	; 30
    11da:	fe 4b       	sbci	r31, 0xBE	; 190
    11dc:	20 81       	ld	r18, Z
    11de:	31 81       	ldd	r19, Z+1	; 0x01
    11e0:	fa 01       	movw	r30, r20
    11e2:	ee 0f       	add	r30, r30
    11e4:	ff 1f       	adc	r31, r31
    11e6:	41 e0       	ldi	r20, 0x01	; 1
    11e8:	50 e0       	ldi	r21, 0x00	; 0
    11ea:	4c 0f       	add	r20, r28
    11ec:	5d 1f       	adc	r21, r29
    11ee:	e4 0f       	add	r30, r20
    11f0:	f5 1f       	adc	r31, r21
    11f2:	20 83       	st	Z, r18
    11f4:	31 83       	std	Z+1, r19	; 0x01
		}
		PORTD_DIR |= PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm; 
	}
	unsigned int mapped_throttle_commands[4] = {0};
	// Map commands, saturate if out of bounds
	for (unsigned char i=0;i<4;i++){
    11f6:	6f 5f       	subi	r22, 0xFF	; 255
    11f8:	64 30       	cpi	r22, 0x04	; 4
    11fa:	c8 f2       	brcs	.-78     	; 0x11ae <Run_Motors+0x64>
		Throttle_Commands[i] = (Throttle_Commands[i]>1000)?1000:Throttle_Commands[i];
		mapped_throttle_commands[i] = motor_lookup[Throttle_Commands[i]];
	}
	// Disable Timer
	TCA0_SINGLE_CTRLA &= ~TCA_SINGLE_ENABLE_bm;
    11fc:	e0 e0       	ldi	r30, 0x00	; 0
    11fe:	fa e0       	ldi	r31, 0x0A	; 10
    1200:	80 81       	ld	r24, Z
    1202:	8e 7f       	andi	r24, 0xFE	; 254
    1204:	80 83       	st	Z, r24
	// Set motor throttles
	TCA0_SINGLE_CMP0 = mapped_throttle_commands[0]; // Motor 1, back
    1206:	89 81       	ldd	r24, Y+1	; 0x01
    1208:	9a 81       	ldd	r25, Y+2	; 0x02
    120a:	80 93 28 0a 	sts	0x0A28, r24	; 0x800a28 <__TEXT_REGION_LENGTH__+0x7e0a28>
    120e:	90 93 29 0a 	sts	0x0A29, r25	; 0x800a29 <__TEXT_REGION_LENGTH__+0x7e0a29>
	TCA0_SINGLE_CMP1 = mapped_throttle_commands[1]; // Motor 2, left
    1212:	8b 81       	ldd	r24, Y+3	; 0x03
    1214:	9c 81       	ldd	r25, Y+4	; 0x04
    1216:	80 93 2a 0a 	sts	0x0A2A, r24	; 0x800a2a <__TEXT_REGION_LENGTH__+0x7e0a2a>
    121a:	90 93 2b 0a 	sts	0x0A2B, r25	; 0x800a2b <__TEXT_REGION_LENGTH__+0x7e0a2b>
	TCA0_SINGLE_CMP2 = mapped_throttle_commands[2]; // Motor 3, right
    121e:	8d 81       	ldd	r24, Y+5	; 0x05
    1220:	9e 81       	ldd	r25, Y+6	; 0x06
    1222:	80 93 2c 0a 	sts	0x0A2C, r24	; 0x800a2c <__TEXT_REGION_LENGTH__+0x7e0a2c>
    1226:	90 93 2d 0a 	sts	0x0A2D, r25	; 0x800a2d <__TEXT_REGION_LENGTH__+0x7e0a2d>
	TCA1_SINGLE_CMP0 = mapped_throttle_commands[3]; // Motor 4, front
    122a:	8f 81       	ldd	r24, Y+7	; 0x07
    122c:	98 85       	ldd	r25, Y+8	; 0x08
    122e:	80 93 68 0a 	sts	0x0A68, r24	; 0x800a68 <__TEXT_REGION_LENGTH__+0x7e0a68>
    1232:	90 93 69 0a 	sts	0x0A69, r25	; 0x800a69 <__TEXT_REGION_LENGTH__+0x7e0a69>
	// Reset timer counts
	TCA0_SINGLE_CNT = 0;
    1236:	10 92 20 0a 	sts	0x0A20, r1	; 0x800a20 <__TEXT_REGION_LENGTH__+0x7e0a20>
    123a:	10 92 21 0a 	sts	0x0A21, r1	; 0x800a21 <__TEXT_REGION_LENGTH__+0x7e0a21>
	TCA1_SINGLE_CNT = 0;
    123e:	10 92 60 0a 	sts	0x0A60, r1	; 0x800a60 <__TEXT_REGION_LENGTH__+0x7e0a60>
    1242:	10 92 61 0a 	sts	0x0A61, r1	; 0x800a61 <__TEXT_REGION_LENGTH__+0x7e0a61>
	// Set pins high
	PORTD_OUT |= PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm;
    1246:	a4 e6       	ldi	r26, 0x64	; 100
    1248:	b4 e0       	ldi	r27, 0x04	; 4
    124a:	8c 91       	ld	r24, X
    124c:	8f 60       	ori	r24, 0x0F	; 15
    124e:	8c 93       	st	X, r24
	// Start Timers
	TCA0_SINGLE_CTRLA |= TCA_SINGLE_ENABLE_bm;
    1250:	80 81       	ld	r24, Z
    1252:	81 60       	ori	r24, 0x01	; 1
    1254:	80 83       	st	Z, r24
	TCA1_SINGLE_CTRLA |= TCA_SINGLE_ENABLE_bm;
    1256:	e0 e4       	ldi	r30, 0x40	; 64
    1258:	fa e0       	ldi	r31, 0x0A	; 10
    125a:	80 81       	ld	r24, Z
    125c:	81 60       	ori	r24, 0x01	; 1
    125e:	80 83       	st	Z, r24
}
    1260:	28 96       	adiw	r28, 0x08	; 8
    1262:	cd bf       	out	0x3d, r28	; 61
    1264:	de bf       	out	0x3e, r29	; 62
    1266:	df 91       	pop	r29
    1268:	cf 91       	pop	r28
    126a:	08 95       	ret

0000126c <__vector_11>:

ISR(TCA0_CMP0_vect){
    126c:	1f 92       	push	r1
    126e:	0f 92       	push	r0
    1270:	0f b6       	in	r0, 0x3f	; 63
    1272:	0f 92       	push	r0
    1274:	11 24       	eor	r1, r1
    1276:	0b b6       	in	r0, 0x3b	; 59
    1278:	0f 92       	push	r0
    127a:	8f 93       	push	r24
    127c:	ef 93       	push	r30
    127e:	ff 93       	push	r31
	// Set pin low
	PORTD_OUT &= ~PIN0_bm;
    1280:	e4 e6       	ldi	r30, 0x64	; 100
    1282:	f4 e0       	ldi	r31, 0x04	; 4
    1284:	80 81       	ld	r24, Z
    1286:	8e 7f       	andi	r24, 0xFE	; 254
    1288:	80 83       	st	Z, r24
	// Clear int flag
	TCA0_SINGLE_INTFLAGS = TCA_SINGLE_CMP0_bm;
    128a:	80 e1       	ldi	r24, 0x10	; 16
    128c:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__TEXT_REGION_LENGTH__+0x7e0a0b>
}
    1290:	ff 91       	pop	r31
    1292:	ef 91       	pop	r30
    1294:	8f 91       	pop	r24
    1296:	0f 90       	pop	r0
    1298:	0b be       	out	0x3b, r0	; 59
    129a:	0f 90       	pop	r0
    129c:	0f be       	out	0x3f, r0	; 63
    129e:	0f 90       	pop	r0
    12a0:	1f 90       	pop	r1
    12a2:	18 95       	reti

000012a4 <__vector_12>:

ISR(TCA0_CMP1_vect){
    12a4:	1f 92       	push	r1
    12a6:	0f 92       	push	r0
    12a8:	0f b6       	in	r0, 0x3f	; 63
    12aa:	0f 92       	push	r0
    12ac:	11 24       	eor	r1, r1
    12ae:	0b b6       	in	r0, 0x3b	; 59
    12b0:	0f 92       	push	r0
    12b2:	8f 93       	push	r24
    12b4:	ef 93       	push	r30
    12b6:	ff 93       	push	r31
	// Set pin low
	PORTD_OUT &= ~PIN1_bm;
    12b8:	e4 e6       	ldi	r30, 0x64	; 100
    12ba:	f4 e0       	ldi	r31, 0x04	; 4
    12bc:	80 81       	ld	r24, Z
    12be:	8d 7f       	andi	r24, 0xFD	; 253
    12c0:	80 83       	st	Z, r24
	// Clear int flag
	TCA0_SINGLE_INTFLAGS = TCA_SINGLE_CMP1_bm;
    12c2:	80 e2       	ldi	r24, 0x20	; 32
    12c4:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__TEXT_REGION_LENGTH__+0x7e0a0b>
}
    12c8:	ff 91       	pop	r31
    12ca:	ef 91       	pop	r30
    12cc:	8f 91       	pop	r24
    12ce:	0f 90       	pop	r0
    12d0:	0b be       	out	0x3b, r0	; 59
    12d2:	0f 90       	pop	r0
    12d4:	0f be       	out	0x3f, r0	; 63
    12d6:	0f 90       	pop	r0
    12d8:	1f 90       	pop	r1
    12da:	18 95       	reti

000012dc <__vector_13>:

ISR(TCA0_CMP2_vect){
    12dc:	1f 92       	push	r1
    12de:	0f 92       	push	r0
    12e0:	0f b6       	in	r0, 0x3f	; 63
    12e2:	0f 92       	push	r0
    12e4:	11 24       	eor	r1, r1
    12e6:	0b b6       	in	r0, 0x3b	; 59
    12e8:	0f 92       	push	r0
    12ea:	8f 93       	push	r24
    12ec:	ef 93       	push	r30
    12ee:	ff 93       	push	r31
	// Set pin low
	PORTD_OUT &= ~PIN2_bm;
    12f0:	e4 e6       	ldi	r30, 0x64	; 100
    12f2:	f4 e0       	ldi	r31, 0x04	; 4
    12f4:	80 81       	ld	r24, Z
    12f6:	8b 7f       	andi	r24, 0xFB	; 251
    12f8:	80 83       	st	Z, r24
	// Clear int flag
	TCA0_SINGLE_INTFLAGS = TCA_SINGLE_CMP2_bm;
    12fa:	80 e4       	ldi	r24, 0x40	; 64
    12fc:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__TEXT_REGION_LENGTH__+0x7e0a0b>
}
    1300:	ff 91       	pop	r31
    1302:	ef 91       	pop	r30
    1304:	8f 91       	pop	r24
    1306:	0f 90       	pop	r0
    1308:	0b be       	out	0x3b, r0	; 59
    130a:	0f 90       	pop	r0
    130c:	0f be       	out	0x3f, r0	; 63
    130e:	0f 90       	pop	r0
    1310:	1f 90       	pop	r1
    1312:	18 95       	reti

00001314 <__vector_49>:

ISR(TCA1_CMP0_vect){
    1314:	1f 92       	push	r1
    1316:	0f 92       	push	r0
    1318:	0f b6       	in	r0, 0x3f	; 63
    131a:	0f 92       	push	r0
    131c:	11 24       	eor	r1, r1
    131e:	0b b6       	in	r0, 0x3b	; 59
    1320:	0f 92       	push	r0
    1322:	8f 93       	push	r24
    1324:	ef 93       	push	r30
    1326:	ff 93       	push	r31
	// Set pin low
	PORTD_OUT &= ~PIN3_bm;
    1328:	e4 e6       	ldi	r30, 0x64	; 100
    132a:	f4 e0       	ldi	r31, 0x04	; 4
    132c:	80 81       	ld	r24, Z
    132e:	87 7f       	andi	r24, 0xF7	; 247
    1330:	80 83       	st	Z, r24
	// Clear int flag
	TCA1_SINGLE_INTFLAGS = TCA_SINGLE_CMP0_bm;
    1332:	80 e1       	ldi	r24, 0x10	; 16
    1334:	80 93 4b 0a 	sts	0x0A4B, r24	; 0x800a4b <__TEXT_REGION_LENGTH__+0x7e0a4b>
	// Only motor 4 uses TCA1, so disable timer
	TCA1_SINGLE_CTRLA &= ~TCA_SINGLE_ENABLE_bm;
    1338:	e0 e4       	ldi	r30, 0x40	; 64
    133a:	fa e0       	ldi	r31, 0x0A	; 10
    133c:	80 81       	ld	r24, Z
    133e:	8e 7f       	andi	r24, 0xFE	; 254
    1340:	80 83       	st	Z, r24
    1342:	ff 91       	pop	r31
    1344:	ef 91       	pop	r30
    1346:	8f 91       	pop	r24
    1348:	0f 90       	pop	r0
    134a:	0b be       	out	0x3b, r0	; 59
    134c:	0f 90       	pop	r0
    134e:	0f be       	out	0x3f, r0	; 63
    1350:	0f 90       	pop	r0
    1352:	1f 90       	pop	r1
    1354:	18 95       	reti

00001356 <Setup_Timers>:
	return Setup_Bitmask;
}

void Setup_Timers(){
	//-Setup Real Time Clock for keeping track of total run time-//
	RTC_CTRLA |= RTC_CORREN_bm | RTC_RTCEN_bm;
    1356:	e0 e4       	ldi	r30, 0x40	; 64
    1358:	f1 e0       	ldi	r31, 0x01	; 1
    135a:	80 81       	ld	r24, Z
    135c:	85 60       	ori	r24, 0x05	; 5
    135e:	80 83       	st	Z, r24
	RTC_INTCTRL |= RTC_CMP_bm;
    1360:	e2 e4       	ldi	r30, 0x42	; 66
    1362:	f1 e0       	ldi	r31, 0x01	; 1
    1364:	80 81       	ld	r24, Z
    1366:	82 60       	ori	r24, 0x02	; 2
    1368:	80 83       	st	Z, r24
	RTC_CMP = 32768;
    136a:	80 e0       	ldi	r24, 0x00	; 0
    136c:	90 e8       	ldi	r25, 0x80	; 128
    136e:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x7e014c>
    1372:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x7e014d>
	//----------------------------------------------------------//
	//--------Setup Timer/Counter A0 for output compare---------//
	// Is triggered every 10 ms, is used by:
	//  -> Motors
	TCA0_SINGLE_CTRLA |= TCA_SINGLE_CLKSEL_DIV8_gc;
    1376:	e0 e0       	ldi	r30, 0x00	; 0
    1378:	fa e0       	ldi	r31, 0x0A	; 10
    137a:	80 81       	ld	r24, Z
    137c:	86 60       	ori	r24, 0x06	; 6
    137e:	80 83       	st	Z, r24
	TCA0_SINGLE_INTCTRL |= TCA_SINGLE_CMP0_bm | TCA_SINGLE_CMP1_bm | TCA_SINGLE_CMP2_bm;
    1380:	ea e0       	ldi	r30, 0x0A	; 10
    1382:	fa e0       	ldi	r31, 0x0A	; 10
    1384:	80 81       	ld	r24, Z
    1386:	80 67       	ori	r24, 0x70	; 112
    1388:	80 83       	st	Z, r24
	TCA1_SINGLE_INTCTRL |= TCA_SINGLE_CMP0_bm;
    138a:	ea e4       	ldi	r30, 0x4A	; 74
    138c:	fa e0       	ldi	r31, 0x0A	; 10
    138e:	80 81       	ld	r24, Z
    1390:	80 61       	ori	r24, 0x10	; 16
    1392:	80 83       	st	Z, r24
	//  -> Motors running at 100 Hz
	//	-> Magnetometer running at 100 Hz
	//  -> Barometer running at 75 Hz
	//	-> Attitude observer running at 25 Hz
	//	-> Print statements, variable frequency
	TCB0_CTRLA |= TCB_ENABLE_bm | TCB_CLKSEL_DIV2_gc; // Enables timer, uses main clock with a prescaler of two
    1394:	e0 e0       	ldi	r30, 0x00	; 0
    1396:	fb e0       	ldi	r31, 0x0B	; 11
    1398:	80 81       	ld	r24, Z
    139a:	83 60       	ori	r24, 0x03	; 3
    139c:	80 83       	st	Z, r24
	TCB0_INTCTRL |= TCB_CAPT_bm; // Enables interrupt on capture
    139e:	e5 e0       	ldi	r30, 0x05	; 5
    13a0:	fb e0       	ldi	r31, 0x0B	; 11
    13a2:	80 81       	ld	r24, Z
    13a4:	81 60       	ori	r24, 0x01	; 1
    13a6:	80 83       	st	Z, r24
	TCB0_CCMP = 60000; // Value at which timer generates interrupt and resets
    13a8:	80 e6       	ldi	r24, 0x60	; 96
    13aa:	9a ee       	ldi	r25, 0xEA	; 234
    13ac:	80 93 0c 0b 	sts	0x0B0C, r24	; 0x800b0c <__TEXT_REGION_LENGTH__+0x7e0b0c>
    13b0:	90 93 0d 0b 	sts	0x0B0D, r25	; 0x800b0d <__TEXT_REGION_LENGTH__+0x7e0b0d>
	//--------------------------------------------------------//
	//-------Setup Timer/Counter B1 for output compare--------//
	// Generates an interrupt every 4.807 ms, is used by:
	//	-> IMU running at 208 Hz
	TCB1_CTRLA |= TCB_ENABLE_bm | TCB_CLKSEL_DIV2_gc;
    13b4:	e0 e1       	ldi	r30, 0x10	; 16
    13b6:	fb e0       	ldi	r31, 0x0B	; 11
    13b8:	80 81       	ld	r24, Z
    13ba:	83 60       	ori	r24, 0x03	; 3
    13bc:	80 83       	st	Z, r24
	TCB1_INTCTRL |= TCB_CAPT_bm;
    13be:	e5 e1       	ldi	r30, 0x15	; 21
    13c0:	fb e0       	ldi	r31, 0x0B	; 11
    13c2:	80 81       	ld	r24, Z
    13c4:	81 60       	ori	r24, 0x01	; 1
    13c6:	80 83       	st	Z, r24
	TCB1_CCMP = 57693;
    13c8:	8d e5       	ldi	r24, 0x5D	; 93
    13ca:	91 ee       	ldi	r25, 0xE1	; 225
    13cc:	80 93 1c 0b 	sts	0x0B1C, r24	; 0x800b1c <__TEXT_REGION_LENGTH__+0x7e0b1c>
    13d0:	90 93 1d 0b 	sts	0x0B1D, r25	; 0x800b1d <__TEXT_REGION_LENGTH__+0x7e0b1d>
    13d4:	08 95       	ret

000013d6 <Run>:
	//-------------------------------------------------------//
}

void Run(unsigned char Setup_Bitmask){
    13d6:	6f 92       	push	r6
    13d8:	7f 92       	push	r7
    13da:	8f 92       	push	r8
    13dc:	9f 92       	push	r9
    13de:	af 92       	push	r10
    13e0:	bf 92       	push	r11
    13e2:	cf 92       	push	r12
    13e4:	df 92       	push	r13
    13e6:	ef 92       	push	r14
    13e8:	ff 92       	push	r15
    13ea:	0f 93       	push	r16
    13ec:	1f 93       	push	r17
    13ee:	cf 93       	push	r28
    13f0:	df 93       	push	r29
    13f2:	cd b7       	in	r28, 0x3d	; 61
    13f4:	de b7       	in	r29, 0x3e	; 62
    13f6:	a3 97       	sbiw	r28, 0x23	; 35
    13f8:	cd bf       	out	0x3d, r28	; 61
    13fa:	de bf       	out	0x3e, r29	; 62
    13fc:	18 2f       	mov	r17, r24
	static unsigned char Navigation_Bitmask = 0;
	// This section handles all sensor timing and reading, will populate a bit mask of the sensor statuses for guidance and control functions
	// [7]		[6]		[5]		[4]		[3]		[2]		[1]		[0]
	//				           LoRa	    MAG		IMU		BAR		GPS

	if (g_GPS_Read_Flag){
    13fe:	80 91 cb 4b 	lds	r24, 0x4BCB	; 0x804bcb <g_GPS_Read_Flag>
    1402:	88 23       	and	r24, r24
    1404:	91 f0       	breq	.+36     	; 0x142a <Run+0x54>
		g_GPS_Read_Flag = 0;
    1406:	10 92 cb 4b 	sts	0x4BCB, r1	; 0x804bcb <g_GPS_Read_Flag>
		unsigned char GPS_status = Read_GPS(&Drone);
    140a:	89 e1       	ldi	r24, 0x19	; 25
    140c:	9a e4       	ldi	r25, 0x4A	; 74
    140e:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <Read_GPS>
		Navigation_Bitmask = SET_BIT(Navigation_Bitmask, NAV_GPS_bp, GPS_status);
    1412:	81 11       	cpse	r24, r1
    1414:	05 c0       	rjmp	.+10     	; 0x1420 <Run+0x4a>
    1416:	80 95       	com	r24
    1418:	90 91 18 4a 	lds	r25, 0x4A18	; 0x804a18 <Navigation_Bitmask.4868>
    141c:	89 23       	and	r24, r25
    141e:	03 c0       	rjmp	.+6      	; 0x1426 <Run+0x50>
    1420:	90 91 18 4a 	lds	r25, 0x4A18	; 0x804a18 <Navigation_Bitmask.4868>
    1424:	89 2b       	or	r24, r25
    1426:	80 93 18 4a 	sts	0x4A18, r24	; 0x804a18 <Navigation_Bitmask.4868>
	}
	
	if (g_BAR_Read_Flag >= 3){
    142a:	80 91 7d 4a 	lds	r24, 0x4A7D	; 0x804a7d <g_BAR_Read_Flag>
    142e:	83 30       	cpi	r24, 0x03	; 3
    1430:	b0 f0       	brcs	.+44     	; 0x145e <Run+0x88>
		g_BAR_Read_Flag = 0;
    1432:	10 92 7d 4a 	sts	0x4A7D, r1	; 0x804a7d <g_BAR_Read_Flag>
		unsigned char BAR_status = Read_Bar(&Drone);
    1436:	89 e1       	ldi	r24, 0x19	; 25
    1438:	9a e4       	ldi	r25, 0x4A	; 74
    143a:	0e 94 b1 0c 	call	0x1962	; 0x1962 <Read_Bar>
		Navigation_Bitmask = SET_BIT(Navigation_Bitmask, NAV_BAR_bp, BAR_status);
    143e:	81 11       	cpse	r24, r1
    1440:	06 c0       	rjmp	.+12     	; 0x144e <Run+0x78>
    1442:	88 0f       	add	r24, r24
    1444:	80 95       	com	r24
    1446:	90 91 18 4a 	lds	r25, 0x4A18	; 0x804a18 <Navigation_Bitmask.4868>
    144a:	89 23       	and	r24, r25
    144c:	06 c0       	rjmp	.+12     	; 0x145a <Run+0x84>
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	88 0f       	add	r24, r24
    1452:	99 1f       	adc	r25, r25
    1454:	90 91 18 4a 	lds	r25, 0x4A18	; 0x804a18 <Navigation_Bitmask.4868>
    1458:	89 2b       	or	r24, r25
    145a:	80 93 18 4a 	sts	0x4A18, r24	; 0x804a18 <Navigation_Bitmask.4868>
	}
	
	if (g_MAG_Read_Flag >= 2){
    145e:	80 91 7e 4a 	lds	r24, 0x4A7E	; 0x804a7e <g_MAG_Read_Flag>
    1462:	82 30       	cpi	r24, 0x02	; 2
    1464:	e0 f0       	brcs	.+56     	; 0x149e <Run+0xc8>
		g_MAG_Read_Flag = 0;
    1466:	10 92 7e 4a 	sts	0x4A7E, r1	; 0x804a7e <g_MAG_Read_Flag>
		unsigned char MAG_status = Read_Mag(&Drone);
    146a:	89 e1       	ldi	r24, 0x19	; 25
    146c:	9a e4       	ldi	r25, 0x4A	; 74
    146e:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <Read_Mag>
		Navigation_Bitmask = SET_BIT(Navigation_Bitmask, NAV_MAG_bp, MAG_status);
    1472:	81 11       	cpse	r24, r1
    1474:	08 c0       	rjmp	.+16     	; 0x1486 <Run+0xb0>
    1476:	88 0f       	add	r24, r24
    1478:	88 0f       	add	r24, r24
    147a:	88 0f       	add	r24, r24
    147c:	80 95       	com	r24
    147e:	90 91 18 4a 	lds	r25, 0x4A18	; 0x804a18 <Navigation_Bitmask.4868>
    1482:	89 23       	and	r24, r25
    1484:	0a c0       	rjmp	.+20     	; 0x149a <Run+0xc4>
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	88 0f       	add	r24, r24
    148a:	99 1f       	adc	r25, r25
    148c:	88 0f       	add	r24, r24
    148e:	99 1f       	adc	r25, r25
    1490:	88 0f       	add	r24, r24
    1492:	99 1f       	adc	r25, r25
    1494:	90 91 18 4a 	lds	r25, 0x4A18	; 0x804a18 <Navigation_Bitmask.4868>
    1498:	89 2b       	or	r24, r25
    149a:	80 93 18 4a 	sts	0x4A18, r24	; 0x804a18 <Navigation_Bitmask.4868>
	}
	
	if (g_IMU_Read_Flag){
    149e:	80 91 7a 4a 	lds	r24, 0x4A7A	; 0x804a7a <g_IMU_Read_Flag>
    14a2:	88 23       	and	r24, r24
    14a4:	c9 f0       	breq	.+50     	; 0x14d8 <Run+0x102>
		g_IMU_Read_Flag = 0;
    14a6:	10 92 7a 4a 	sts	0x4A7A, r1	; 0x804a7a <g_IMU_Read_Flag>
		unsigned char IMU_status = Read_IMU(&Drone);
    14aa:	89 e1       	ldi	r24, 0x19	; 25
    14ac:	9a e4       	ldi	r25, 0x4A	; 74
    14ae:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <Read_IMU>
		Navigation_Bitmask = SET_BIT(Navigation_Bitmask, NAV_IMU_bp, IMU_status);
    14b2:	81 11       	cpse	r24, r1
    14b4:	07 c0       	rjmp	.+14     	; 0x14c4 <Run+0xee>
    14b6:	88 0f       	add	r24, r24
    14b8:	88 0f       	add	r24, r24
    14ba:	80 95       	com	r24
    14bc:	90 91 18 4a 	lds	r25, 0x4A18	; 0x804a18 <Navigation_Bitmask.4868>
    14c0:	89 23       	and	r24, r25
    14c2:	08 c0       	rjmp	.+16     	; 0x14d4 <Run+0xfe>
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	88 0f       	add	r24, r24
    14c8:	99 1f       	adc	r25, r25
    14ca:	88 0f       	add	r24, r24
    14cc:	99 1f       	adc	r25, r25
    14ce:	90 91 18 4a 	lds	r25, 0x4A18	; 0x804a18 <Navigation_Bitmask.4868>
    14d2:	89 2b       	or	r24, r25
    14d4:	80 93 18 4a 	sts	0x4A18, r24	; 0x804a18 <Navigation_Bitmask.4868>
	}
	
	if (g_Attitude_Observer_Run_Flag >= 8){
    14d8:	80 91 7c 4a 	lds	r24, 0x4A7C	; 0x804a7c <g_Attitude_Observer_Run_Flag>
    14dc:	88 30       	cpi	r24, 0x08	; 8
    14de:	30 f0       	brcs	.+12     	; 0x14ec <Run+0x116>
		g_Attitude_Observer_Run_Flag = 0;
    14e0:	10 92 7c 4a 	sts	0x4A7C, r1	; 0x804a7c <g_Attitude_Observer_Run_Flag>
		Observer(&Drone);
    14e4:	89 e1       	ldi	r24, 0x19	; 25
    14e6:	9a e4       	ldi	r25, 0x4A	; 74
    14e8:	0e 94 44 1a 	call	0x3488	; 0x3488 <Observer>
	}
	
	if (g_LoRa_Flag >= 20){
    14ec:	80 91 79 4a 	lds	r24, 0x4A79	; 0x804a79 <g_LoRa_Flag>
    14f0:	84 31       	cpi	r24, 0x14	; 20
    14f2:	38 f1       	brcs	.+78     	; 0x1542 <Run+0x16c>
		g_LoRa_Flag = 0;
    14f4:	10 92 79 4a 	sts	0x4A79, r1	; 0x804a79 <g_LoRa_Flag>
		unsigned int motor_throttle = Read_LoRa(&Reference);
    14f8:	8c eb       	ldi	r24, 0xBC	; 188
    14fa:	99 e4       	ldi	r25, 0x49	; 73
    14fc:	0e 94 2d 04 	call	0x85a	; 0x85a <Read_LoRa>
		motor_throttles[3] = motor_throttle;
    1500:	e4 eb       	ldi	r30, 0xB4	; 180
    1502:	f9 e4       	ldi	r31, 0x49	; 73
    1504:	86 83       	std	Z+6, r24	; 0x06
    1506:	97 83       	std	Z+7, r25	; 0x07
		char buffer3[15] = {0};
    1508:	2f e0       	ldi	r18, 0x0F	; 15
    150a:	ae 01       	movw	r20, r28
    150c:	4f 5f       	subi	r20, 0xFF	; 255
    150e:	5f 4f       	sbci	r21, 0xFF	; 255
    1510:	7a 01       	movw	r14, r20
    1512:	fa 01       	movw	r30, r20
    1514:	32 2f       	mov	r19, r18
    1516:	11 92       	st	Z+, r1
    1518:	3a 95       	dec	r19
    151a:	e9 f7       	brne	.-6      	; 0x1516 <Run+0x140>
		unsigned char length_to_print = snprintf(buffer3, sizeof(buffer3), "%d", motor_throttle);
    151c:	9f 93       	push	r25
    151e:	8f 93       	push	r24
    1520:	86 ed       	ldi	r24, 0xD6	; 214
    1522:	91 e4       	ldi	r25, 0x41	; 65
    1524:	9f 93       	push	r25
    1526:	8f 93       	push	r24
    1528:	1f 92       	push	r1
    152a:	2f 93       	push	r18
    152c:	5f 93       	push	r21
    152e:	4f 93       	push	r20
    1530:	0e 94 58 2a 	call	0x54b0	; 0x54b0 <snprintf>
		Print_Page(3, buffer3, length_to_print);
    1534:	48 2f       	mov	r20, r24
    1536:	b7 01       	movw	r22, r14
    1538:	83 e0       	ldi	r24, 0x03	; 3
    153a:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <Print_Page>
    153e:	cd bf       	out	0x3d, r28	; 61
    1540:	de bf       	out	0x3e, r29	; 62
		//Navigation_Bitmask = SET_BIT(Navigation_Bitmask, NAV_LORA_bp, LoRa_status);
	}
	
	if ((g_Print_Flag >= 50)&&(Setup_Bitmask & (1<<SU_SSD_bp))){
    1542:	80 91 7b 4a 	lds	r24, 0x4A7B	; 0x804a7b <g_Print_Flag>
    1546:	82 33       	cpi	r24, 0x32	; 50
    1548:	08 f4       	brcc	.+2      	; 0x154c <Run+0x176>
    154a:	73 c0       	rjmp	.+230    	; 0x1632 <Run+0x25c>
    154c:	15 ff       	sbrs	r17, 5
    154e:	71 c0       	rjmp	.+226    	; 0x1632 <Run+0x25c>
		g_Print_Flag = 0;
    1550:	10 92 7b 4a 	sts	0x4A7B, r1	; 0x804a7b <g_Print_Flag>
		char buffer0[10] = {0};
    1554:	0f 2e       	mov	r0, r31
    1556:	fa e0       	ldi	r31, 0x0A	; 10
    1558:	7f 2e       	mov	r7, r31
    155a:	f0 2d       	mov	r31, r0
    155c:	5e 01       	movw	r10, r28
    155e:	5a e1       	ldi	r21, 0x1A	; 26
    1560:	a5 0e       	add	r10, r21
    1562:	b1 1c       	adc	r11, r1
    1564:	f5 01       	movw	r30, r10
    1566:	37 2d       	mov	r19, r7
    1568:	11 92       	st	Z+, r1
    156a:	3a 95       	dec	r19
    156c:	e9 f7       	brne	.-6      	; 0x1568 <Run+0x192>
		char buffer1[10] = {0};
    156e:	6e 01       	movw	r12, r28
    1570:	40 e1       	ldi	r20, 0x10	; 16
    1572:	c4 0e       	add	r12, r20
    1574:	d1 1c       	adc	r13, r1
    1576:	f6 01       	movw	r30, r12
    1578:	37 2d       	mov	r19, r7
    157a:	11 92       	st	Z+, r1
    157c:	3a 95       	dec	r19
    157e:	e9 f7       	brne	.-6      	; 0x157a <Run+0x1a4>
		char buffer2[15] = {0};
    1580:	0f 2e       	mov	r0, r31
    1582:	ff e0       	ldi	r31, 0x0F	; 15
    1584:	6f 2e       	mov	r6, r31
    1586:	f0 2d       	mov	r31, r0
    1588:	ae 01       	movw	r20, r28
    158a:	4f 5f       	subi	r20, 0xFF	; 255
    158c:	5f 4f       	sbci	r21, 0xFF	; 255
    158e:	4a 01       	movw	r8, r20
    1590:	fa 01       	movw	r30, r20
    1592:	36 2d       	mov	r19, r6
    1594:	11 92       	st	Z+, r1
    1596:	3a 95       	dec	r19
    1598:	e9 f7       	brne	.-6      	; 0x1594 <Run+0x1be>
		unsigned char length_to_print = snprintf(buffer0, sizeof(buffer0), "%3.2f", Drone.Euler[0]);
    159a:	09 e1       	ldi	r16, 0x19	; 25
    159c:	1a e4       	ldi	r17, 0x4A	; 74
    159e:	f8 01       	movw	r30, r16
    15a0:	84 a1       	ldd	r24, Z+36	; 0x24
    15a2:	95 a1       	ldd	r25, Z+37	; 0x25
    15a4:	26 a1       	ldd	r18, Z+38	; 0x26
    15a6:	37 a1       	ldd	r19, Z+39	; 0x27
    15a8:	3f 93       	push	r19
    15aa:	2f 93       	push	r18
    15ac:	9f 93       	push	r25
    15ae:	8f 93       	push	r24
    15b0:	0f 2e       	mov	r0, r31
    15b2:	f9 ed       	ldi	r31, 0xD9	; 217
    15b4:	ef 2e       	mov	r14, r31
    15b6:	f1 e4       	ldi	r31, 0x41	; 65
    15b8:	ff 2e       	mov	r15, r31
    15ba:	f0 2d       	mov	r31, r0
    15bc:	ff 92       	push	r15
    15be:	ef 92       	push	r14
    15c0:	1f 92       	push	r1
    15c2:	7f 92       	push	r7
    15c4:	bf 92       	push	r11
    15c6:	af 92       	push	r10
    15c8:	0e 94 58 2a 	call	0x54b0	; 0x54b0 <snprintf>
		Print_Page(0, buffer0, length_to_print);
    15cc:	48 2f       	mov	r20, r24
    15ce:	b5 01       	movw	r22, r10
    15d0:	80 e0       	ldi	r24, 0x00	; 0
    15d2:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <Print_Page>
		length_to_print = snprintf(buffer1, sizeof(buffer1), "%3.2f", Drone.Euler[1]);
    15d6:	f8 01       	movw	r30, r16
    15d8:	80 a5       	ldd	r24, Z+40	; 0x28
    15da:	91 a5       	ldd	r25, Z+41	; 0x29
    15dc:	22 a5       	ldd	r18, Z+42	; 0x2a
    15de:	33 a5       	ldd	r19, Z+43	; 0x2b
    15e0:	3f 93       	push	r19
    15e2:	2f 93       	push	r18
    15e4:	9f 93       	push	r25
    15e6:	8f 93       	push	r24
    15e8:	ff 92       	push	r15
    15ea:	ef 92       	push	r14
    15ec:	1f 92       	push	r1
    15ee:	7f 92       	push	r7
    15f0:	df 92       	push	r13
    15f2:	cf 92       	push	r12
    15f4:	0e 94 58 2a 	call	0x54b0	; 0x54b0 <snprintf>
		Print_Page(1, buffer1, length_to_print);
    15f8:	48 2f       	mov	r20, r24
    15fa:	b6 01       	movw	r22, r12
    15fc:	81 e0       	ldi	r24, 0x01	; 1
    15fe:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <Print_Page>
		length_to_print = snprintf(buffer2, sizeof(buffer2), "%3.2f", Drone.Euler[2]);
    1602:	f8 01       	movw	r30, r16
    1604:	84 a5       	ldd	r24, Z+44	; 0x2c
    1606:	95 a5       	ldd	r25, Z+45	; 0x2d
    1608:	26 a5       	ldd	r18, Z+46	; 0x2e
    160a:	37 a5       	ldd	r19, Z+47	; 0x2f
    160c:	3f 93       	push	r19
    160e:	2f 93       	push	r18
    1610:	9f 93       	push	r25
    1612:	8f 93       	push	r24
    1614:	ff 92       	push	r15
    1616:	ef 92       	push	r14
    1618:	1f 92       	push	r1
    161a:	6f 92       	push	r6
    161c:	9f 92       	push	r9
    161e:	8f 92       	push	r8
    1620:	0e 94 58 2a 	call	0x54b0	; 0x54b0 <snprintf>
		Print_Page(2, buffer2, length_to_print);
    1624:	48 2f       	mov	r20, r24
    1626:	b4 01       	movw	r22, r8
    1628:	82 e0       	ldi	r24, 0x02	; 2
    162a:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <Print_Page>
    162e:	cd bf       	out	0x3d, r28	; 61
    1630:	de bf       	out	0x3e, r29	; 62
		
	}
	
	// CONTROL //
	//if (Navigation_Bitmask & NAV_SENSORS_bm){
		if (g_Motor_Run_Flag >= 2){
    1632:	80 91 7f 4a 	lds	r24, 0x4A7F	; 0x804a7f <g_Motor_Run_Flag>
    1636:	82 30       	cpi	r24, 0x02	; 2
    1638:	30 f0       	brcs	.+12     	; 0x1646 <Run+0x270>
			g_Motor_Run_Flag = 0;
    163a:	10 92 7f 4a 	sts	0x4A7F, r1	; 0x804a7f <g_Motor_Run_Flag>
			Run_Motors(motor_throttles);
    163e:	84 eb       	ldi	r24, 0xB4	; 180
    1640:	99 e4       	ldi	r25, 0x49	; 73
    1642:	0e 94 a5 08 	call	0x114a	; 0x114a <Run_Motors>
		}
	//}
}
    1646:	a3 96       	adiw	r28, 0x23	; 35
    1648:	cd bf       	out	0x3d, r28	; 61
    164a:	de bf       	out	0x3e, r29	; 62
    164c:	df 91       	pop	r29
    164e:	cf 91       	pop	r28
    1650:	1f 91       	pop	r17
    1652:	0f 91       	pop	r16
    1654:	ff 90       	pop	r15
    1656:	ef 90       	pop	r14
    1658:	df 90       	pop	r13
    165a:	cf 90       	pop	r12
    165c:	bf 90       	pop	r11
    165e:	af 90       	pop	r10
    1660:	9f 90       	pop	r9
    1662:	8f 90       	pop	r8
    1664:	7f 90       	pop	r7
    1666:	6f 90       	pop	r6
    1668:	08 95       	ret

0000166a <Delay>:

void Delay(unsigned long long length){
    166a:	5f 92       	push	r5
    166c:	6f 92       	push	r6
    166e:	7f 92       	push	r7
    1670:	8f 92       	push	r8
    1672:	9f 92       	push	r9
    1674:	af 92       	push	r10
    1676:	bf 92       	push	r11
    1678:	cf 92       	push	r12
    167a:	df 92       	push	r13
    167c:	ef 92       	push	r14
    167e:	ff 92       	push	r15
    1680:	0f 93       	push	r16
    1682:	1f 93       	push	r17
    1684:	cf 93       	push	r28
    1686:	df 93       	push	r29
    1688:	cd b7       	in	r28, 0x3d	; 61
    168a:	de b7       	in	r29, 0x3e	; 62
    168c:	28 97       	sbiw	r28, 0x08	; 8
    168e:	cd bf       	out	0x3d, r28	; 61
    1690:	de bf       	out	0x3e, r29	; 62
    1692:	52 2e       	mov	r5, r18
    1694:	63 2e       	mov	r6, r19
    1696:	74 2e       	mov	r7, r20
    1698:	85 2e       	mov	r8, r21
    169a:	96 2e       	mov	r9, r22
    169c:	b7 2f       	mov	r27, r23
    169e:	f8 2f       	mov	r31, r24
    16a0:	e9 2f       	mov	r30, r25
	volatile unsigned long long i = 0;
    16a2:	19 82       	std	Y+1, r1	; 0x01
    16a4:	1a 82       	std	Y+2, r1	; 0x02
    16a6:	1b 82       	std	Y+3, r1	; 0x03
    16a8:	1c 82       	std	Y+4, r1	; 0x04
    16aa:	1d 82       	std	Y+5, r1	; 0x05
    16ac:	1e 82       	std	Y+6, r1	; 0x06
    16ae:	1f 82       	std	Y+7, r1	; 0x07
    16b0:	18 86       	std	Y+8, r1	; 0x08
	while (++i<length);
    16b2:	29 81       	ldd	r18, Y+1	; 0x01
    16b4:	3a 81       	ldd	r19, Y+2	; 0x02
    16b6:	4b 81       	ldd	r20, Y+3	; 0x03
    16b8:	5c 81       	ldd	r21, Y+4	; 0x04
    16ba:	6d 81       	ldd	r22, Y+5	; 0x05
    16bc:	7e 81       	ldd	r23, Y+6	; 0x06
    16be:	8f 81       	ldd	r24, Y+7	; 0x07
    16c0:	98 85       	ldd	r25, Y+8	; 0x08
    16c2:	a1 e0       	ldi	r26, 0x01	; 1
    16c4:	0e 94 0a 26 	call	0x4c14	; 0x4c14 <__adddi3_s8>
    16c8:	29 83       	std	Y+1, r18	; 0x01
    16ca:	3a 83       	std	Y+2, r19	; 0x02
    16cc:	4b 83       	std	Y+3, r20	; 0x03
    16ce:	5c 83       	std	Y+4, r21	; 0x04
    16d0:	6d 83       	std	Y+5, r22	; 0x05
    16d2:	7e 83       	std	Y+6, r23	; 0x06
    16d4:	8f 83       	std	Y+7, r24	; 0x07
    16d6:	98 87       	std	Y+8, r25	; 0x08
    16d8:	a5 2c       	mov	r10, r5
    16da:	b6 2c       	mov	r11, r6
    16dc:	c7 2c       	mov	r12, r7
    16de:	d8 2c       	mov	r13, r8
    16e0:	e9 2c       	mov	r14, r9
    16e2:	fb 2e       	mov	r15, r27
    16e4:	0f 2f       	mov	r16, r31
    16e6:	1e 2f       	mov	r17, r30
    16e8:	0e 94 16 26 	call	0x4c2c	; 0x4c2c <__cmpdi2>
    16ec:	10 f3       	brcs	.-60     	; 0x16b2 <Delay+0x48>
}
    16ee:	28 96       	adiw	r28, 0x08	; 8
    16f0:	cd bf       	out	0x3d, r28	; 61
    16f2:	de bf       	out	0x3e, r29	; 62
    16f4:	df 91       	pop	r29
    16f6:	cf 91       	pop	r28
    16f8:	1f 91       	pop	r17
    16fa:	0f 91       	pop	r16
    16fc:	ff 90       	pop	r15
    16fe:	ef 90       	pop	r14
    1700:	df 90       	pop	r13
    1702:	cf 90       	pop	r12
    1704:	bf 90       	pop	r11
    1706:	af 90       	pop	r10
    1708:	9f 90       	pop	r9
    170a:	8f 90       	pop	r8
    170c:	7f 90       	pop	r7
    170e:	6f 90       	pop	r6
    1710:	5f 90       	pop	r5
    1712:	08 95       	ret

00001714 <Setup>:
	return 0;
}

// Function Definitions

unsigned char Setup(){
    1714:	ff 92       	push	r15
    1716:	0f 93       	push	r16
    1718:	1f 93       	push	r17
    171a:	cf 93       	push	r28
    171c:	df 93       	push	r29
	if (RSTCTRL_RSTFR & RSTCTRL_PORF_bm){Delay(100000);} // Necessary to stabilize IC's on a cold start
    171e:	80 91 40 00 	lds	r24, 0x0040	; 0x800040 <__TEXT_REGION_LENGTH__+0x7e0040>
    1722:	80 ff       	sbrs	r24, 0
    1724:	0a c0       	rjmp	.+20     	; 0x173a <Setup+0x26>
    1726:	20 ea       	ldi	r18, 0xA0	; 160
    1728:	36 e8       	ldi	r19, 0x86	; 134
    172a:	41 e0       	ldi	r20, 0x01	; 1
    172c:	50 e0       	ldi	r21, 0x00	; 0
    172e:	60 e0       	ldi	r22, 0x00	; 0
    1730:	70 e0       	ldi	r23, 0x00	; 0
    1732:	80 e0       	ldi	r24, 0x00	; 0
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	0e 94 35 0b 	call	0x166a	; 0x166a <Delay>
	unsigned char Setup_Bitmask = 0;
	// [7]		[6]		[5]		[4]		[3]		[2]		[1]		[0]
	//					SSD	   LoRa	    MAG		IMU		BAR		GPS
	
	_PROTECTED_WRITE (CLKCTRL_OSCHFCTRLA, CLKCTRL_FRQSEL_24M_gc); // Sets CPU clock to 24 MHz
    173a:	94 e2       	ldi	r25, 0x24	; 36
    173c:	88 ed       	ldi	r24, 0xD8	; 216
    173e:	84 bf       	out	0x34, r24	; 52
    1740:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
	while(!(CLKCTRL_MCLKSTATUS & CLKCTRL_OSCHFS_bm)); // Wait for clock to stabilize
    1744:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
    1748:	81 ff       	sbrs	r24, 1
    174a:	fc cf       	rjmp	.-8      	; 0x1744 <Setup+0x30>
	unsigned char GPS_setup_status = Setup_GPS();
    174c:	0e 94 4d 18 	call	0x309a	; 0x309a <Setup_GPS>
    1750:	08 2f       	mov	r16, r24
	Setup_SPI();
    1752:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <Setup_SPI>
	Setup_TWI();
    1756:	0e 94 39 03 	call	0x672	; 0x672 <Setup_TWI>
	unsigned char LoRa_setup_status = Setup_LoRa();
    175a:	0e 94 e6 03 	call	0x7cc	; 0x7cc <Setup_LoRa>
    175e:	f8 2e       	mov	r15, r24
	unsigned char MAG_setup_status = Setup_Mag();
    1760:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <Setup_Mag>
    1764:	c8 2f       	mov	r28, r24
	unsigned char IMU_setup_status = Setup_IMU();
    1766:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <Setup_IMU>
    176a:	d8 2f       	mov	r29, r24
	unsigned char BAR_setup_status = Setup_Bar();
    176c:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <Setup_Bar>
    1770:	18 2f       	mov	r17, r24
	unsigned char SSD_setup_status = Setup_SSD();
    1772:	0e 94 03 07 	call	0xe06	; 0xe06 <Setup_SSD>
	Setup_Bitmask |= (GPS_setup_status<<NAV_GPS_bp) | (BAR_setup_status<<NAV_BAR_bp) | (IMU_setup_status<<NAV_IMU_bp) | (MAG_setup_status<<NAV_MAG_bp)
    1776:	61 2f       	mov	r22, r17
    1778:	70 e0       	ldi	r23, 0x00	; 0
    177a:	66 0f       	add	r22, r22
    177c:	77 1f       	adc	r23, r23
    177e:	4d 2f       	mov	r20, r29
    1780:	50 e0       	ldi	r21, 0x00	; 0
    1782:	44 0f       	add	r20, r20
    1784:	55 1f       	adc	r21, r21
    1786:	44 0f       	add	r20, r20
    1788:	55 1f       	adc	r21, r21
    178a:	2c 2f       	mov	r18, r28
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	22 0f       	add	r18, r18
    1790:	33 1f       	adc	r19, r19
    1792:	22 0f       	add	r18, r18
    1794:	33 1f       	adc	r19, r19
    1796:	22 0f       	add	r18, r18
    1798:	33 1f       	adc	r19, r19
					 | (LoRa_setup_status<<NAV_LORA_bp) | (SSD_setup_status<<SU_SSD_bp);
    179a:	90 e1       	ldi	r25, 0x10	; 16
    179c:	f9 9e       	mul	r15, r25
    179e:	f0 01       	movw	r30, r0
    17a0:	11 24       	eor	r1, r1
    17a2:	a0 e2       	ldi	r26, 0x20	; 32
    17a4:	8a 9f       	mul	r24, r26
    17a6:	c0 01       	movw	r24, r0
    17a8:	11 24       	eor	r1, r1
	unsigned char LoRa_setup_status = Setup_LoRa();
	unsigned char MAG_setup_status = Setup_Mag();
	unsigned char IMU_setup_status = Setup_IMU();
	unsigned char BAR_setup_status = Setup_Bar();
	unsigned char SSD_setup_status = Setup_SSD();
	Setup_Bitmask |= (GPS_setup_status<<NAV_GPS_bp) | (BAR_setup_status<<NAV_BAR_bp) | (IMU_setup_status<<NAV_IMU_bp) | (MAG_setup_status<<NAV_MAG_bp)
    17aa:	60 2b       	or	r22, r16
    17ac:	46 2b       	or	r20, r22
    17ae:	24 2b       	or	r18, r20
    17b0:	2e 2b       	or	r18, r30
    17b2:	c2 2f       	mov	r28, r18
    17b4:	c8 2b       	or	r28, r24
					 | (LoRa_setup_status<<NAV_LORA_bp) | (SSD_setup_status<<SU_SSD_bp);
	Setup_Timers();
    17b6:	0e 94 ab 09 	call	0x1356	; 0x1356 <Setup_Timers>
	sei();
    17ba:	78 94       	sei
	return Setup_Bitmask;
}
    17bc:	8c 2f       	mov	r24, r28
    17be:	df 91       	pop	r29
    17c0:	cf 91       	pop	r28
    17c2:	1f 91       	pop	r17
    17c4:	0f 91       	pop	r16
    17c6:	ff 90       	pop	r15
    17c8:	08 95       	ret

000017ca <main>:
volatile unsigned int
	g_esc_current = 0;
volatile unsigned long 
	g_seconds = 0;

int main(){
    17ca:	cf 93       	push	r28
	unsigned char Setup_Bitmask = Setup();
    17cc:	0e 94 8a 0b 	call	0x1714	; 0x1714 <Setup>
    17d0:	c8 2f       	mov	r28, r24
	if ((Setup_Bitmask & NAV_SENSORS_bm) == NAV_SENSORS_bm){
    17d2:	8f 71       	andi	r24, 0x1F	; 31
    17d4:	8f 31       	cpi	r24, 0x1F	; 31
    17d6:	21 f4       	brne	.+8      	; 0x17e0 <main+0x16>
		while(1){
			Run(Setup_Bitmask);
    17d8:	8c 2f       	mov	r24, r28
    17da:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <Run>
    17de:	fc cf       	rjmp	.-8      	; 0x17d8 <main+0xe>
		}
	}
	
	return 0;
}
    17e0:	80 e0       	ldi	r24, 0x00	; 0
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	cf 91       	pop	r28
    17e6:	08 95       	ret

000017e8 <__vector_5>:
void Delay(unsigned long long length){
	volatile unsigned long long i = 0;
	while (++i<length);
}

ISR(RTC_CNT_vect){
    17e8:	1f 92       	push	r1
    17ea:	0f 92       	push	r0
    17ec:	0f b6       	in	r0, 0x3f	; 63
    17ee:	0f 92       	push	r0
    17f0:	11 24       	eor	r1, r1
    17f2:	8f 93       	push	r24
    17f4:	9f 93       	push	r25
    17f6:	af 93       	push	r26
    17f8:	bf 93       	push	r27
	++g_seconds;
    17fa:	80 91 75 4a 	lds	r24, 0x4A75	; 0x804a75 <g_seconds>
    17fe:	90 91 76 4a 	lds	r25, 0x4A76	; 0x804a76 <g_seconds+0x1>
    1802:	a0 91 77 4a 	lds	r26, 0x4A77	; 0x804a77 <g_seconds+0x2>
    1806:	b0 91 78 4a 	lds	r27, 0x4A78	; 0x804a78 <g_seconds+0x3>
    180a:	01 96       	adiw	r24, 0x01	; 1
    180c:	a1 1d       	adc	r26, r1
    180e:	b1 1d       	adc	r27, r1
    1810:	80 93 75 4a 	sts	0x4A75, r24	; 0x804a75 <g_seconds>
    1814:	90 93 76 4a 	sts	0x4A76, r25	; 0x804a76 <g_seconds+0x1>
    1818:	a0 93 77 4a 	sts	0x4A77, r26	; 0x804a77 <g_seconds+0x2>
    181c:	b0 93 78 4a 	sts	0x4A78, r27	; 0x804a78 <g_seconds+0x3>
	//++g_LoRa_Flag;
	RTC_INTFLAGS = RTC_CMP_bm;
    1820:	82 e0       	ldi	r24, 0x02	; 2
    1822:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x7e0143>
}
    1826:	bf 91       	pop	r27
    1828:	af 91       	pop	r26
    182a:	9f 91       	pop	r25
    182c:	8f 91       	pop	r24
    182e:	0f 90       	pop	r0
    1830:	0f be       	out	0x3f, r0	; 63
    1832:	0f 90       	pop	r0
    1834:	1f 90       	pop	r1
    1836:	18 95       	reti

00001838 <__vector_14>:

ISR(TCB0_INT_vect){
    1838:	1f 92       	push	r1
    183a:	0f 92       	push	r0
    183c:	0f b6       	in	r0, 0x3f	; 63
    183e:	0f 92       	push	r0
    1840:	11 24       	eor	r1, r1
    1842:	8f 93       	push	r24
	++g_LoRa_Flag;
    1844:	80 91 79 4a 	lds	r24, 0x4A79	; 0x804a79 <g_LoRa_Flag>
    1848:	8f 5f       	subi	r24, 0xFF	; 255
    184a:	80 93 79 4a 	sts	0x4A79, r24	; 0x804a79 <g_LoRa_Flag>
	++g_Motor_Run_Flag;
    184e:	80 91 7f 4a 	lds	r24, 0x4A7F	; 0x804a7f <g_Motor_Run_Flag>
    1852:	8f 5f       	subi	r24, 0xFF	; 255
    1854:	80 93 7f 4a 	sts	0x4A7F, r24	; 0x804a7f <g_Motor_Run_Flag>
	++g_Print_Flag;
    1858:	80 91 7b 4a 	lds	r24, 0x4A7B	; 0x804a7b <g_Print_Flag>
    185c:	8f 5f       	subi	r24, 0xFF	; 255
    185e:	80 93 7b 4a 	sts	0x4A7B, r24	; 0x804a7b <g_Print_Flag>
	++g_BAR_Read_Flag;
    1862:	80 91 7d 4a 	lds	r24, 0x4A7D	; 0x804a7d <g_BAR_Read_Flag>
    1866:	8f 5f       	subi	r24, 0xFF	; 255
    1868:	80 93 7d 4a 	sts	0x4A7D, r24	; 0x804a7d <g_BAR_Read_Flag>
	++g_Attitude_Observer_Run_Flag;
    186c:	80 91 7c 4a 	lds	r24, 0x4A7C	; 0x804a7c <g_Attitude_Observer_Run_Flag>
    1870:	8f 5f       	subi	r24, 0xFF	; 255
    1872:	80 93 7c 4a 	sts	0x4A7C, r24	; 0x804a7c <g_Attitude_Observer_Run_Flag>
	++g_MAG_Read_Flag;
    1876:	80 91 7e 4a 	lds	r24, 0x4A7E	; 0x804a7e <g_MAG_Read_Flag>
    187a:	8f 5f       	subi	r24, 0xFF	; 255
    187c:	80 93 7e 4a 	sts	0x4A7E, r24	; 0x804a7e <g_MAG_Read_Flag>
	TCB0_INTFLAGS = TCB_CAPT_bm;
    1880:	81 e0       	ldi	r24, 0x01	; 1
    1882:	80 93 06 0b 	sts	0x0B06, r24	; 0x800b06 <__TEXT_REGION_LENGTH__+0x7e0b06>
}
    1886:	8f 91       	pop	r24
    1888:	0f 90       	pop	r0
    188a:	0f be       	out	0x3f, r0	; 63
    188c:	0f 90       	pop	r0
    188e:	1f 90       	pop	r1
    1890:	18 95       	reti

00001892 <__vector_15>:

ISR(TCB1_INT_vect){
    1892:	1f 92       	push	r1
    1894:	0f 92       	push	r0
    1896:	0f b6       	in	r0, 0x3f	; 63
    1898:	0f 92       	push	r0
    189a:	11 24       	eor	r1, r1
    189c:	8f 93       	push	r24
	++g_IMU_Read_Flag;
    189e:	80 91 7a 4a 	lds	r24, 0x4A7A	; 0x804a7a <g_IMU_Read_Flag>
    18a2:	8f 5f       	subi	r24, 0xFF	; 255
    18a4:	80 93 7a 4a 	sts	0x4A7A, r24	; 0x804a7a <g_IMU_Read_Flag>
	TCB1_INTFLAGS = TCB_CAPT_bm;
    18a8:	81 e0       	ldi	r24, 0x01	; 1
    18aa:	80 93 16 0b 	sts	0x0B16, r24	; 0x800b16 <__TEXT_REGION_LENGTH__+0x7e0b16>
    18ae:	8f 91       	pop	r24
    18b0:	0f 90       	pop	r0
    18b2:	0f be       	out	0x3f, r0	; 63
    18b4:	0f 90       	pop	r0
    18b6:	1f 90       	pop	r1
    18b8:	18 95       	reti

000018ba <Setup_Bar>:
#include "main.h"
// BAROMETER CODE
// Bar -> 0 is a write, 1 is a read

unsigned char Setup_Bar(){
    18ba:	0f 93       	push	r16
    18bc:	1f 93       	push	r17
    18be:	cf 93       	push	r28
    18c0:	df 93       	push	r29
    18c2:	1f 92       	push	r1
    18c4:	cd b7       	in	r28, 0x3d	; 61
    18c6:	de b7       	in	r29, 0x3e	; 62
	unsigned char BAR_ID = 0;
    18c8:	19 82       	std	Y+1, r1	; 0x01
	unsigned char BAR_status = 2;
	
	BAR_status &= Read_SPI(PORT_BAR,CS_BAR,(BAR_WHO_AM_I|0x80),&BAR_ID,1);
    18ca:	01 e0       	ldi	r16, 0x01	; 1
    18cc:	9e 01       	movw	r18, r28
    18ce:	2f 5f       	subi	r18, 0xFF	; 255
    18d0:	3f 4f       	sbci	r19, 0xFF	; 255
    18d2:	4f e8       	ldi	r20, 0x8F	; 143
    18d4:	67 e0       	ldi	r22, 0x07	; 7
    18d6:	81 e4       	ldi	r24, 0x41	; 65
    18d8:	0e 94 0f 02 	call	0x41e	; 0x41e <Read_SPI>
    18dc:	18 2f       	mov	r17, r24
    18de:	12 70       	andi	r17, 0x02	; 2
	BAR_status &= Write_SPI(PORT_BAR,CS_BAR,BAR_IF_CTRL,0b00000111); // Disables unused interfaces
    18e0:	27 e0       	ldi	r18, 0x07	; 7
    18e2:	4e e0       	ldi	r20, 0x0E	; 14
    18e4:	67 e0       	ldi	r22, 0x07	; 7
    18e6:	81 e4       	ldi	r24, 0x41	; 65
    18e8:	0e 94 af 02 	call	0x55e	; 0x55e <Write_SPI>
    18ec:	18 23       	and	r17, r24
	BAR_status &= Write_SPI(PORT_BAR,CS_BAR,BAR_CTRL_REG1,0b01011100); // Sets ODR to 75Hz, enables LPF
    18ee:	2c e5       	ldi	r18, 0x5C	; 92
    18f0:	40 e1       	ldi	r20, 0x10	; 16
    18f2:	67 e0       	ldi	r22, 0x07	; 7
    18f4:	81 e4       	ldi	r24, 0x41	; 65
    18f6:	0e 94 af 02 	call	0x55e	; 0x55e <Write_SPI>
    18fa:	18 23       	and	r17, r24
	BAR_status &= Write_SPI(PORT_BAR,CS_BAR,BAR_CTRL_REG2,0b00010010); // Enables low noise mode, maximum ODR for this mode is 75 Hz
    18fc:	22 e1       	ldi	r18, 0x12	; 18
    18fe:	41 e1       	ldi	r20, 0x11	; 17
    1900:	67 e0       	ldi	r22, 0x07	; 7
    1902:	81 e4       	ldi	r24, 0x41	; 65
    1904:	0e 94 af 02 	call	0x55e	; 0x55e <Write_SPI>
    1908:	81 23       	and	r24, r17
	
	if (BAR_status != 2){return 0;}
    190a:	82 30       	cpi	r24, 0x02	; 2
    190c:	11 f0       	breq	.+4      	; 0x1912 <Setup_Bar+0x58>
    190e:	80 e0       	ldi	r24, 0x00	; 0
    1910:	01 c0       	rjmp	.+2      	; 0x1914 <Setup_Bar+0x5a>
	return 1;
    1912:	81 e0       	ldi	r24, 0x01	; 1
}
    1914:	0f 90       	pop	r0
    1916:	df 91       	pop	r29
    1918:	cf 91       	pop	r28
    191a:	1f 91       	pop	r17
    191c:	0f 91       	pop	r16
    191e:	08 95       	ret

00001920 <Height_Bar>:

float Height_Bar(unsigned long pressure_LSB){
	const float c1 = BAR_TB/BAR_LB;
	const float c2 = (-BAR_R*BAR_LB)/(BAR_G*BAR_M);
	
	float pressure_Pa = ((float)pressure_LSB)*BAR_SENS;
    1920:	0e 94 a0 1e 	call	0x3d40	; 0x3d40 <__floatunsisf>
    1924:	2a e0       	ldi	r18, 0x0A	; 10
    1926:	37 ed       	ldi	r19, 0xD7	; 215
    1928:	43 e2       	ldi	r20, 0x23	; 35
    192a:	52 e4       	ldi	r21, 0x42	; 66
    192c:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <__divsf3>
	float height = c1*(pow(pressure_Pa/BAR_PB,c2)-1.0);
    1930:	20 e8       	ldi	r18, 0x80	; 128
    1932:	36 ee       	ldi	r19, 0xE6	; 230
    1934:	45 ec       	ldi	r20, 0xC5	; 197
    1936:	57 e4       	ldi	r21, 0x47	; 71
    1938:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <__divsf3>
    193c:	2f e1       	ldi	r18, 0x1F	; 31
    193e:	35 ed       	ldi	r19, 0xD5	; 213
    1940:	42 e4       	ldi	r20, 0x42	; 66
    1942:	5e e3       	ldi	r21, 0x3E	; 62
    1944:	0e 94 32 20 	call	0x4064	; 0x4064 <pow>
    1948:	20 e0       	ldi	r18, 0x00	; 0
    194a:	30 e0       	ldi	r19, 0x00	; 0
    194c:	40 e8       	ldi	r20, 0x80	; 128
    194e:	5f e3       	ldi	r21, 0x3F	; 63
    1950:	0e 94 0f 1d 	call	0x3a1e	; 0x3a1e <__subsf3>
    1954:	24 ec       	ldi	r18, 0xC4	; 196
    1956:	3a e2       	ldi	r19, 0x2A	; 42
    1958:	4d e2       	ldi	r20, 0x2D	; 45
    195a:	57 ec       	ldi	r21, 0xC7	; 199
    195c:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <__mulsf3>
	return height;
}
    1960:	08 95       	ret

00001962 <Read_Bar>:
	
	if (BAR_status != 2){return 0;}
	return 1;
}

unsigned char Read_Bar(States *Drone){
    1962:	ef 92       	push	r14
    1964:	ff 92       	push	r15
    1966:	0f 93       	push	r16
    1968:	1f 93       	push	r17
    196a:	cf 93       	push	r28
    196c:	df 93       	push	r29
    196e:	cd b7       	in	r28, 0x3d	; 61
    1970:	de b7       	in	r29, 0x3e	; 62
    1972:	27 97       	sbiw	r28, 0x07	; 7
    1974:	cd bf       	out	0x3d, r28	; 61
    1976:	de bf       	out	0x3e, r29	; 62
    1978:	7c 01       	movw	r14, r24
	static unsigned long pressure_window[BAR_WINDOW_SIZE];
	static unsigned char window_counter;
	unsigned char Read_status = 0;
	unsigned char Data[3] = {0};
    197a:	19 82       	std	Y+1, r1	; 0x01
    197c:	1a 82       	std	Y+2, r1	; 0x02
    197e:	1b 82       	std	Y+3, r1	; 0x03
	Read_status = Read_SPI(PORT_BAR, CS_BAR, (BAR_DATA_START|0x80), Data, sizeof(Data));
    1980:	03 e0       	ldi	r16, 0x03	; 3
    1982:	9e 01       	movw	r18, r28
    1984:	2f 5f       	subi	r18, 0xFF	; 255
    1986:	3f 4f       	sbci	r19, 0xFF	; 255
    1988:	48 ea       	ldi	r20, 0xA8	; 168
    198a:	67 e0       	ldi	r22, 0x07	; 7
    198c:	81 e4       	ldi	r24, 0x41	; 65
    198e:	0e 94 0f 02 	call	0x41e	; 0x41e <Read_SPI>
	
	if (Read_status != 2){return 0;}
    1992:	82 30       	cpi	r24, 0x02	; 2
    1994:	09 f0       	breq	.+2      	; 0x1998 <Read_Bar+0x36>
    1996:	68 c0       	rjmp	.+208    	; 0x1a68 <Read_Bar+0x106>
	
	unsigned long pressure_LSB = (((unsigned long)Data[2])<<16);
    1998:	8b 81       	ldd	r24, Y+3	; 0x03
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	a0 e0       	ldi	r26, 0x00	; 0
    199e:	b0 e0       	ldi	r27, 0x00	; 0
    19a0:	dc 01       	movw	r26, r24
    19a2:	99 27       	eor	r25, r25
    19a4:	88 27       	eor	r24, r24
	pressure_LSB += (((unsigned int)Data[1])<<8);
    19a6:	2a 81       	ldd	r18, Y+2	; 0x02
    19a8:	30 e0       	ldi	r19, 0x00	; 0
    19aa:	32 2f       	mov	r19, r18
    19ac:	22 27       	eor	r18, r18
    19ae:	82 0f       	add	r24, r18
    19b0:	93 1f       	adc	r25, r19
    19b2:	a1 1d       	adc	r26, r1
    19b4:	b1 1d       	adc	r27, r1
	pressure_LSB += Data[0];
    19b6:	29 81       	ldd	r18, Y+1	; 0x01
    19b8:	82 0f       	add	r24, r18
    19ba:	91 1d       	adc	r25, r1
    19bc:	a1 1d       	adc	r26, r1
    19be:	b1 1d       	adc	r27, r1
	
	pressure_window[window_counter++] = pressure_LSB;
    19c0:	e0 91 ca 4b 	lds	r30, 0x4BCA	; 0x804bca <window_counter.4843>
    19c4:	21 e0       	ldi	r18, 0x01	; 1
    19c6:	2e 0f       	add	r18, r30
    19c8:	20 93 ca 4b 	sts	0x4BCA, r18	; 0x804bca <window_counter.4843>
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	ee 0f       	add	r30, r30
    19d0:	ff 1f       	adc	r31, r31
    19d2:	ee 0f       	add	r30, r30
    19d4:	ff 1f       	adc	r31, r31
    19d6:	e6 57       	subi	r30, 0x76	; 118
    19d8:	f4 4b       	sbci	r31, 0xB4	; 180
    19da:	80 83       	st	Z, r24
    19dc:	91 83       	std	Z+1, r25	; 0x01
    19de:	a2 83       	std	Z+2, r26	; 0x02
    19e0:	b3 83       	std	Z+3, r27	; 0x03
	
	if (window_counter >= BAR_WINDOW_SIZE){
    19e2:	20 31       	cpi	r18, 0x10	; 16
    19e4:	08 f4       	brcc	.+2      	; 0x19e8 <Read_Bar+0x86>
    19e6:	42 c0       	rjmp	.+132    	; 0x1a6c <Read_Bar+0x10a>
		volatile unsigned long pressure_oversampled = 0;
    19e8:	1c 82       	std	Y+4, r1	; 0x04
    19ea:	1d 82       	std	Y+5, r1	; 0x05
    19ec:	1e 82       	std	Y+6, r1	; 0x06
    19ee:	1f 82       	std	Y+7, r1	; 0x07
		for (unsigned char i=0;i<BAR_WINDOW_SIZE;i++){
    19f0:	80 e0       	ldi	r24, 0x00	; 0
    19f2:	19 c0       	rjmp	.+50     	; 0x1a26 <Read_Bar+0xc4>
			pressure_oversampled += pressure_window[i];
    19f4:	e8 2f       	mov	r30, r24
    19f6:	f0 e0       	ldi	r31, 0x00	; 0
    19f8:	ee 0f       	add	r30, r30
    19fa:	ff 1f       	adc	r31, r31
    19fc:	ee 0f       	add	r30, r30
    19fe:	ff 1f       	adc	r31, r31
    1a00:	e6 57       	subi	r30, 0x76	; 118
    1a02:	f4 4b       	sbci	r31, 0xB4	; 180
    1a04:	00 81       	ld	r16, Z
    1a06:	11 81       	ldd	r17, Z+1	; 0x01
    1a08:	22 81       	ldd	r18, Z+2	; 0x02
    1a0a:	33 81       	ldd	r19, Z+3	; 0x03
    1a0c:	4c 81       	ldd	r20, Y+4	; 0x04
    1a0e:	5d 81       	ldd	r21, Y+5	; 0x05
    1a10:	6e 81       	ldd	r22, Y+6	; 0x06
    1a12:	7f 81       	ldd	r23, Y+7	; 0x07
    1a14:	40 0f       	add	r20, r16
    1a16:	51 1f       	adc	r21, r17
    1a18:	62 1f       	adc	r22, r18
    1a1a:	73 1f       	adc	r23, r19
    1a1c:	4c 83       	std	Y+4, r20	; 0x04
    1a1e:	5d 83       	std	Y+5, r21	; 0x05
    1a20:	6e 83       	std	Y+6, r22	; 0x06
    1a22:	7f 83       	std	Y+7, r23	; 0x07
	
	pressure_window[window_counter++] = pressure_LSB;
	
	if (window_counter >= BAR_WINDOW_SIZE){
		volatile unsigned long pressure_oversampled = 0;
		for (unsigned char i=0;i<BAR_WINDOW_SIZE;i++){
    1a24:	8f 5f       	subi	r24, 0xFF	; 255
    1a26:	80 31       	cpi	r24, 0x10	; 16
    1a28:	28 f3       	brcs	.-54     	; 0x19f4 <Read_Bar+0x92>
			pressure_oversampled += pressure_window[i];
		}
		pressure_oversampled >>= 4;
    1a2a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a2c:	9d 81       	ldd	r25, Y+5	; 0x05
    1a2e:	ae 81       	ldd	r26, Y+6	; 0x06
    1a30:	bf 81       	ldd	r27, Y+7	; 0x07
    1a32:	68 94       	set
    1a34:	13 f8       	bld	r1, 3
    1a36:	b6 95       	lsr	r27
    1a38:	a7 95       	ror	r26
    1a3a:	97 95       	ror	r25
    1a3c:	87 95       	ror	r24
    1a3e:	16 94       	lsr	r1
    1a40:	d1 f7       	brne	.-12     	; 0x1a36 <Read_Bar+0xd4>
    1a42:	8c 83       	std	Y+4, r24	; 0x04
    1a44:	9d 83       	std	Y+5, r25	; 0x05
    1a46:	ae 83       	std	Y+6, r26	; 0x06
    1a48:	bf 83       	std	Y+7, r27	; 0x07
		Drone->pressure_altitude = Height_Bar(pressure_oversampled);
    1a4a:	6c 81       	ldd	r22, Y+4	; 0x04
    1a4c:	7d 81       	ldd	r23, Y+5	; 0x05
    1a4e:	8e 81       	ldd	r24, Y+6	; 0x06
    1a50:	9f 81       	ldd	r25, Y+7	; 0x07
    1a52:	0e 94 90 0c 	call	0x1920	; 0x1920 <Height_Bar>
    1a56:	f7 01       	movw	r30, r14
    1a58:	60 ab       	std	Z+48, r22	; 0x30
    1a5a:	71 ab       	std	Z+49, r23	; 0x31
    1a5c:	82 ab       	std	Z+50, r24	; 0x32
    1a5e:	93 ab       	std	Z+51, r25	; 0x33
		window_counter = 0;
    1a60:	10 92 ca 4b 	sts	0x4BCA, r1	; 0x804bca <window_counter.4843>
	}
	
	return 1;
    1a64:	81 e0       	ldi	r24, 0x01	; 1
    1a66:	03 c0       	rjmp	.+6      	; 0x1a6e <Read_Bar+0x10c>
	static unsigned char window_counter;
	unsigned char Read_status = 0;
	unsigned char Data[3] = {0};
	Read_status = Read_SPI(PORT_BAR, CS_BAR, (BAR_DATA_START|0x80), Data, sizeof(Data));
	
	if (Read_status != 2){return 0;}
    1a68:	80 e0       	ldi	r24, 0x00	; 0
    1a6a:	01 c0       	rjmp	.+2      	; 0x1a6e <Read_Bar+0x10c>
		pressure_oversampled >>= 4;
		Drone->pressure_altitude = Height_Bar(pressure_oversampled);
		window_counter = 0;
	}
	
	return 1;
    1a6c:	81 e0       	ldi	r24, 0x01	; 1
}
    1a6e:	27 96       	adiw	r28, 0x07	; 7
    1a70:	cd bf       	out	0x3d, r28	; 61
    1a72:	de bf       	out	0x3e, r29	; 62
    1a74:	df 91       	pop	r29
    1a76:	cf 91       	pop	r28
    1a78:	1f 91       	pop	r17
    1a7a:	0f 91       	pop	r16
    1a7c:	ff 90       	pop	r15
    1a7e:	ef 90       	pop	r14
    1a80:	08 95       	ret

00001a82 <Setup_IMU>:
	float height = c1*(pow(pressure_Pa/BAR_PB,c2)-1.0);
	return height;
}
// IMU CODE
// IMU -> 0 is a write, 1 is a read
unsigned char Setup_IMU(){
    1a82:	0f 93       	push	r16
    1a84:	1f 93       	push	r17
    1a86:	cf 93       	push	r28
    1a88:	df 93       	push	r29
    1a8a:	1f 92       	push	r1
    1a8c:	cd b7       	in	r28, 0x3d	; 61
    1a8e:	de b7       	in	r29, 0x3e	; 62
	// Configure IMU
	unsigned char IMU_status = 2;
	unsigned char IMU_ID = 0;
    1a90:	19 82       	std	Y+1, r1	; 0x01
	
	IMU_status &= Read_SPI(PORT_IMU, CS_IMU, (IMU_WHO_AM_I|0x80), &IMU_ID, 1);
    1a92:	01 e0       	ldi	r16, 0x01	; 1
    1a94:	9e 01       	movw	r18, r28
    1a96:	2f 5f       	subi	r18, 0xFF	; 255
    1a98:	3f 4f       	sbci	r19, 0xFF	; 255
    1a9a:	4f e8       	ldi	r20, 0x8F	; 143
    1a9c:	66 e0       	ldi	r22, 0x06	; 6
    1a9e:	81 e4       	ldi	r24, 0x41	; 65
    1aa0:	0e 94 0f 02 	call	0x41e	; 0x41e <Read_SPI>
    1aa4:	18 2f       	mov	r17, r24
    1aa6:	12 70       	andi	r17, 0x02	; 2
	IMU_status &= Write_SPI(PORT_IMU, CS_IMU, IMU_CTRL1_XL, 0b01010000); // Sets Accelerometer ODR to 208 Hz, range to +-2g
    1aa8:	20 e5       	ldi	r18, 0x50	; 80
    1aaa:	40 e1       	ldi	r20, 0x10	; 16
    1aac:	66 e0       	ldi	r22, 0x06	; 6
    1aae:	81 e4       	ldi	r24, 0x41	; 65
    1ab0:	0e 94 af 02 	call	0x55e	; 0x55e <Write_SPI>
    1ab4:	18 23       	and	r17, r24
	IMU_status &= Write_SPI(PORT_IMU, CS_IMU, IMU_CTRL2_G, 0b01010100); // Sets Gyro ODR to 208 Hz, range to +-500dps
    1ab6:	24 e5       	ldi	r18, 0x54	; 84
    1ab8:	41 e1       	ldi	r20, 0x11	; 17
    1aba:	66 e0       	ldi	r22, 0x06	; 6
    1abc:	81 e4       	ldi	r24, 0x41	; 65
    1abe:	0e 94 af 02 	call	0x55e	; 0x55e <Write_SPI>
    1ac2:	18 23       	and	r17, r24
	IMU_status &= Write_SPI(PORT_IMU, CS_IMU, IMU_CTRL8_XL, 0b11001000); // Sets Accelerometer LPF to ODR/9, low noise
    1ac4:	28 ec       	ldi	r18, 0xC8	; 200
    1ac6:	47 e1       	ldi	r20, 0x17	; 23
    1ac8:	66 e0       	ldi	r22, 0x06	; 6
    1aca:	81 e4       	ldi	r24, 0x41	; 65
    1acc:	0e 94 af 02 	call	0x55e	; 0x55e <Write_SPI>
    1ad0:	81 23       	and	r24, r17
	
	if(IMU_status != 2){return 0;}
    1ad2:	82 30       	cpi	r24, 0x02	; 2
    1ad4:	11 f0       	breq	.+4      	; 0x1ada <Setup_IMU+0x58>
    1ad6:	80 e0       	ldi	r24, 0x00	; 0
    1ad8:	01 c0       	rjmp	.+2      	; 0x1adc <Setup_IMU+0x5a>
	return 1;
    1ada:	81 e0       	ldi	r24, 0x01	; 1
}
    1adc:	0f 90       	pop	r0
    1ade:	df 91       	pop	r29
    1ae0:	cf 91       	pop	r28
    1ae2:	1f 91       	pop	r17
    1ae4:	0f 91       	pop	r16
    1ae6:	08 95       	ret

00001ae8 <Read_IMU>:

unsigned char Read_IMU(States *Drone){
    1ae8:	8f 92       	push	r8
    1aea:	9f 92       	push	r9
    1aec:	af 92       	push	r10
    1aee:	bf 92       	push	r11
    1af0:	ef 92       	push	r14
    1af2:	ff 92       	push	r15
    1af4:	0f 93       	push	r16
    1af6:	1f 93       	push	r17
    1af8:	cf 93       	push	r28
    1afa:	df 93       	push	r29
    1afc:	cd b7       	in	r28, 0x3d	; 61
    1afe:	de b7       	in	r29, 0x3e	; 62
    1b00:	aa 97       	sbiw	r28, 0x2a	; 42
    1b02:	cd bf       	out	0x3d, r28	; 61
    1b04:	de bf       	out	0x3e, r29	; 62
    1b06:	7c 01       	movw	r14, r24
		w_xyz_window[3][IMU_WINDOW_SIZE],
		w_bias[3];
	static unsigned char window_counter = 0;
	unsigned char Read_status = 0;
	
	unsigned char Data[12] = {0};
    1b08:	9e 01       	movw	r18, r28
    1b0a:	2f 5f       	subi	r18, 0xFF	; 255
    1b0c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b0e:	8c e0       	ldi	r24, 0x0C	; 12
    1b10:	d9 01       	movw	r26, r18
    1b12:	1d 92       	st	X+, r1
    1b14:	8a 95       	dec	r24
    1b16:	e9 f7       	brne	.-6      	; 0x1b12 <Read_IMU+0x2a>
	Read_status = Read_SPI(PORT_IMU, CS_IMU, (IMU_DATA_START|0x80), Data, sizeof(Data));
    1b18:	0c e0       	ldi	r16, 0x0C	; 12
    1b1a:	42 ea       	ldi	r20, 0xA2	; 162
    1b1c:	66 e0       	ldi	r22, 0x06	; 6
    1b1e:	81 e4       	ldi	r24, 0x41	; 65
    1b20:	0e 94 0f 02 	call	0x41e	; 0x41e <Read_SPI>
	if (Read_status != 2){return 0;}
    1b24:	82 30       	cpi	r24, 0x02	; 2
    1b26:	09 f0       	breq	.+2      	; 0x1b2a <Read_IMU+0x42>
    1b28:	aa c1       	rjmp	.+852    	; 0x1e7e <Read_IMU+0x396>
    1b2a:	60 e0       	ldi	r22, 0x00	; 0
    1b2c:	43 c0       	rjmp	.+134    	; 0x1bb4 <Read_IMU+0xcc>
	
	for (unsigned char i=0;i<3;i++){
		a_xyz_window[i][window_counter] = (((signed int)Data[2*i+7])<<8) + Data[2*i+6];
    1b2e:	70 91 89 4b 	lds	r23, 0x4B89	; 0x804b89 <window_counter.4869>
    1b32:	86 2f       	mov	r24, r22
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	ac 01       	movw	r20, r24
    1b38:	44 0f       	add	r20, r20
    1b3a:	55 1f       	adc	r21, r21
    1b3c:	fa 01       	movw	r30, r20
    1b3e:	37 96       	adiw	r30, 0x07	; 7
    1b40:	21 e0       	ldi	r18, 0x01	; 1
    1b42:	30 e0       	ldi	r19, 0x00	; 0
    1b44:	2c 0f       	add	r18, r28
    1b46:	3d 1f       	adc	r19, r29
    1b48:	e2 0f       	add	r30, r18
    1b4a:	f3 1f       	adc	r31, r19
    1b4c:	20 81       	ld	r18, Z
    1b4e:	30 e0       	ldi	r19, 0x00	; 0
    1b50:	32 2f       	mov	r19, r18
    1b52:	22 27       	eor	r18, r18
    1b54:	fc 01       	movw	r30, r24
    1b56:	33 96       	adiw	r30, 0x03	; 3
    1b58:	ee 0f       	add	r30, r30
    1b5a:	ff 1f       	adc	r31, r31
    1b5c:	a1 e0       	ldi	r26, 0x01	; 1
    1b5e:	b0 e0       	ldi	r27, 0x00	; 0
    1b60:	ac 0f       	add	r26, r28
    1b62:	bd 1f       	adc	r27, r29
    1b64:	ea 0f       	add	r30, r26
    1b66:	fb 1f       	adc	r31, r27
    1b68:	e0 81       	ld	r30, Z
    1b6a:	2e 0f       	add	r18, r30
    1b6c:	31 1d       	adc	r19, r1
    1b6e:	88 0f       	add	r24, r24
    1b70:	99 1f       	adc	r25, r25
    1b72:	88 0f       	add	r24, r24
    1b74:	99 1f       	adc	r25, r25
    1b76:	88 0f       	add	r24, r24
    1b78:	99 1f       	adc	r25, r25
    1b7a:	87 0f       	add	r24, r23
    1b7c:	91 1d       	adc	r25, r1
    1b7e:	88 0f       	add	r24, r24
    1b80:	99 1f       	adc	r25, r25
    1b82:	fc 01       	movw	r30, r24
    1b84:	e7 5a       	subi	r30, 0xA7	; 167
    1b86:	f4 4b       	sbci	r31, 0xB4	; 180
    1b88:	20 83       	st	Z, r18
    1b8a:	31 83       	std	Z+1, r19	; 0x01
		w_xyz_window[i][window_counter] = (((signed int)Data[2*i+1])<<8) + Data[2*i];
    1b8c:	fa 01       	movw	r30, r20
    1b8e:	31 96       	adiw	r30, 0x01	; 1
    1b90:	ea 0f       	add	r30, r26
    1b92:	fb 1f       	adc	r31, r27
    1b94:	20 81       	ld	r18, Z
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	32 2f       	mov	r19, r18
    1b9a:	22 27       	eor	r18, r18
    1b9c:	fd 01       	movw	r30, r26
    1b9e:	e4 0f       	add	r30, r20
    1ba0:	f5 1f       	adc	r31, r21
    1ba2:	40 81       	ld	r20, Z
    1ba4:	24 0f       	add	r18, r20
    1ba6:	31 1d       	adc	r19, r1
    1ba8:	fc 01       	movw	r30, r24
    1baa:	e7 5d       	subi	r30, 0xD7	; 215
    1bac:	f4 4b       	sbci	r31, 0xB4	; 180
    1bae:	20 83       	st	Z, r18
    1bb0:	31 83       	std	Z+1, r19	; 0x01
	
	unsigned char Data[12] = {0};
	Read_status = Read_SPI(PORT_IMU, CS_IMU, (IMU_DATA_START|0x80), Data, sizeof(Data));
	if (Read_status != 2){return 0;}
	
	for (unsigned char i=0;i<3;i++){
    1bb2:	6f 5f       	subi	r22, 0xFF	; 255
    1bb4:	63 30       	cpi	r22, 0x03	; 3
    1bb6:	08 f4       	brcc	.+2      	; 0x1bba <Read_IMU+0xd2>
    1bb8:	ba cf       	rjmp	.-140    	; 0x1b2e <Read_IMU+0x46>
		a_xyz_window[i][window_counter] = (((signed int)Data[2*i+7])<<8) + Data[2*i+6];
		w_xyz_window[i][window_counter] = (((signed int)Data[2*i+1])<<8) + Data[2*i];
	}
	window_counter++;
    1bba:	80 91 89 4b 	lds	r24, 0x4B89	; 0x804b89 <window_counter.4869>
    1bbe:	8f 5f       	subi	r24, 0xFF	; 255
    1bc0:	80 93 89 4b 	sts	0x4B89, r24	; 0x804b89 <window_counter.4869>
	
	if (window_counter >= IMU_WINDOW_SIZE){
    1bc4:	88 30       	cpi	r24, 0x08	; 8
    1bc6:	08 f4       	brcc	.+2      	; 0x1bca <Read_IMU+0xe2>
    1bc8:	5c c1       	rjmp	.+696    	; 0x1e82 <Read_IMU+0x39a>
		window_counter = 0;
    1bca:	10 92 89 4b 	sts	0x4B89, r1	; 0x804b89 <window_counter.4869>
		volatile signed long a_xyz_FIR[3] = {0};
    1bce:	8c e0       	ldi	r24, 0x0C	; 12
    1bd0:	fe 01       	movw	r30, r28
    1bd2:	79 96       	adiw	r30, 0x19	; 25
    1bd4:	df 01       	movw	r26, r30
    1bd6:	28 2f       	mov	r18, r24
    1bd8:	1d 92       	st	X+, r1
    1bda:	2a 95       	dec	r18
    1bdc:	e9 f7       	brne	.-6      	; 0x1bd8 <Read_IMU+0xf0>
		volatile signed long w_xyz_FIR[3] = {0};
    1bde:	3c 97       	sbiw	r30, 0x0c	; 12
    1be0:	df 01       	movw	r26, r30
    1be2:	1d 92       	st	X+, r1
    1be4:	8a 95       	dec	r24
    1be6:	e9 f7       	brne	.-6      	; 0x1be2 <Read_IMU+0xfa>
		for (unsigned char i=0;i<3;i++){
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	74 c0       	rjmp	.+232    	; 0x1cd4 <Read_IMU+0x1ec>
			for (unsigned char j=0;j<IMU_WINDOW_SIZE;j++){
				a_xyz_FIR[i] += a_xyz_window[i][j];
    1bec:	83 2f       	mov	r24, r19
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	fc 01       	movw	r30, r24
    1bf2:	ee 0f       	add	r30, r30
    1bf4:	ff 1f       	adc	r31, r31
    1bf6:	ee 0f       	add	r30, r30
    1bf8:	ff 1f       	adc	r31, r31
    1bfa:	41 e0       	ldi	r20, 0x01	; 1
    1bfc:	50 e0       	ldi	r21, 0x00	; 0
    1bfe:	4c 0f       	add	r20, r28
    1c00:	5d 1f       	adc	r21, r29
    1c02:	e4 0f       	add	r30, r20
    1c04:	f5 1f       	adc	r31, r21
    1c06:	80 8c       	ldd	r8, Z+24	; 0x18
    1c08:	91 8c       	ldd	r9, Z+25	; 0x19
    1c0a:	a2 8c       	ldd	r10, Z+26	; 0x1a
    1c0c:	b3 8c       	ldd	r11, Z+27	; 0x1b
    1c0e:	88 0f       	add	r24, r24
    1c10:	99 1f       	adc	r25, r25
    1c12:	88 0f       	add	r24, r24
    1c14:	99 1f       	adc	r25, r25
    1c16:	88 0f       	add	r24, r24
    1c18:	99 1f       	adc	r25, r25
    1c1a:	82 0f       	add	r24, r18
    1c1c:	91 1d       	adc	r25, r1
    1c1e:	88 0f       	add	r24, r24
    1c20:	99 1f       	adc	r25, r25
    1c22:	dc 01       	movw	r26, r24
    1c24:	a7 5a       	subi	r26, 0xA7	; 167
    1c26:	b4 4b       	sbci	r27, 0xB4	; 180
    1c28:	4d 91       	ld	r20, X+
    1c2a:	5c 91       	ld	r21, X
    1c2c:	05 2e       	mov	r0, r21
    1c2e:	00 0c       	add	r0, r0
    1c30:	66 0b       	sbc	r22, r22
    1c32:	77 0b       	sbc	r23, r23
    1c34:	48 0d       	add	r20, r8
    1c36:	59 1d       	adc	r21, r9
    1c38:	6a 1d       	adc	r22, r10
    1c3a:	7b 1d       	adc	r23, r11
    1c3c:	40 8f       	std	Z+24, r20	; 0x18
    1c3e:	51 8f       	std	Z+25, r21	; 0x19
    1c40:	62 8f       	std	Z+26, r22	; 0x1a
    1c42:	73 8f       	std	Z+27, r23	; 0x1b
				w_xyz_FIR[i] += w_xyz_window[i][j];
    1c44:	44 85       	ldd	r20, Z+12	; 0x0c
    1c46:	55 85       	ldd	r21, Z+13	; 0x0d
    1c48:	66 85       	ldd	r22, Z+14	; 0x0e
    1c4a:	77 85       	ldd	r23, Z+15	; 0x0f
    1c4c:	dc 01       	movw	r26, r24
    1c4e:	a7 5d       	subi	r26, 0xD7	; 215
    1c50:	b4 4b       	sbci	r27, 0xB4	; 180
    1c52:	8d 91       	ld	r24, X+
    1c54:	9c 91       	ld	r25, X
    1c56:	09 2e       	mov	r0, r25
    1c58:	00 0c       	add	r0, r0
    1c5a:	aa 0b       	sbc	r26, r26
    1c5c:	bb 0b       	sbc	r27, r27
    1c5e:	84 0f       	add	r24, r20
    1c60:	95 1f       	adc	r25, r21
    1c62:	a6 1f       	adc	r26, r22
    1c64:	b7 1f       	adc	r27, r23
    1c66:	84 87       	std	Z+12, r24	; 0x0c
    1c68:	95 87       	std	Z+13, r25	; 0x0d
    1c6a:	a6 87       	std	Z+14, r26	; 0x0e
    1c6c:	b7 87       	std	Z+15, r27	; 0x0f
	if (window_counter >= IMU_WINDOW_SIZE){
		window_counter = 0;
		volatile signed long a_xyz_FIR[3] = {0};
		volatile signed long w_xyz_FIR[3] = {0};
		for (unsigned char i=0;i<3;i++){
			for (unsigned char j=0;j<IMU_WINDOW_SIZE;j++){
    1c6e:	2f 5f       	subi	r18, 0xFF	; 255
    1c70:	01 c0       	rjmp	.+2      	; 0x1c74 <Read_IMU+0x18c>
    1c72:	20 e0       	ldi	r18, 0x00	; 0
    1c74:	28 30       	cpi	r18, 0x08	; 8
    1c76:	08 f4       	brcc	.+2      	; 0x1c7a <Read_IMU+0x192>
    1c78:	b9 cf       	rjmp	.-142    	; 0x1bec <Read_IMU+0x104>
				a_xyz_FIR[i] += a_xyz_window[i][j];
				w_xyz_FIR[i] += w_xyz_window[i][j];
			}
			a_xyz_FIR[i] >>= 3;
    1c7a:	e3 2f       	mov	r30, r19
    1c7c:	f0 e0       	ldi	r31, 0x00	; 0
    1c7e:	ee 0f       	add	r30, r30
    1c80:	ff 1f       	adc	r31, r31
    1c82:	ee 0f       	add	r30, r30
    1c84:	ff 1f       	adc	r31, r31
    1c86:	81 e0       	ldi	r24, 0x01	; 1
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	8c 0f       	add	r24, r28
    1c8c:	9d 1f       	adc	r25, r29
    1c8e:	e8 0f       	add	r30, r24
    1c90:	f9 1f       	adc	r31, r25
    1c92:	80 8d       	ldd	r24, Z+24	; 0x18
    1c94:	91 8d       	ldd	r25, Z+25	; 0x19
    1c96:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1c98:	b3 8d       	ldd	r27, Z+27	; 0x1b
    1c9a:	68 94       	set
    1c9c:	12 f8       	bld	r1, 2
    1c9e:	b5 95       	asr	r27
    1ca0:	a7 95       	ror	r26
    1ca2:	97 95       	ror	r25
    1ca4:	87 95       	ror	r24
    1ca6:	16 94       	lsr	r1
    1ca8:	d1 f7       	brne	.-12     	; 0x1c9e <Read_IMU+0x1b6>
    1caa:	80 8f       	std	Z+24, r24	; 0x18
    1cac:	91 8f       	std	Z+25, r25	; 0x19
    1cae:	a2 8f       	std	Z+26, r26	; 0x1a
    1cb0:	b3 8f       	std	Z+27, r27	; 0x1b
			w_xyz_FIR[i] >>= 3;
    1cb2:	84 85       	ldd	r24, Z+12	; 0x0c
    1cb4:	95 85       	ldd	r25, Z+13	; 0x0d
    1cb6:	a6 85       	ldd	r26, Z+14	; 0x0e
    1cb8:	b7 85       	ldd	r27, Z+15	; 0x0f
    1cba:	68 94       	set
    1cbc:	12 f8       	bld	r1, 2
    1cbe:	b5 95       	asr	r27
    1cc0:	a7 95       	ror	r26
    1cc2:	97 95       	ror	r25
    1cc4:	87 95       	ror	r24
    1cc6:	16 94       	lsr	r1
    1cc8:	d1 f7       	brne	.-12     	; 0x1cbe <Read_IMU+0x1d6>
    1cca:	84 87       	std	Z+12, r24	; 0x0c
    1ccc:	95 87       	std	Z+13, r25	; 0x0d
    1cce:	a6 87       	std	Z+14, r26	; 0x0e
    1cd0:	b7 87       	std	Z+15, r27	; 0x0f
	
	if (window_counter >= IMU_WINDOW_SIZE){
		window_counter = 0;
		volatile signed long a_xyz_FIR[3] = {0};
		volatile signed long w_xyz_FIR[3] = {0};
		for (unsigned char i=0;i<3;i++){
    1cd2:	3f 5f       	subi	r19, 0xFF	; 255
    1cd4:	33 30       	cpi	r19, 0x03	; 3
    1cd6:	68 f2       	brcs	.-102    	; 0x1c72 <Read_IMU+0x18a>
			}
			a_xyz_FIR[i] >>= 3;
			w_xyz_FIR[i] >>= 3;
		}
		// Flip positive directions on Gyro x and z axis and Accelerometer y axis to align with Forward-Right-Down coordinate system (aligns with NED when not rotated)
		if (g_seconds < 1){
    1cd8:	80 91 75 4a 	lds	r24, 0x4A75	; 0x804a75 <g_seconds>
    1cdc:	90 91 76 4a 	lds	r25, 0x4A76	; 0x804a76 <g_seconds+0x1>
    1ce0:	a0 91 77 4a 	lds	r26, 0x4A77	; 0x804a77 <g_seconds+0x2>
    1ce4:	b0 91 78 4a 	lds	r27, 0x4A78	; 0x804a78 <g_seconds+0x3>
    1ce8:	89 2b       	or	r24, r25
    1cea:	8a 2b       	or	r24, r26
    1cec:	8b 2b       	or	r24, r27
    1cee:	d1 f4       	brne	.+52     	; 0x1d24 <Read_IMU+0x23c>
			w_bias[0] = -w_xyz_FIR[0];
    1cf0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cf2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cf4:	af 85       	ldd	r26, Y+15	; 0x0f
    1cf6:	b8 89       	ldd	r27, Y+16	; 0x10
    1cf8:	e3 e2       	ldi	r30, 0x23	; 35
    1cfa:	fb e4       	ldi	r31, 0x4B	; 75
    1cfc:	91 95       	neg	r25
    1cfe:	81 95       	neg	r24
    1d00:	91 09       	sbc	r25, r1
    1d02:	80 83       	st	Z, r24
    1d04:	91 83       	std	Z+1, r25	; 0x01
			w_bias[1] = w_xyz_FIR[1];
    1d06:	89 89       	ldd	r24, Y+17	; 0x11
    1d08:	9a 89       	ldd	r25, Y+18	; 0x12
    1d0a:	ab 89       	ldd	r26, Y+19	; 0x13
    1d0c:	bc 89       	ldd	r27, Y+20	; 0x14
    1d0e:	82 83       	std	Z+2, r24	; 0x02
    1d10:	93 83       	std	Z+3, r25	; 0x03
			w_bias[2] = -w_xyz_FIR[2];
    1d12:	8d 89       	ldd	r24, Y+21	; 0x15
    1d14:	9e 89       	ldd	r25, Y+22	; 0x16
    1d16:	af 89       	ldd	r26, Y+23	; 0x17
    1d18:	b8 8d       	ldd	r27, Y+24	; 0x18
    1d1a:	91 95       	neg	r25
    1d1c:	81 95       	neg	r24
    1d1e:	91 09       	sbc	r25, r1
    1d20:	84 83       	std	Z+4, r24	; 0x04
    1d22:	95 83       	std	Z+5, r25	; 0x05
		}
		signed int w_diff[3] = {-w_xyz_FIR[0]-w_bias[0], w_xyz_FIR[1]-w_bias[1], -w_xyz_FIR[2]-w_bias[2]};
    1d24:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d26:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d28:	af 85       	ldd	r26, Y+15	; 0x0f
    1d2a:	b8 89       	ldd	r27, Y+16	; 0x10
    1d2c:	e3 e2       	ldi	r30, 0x23	; 35
    1d2e:	fb e4       	ldi	r31, 0x4B	; 75
    1d30:	20 81       	ld	r18, Z
    1d32:	31 81       	ldd	r19, Z+1	; 0x01
    1d34:	91 95       	neg	r25
    1d36:	81 95       	neg	r24
    1d38:	91 09       	sbc	r25, r1
    1d3a:	82 1b       	sub	r24, r18
    1d3c:	93 0b       	sbc	r25, r19
    1d3e:	8d a3       	std	Y+37, r24	; 0x25
    1d40:	9e a3       	std	Y+38, r25	; 0x26
    1d42:	89 89       	ldd	r24, Y+17	; 0x11
    1d44:	9a 89       	ldd	r25, Y+18	; 0x12
    1d46:	ab 89       	ldd	r26, Y+19	; 0x13
    1d48:	bc 89       	ldd	r27, Y+20	; 0x14
    1d4a:	22 81       	ldd	r18, Z+2	; 0x02
    1d4c:	33 81       	ldd	r19, Z+3	; 0x03
    1d4e:	82 1b       	sub	r24, r18
    1d50:	93 0b       	sbc	r25, r19
    1d52:	8f a3       	std	Y+39, r24	; 0x27
    1d54:	98 a7       	std	Y+40, r25	; 0x28
    1d56:	8d 89       	ldd	r24, Y+21	; 0x15
    1d58:	9e 89       	ldd	r25, Y+22	; 0x16
    1d5a:	af 89       	ldd	r26, Y+23	; 0x17
    1d5c:	b8 8d       	ldd	r27, Y+24	; 0x18
    1d5e:	24 81       	ldd	r18, Z+4	; 0x04
    1d60:	35 81       	ldd	r19, Z+5	; 0x05
    1d62:	91 95       	neg	r25
    1d64:	81 95       	neg	r24
    1d66:	91 09       	sbc	r25, r1
    1d68:	82 1b       	sub	r24, r18
    1d6a:	93 0b       	sbc	r25, r19
    1d6c:	89 a7       	std	Y+41, r24	; 0x29
    1d6e:	9a a7       	std	Y+42, r25	; 0x2a
		for (unsigned char i=0;i<3;i++){
    1d70:	10 e0       	ldi	r17, 0x00	; 0
    1d72:	37 c0       	rjmp	.+110    	; 0x1de2 <Read_IMU+0x2fa>
			Drone->w[i] = ((float)w_diff[i])*GYRO_SENS*D2R;
    1d74:	a1 2e       	mov	r10, r17
    1d76:	b1 2c       	mov	r11, r1
    1d78:	f5 01       	movw	r30, r10
    1d7a:	ee 0f       	add	r30, r30
    1d7c:	ff 1f       	adc	r31, r31
    1d7e:	a1 e0       	ldi	r26, 0x01	; 1
    1d80:	b0 e0       	ldi	r27, 0x00	; 0
    1d82:	ac 0f       	add	r26, r28
    1d84:	bd 1f       	adc	r27, r29
    1d86:	ea 0f       	add	r30, r26
    1d88:	fb 1f       	adc	r31, r27
    1d8a:	64 a1       	ldd	r22, Z+36	; 0x24
    1d8c:	75 a1       	ldd	r23, Z+37	; 0x25
    1d8e:	07 2e       	mov	r0, r23
    1d90:	00 0c       	add	r0, r0
    1d92:	88 0b       	sbc	r24, r24
    1d94:	99 0b       	sbc	r25, r25
    1d96:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <__floatsisf>
    1d9a:	20 e0       	ldi	r18, 0x00	; 0
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	4a ef       	ldi	r20, 0xFA	; 250
    1da0:	53 e4       	ldi	r21, 0x43	; 67
    1da2:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <__mulsf3>
    1da6:	20 e0       	ldi	r18, 0x00	; 0
    1da8:	30 e0       	ldi	r19, 0x00	; 0
    1daa:	40 e0       	ldi	r20, 0x00	; 0
    1dac:	58 e3       	ldi	r21, 0x38	; 56
    1dae:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <__mulsf3>
    1db2:	2b ed       	ldi	r18, 0xDB	; 219
    1db4:	3f e0       	ldi	r19, 0x0F	; 15
    1db6:	49 e4       	ldi	r20, 0x49	; 73
    1db8:	50 e4       	ldi	r21, 0x40	; 64
    1dba:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <__mulsf3>
    1dbe:	20 e0       	ldi	r18, 0x00	; 0
    1dc0:	30 e0       	ldi	r19, 0x00	; 0
    1dc2:	44 e3       	ldi	r20, 0x34	; 52
    1dc4:	53 e4       	ldi	r21, 0x43	; 67
    1dc6:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <__divsf3>
    1dca:	aa 0c       	add	r10, r10
    1dcc:	bb 1c       	adc	r11, r11
    1dce:	aa 0c       	add	r10, r10
    1dd0:	bb 1c       	adc	r11, r11
    1dd2:	f7 01       	movw	r30, r14
    1dd4:	ea 0d       	add	r30, r10
    1dd6:	fb 1d       	adc	r31, r11
    1dd8:	60 83       	st	Z, r22
    1dda:	71 83       	std	Z+1, r23	; 0x01
    1ddc:	82 83       	std	Z+2, r24	; 0x02
    1dde:	93 83       	std	Z+3, r25	; 0x03
			w_bias[0] = -w_xyz_FIR[0];
			w_bias[1] = w_xyz_FIR[1];
			w_bias[2] = -w_xyz_FIR[2];
		}
		signed int w_diff[3] = {-w_xyz_FIR[0]-w_bias[0], w_xyz_FIR[1]-w_bias[1], -w_xyz_FIR[2]-w_bias[2]};
		for (unsigned char i=0;i<3;i++){
    1de0:	1f 5f       	subi	r17, 0xFF	; 255
    1de2:	13 30       	cpi	r17, 0x03	; 3
    1de4:	38 f2       	brcs	.-114    	; 0x1d74 <Read_IMU+0x28c>
			Drone->w[i] = ((float)w_diff[i])*GYRO_SENS*D2R;
		}
		Drone->g_vec[0] = ((float)a_xyz_FIR[0])*ACCEL_SENS;
    1de6:	69 8d       	ldd	r22, Y+25	; 0x19
    1de8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dee:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <__floatsisf>
    1df2:	9b 01       	movw	r18, r22
    1df4:	ac 01       	movw	r20, r24
    1df6:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <__addsf3>
    1dfa:	20 e0       	ldi	r18, 0x00	; 0
    1dfc:	30 e0       	ldi	r19, 0x00	; 0
    1dfe:	40 e0       	ldi	r20, 0x00	; 0
    1e00:	58 e3       	ldi	r21, 0x38	; 56
    1e02:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <__mulsf3>
    1e06:	f7 01       	movw	r30, r14
    1e08:	64 87       	std	Z+12, r22	; 0x0c
    1e0a:	75 87       	std	Z+13, r23	; 0x0d
    1e0c:	86 87       	std	Z+14, r24	; 0x0e
    1e0e:	97 87       	std	Z+15, r25	; 0x0f
		Drone->g_vec[1] = ((float)-a_xyz_FIR[1])*ACCEL_SENS;
    1e10:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e12:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e14:	af 8d       	ldd	r26, Y+31	; 0x1f
    1e16:	b8 a1       	ldd	r27, Y+32	; 0x20
    1e18:	9c 01       	movw	r18, r24
    1e1a:	ad 01       	movw	r20, r26
    1e1c:	66 27       	eor	r22, r22
    1e1e:	77 27       	eor	r23, r23
    1e20:	cb 01       	movw	r24, r22
    1e22:	62 1b       	sub	r22, r18
    1e24:	73 0b       	sbc	r23, r19
    1e26:	84 0b       	sbc	r24, r20
    1e28:	95 0b       	sbc	r25, r21
    1e2a:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <__floatsisf>
    1e2e:	9b 01       	movw	r18, r22
    1e30:	ac 01       	movw	r20, r24
    1e32:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <__addsf3>
    1e36:	20 e0       	ldi	r18, 0x00	; 0
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	40 e0       	ldi	r20, 0x00	; 0
    1e3c:	58 e3       	ldi	r21, 0x38	; 56
    1e3e:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <__mulsf3>
    1e42:	d7 01       	movw	r26, r14
    1e44:	50 96       	adiw	r26, 0x10	; 16
    1e46:	6d 93       	st	X+, r22
    1e48:	7d 93       	st	X+, r23
    1e4a:	8d 93       	st	X+, r24
    1e4c:	9c 93       	st	X, r25
    1e4e:	53 97       	sbiw	r26, 0x13	; 19
		Drone->g_vec[2] = ((float)a_xyz_FIR[2])*ACCEL_SENS;
    1e50:	69 a1       	ldd	r22, Y+33	; 0x21
    1e52:	7a a1       	ldd	r23, Y+34	; 0x22
    1e54:	8b a1       	ldd	r24, Y+35	; 0x23
    1e56:	9c a1       	ldd	r25, Y+36	; 0x24
    1e58:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <__floatsisf>
    1e5c:	9b 01       	movw	r18, r22
    1e5e:	ac 01       	movw	r20, r24
    1e60:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <__addsf3>
    1e64:	20 e0       	ldi	r18, 0x00	; 0
    1e66:	30 e0       	ldi	r19, 0x00	; 0
    1e68:	40 e0       	ldi	r20, 0x00	; 0
    1e6a:	58 e3       	ldi	r21, 0x38	; 56
    1e6c:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <__mulsf3>
    1e70:	f7 01       	movw	r30, r14
    1e72:	64 8b       	std	Z+20, r22	; 0x14
    1e74:	75 8b       	std	Z+21, r23	; 0x15
    1e76:	86 8b       	std	Z+22, r24	; 0x16
    1e78:	97 8b       	std	Z+23, r25	; 0x17
	}
	
	return 1;
    1e7a:	81 e0       	ldi	r24, 0x01	; 1
    1e7c:	03 c0       	rjmp	.+6      	; 0x1e84 <Read_IMU+0x39c>
	static unsigned char window_counter = 0;
	unsigned char Read_status = 0;
	
	unsigned char Data[12] = {0};
	Read_status = Read_SPI(PORT_IMU, CS_IMU, (IMU_DATA_START|0x80), Data, sizeof(Data));
	if (Read_status != 2){return 0;}
    1e7e:	80 e0       	ldi	r24, 0x00	; 0
    1e80:	01 c0       	rjmp	.+2      	; 0x1e84 <Read_IMU+0x39c>
		Drone->g_vec[0] = ((float)a_xyz_FIR[0])*ACCEL_SENS;
		Drone->g_vec[1] = ((float)-a_xyz_FIR[1])*ACCEL_SENS;
		Drone->g_vec[2] = ((float)a_xyz_FIR[2])*ACCEL_SENS;
	}
	
	return 1;
    1e82:	81 e0       	ldi	r24, 0x01	; 1
}
    1e84:	aa 96       	adiw	r28, 0x2a	; 42
    1e86:	cd bf       	out	0x3d, r28	; 61
    1e88:	de bf       	out	0x3e, r29	; 62
    1e8a:	df 91       	pop	r29
    1e8c:	cf 91       	pop	r28
    1e8e:	1f 91       	pop	r17
    1e90:	0f 91       	pop	r16
    1e92:	ff 90       	pop	r15
    1e94:	ef 90       	pop	r14
    1e96:	bf 90       	pop	r11
    1e98:	af 90       	pop	r10
    1e9a:	9f 90       	pop	r9
    1e9c:	8f 90       	pop	r8
    1e9e:	08 95       	ret

00001ea0 <Setup_Mag>:

// MAGNETOMETER CODE
// Mag -> 0 is a write, 1 is a read
unsigned char  Setup_Mag(){
    1ea0:	0f 93       	push	r16
    1ea2:	1f 93       	push	r17
    1ea4:	cf 93       	push	r28
    1ea6:	df 93       	push	r29
    1ea8:	1f 92       	push	r1
    1eaa:	cd b7       	in	r28, 0x3d	; 61
    1eac:	de b7       	in	r29, 0x3e	; 62
	unsigned char MAG_status = 2;
	unsigned char Mag_ID = 0;
    1eae:	19 82       	std	Y+1, r1	; 0x01
	
	MAG_status &= Write_SPI(PORT_MAG, CS_MAG, MAG_CFG_REG_C, 0b00110100); // Enables 4 wire SPI, disables I2C
    1eb0:	24 e3       	ldi	r18, 0x34	; 52
    1eb2:	42 e6       	ldi	r20, 0x62	; 98
    1eb4:	63 e0       	ldi	r22, 0x03	; 3
    1eb6:	82 e4       	ldi	r24, 0x42	; 66
    1eb8:	0e 94 af 02 	call	0x55e	; 0x55e <Write_SPI>
    1ebc:	18 2f       	mov	r17, r24
    1ebe:	12 70       	andi	r17, 0x02	; 2
	MAG_status &= Read_SPI(PORT_MAG, CS_MAG, (MAG_WHO_AM_I|0x80), &Mag_ID, 1);
    1ec0:	01 e0       	ldi	r16, 0x01	; 1
    1ec2:	9e 01       	movw	r18, r28
    1ec4:	2f 5f       	subi	r18, 0xFF	; 255
    1ec6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ec8:	4f ec       	ldi	r20, 0xCF	; 207
    1eca:	63 e0       	ldi	r22, 0x03	; 3
    1ecc:	82 e4       	ldi	r24, 0x42	; 66
    1ece:	0e 94 0f 02 	call	0x41e	; 0x41e <Read_SPI>
    1ed2:	18 23       	and	r17, r24
	MAG_status &= Write_SPI(PORT_MAG, CS_MAG, MAG_CFG_REG_A, 0b10001100); // Sets continuous mode, 100 Hz ODR, temp compensation enabled
    1ed4:	2c e8       	ldi	r18, 0x8C	; 140
    1ed6:	40 e6       	ldi	r20, 0x60	; 96
    1ed8:	63 e0       	ldi	r22, 0x03	; 3
    1eda:	82 e4       	ldi	r24, 0x42	; 66
    1edc:	0e 94 af 02 	call	0x55e	; 0x55e <Write_SPI>
    1ee0:	18 23       	and	r17, r24
	MAG_status &= Write_SPI(PORT_MAG, CS_MAG, MAG_CFG_REG_B, 0b00000001); // Enables LPF
    1ee2:	21 e0       	ldi	r18, 0x01	; 1
    1ee4:	41 e6       	ldi	r20, 0x61	; 97
    1ee6:	63 e0       	ldi	r22, 0x03	; 3
    1ee8:	82 e4       	ldi	r24, 0x42	; 66
    1eea:	0e 94 af 02 	call	0x55e	; 0x55e <Write_SPI>
    1eee:	81 23       	and	r24, r17
	
	if (MAG_status != 2){return 0;}
    1ef0:	82 30       	cpi	r24, 0x02	; 2
    1ef2:	11 f0       	breq	.+4      	; 0x1ef8 <Setup_Mag+0x58>
    1ef4:	80 e0       	ldi	r24, 0x00	; 0
    1ef6:	01 c0       	rjmp	.+2      	; 0x1efa <Setup_Mag+0x5a>
	return 1;
    1ef8:	81 e0       	ldi	r24, 0x01	; 1
}
    1efa:	0f 90       	pop	r0
    1efc:	df 91       	pop	r29
    1efe:	cf 91       	pop	r28
    1f00:	1f 91       	pop	r17
    1f02:	0f 91       	pop	r16
    1f04:	08 95       	ret

00001f06 <Read_Mag>:

unsigned char Read_Mag(States *Drone){
    1f06:	4f 92       	push	r4
    1f08:	5f 92       	push	r5
    1f0a:	6f 92       	push	r6
    1f0c:	7f 92       	push	r7
    1f0e:	8f 92       	push	r8
    1f10:	9f 92       	push	r9
    1f12:	af 92       	push	r10
    1f14:	bf 92       	push	r11
    1f16:	ef 92       	push	r14
    1f18:	ff 92       	push	r15
    1f1a:	0f 93       	push	r16
    1f1c:	1f 93       	push	r17
    1f1e:	cf 93       	push	r28
    1f20:	df 93       	push	r29
    1f22:	cd b7       	in	r28, 0x3d	; 61
    1f24:	de b7       	in	r29, 0x3e	; 62
    1f26:	62 97       	sbiw	r28, 0x12	; 18
    1f28:	cd bf       	out	0x3d, r28	; 61
    1f2a:	de bf       	out	0x3e, r29	; 62
    1f2c:	7c 01       	movw	r14, r24
		m_min[3],
		hard_iron[3];
	static unsigned char window_counter;
	unsigned char Read_status = 0;
	
	unsigned char Data[6] = {0};
    1f2e:	9e 01       	movw	r18, r28
    1f30:	2f 5f       	subi	r18, 0xFF	; 255
    1f32:	3f 4f       	sbci	r19, 0xFF	; 255
    1f34:	86 e0       	ldi	r24, 0x06	; 6
    1f36:	d9 01       	movw	r26, r18
    1f38:	1d 92       	st	X+, r1
    1f3a:	8a 95       	dec	r24
    1f3c:	e9 f7       	brne	.-6      	; 0x1f38 <Read_Mag+0x32>
	Read_status = Read_SPI(PORT_MAG, CS_MAG, (MAG_DATA_START|0x80), Data, 6);
    1f3e:	06 e0       	ldi	r16, 0x06	; 6
    1f40:	48 ee       	ldi	r20, 0xE8	; 232
    1f42:	63 e0       	ldi	r22, 0x03	; 3
    1f44:	82 e4       	ldi	r24, 0x42	; 66
    1f46:	0e 94 0f 02 	call	0x41e	; 0x41e <Read_SPI>
	if (Read_status != 2){return 0;}
    1f4a:	82 30       	cpi	r24, 0x02	; 2
    1f4c:	09 f0       	breq	.+2      	; 0x1f50 <Read_Mag+0x4a>
    1f4e:	f2 c1       	rjmp	.+996    	; 0x2334 <Read_Mag+0x42e>
    1f50:	60 e0       	ldi	r22, 0x00	; 0
    1f52:	2c c0       	rjmp	.+88     	; 0x1fac <Read_Mag+0xa6>
	
	for (unsigned char i=0;i<3;i++){
		m_xyz_window[i][window_counter] = (((signed int)Data[2*i+1])<<8) + Data[2*i];
    1f54:	70 91 22 4b 	lds	r23, 0x4B22	; 0x804b22 <window_counter.4902>
    1f58:	86 2f       	mov	r24, r22
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	ac 01       	movw	r20, r24
    1f5e:	44 0f       	add	r20, r20
    1f60:	55 1f       	adc	r21, r21
    1f62:	fa 01       	movw	r30, r20
    1f64:	31 96       	adiw	r30, 0x01	; 1
    1f66:	21 e0       	ldi	r18, 0x01	; 1
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	2c 0f       	add	r18, r28
    1f6c:	3d 1f       	adc	r19, r29
    1f6e:	e2 0f       	add	r30, r18
    1f70:	f3 1f       	adc	r31, r19
    1f72:	20 81       	ld	r18, Z
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	32 2f       	mov	r19, r18
    1f78:	22 27       	eor	r18, r18
    1f7a:	e1 e0       	ldi	r30, 0x01	; 1
    1f7c:	f0 e0       	ldi	r31, 0x00	; 0
    1f7e:	ec 0f       	add	r30, r28
    1f80:	fd 1f       	adc	r31, r29
    1f82:	e4 0f       	add	r30, r20
    1f84:	f5 1f       	adc	r31, r21
    1f86:	40 81       	ld	r20, Z
    1f88:	24 0f       	add	r18, r20
    1f8a:	31 1d       	adc	r19, r1
    1f8c:	fc 01       	movw	r30, r24
    1f8e:	e2 95       	swap	r30
    1f90:	f2 95       	swap	r31
    1f92:	f0 7f       	andi	r31, 0xF0	; 240
    1f94:	fe 27       	eor	r31, r30
    1f96:	e0 7f       	andi	r30, 0xF0	; 240
    1f98:	fe 27       	eor	r31, r30
    1f9a:	e7 0f       	add	r30, r23
    1f9c:	f1 1d       	adc	r31, r1
    1f9e:	ee 0f       	add	r30, r30
    1fa0:	ff 1f       	adc	r31, r31
    1fa2:	ee 53       	subi	r30, 0x3E	; 62
    1fa4:	f5 4b       	sbci	r31, 0xB5	; 181
    1fa6:	20 83       	st	Z, r18
    1fa8:	31 83       	std	Z+1, r19	; 0x01
	
	unsigned char Data[6] = {0};
	Read_status = Read_SPI(PORT_MAG, CS_MAG, (MAG_DATA_START|0x80), Data, 6);
	if (Read_status != 2){return 0;}
	
	for (unsigned char i=0;i<3;i++){
    1faa:	6f 5f       	subi	r22, 0xFF	; 255
    1fac:	63 30       	cpi	r22, 0x03	; 3
    1fae:	90 f2       	brcs	.-92     	; 0x1f54 <Read_Mag+0x4e>
		m_xyz_window[i][window_counter] = (((signed int)Data[2*i+1])<<8) + Data[2*i];
	}
	window_counter++;
    1fb0:	80 91 22 4b 	lds	r24, 0x4B22	; 0x804b22 <window_counter.4902>
    1fb4:	8f 5f       	subi	r24, 0xFF	; 255
    1fb6:	80 93 22 4b 	sts	0x4B22, r24	; 0x804b22 <window_counter.4902>
	if (window_counter >= MAG_WINDOW_SIZE){
    1fba:	80 31       	cpi	r24, 0x10	; 16
    1fbc:	08 f4       	brcc	.+2      	; 0x1fc0 <Read_Mag+0xba>
    1fbe:	bc c1       	rjmp	.+888    	; 0x2338 <Read_Mag+0x432>
		window_counter = 0;
    1fc0:	10 92 22 4b 	sts	0x4B22, r1	; 0x804b22 <window_counter.4902>
		volatile signed long m_xyz_FIP[3] = {0};
    1fc4:	fe 01       	movw	r30, r28
    1fc6:	37 96       	adiw	r30, 0x07	; 7
    1fc8:	8c e0       	ldi	r24, 0x0C	; 12
    1fca:	df 01       	movw	r26, r30
    1fcc:	1d 92       	st	X+, r1
    1fce:	8a 95       	dec	r24
    1fd0:	e9 f7       	brne	.-6      	; 0x1fcc <Read_Mag+0xc6>
		for (unsigned char i=0;i<3;i++){
    1fd2:	30 e0       	ldi	r19, 0x00	; 0
    1fd4:	19 c1       	rjmp	.+562    	; 0x2208 <Read_Mag+0x302>
			for (unsigned char j=0;j<MAG_WINDOW_SIZE;j++){
				m_xyz_FIP[i] += m_xyz_window[i][j];
    1fd6:	83 2f       	mov	r24, r19
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	dc 01       	movw	r26, r24
    1fdc:	aa 0f       	add	r26, r26
    1fde:	bb 1f       	adc	r27, r27
    1fe0:	aa 0f       	add	r26, r26
    1fe2:	bb 1f       	adc	r27, r27
    1fe4:	e1 e0       	ldi	r30, 0x01	; 1
    1fe6:	f0 e0       	ldi	r31, 0x00	; 0
    1fe8:	ec 0f       	add	r30, r28
    1fea:	fd 1f       	adc	r31, r29
    1fec:	ae 0f       	add	r26, r30
    1fee:	bf 1f       	adc	r27, r31
    1ff0:	16 96       	adiw	r26, 0x06	; 6
    1ff2:	8d 90       	ld	r8, X+
    1ff4:	9d 90       	ld	r9, X+
    1ff6:	ad 90       	ld	r10, X+
    1ff8:	bc 90       	ld	r11, X
    1ffa:	19 97       	sbiw	r26, 0x09	; 9
    1ffc:	fc 01       	movw	r30, r24
    1ffe:	e2 95       	swap	r30
    2000:	f2 95       	swap	r31
    2002:	f0 7f       	andi	r31, 0xF0	; 240
    2004:	fe 27       	eor	r31, r30
    2006:	e0 7f       	andi	r30, 0xF0	; 240
    2008:	fe 27       	eor	r31, r30
    200a:	e2 0f       	add	r30, r18
    200c:	f1 1d       	adc	r31, r1
    200e:	ee 0f       	add	r30, r30
    2010:	ff 1f       	adc	r31, r31
    2012:	ee 53       	subi	r30, 0x3E	; 62
    2014:	f5 4b       	sbci	r31, 0xB5	; 181
    2016:	40 81       	ld	r20, Z
    2018:	51 81       	ldd	r21, Z+1	; 0x01
    201a:	05 2e       	mov	r0, r21
    201c:	00 0c       	add	r0, r0
    201e:	66 0b       	sbc	r22, r22
    2020:	77 0b       	sbc	r23, r23
    2022:	48 0d       	add	r20, r8
    2024:	59 1d       	adc	r21, r9
    2026:	6a 1d       	adc	r22, r10
    2028:	7b 1d       	adc	r23, r11
    202a:	16 96       	adiw	r26, 0x06	; 6
    202c:	4d 93       	st	X+, r20
    202e:	5d 93       	st	X+, r21
    2030:	6d 93       	st	X+, r22
    2032:	7c 93       	st	X, r23
    2034:	19 97       	sbiw	r26, 0x09	; 9
	window_counter++;
	if (window_counter >= MAG_WINDOW_SIZE){
		window_counter = 0;
		volatile signed long m_xyz_FIP[3] = {0};
		for (unsigned char i=0;i<3;i++){
			for (unsigned char j=0;j<MAG_WINDOW_SIZE;j++){
    2036:	2f 5f       	subi	r18, 0xFF	; 255
    2038:	01 c0       	rjmp	.+2      	; 0x203c <Read_Mag+0x136>
    203a:	20 e0       	ldi	r18, 0x00	; 0
    203c:	20 31       	cpi	r18, 0x10	; 16
    203e:	58 f2       	brcs	.-106    	; 0x1fd6 <Read_Mag+0xd0>
				m_xyz_FIP[i] += m_xyz_window[i][j];
			}
			m_xyz_FIP[i] >>= 4;
    2040:	83 2f       	mov	r24, r19
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	fc 01       	movw	r30, r24
    2046:	ee 0f       	add	r30, r30
    2048:	ff 1f       	adc	r31, r31
    204a:	ee 0f       	add	r30, r30
    204c:	ff 1f       	adc	r31, r31
    204e:	41 e0       	ldi	r20, 0x01	; 1
    2050:	50 e0       	ldi	r21, 0x00	; 0
    2052:	4c 0f       	add	r20, r28
    2054:	5d 1f       	adc	r21, r29
    2056:	e4 0f       	add	r30, r20
    2058:	f5 1f       	adc	r31, r21
    205a:	46 81       	ldd	r20, Z+6	; 0x06
    205c:	57 81       	ldd	r21, Z+7	; 0x07
    205e:	60 85       	ldd	r22, Z+8	; 0x08
    2060:	71 85       	ldd	r23, Z+9	; 0x09
    2062:	68 94       	set
    2064:	13 f8       	bld	r1, 3
    2066:	75 95       	asr	r23
    2068:	67 95       	ror	r22
    206a:	57 95       	ror	r21
    206c:	47 95       	ror	r20
    206e:	16 94       	lsr	r1
    2070:	d1 f7       	brne	.-12     	; 0x2066 <Read_Mag+0x160>
    2072:	46 83       	std	Z+6, r20	; 0x06
    2074:	57 83       	std	Z+7, r21	; 0x07
    2076:	60 87       	std	Z+8, r22	; 0x08
    2078:	71 87       	std	Z+9, r23	; 0x09
			if (m_xyz_FIP[i] > m_max[i]){
    207a:	46 80       	ldd	r4, Z+6	; 0x06
    207c:	57 80       	ldd	r5, Z+7	; 0x07
    207e:	60 84       	ldd	r6, Z+8	; 0x08
    2080:	71 84       	ldd	r7, Z+9	; 0x09
    2082:	fc 01       	movw	r30, r24
    2084:	ee 0f       	add	r30, r30
    2086:	ff 1f       	adc	r31, r31
    2088:	e4 54       	subi	r30, 0x44	; 68
    208a:	f5 4b       	sbci	r31, 0xB5	; 181
    208c:	40 81       	ld	r20, Z
    208e:	51 81       	ldd	r21, Z+1	; 0x01
    2090:	4a 01       	movw	r8, r20
    2092:	05 2e       	mov	r0, r21
    2094:	00 0c       	add	r0, r0
    2096:	aa 08       	sbc	r10, r10
    2098:	bb 08       	sbc	r11, r11
    209a:	84 14       	cp	r8, r4
    209c:	95 04       	cpc	r9, r5
    209e:	a6 04       	cpc	r10, r6
    20a0:	b7 04       	cpc	r11, r7
    20a2:	0c f0       	brlt	.+2      	; 0x20a6 <Read_Mag+0x1a0>
    20a4:	4e c0       	rjmp	.+156    	; 0x2142 <Read_Mag+0x23c>
				m_max[i] = m_xyz_FIP[i];
    20a6:	fc 01       	movw	r30, r24
    20a8:	ee 0f       	add	r30, r30
    20aa:	ff 1f       	adc	r31, r31
    20ac:	ee 0f       	add	r30, r30
    20ae:	ff 1f       	adc	r31, r31
    20b0:	61 e0       	ldi	r22, 0x01	; 1
    20b2:	70 e0       	ldi	r23, 0x00	; 0
    20b4:	6c 0f       	add	r22, r28
    20b6:	7d 1f       	adc	r23, r29
    20b8:	e6 0f       	add	r30, r22
    20ba:	f7 1f       	adc	r31, r23
    20bc:	46 81       	ldd	r20, Z+6	; 0x06
    20be:	57 81       	ldd	r21, Z+7	; 0x07
    20c0:	60 85       	ldd	r22, Z+8	; 0x08
    20c2:	71 85       	ldd	r23, Z+9	; 0x09
    20c4:	fc 01       	movw	r30, r24
    20c6:	ee 0f       	add	r30, r30
    20c8:	ff 1f       	adc	r31, r31
    20ca:	e4 54       	subi	r30, 0x44	; 68
    20cc:	f5 4b       	sbci	r31, 0xB5	; 181
    20ce:	40 83       	st	Z, r20
    20d0:	51 83       	std	Z+1, r21	; 0x01
				if (abs(m_max[i])<abs(m_min[i])){
    20d2:	da 01       	movw	r26, r20
    20d4:	55 23       	and	r21, r21
    20d6:	24 f4       	brge	.+8      	; 0x20e0 <Read_Mag+0x1da>
    20d8:	aa 27       	eor	r26, r26
    20da:	bb 27       	eor	r27, r27
    20dc:	a4 1b       	sub	r26, r20
    20de:	b5 0b       	sbc	r27, r21
    20e0:	fc 01       	movw	r30, r24
    20e2:	ee 0f       	add	r30, r30
    20e4:	ff 1f       	adc	r31, r31
    20e6:	ea 54       	subi	r30, 0x4A	; 74
    20e8:	f5 4b       	sbci	r31, 0xB5	; 181
    20ea:	01 90       	ld	r0, Z+
    20ec:	f0 81       	ld	r31, Z
    20ee:	e0 2d       	mov	r30, r0
    20f0:	5f 01       	movw	r10, r30
    20f2:	ff 23       	and	r31, r31
    20f4:	24 f4       	brge	.+8      	; 0x20fe <Read_Mag+0x1f8>
    20f6:	aa 24       	eor	r10, r10
    20f8:	bb 24       	eor	r11, r11
    20fa:	ae 1a       	sub	r10, r30
    20fc:	bf 0a       	sbc	r11, r31
    20fe:	aa 15       	cp	r26, r10
    2100:	bb 05       	cpc	r27, r11
    2102:	54 f4       	brge	.+20     	; 0x2118 <Read_Mag+0x212>
					hard_iron[i] = m_min[i]-m_max[i];
    2104:	e4 1b       	sub	r30, r20
    2106:	f5 0b       	sbc	r31, r21
    2108:	dc 01       	movw	r26, r24
    210a:	aa 0f       	add	r26, r26
    210c:	bb 1f       	adc	r27, r27
    210e:	a0 55       	subi	r26, 0x50	; 80
    2110:	b5 4b       	sbci	r27, 0xB5	; 181
    2112:	ed 93       	st	X+, r30
    2114:	fc 93       	st	X, r31
    2116:	09 c0       	rjmp	.+18     	; 0x212a <Read_Mag+0x224>
				}
				else{
					hard_iron[i] = m_max[i]-m_min[i];
    2118:	4e 1b       	sub	r20, r30
    211a:	5f 0b       	sbc	r21, r31
    211c:	fc 01       	movw	r30, r24
    211e:	ee 0f       	add	r30, r30
    2120:	ff 1f       	adc	r31, r31
    2122:	e0 55       	subi	r30, 0x50	; 80
    2124:	f5 4b       	sbci	r31, 0xB5	; 181
    2126:	40 83       	st	Z, r20
    2128:	51 83       	std	Z+1, r21	; 0x01
				}
				hard_iron[i] >>= 1;
    212a:	88 0f       	add	r24, r24
    212c:	99 1f       	adc	r25, r25
    212e:	fc 01       	movw	r30, r24
    2130:	e0 55       	subi	r30, 0x50	; 80
    2132:	f5 4b       	sbci	r31, 0xB5	; 181
    2134:	80 81       	ld	r24, Z
    2136:	91 81       	ldd	r25, Z+1	; 0x01
    2138:	95 95       	asr	r25
    213a:	87 95       	ror	r24
    213c:	80 83       	st	Z, r24
    213e:	91 83       	std	Z+1, r25	; 0x01
    2140:	62 c0       	rjmp	.+196    	; 0x2206 <Read_Mag+0x300>
			}
			else if (m_xyz_FIP[i] < m_min[i]){
    2142:	fc 01       	movw	r30, r24
    2144:	ee 0f       	add	r30, r30
    2146:	ff 1f       	adc	r31, r31
    2148:	ee 0f       	add	r30, r30
    214a:	ff 1f       	adc	r31, r31
    214c:	a1 e0       	ldi	r26, 0x01	; 1
    214e:	b0 e0       	ldi	r27, 0x00	; 0
    2150:	ac 0f       	add	r26, r28
    2152:	bd 1f       	adc	r27, r29
    2154:	ea 0f       	add	r30, r26
    2156:	fb 1f       	adc	r31, r27
    2158:	46 80       	ldd	r4, Z+6	; 0x06
    215a:	57 80       	ldd	r5, Z+7	; 0x07
    215c:	60 84       	ldd	r6, Z+8	; 0x08
    215e:	71 84       	ldd	r7, Z+9	; 0x09
    2160:	fc 01       	movw	r30, r24
    2162:	ee 0f       	add	r30, r30
    2164:	ff 1f       	adc	r31, r31
    2166:	ea 54       	subi	r30, 0x4A	; 74
    2168:	f5 4b       	sbci	r31, 0xB5	; 181
    216a:	80 80       	ld	r8, Z
    216c:	91 80       	ldd	r9, Z+1	; 0x01
    216e:	09 2c       	mov	r0, r9
    2170:	00 0c       	add	r0, r0
    2172:	aa 08       	sbc	r10, r10
    2174:	bb 08       	sbc	r11, r11
    2176:	48 14       	cp	r4, r8
    2178:	59 04       	cpc	r5, r9
    217a:	6a 04       	cpc	r6, r10
    217c:	7b 04       	cpc	r7, r11
    217e:	0c f0       	brlt	.+2      	; 0x2182 <Read_Mag+0x27c>
    2180:	42 c0       	rjmp	.+132    	; 0x2206 <Read_Mag+0x300>
				m_min[i] = m_xyz_FIP[i];
    2182:	fc 01       	movw	r30, r24
    2184:	ee 0f       	add	r30, r30
    2186:	ff 1f       	adc	r31, r31
    2188:	ee 0f       	add	r30, r30
    218a:	ff 1f       	adc	r31, r31
    218c:	ea 0f       	add	r30, r26
    218e:	fb 1f       	adc	r31, r27
    2190:	86 80       	ldd	r8, Z+6	; 0x06
    2192:	97 80       	ldd	r9, Z+7	; 0x07
    2194:	a0 84       	ldd	r10, Z+8	; 0x08
    2196:	b1 84       	ldd	r11, Z+9	; 0x09
    2198:	f4 01       	movw	r30, r8
    219a:	dc 01       	movw	r26, r24
    219c:	aa 0f       	add	r26, r26
    219e:	bb 1f       	adc	r27, r27
    21a0:	aa 54       	subi	r26, 0x4A	; 74
    21a2:	b5 4b       	sbci	r27, 0xB5	; 181
    21a4:	8d 92       	st	X+, r8
    21a6:	9c 92       	st	X, r9
				if (abs(m_max[i])<abs(m_min[i])){
    21a8:	ba 01       	movw	r22, r20
    21aa:	55 23       	and	r21, r21
    21ac:	24 f4       	brge	.+8      	; 0x21b6 <Read_Mag+0x2b0>
    21ae:	66 27       	eor	r22, r22
    21b0:	77 27       	eor	r23, r23
    21b2:	64 1b       	sub	r22, r20
    21b4:	75 0b       	sbc	r23, r21
    21b6:	d4 01       	movw	r26, r8
    21b8:	ff 23       	and	r31, r31
    21ba:	24 f4       	brge	.+8      	; 0x21c4 <Read_Mag+0x2be>
    21bc:	aa 27       	eor	r26, r26
    21be:	bb 27       	eor	r27, r27
    21c0:	a8 19       	sub	r26, r8
    21c2:	b9 09       	sbc	r27, r9
    21c4:	6a 17       	cp	r22, r26
    21c6:	7b 07       	cpc	r23, r27
    21c8:	54 f4       	brge	.+20     	; 0x21de <Read_Mag+0x2d8>
					hard_iron[i] = m_min[i]-m_max[i];
    21ca:	84 1a       	sub	r8, r20
    21cc:	95 0a       	sbc	r9, r21
    21ce:	fc 01       	movw	r30, r24
    21d0:	ee 0f       	add	r30, r30
    21d2:	ff 1f       	adc	r31, r31
    21d4:	e0 55       	subi	r30, 0x50	; 80
    21d6:	f5 4b       	sbci	r31, 0xB5	; 181
    21d8:	80 82       	st	Z, r8
    21da:	91 82       	std	Z+1, r9	; 0x01
    21dc:	09 c0       	rjmp	.+18     	; 0x21f0 <Read_Mag+0x2ea>
				}
				else{
					hard_iron[i] = m_max[i]-m_min[i];
    21de:	48 19       	sub	r20, r8
    21e0:	59 09       	sbc	r21, r9
    21e2:	fc 01       	movw	r30, r24
    21e4:	ee 0f       	add	r30, r30
    21e6:	ff 1f       	adc	r31, r31
    21e8:	e0 55       	subi	r30, 0x50	; 80
    21ea:	f5 4b       	sbci	r31, 0xB5	; 181
    21ec:	40 83       	st	Z, r20
    21ee:	51 83       	std	Z+1, r21	; 0x01
				}
				hard_iron[i] >>= 1;
    21f0:	88 0f       	add	r24, r24
    21f2:	99 1f       	adc	r25, r25
    21f4:	fc 01       	movw	r30, r24
    21f6:	e0 55       	subi	r30, 0x50	; 80
    21f8:	f5 4b       	sbci	r31, 0xB5	; 181
    21fa:	80 81       	ld	r24, Z
    21fc:	91 81       	ldd	r25, Z+1	; 0x01
    21fe:	95 95       	asr	r25
    2200:	87 95       	ror	r24
    2202:	80 83       	st	Z, r24
    2204:	91 83       	std	Z+1, r25	; 0x01
	}
	window_counter++;
	if (window_counter >= MAG_WINDOW_SIZE){
		window_counter = 0;
		volatile signed long m_xyz_FIP[3] = {0};
		for (unsigned char i=0;i<3;i++){
    2206:	3f 5f       	subi	r19, 0xFF	; 255
    2208:	33 30       	cpi	r19, 0x03	; 3
    220a:	08 f4       	brcc	.+2      	; 0x220e <Read_Mag+0x308>
    220c:	16 cf       	rjmp	.-468    	; 0x203a <Read_Mag+0x134>
					hard_iron[i] = m_max[i]-m_min[i];
				}
				hard_iron[i] >>= 1;
			}
		}
		if (g_seconds > 2){
    220e:	80 91 75 4a 	lds	r24, 0x4A75	; 0x804a75 <g_seconds>
    2212:	90 91 76 4a 	lds	r25, 0x4A76	; 0x804a76 <g_seconds+0x1>
    2216:	a0 91 77 4a 	lds	r26, 0x4A77	; 0x804a77 <g_seconds+0x2>
    221a:	b0 91 78 4a 	lds	r27, 0x4A78	; 0x804a78 <g_seconds+0x3>
    221e:	03 97       	sbiw	r24, 0x03	; 3
    2220:	a1 05       	cpc	r26, r1
    2222:	b1 05       	cpc	r27, r1
    2224:	08 f4       	brcc	.+2      	; 0x2228 <Read_Mag+0x322>
    2226:	8a c0       	rjmp	.+276    	; 0x233c <Read_Mag+0x436>
			Drone->m_vec[0] = ((float)(m_xyz_FIP[1] - hard_iron[1]))/(hard_iron[1]*2.0);
    2228:	8b 85       	ldd	r24, Y+11	; 0x0b
    222a:	9c 85       	ldd	r25, Y+12	; 0x0c
    222c:	ad 85       	ldd	r26, Y+13	; 0x0d
    222e:	be 85       	ldd	r27, Y+14	; 0x0e
    2230:	00 eb       	ldi	r16, 0xB0	; 176
    2232:	1a e4       	ldi	r17, 0x4A	; 74
    2234:	f8 01       	movw	r30, r16
    2236:	82 80       	ldd	r8, Z+2	; 0x02
    2238:	93 80       	ldd	r9, Z+3	; 0x03
    223a:	09 2c       	mov	r0, r9
    223c:	00 0c       	add	r0, r0
    223e:	aa 08       	sbc	r10, r10
    2240:	bb 08       	sbc	r11, r11
    2242:	bc 01       	movw	r22, r24
    2244:	cd 01       	movw	r24, r26
    2246:	68 19       	sub	r22, r8
    2248:	79 09       	sbc	r23, r9
    224a:	8a 09       	sbc	r24, r10
    224c:	9b 09       	sbc	r25, r11
    224e:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <__floatsisf>
    2252:	2b 01       	movw	r4, r22
    2254:	3c 01       	movw	r6, r24
    2256:	c5 01       	movw	r24, r10
    2258:	b4 01       	movw	r22, r8
    225a:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <__floatsisf>
    225e:	9b 01       	movw	r18, r22
    2260:	ac 01       	movw	r20, r24
    2262:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <__addsf3>
    2266:	9b 01       	movw	r18, r22
    2268:	ac 01       	movw	r20, r24
    226a:	c3 01       	movw	r24, r6
    226c:	b2 01       	movw	r22, r4
    226e:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <__divsf3>
    2272:	d7 01       	movw	r26, r14
    2274:	58 96       	adiw	r26, 0x18	; 24
    2276:	6d 93       	st	X+, r22
    2278:	7d 93       	st	X+, r23
    227a:	8d 93       	st	X+, r24
    227c:	9c 93       	st	X, r25
    227e:	5b 97       	sbiw	r26, 0x1b	; 27
			Drone->m_vec[1] = -((float)(m_xyz_FIP[0]- hard_iron[0]))/(hard_iron[0]*2.0);
    2280:	8f 81       	ldd	r24, Y+7	; 0x07
    2282:	98 85       	ldd	r25, Y+8	; 0x08
    2284:	a9 85       	ldd	r26, Y+9	; 0x09
    2286:	ba 85       	ldd	r27, Y+10	; 0x0a
    2288:	f8 01       	movw	r30, r16
    228a:	80 80       	ld	r8, Z
    228c:	91 80       	ldd	r9, Z+1	; 0x01
    228e:	09 2c       	mov	r0, r9
    2290:	00 0c       	add	r0, r0
    2292:	aa 08       	sbc	r10, r10
    2294:	bb 08       	sbc	r11, r11
    2296:	bc 01       	movw	r22, r24
    2298:	cd 01       	movw	r24, r26
    229a:	68 19       	sub	r22, r8
    229c:	79 09       	sbc	r23, r9
    229e:	8a 09       	sbc	r24, r10
    22a0:	9b 09       	sbc	r25, r11
    22a2:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <__floatsisf>
    22a6:	2b 01       	movw	r4, r22
    22a8:	3c 01       	movw	r6, r24
    22aa:	77 fa       	bst	r7, 7
    22ac:	70 94       	com	r7
    22ae:	77 f8       	bld	r7, 7
    22b0:	70 94       	com	r7
    22b2:	c5 01       	movw	r24, r10
    22b4:	b4 01       	movw	r22, r8
    22b6:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <__floatsisf>
    22ba:	9b 01       	movw	r18, r22
    22bc:	ac 01       	movw	r20, r24
    22be:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <__addsf3>
    22c2:	9b 01       	movw	r18, r22
    22c4:	ac 01       	movw	r20, r24
    22c6:	c3 01       	movw	r24, r6
    22c8:	b2 01       	movw	r22, r4
    22ca:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <__divsf3>
    22ce:	d7 01       	movw	r26, r14
    22d0:	5c 96       	adiw	r26, 0x1c	; 28
    22d2:	6d 93       	st	X+, r22
    22d4:	7d 93       	st	X+, r23
    22d6:	8d 93       	st	X+, r24
    22d8:	9c 93       	st	X, r25
    22da:	5f 97       	sbiw	r26, 0x1f	; 31
			Drone->m_vec[2] = ((float)(m_xyz_FIP[2] - hard_iron[2]))/(hard_iron[2]*2.0);
    22dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    22de:	98 89       	ldd	r25, Y+16	; 0x10
    22e0:	a9 89       	ldd	r26, Y+17	; 0x11
    22e2:	ba 89       	ldd	r27, Y+18	; 0x12
    22e4:	f8 01       	movw	r30, r16
    22e6:	84 80       	ldd	r8, Z+4	; 0x04
    22e8:	95 80       	ldd	r9, Z+5	; 0x05
    22ea:	09 2c       	mov	r0, r9
    22ec:	00 0c       	add	r0, r0
    22ee:	aa 08       	sbc	r10, r10
    22f0:	bb 08       	sbc	r11, r11
    22f2:	bc 01       	movw	r22, r24
    22f4:	cd 01       	movw	r24, r26
    22f6:	68 19       	sub	r22, r8
    22f8:	79 09       	sbc	r23, r9
    22fa:	8a 09       	sbc	r24, r10
    22fc:	9b 09       	sbc	r25, r11
    22fe:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <__floatsisf>
    2302:	2b 01       	movw	r4, r22
    2304:	3c 01       	movw	r6, r24
    2306:	c5 01       	movw	r24, r10
    2308:	b4 01       	movw	r22, r8
    230a:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <__floatsisf>
    230e:	9b 01       	movw	r18, r22
    2310:	ac 01       	movw	r20, r24
    2312:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <__addsf3>
    2316:	9b 01       	movw	r18, r22
    2318:	ac 01       	movw	r20, r24
    231a:	c3 01       	movw	r24, r6
    231c:	b2 01       	movw	r22, r4
    231e:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <__divsf3>
    2322:	d7 01       	movw	r26, r14
    2324:	90 96       	adiw	r26, 0x20	; 32
    2326:	6d 93       	st	X+, r22
    2328:	7d 93       	st	X+, r23
    232a:	8d 93       	st	X+, r24
    232c:	9c 93       	st	X, r25
    232e:	93 97       	sbiw	r26, 0x23	; 35
		}
	}
	
	return 1;
    2330:	81 e0       	ldi	r24, 0x01	; 1
    2332:	05 c0       	rjmp	.+10     	; 0x233e <Read_Mag+0x438>
	static unsigned char window_counter;
	unsigned char Read_status = 0;
	
	unsigned char Data[6] = {0};
	Read_status = Read_SPI(PORT_MAG, CS_MAG, (MAG_DATA_START|0x80), Data, 6);
	if (Read_status != 2){return 0;}
    2334:	80 e0       	ldi	r24, 0x00	; 0
    2336:	03 c0       	rjmp	.+6      	; 0x233e <Read_Mag+0x438>
			Drone->m_vec[1] = -((float)(m_xyz_FIP[0]- hard_iron[0]))/(hard_iron[0]*2.0);
			Drone->m_vec[2] = ((float)(m_xyz_FIP[2] - hard_iron[2]))/(hard_iron[2]*2.0);
		}
	}
	
	return 1;
    2338:	81 e0       	ldi	r24, 0x01	; 1
    233a:	01 c0       	rjmp	.+2      	; 0x233e <Read_Mag+0x438>
    233c:	81 e0       	ldi	r24, 0x01	; 1
}
    233e:	62 96       	adiw	r28, 0x12	; 18
    2340:	cd bf       	out	0x3d, r28	; 61
    2342:	de bf       	out	0x3e, r29	; 62
    2344:	df 91       	pop	r29
    2346:	cf 91       	pop	r28
    2348:	1f 91       	pop	r17
    234a:	0f 91       	pop	r16
    234c:	ff 90       	pop	r15
    234e:	ef 90       	pop	r14
    2350:	bf 90       	pop	r11
    2352:	af 90       	pop	r10
    2354:	9f 90       	pop	r9
    2356:	8f 90       	pop	r8
    2358:	7f 90       	pop	r7
    235a:	6f 90       	pop	r6
    235c:	5f 90       	pop	r5
    235e:	4f 90       	pop	r4
    2360:	08 95       	ret

00002362 <LLA_to_NED>:
		}
	}
	return 0;
}

unsigned char LLA_to_NED(signed long Latitude, signed long Longitude, float Height, float Position_NED[3]){
    2362:	4f 92       	push	r4
    2364:	5f 92       	push	r5
    2366:	6f 92       	push	r6
    2368:	7f 92       	push	r7
    236a:	8f 92       	push	r8
    236c:	9f 92       	push	r9
    236e:	af 92       	push	r10
    2370:	bf 92       	push	r11
    2372:	cf 92       	push	r12
    2374:	df 92       	push	r13
    2376:	ef 92       	push	r14
    2378:	ff 92       	push	r15
    237a:	0f 93       	push	r16
    237c:	1f 93       	push	r17
    237e:	cf 93       	push	r28
    2380:	df 93       	push	r29
    2382:	cd b7       	in	r28, 0x3d	; 61
    2384:	de b7       	in	r29, 0x3e	; 62
    2386:	68 97       	sbiw	r28, 0x18	; 24
    2388:	cd bf       	out	0x3d, r28	; 61
    238a:	de bf       	out	0x3e, r29	; 62
    238c:	29 01       	movw	r4, r18
    238e:	3a 01       	movw	r6, r20
    2390:	ed 86       	std	Y+13, r14	; 0x0d
    2392:	fe 86       	std	Y+14, r15	; 0x0e
    2394:	0f 87       	std	Y+15, r16	; 0x0f
    2396:	18 8b       	std	Y+16, r17	; 0x10
    2398:	86 01       	movw	r16, r12
		c2 = 1.0-c1;
	static float Reference_Position_ecef[3];
	float Position_ecef[3];
	static unsigned char reference_flag = 0;
	
	float Latitude_rad = (((float)Latitude)/6000000)*D2R;
    239a:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <__floatsisf>
    239e:	20 e0       	ldi	r18, 0x00	; 0
    23a0:	3b e1       	ldi	r19, 0x1B	; 27
    23a2:	47 eb       	ldi	r20, 0xB7	; 183
    23a4:	5a e4       	ldi	r21, 0x4A	; 74
    23a6:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <__divsf3>
    23aa:	2b ed       	ldi	r18, 0xDB	; 219
    23ac:	3f e0       	ldi	r19, 0x0F	; 15
    23ae:	49 e4       	ldi	r20, 0x49	; 73
    23b0:	50 e4       	ldi	r21, 0x40	; 64
    23b2:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <__mulsf3>
    23b6:	20 e0       	ldi	r18, 0x00	; 0
    23b8:	30 e0       	ldi	r19, 0x00	; 0
    23ba:	44 e3       	ldi	r20, 0x34	; 52
    23bc:	53 e4       	ldi	r21, 0x43	; 67
    23be:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <__divsf3>
    23c2:	4b 01       	movw	r8, r22
    23c4:	5c 01       	movw	r10, r24
	float Longitude_rad = (((float)Longitude)/6000000)*D2R;
    23c6:	c3 01       	movw	r24, r6
    23c8:	b2 01       	movw	r22, r4
    23ca:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <__floatsisf>
    23ce:	20 e0       	ldi	r18, 0x00	; 0
    23d0:	3b e1       	ldi	r19, 0x1B	; 27
    23d2:	47 eb       	ldi	r20, 0xB7	; 183
    23d4:	5a e4       	ldi	r21, 0x4A	; 74
    23d6:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <__divsf3>
    23da:	2b ed       	ldi	r18, 0xDB	; 219
    23dc:	3f e0       	ldi	r19, 0x0F	; 15
    23de:	49 e4       	ldi	r20, 0x49	; 73
    23e0:	50 e4       	ldi	r21, 0x40	; 64
    23e2:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <__mulsf3>
    23e6:	20 e0       	ldi	r18, 0x00	; 0
    23e8:	30 e0       	ldi	r19, 0x00	; 0
    23ea:	44 e3       	ldi	r20, 0x34	; 52
    23ec:	53 e4       	ldi	r21, 0x43	; 67
    23ee:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <__divsf3>
    23f2:	6b 01       	movw	r12, r22
    23f4:	7c 01       	movw	r14, r24
	float N_phi = a/sqrt(1.0 - (pow(e,2)*pow(sinf(Latitude_rad),2))); // Prime vertical radius (m)
    23f6:	c5 01       	movw	r24, r10
    23f8:	b4 01       	movw	r22, r8
    23fa:	0e 94 82 20 	call	0x4104	; 0x4104 <sin>
    23fe:	6d 83       	std	Y+5, r22	; 0x05
    2400:	7e 83       	std	Y+6, r23	; 0x06
    2402:	8f 83       	std	Y+7, r24	; 0x07
    2404:	98 87       	std	Y+8, r25	; 0x08
    2406:	20 e0       	ldi	r18, 0x00	; 0
    2408:	30 e0       	ldi	r19, 0x00	; 0
    240a:	40 e0       	ldi	r20, 0x00	; 0
    240c:	50 e4       	ldi	r21, 0x40	; 64
    240e:	0e 94 32 20 	call	0x4064	; 0x4064 <pow>
    2412:	28 e1       	ldi	r18, 0x18	; 24
    2414:	36 ef       	ldi	r19, 0xF6	; 246
    2416:	4b e3       	ldi	r20, 0x3B	; 59
    2418:	58 e3       	ldi	r21, 0x38	; 56
    241a:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <__mulsf3>
    241e:	2b 01       	movw	r4, r22
    2420:	3c 01       	movw	r6, r24
    2422:	a3 01       	movw	r20, r6
    2424:	92 01       	movw	r18, r4
    2426:	60 e0       	ldi	r22, 0x00	; 0
    2428:	70 e0       	ldi	r23, 0x00	; 0
    242a:	80 e8       	ldi	r24, 0x80	; 128
    242c:	9f e3       	ldi	r25, 0x3F	; 63
    242e:	0e 94 0f 1d 	call	0x3a1e	; 0x3a1e <__subsf3>
    2432:	0e 94 90 20 	call	0x4120	; 0x4120 <sqrt>
    2436:	9b 01       	movw	r18, r22
    2438:	ac 01       	movw	r20, r24
    243a:	62 e3       	ldi	r22, 0x32	; 50
    243c:	75 ea       	ldi	r23, 0xA5	; 165
    243e:	82 ec       	ldi	r24, 0xC2	; 194
    2440:	9a e4       	ldi	r25, 0x4A	; 74
    2442:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <__divsf3>
    2446:	69 83       	std	Y+1, r22	; 0x01
    2448:	7a 83       	std	Y+2, r23	; 0x02
    244a:	8b 83       	std	Y+3, r24	; 0x03
    244c:	9c 83       	std	Y+4, r25	; 0x04
	
	Position_ecef[0] = (N_phi + Height)*cosf(Latitude_rad)*cosf(Longitude_rad);
    244e:	2d 85       	ldd	r18, Y+13	; 0x0d
    2450:	3e 85       	ldd	r19, Y+14	; 0x0e
    2452:	4f 85       	ldd	r20, Y+15	; 0x0f
    2454:	58 89       	ldd	r21, Y+16	; 0x10
    2456:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <__addsf3>
    245a:	2b 01       	movw	r4, r22
    245c:	3c 01       	movw	r6, r24
    245e:	c5 01       	movw	r24, r10
    2460:	b4 01       	movw	r22, r8
    2462:	0e 94 f3 1d 	call	0x3be6	; 0x3be6 <cos>
    2466:	6d 8b       	std	Y+21, r22	; 0x15
    2468:	7e 8b       	std	Y+22, r23	; 0x16
    246a:	8f 8b       	std	Y+23, r24	; 0x17
    246c:	98 8f       	std	Y+24, r25	; 0x18
    246e:	9b 01       	movw	r18, r22
    2470:	ac 01       	movw	r20, r24
    2472:	c3 01       	movw	r24, r6
    2474:	b2 01       	movw	r22, r4
    2476:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <__mulsf3>
    247a:	4b 01       	movw	r8, r22
    247c:	5c 01       	movw	r10, r24
    247e:	c7 01       	movw	r24, r14
    2480:	b6 01       	movw	r22, r12
    2482:	0e 94 f3 1d 	call	0x3be6	; 0x3be6 <cos>
    2486:	69 8b       	std	Y+17, r22	; 0x11
    2488:	7a 8b       	std	Y+18, r23	; 0x12
    248a:	8b 8b       	std	Y+19, r24	; 0x13
    248c:	9c 8b       	std	Y+20, r25	; 0x14
    248e:	9b 01       	movw	r18, r22
    2490:	ac 01       	movw	r20, r24
    2492:	c5 01       	movw	r24, r10
    2494:	b4 01       	movw	r22, r8
    2496:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <__mulsf3>
    249a:	69 87       	std	Y+9, r22	; 0x09
    249c:	7a 87       	std	Y+10, r23	; 0x0a
    249e:	8b 87       	std	Y+11, r24	; 0x0b
    24a0:	9c 87       	std	Y+12, r25	; 0x0c
	Position_ecef[1] = (N_phi + Height)*cosf(Latitude_rad)*sinf(Longitude_rad);
    24a2:	c7 01       	movw	r24, r14
    24a4:	b6 01       	movw	r22, r12
    24a6:	0e 94 82 20 	call	0x4104	; 0x4104 <sin>
    24aa:	2b 01       	movw	r4, r22
    24ac:	3c 01       	movw	r6, r24
    24ae:	9b 01       	movw	r18, r22
    24b0:	ac 01       	movw	r20, r24
    24b2:	c5 01       	movw	r24, r10
    24b4:	b4 01       	movw	r22, r8
    24b6:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <__mulsf3>
    24ba:	6b 01       	movw	r12, r22
    24bc:	7c 01       	movw	r14, r24
	Position_ecef[2] = (((1.0-pow(e,2))*N_phi) + Height)*sinf(Latitude_rad);
    24be:	20 e1       	ldi	r18, 0x10	; 16
    24c0:	3d ef       	ldi	r19, 0xFD	; 253
    24c2:	4f e7       	ldi	r20, 0x7F	; 127
    24c4:	5f e3       	ldi	r21, 0x3F	; 63
    24c6:	69 81       	ldd	r22, Y+1	; 0x01
    24c8:	7a 81       	ldd	r23, Y+2	; 0x02
    24ca:	8b 81       	ldd	r24, Y+3	; 0x03
    24cc:	9c 81       	ldd	r25, Y+4	; 0x04
    24ce:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <__mulsf3>
    24d2:	9b 01       	movw	r18, r22
    24d4:	ac 01       	movw	r20, r24
    24d6:	6d 85       	ldd	r22, Y+13	; 0x0d
    24d8:	7e 85       	ldd	r23, Y+14	; 0x0e
    24da:	8f 85       	ldd	r24, Y+15	; 0x0f
    24dc:	98 89       	ldd	r25, Y+16	; 0x10
    24de:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <__addsf3>
    24e2:	9b 01       	movw	r18, r22
    24e4:	ac 01       	movw	r20, r24
    24e6:	6d 81       	ldd	r22, Y+5	; 0x05
    24e8:	7e 81       	ldd	r23, Y+6	; 0x06
    24ea:	8f 81       	ldd	r24, Y+7	; 0x07
    24ec:	98 85       	ldd	r25, Y+8	; 0x08
    24ee:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <__mulsf3>
    24f2:	4b 01       	movw	r8, r22
    24f4:	5c 01       	movw	r10, r24
	
	if (!reference_flag){
    24f6:	80 91 8c 4a 	lds	r24, 0x4A8C	; 0x804a8c <reference_flag.5012>
    24fa:	81 11       	cpse	r24, r1
    24fc:	17 c0       	rjmp	.+46     	; 0x252c <LLA_to_NED+0x1ca>
		++reference_flag;
    24fe:	91 e0       	ldi	r25, 0x01	; 1
    2500:	98 0f       	add	r25, r24
    2502:	90 93 8c 4a 	sts	0x4A8C, r25	; 0x804a8c <reference_flag.5012>
		Reference_Position_ecef[0] = Position_ecef[0];
    2506:	e0 e8       	ldi	r30, 0x80	; 128
    2508:	fa e4       	ldi	r31, 0x4A	; 74
    250a:	29 85       	ldd	r18, Y+9	; 0x09
    250c:	3a 85       	ldd	r19, Y+10	; 0x0a
    250e:	4b 85       	ldd	r20, Y+11	; 0x0b
    2510:	5c 85       	ldd	r21, Y+12	; 0x0c
    2512:	20 83       	st	Z, r18
    2514:	31 83       	std	Z+1, r19	; 0x01
    2516:	42 83       	std	Z+2, r20	; 0x02
    2518:	53 83       	std	Z+3, r21	; 0x03
		Reference_Position_ecef[1] = Position_ecef[1];
    251a:	c4 82       	std	Z+4, r12	; 0x04
    251c:	d5 82       	std	Z+5, r13	; 0x05
    251e:	e6 82       	std	Z+6, r14	; 0x06
    2520:	f7 82       	std	Z+7, r15	; 0x07
		Reference_Position_ecef[2] = Position_ecef[2];
    2522:	80 86       	std	Z+8, r8	; 0x08
    2524:	91 86       	std	Z+9, r9	; 0x09
    2526:	a2 86       	std	Z+10, r10	; 0x0a
    2528:	b3 86       	std	Z+11, r11	; 0x0b
		return 0;
    252a:	d1 c0       	rjmp	.+418    	; 0x26ce <LLA_to_NED+0x36c>
	}
	
	// Once a reference ECEF position is established, use that to find the local NED position
	float dx_ecef[3];
	dx_ecef[0] = Position_ecef[0] - Reference_Position_ecef[0];
    252c:	e0 e8       	ldi	r30, 0x80	; 128
    252e:	fa e4       	ldi	r31, 0x4A	; 74
    2530:	20 81       	ld	r18, Z
    2532:	31 81       	ldd	r19, Z+1	; 0x01
    2534:	42 81       	ldd	r20, Z+2	; 0x02
    2536:	53 81       	ldd	r21, Z+3	; 0x03
    2538:	69 85       	ldd	r22, Y+9	; 0x09
    253a:	7a 85       	ldd	r23, Y+10	; 0x0a
    253c:	8b 85       	ldd	r24, Y+11	; 0x0b
    253e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2540:	0e 94 0f 1d 	call	0x3a1e	; 0x3a1e <__subsf3>
    2544:	69 83       	std	Y+1, r22	; 0x01
    2546:	7a 83       	std	Y+2, r23	; 0x02
    2548:	8b 83       	std	Y+3, r24	; 0x03
    254a:	9c 83       	std	Y+4, r25	; 0x04
	dx_ecef[1] = Position_ecef[1] - Reference_Position_ecef[1];
    254c:	20 91 84 4a 	lds	r18, 0x4A84	; 0x804a84 <Reference_Position_ecef.5010+0x4>
    2550:	30 91 85 4a 	lds	r19, 0x4A85	; 0x804a85 <Reference_Position_ecef.5010+0x5>
    2554:	40 91 86 4a 	lds	r20, 0x4A86	; 0x804a86 <Reference_Position_ecef.5010+0x6>
    2558:	50 91 87 4a 	lds	r21, 0x4A87	; 0x804a87 <Reference_Position_ecef.5010+0x7>
    255c:	c7 01       	movw	r24, r14
    255e:	b6 01       	movw	r22, r12
    2560:	0e 94 0f 1d 	call	0x3a1e	; 0x3a1e <__subsf3>
    2564:	69 87       	std	Y+9, r22	; 0x09
    2566:	7a 87       	std	Y+10, r23	; 0x0a
    2568:	8b 87       	std	Y+11, r24	; 0x0b
    256a:	9c 87       	std	Y+12, r25	; 0x0c
	dx_ecef[2] = Position_ecef[2] - Reference_Position_ecef[2];
    256c:	20 91 88 4a 	lds	r18, 0x4A88	; 0x804a88 <Reference_Position_ecef.5010+0x8>
    2570:	30 91 89 4a 	lds	r19, 0x4A89	; 0x804a89 <Reference_Position_ecef.5010+0x9>
    2574:	40 91 8a 4a 	lds	r20, 0x4A8A	; 0x804a8a <Reference_Position_ecef.5010+0xa>
    2578:	50 91 8b 4a 	lds	r21, 0x4A8B	; 0x804a8b <Reference_Position_ecef.5010+0xb>
    257c:	c5 01       	movw	r24, r10
    257e:	b4 01       	movw	r22, r8
    2580:	0e 94 0f 1d 	call	0x3a1e	; 0x3a1e <__subsf3>
    2584:	4b 01       	movw	r8, r22
    2586:	5c 01       	movw	r10, r24
	
	float P_North= -sinf(Latitude_rad)*cosf(Longitude_rad)*dx_ecef[0] - sinf(Latitude_rad)*sinf(Longitude_rad)*dx_ecef[1] + cosf(Latitude_rad)*dx_ecef[2];
    2588:	2d 81       	ldd	r18, Y+5	; 0x05
    258a:	3e 81       	ldd	r19, Y+6	; 0x06
    258c:	4f 81       	ldd	r20, Y+7	; 0x07
    258e:	58 85       	ldd	r21, Y+8	; 0x08
    2590:	50 58       	subi	r21, 0x80	; 128
    2592:	69 89       	ldd	r22, Y+17	; 0x11
    2594:	7a 89       	ldd	r23, Y+18	; 0x12
    2596:	8b 89       	ldd	r24, Y+19	; 0x13
    2598:	9c 89       	ldd	r25, Y+20	; 0x14
    259a:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <__mulsf3>
    259e:	9b 01       	movw	r18, r22
    25a0:	ac 01       	movw	r20, r24
    25a2:	69 81       	ldd	r22, Y+1	; 0x01
    25a4:	7a 81       	ldd	r23, Y+2	; 0x02
    25a6:	8b 81       	ldd	r24, Y+3	; 0x03
    25a8:	9c 81       	ldd	r25, Y+4	; 0x04
    25aa:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <__mulsf3>
    25ae:	6b 01       	movw	r12, r22
    25b0:	7c 01       	movw	r14, r24
    25b2:	a3 01       	movw	r20, r6
    25b4:	92 01       	movw	r18, r4
    25b6:	6d 81       	ldd	r22, Y+5	; 0x05
    25b8:	7e 81       	ldd	r23, Y+6	; 0x06
    25ba:	8f 81       	ldd	r24, Y+7	; 0x07
    25bc:	98 85       	ldd	r25, Y+8	; 0x08
    25be:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <__mulsf3>
    25c2:	9b 01       	movw	r18, r22
    25c4:	ac 01       	movw	r20, r24
    25c6:	69 85       	ldd	r22, Y+9	; 0x09
    25c8:	7a 85       	ldd	r23, Y+10	; 0x0a
    25ca:	8b 85       	ldd	r24, Y+11	; 0x0b
    25cc:	9c 85       	ldd	r25, Y+12	; 0x0c
    25ce:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <__mulsf3>
    25d2:	9b 01       	movw	r18, r22
    25d4:	ac 01       	movw	r20, r24
    25d6:	c7 01       	movw	r24, r14
    25d8:	b6 01       	movw	r22, r12
    25da:	0e 94 0f 1d 	call	0x3a1e	; 0x3a1e <__subsf3>
    25de:	6b 01       	movw	r12, r22
    25e0:	7c 01       	movw	r14, r24
    25e2:	a5 01       	movw	r20, r10
    25e4:	94 01       	movw	r18, r8
    25e6:	6d 89       	ldd	r22, Y+21	; 0x15
    25e8:	7e 89       	ldd	r23, Y+22	; 0x16
    25ea:	8f 89       	ldd	r24, Y+23	; 0x17
    25ec:	98 8d       	ldd	r25, Y+24	; 0x18
    25ee:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <__mulsf3>
    25f2:	9b 01       	movw	r18, r22
    25f4:	ac 01       	movw	r20, r24
    25f6:	c7 01       	movw	r24, r14
    25f8:	b6 01       	movw	r22, r12
    25fa:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <__addsf3>
    25fe:	6b 01       	movw	r12, r22
    2600:	7c 01       	movw	r14, r24
	float P_East = -sinf(Longitude_rad)*dx_ecef[0] + cosf(Longitude_rad)*dx_ecef[1];
    2602:	a3 01       	movw	r20, r6
    2604:	92 01       	movw	r18, r4
    2606:	50 58       	subi	r21, 0x80	; 128
    2608:	69 81       	ldd	r22, Y+1	; 0x01
    260a:	7a 81       	ldd	r23, Y+2	; 0x02
    260c:	8b 81       	ldd	r24, Y+3	; 0x03
    260e:	9c 81       	ldd	r25, Y+4	; 0x04
    2610:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <__mulsf3>
    2614:	4b 01       	movw	r8, r22
    2616:	5c 01       	movw	r10, r24
    2618:	29 85       	ldd	r18, Y+9	; 0x09
    261a:	3a 85       	ldd	r19, Y+10	; 0x0a
    261c:	4b 85       	ldd	r20, Y+11	; 0x0b
    261e:	5c 85       	ldd	r21, Y+12	; 0x0c
    2620:	69 89       	ldd	r22, Y+17	; 0x11
    2622:	7a 89       	ldd	r23, Y+18	; 0x12
    2624:	8b 89       	ldd	r24, Y+19	; 0x13
    2626:	9c 89       	ldd	r25, Y+20	; 0x14
    2628:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <__mulsf3>
    262c:	9b 01       	movw	r18, r22
    262e:	ac 01       	movw	r20, r24
    2630:	c5 01       	movw	r24, r10
    2632:	b4 01       	movw	r22, r8
    2634:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <__addsf3>
    2638:	4b 01       	movw	r8, r22
    263a:	5c 01       	movw	r10, r24
	Position_NED[0] = Position_NED[0]*c1 + P_North*c2;
    263c:	f8 01       	movw	r30, r16
    263e:	60 81       	ld	r22, Z
    2640:	71 81       	ldd	r23, Z+1	; 0x01
    2642:	82 81       	ldd	r24, Z+2	; 0x02
    2644:	93 81       	ldd	r25, Z+3	; 0x03
    2646:	26 e6       	ldi	r18, 0x66	; 102
    2648:	36 e6       	ldi	r19, 0x66	; 102
    264a:	46 e6       	ldi	r20, 0x66	; 102
    264c:	5f e3       	ldi	r21, 0x3F	; 63
    264e:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <__mulsf3>
    2652:	2b 01       	movw	r4, r22
    2654:	3c 01       	movw	r6, r24
    2656:	20 ed       	ldi	r18, 0xD0	; 208
    2658:	3c ec       	ldi	r19, 0xCC	; 204
    265a:	4c ec       	ldi	r20, 0xCC	; 204
    265c:	5d e3       	ldi	r21, 0x3D	; 61
    265e:	c7 01       	movw	r24, r14
    2660:	b6 01       	movw	r22, r12
    2662:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <__mulsf3>
    2666:	9b 01       	movw	r18, r22
    2668:	ac 01       	movw	r20, r24
    266a:	c3 01       	movw	r24, r6
    266c:	b2 01       	movw	r22, r4
    266e:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <__addsf3>
    2672:	f8 01       	movw	r30, r16
    2674:	60 83       	st	Z, r22
    2676:	71 83       	std	Z+1, r23	; 0x01
    2678:	82 83       	std	Z+2, r24	; 0x02
    267a:	93 83       	std	Z+3, r25	; 0x03
	Position_NED[1] = Position_NED[1]*c1 + P_East*c2;
    267c:	64 81       	ldd	r22, Z+4	; 0x04
    267e:	75 81       	ldd	r23, Z+5	; 0x05
    2680:	86 81       	ldd	r24, Z+6	; 0x06
    2682:	97 81       	ldd	r25, Z+7	; 0x07
    2684:	26 e6       	ldi	r18, 0x66	; 102
    2686:	36 e6       	ldi	r19, 0x66	; 102
    2688:	46 e6       	ldi	r20, 0x66	; 102
    268a:	5f e3       	ldi	r21, 0x3F	; 63
    268c:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <__mulsf3>
    2690:	6b 01       	movw	r12, r22
    2692:	7c 01       	movw	r14, r24
    2694:	20 ed       	ldi	r18, 0xD0	; 208
    2696:	3c ec       	ldi	r19, 0xCC	; 204
    2698:	4c ec       	ldi	r20, 0xCC	; 204
    269a:	5d e3       	ldi	r21, 0x3D	; 61
    269c:	c5 01       	movw	r24, r10
    269e:	b4 01       	movw	r22, r8
    26a0:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <__mulsf3>
    26a4:	9b 01       	movw	r18, r22
    26a6:	ac 01       	movw	r20, r24
    26a8:	c7 01       	movw	r24, r14
    26aa:	b6 01       	movw	r22, r12
    26ac:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <__addsf3>
    26b0:	f8 01       	movw	r30, r16
    26b2:	64 83       	std	Z+4, r22	; 0x04
    26b4:	75 83       	std	Z+5, r23	; 0x05
    26b6:	86 83       	std	Z+6, r24	; 0x06
    26b8:	97 83       	std	Z+7, r25	; 0x07
	Position_NED[2] = -Height;
    26ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    26bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    26be:	af 85       	ldd	r26, Y+15	; 0x0f
    26c0:	b8 89       	ldd	r27, Y+16	; 0x10
    26c2:	b0 58       	subi	r27, 0x80	; 128
    26c4:	80 87       	std	Z+8, r24	; 0x08
    26c6:	91 87       	std	Z+9, r25	; 0x09
    26c8:	a2 87       	std	Z+10, r26	; 0x0a
    26ca:	b3 87       	std	Z+11, r27	; 0x0b
	
	return 1;
    26cc:	81 e0       	ldi	r24, 0x01	; 1
}
    26ce:	68 96       	adiw	r28, 0x18	; 24
    26d0:	cd bf       	out	0x3d, r28	; 61
    26d2:	de bf       	out	0x3e, r29	; 62
    26d4:	df 91       	pop	r29
    26d6:	cf 91       	pop	r28
    26d8:	1f 91       	pop	r17
    26da:	0f 91       	pop	r16
    26dc:	ff 90       	pop	r15
    26de:	ef 90       	pop	r14
    26e0:	df 90       	pop	r13
    26e2:	cf 90       	pop	r12
    26e4:	bf 90       	pop	r11
    26e6:	af 90       	pop	r10
    26e8:	9f 90       	pop	r9
    26ea:	8f 90       	pop	r8
    26ec:	7f 90       	pop	r7
    26ee:	6f 90       	pop	r6
    26f0:	5f 90       	pop	r5
    26f2:	4f 90       	pop	r4
    26f4:	08 95       	ret

000026f6 <Read_GPS>:
	USART_Transmit(Enable_GAL_8Hz, sizeof(Enable_GAL_8Hz));

	return (USART3_RXDATAH & USART_FERR_bm) ? 0 : 1;
}

unsigned char Read_GPS(States *Drone){
    26f6:	2f 92       	push	r2
    26f8:	3f 92       	push	r3
    26fa:	4f 92       	push	r4
    26fc:	5f 92       	push	r5
    26fe:	6f 92       	push	r6
    2700:	7f 92       	push	r7
    2702:	8f 92       	push	r8
    2704:	9f 92       	push	r9
    2706:	af 92       	push	r10
    2708:	bf 92       	push	r11
    270a:	cf 92       	push	r12
    270c:	df 92       	push	r13
    270e:	ef 92       	push	r14
    2710:	ff 92       	push	r15
    2712:	0f 93       	push	r16
    2714:	1f 93       	push	r17
    2716:	cf 93       	push	r28
    2718:	df 93       	push	r29
    271a:	cd b7       	in	r28, 0x3d	; 61
    271c:	de b7       	in	r29, 0x3e	; 62
    271e:	cc 58       	subi	r28, 0x8C	; 140
    2720:	d1 09       	sbc	r29, r1
    2722:	cd bf       	out	0x3d, r28	; 61
    2724:	de bf       	out	0x3e, r29	; 62
    2726:	4c 01       	movw	r8, r24
		i = 0,
		j = 0;
	signed char 
		start_index = -1,
		end_index = -1,
		comma_indices[13] = {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
    2728:	8d e0       	ldi	r24, 0x0D	; 13
    272a:	e7 e4       	ldi	r30, 0x47	; 71
    272c:	f0 e4       	ldi	r31, 0x40	; 64
    272e:	de 01       	movw	r26, r28
    2730:	11 96       	adiw	r26, 0x01	; 1
    2732:	01 90       	ld	r0, Z+
    2734:	0d 92       	st	X+, r0
    2736:	8a 95       	dec	r24
    2738:	e1 f7       	brne	.-8      	; 0x2732 <Read_GPS+0x3c>
	char 
		GPS_Data[100] = {0},
    273a:	fe 01       	movw	r30, r28
    273c:	3e 96       	adiw	r30, 0x0e	; 14
    273e:	84 e6       	ldi	r24, 0x64	; 100
    2740:	df 01       	movw	r26, r30
    2742:	1d 92       	st	X+, r1
    2744:	8a 95       	dec	r24
    2746:	e9 f7       	brne	.-6      	; 0x2742 <Read_GPS+0x4c>
		Check_Sum[2] = {0};
    2748:	71 2c       	mov	r7, r1
    274a:	61 2c       	mov	r6, r1
		window_counter;
	unsigned char 
		i = 0,
		j = 0;
	signed char 
		start_index = -1,
    274c:	9f ef       	ldi	r25, 0xFF	; 255
		GPS_Position_Mode;
	static unsigned char 
		window_counter;
	unsigned char 
		i = 0,
		j = 0;
    274e:	40 e0       	ldi	r20, 0x00	; 0
		GPS_Position_Status,
		GPS_Position_Mode;
	static unsigned char 
		window_counter;
	unsigned char 
		i = 0,
    2750:	e0 e0       	ldi	r30, 0x00	; 0
    2752:	39 2f       	mov	r19, r25
		comma_indices[13] = {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
	char 
		GPS_Data[100] = {0},
		Check_Sum[2] = {0};
	
	while(i != g_GPS_Data_Index){
    2754:	3e c0       	rjmp	.+124    	; 0x27d2 <Read_GPS+0xdc>
		if (g_GPS_Data[i] == 36){start_index = i;}
    2756:	8e 2f       	mov	r24, r30
    2758:	90 e0       	ldi	r25, 0x00	; 0
    275a:	dc 01       	movw	r26, r24
    275c:	a3 53       	subi	r26, 0x33	; 51
    275e:	b4 4b       	sbci	r27, 0xB4	; 180
    2760:	2c 91       	ld	r18, X
    2762:	24 32       	cpi	r18, 0x24	; 36
    2764:	11 f4       	brne	.+4      	; 0x276a <Read_GPS+0x74>
    2766:	3e 2f       	mov	r19, r30
    2768:	26 c0       	rjmp	.+76     	; 0x27b6 <Read_GPS+0xc0>
		else if ((g_GPS_Data[i] == 42)&&(start_index != -1)){
    276a:	dc 01       	movw	r26, r24
    276c:	a3 53       	subi	r26, 0x33	; 51
    276e:	b4 4b       	sbci	r27, 0xB4	; 180
    2770:	2c 91       	ld	r18, X
    2772:	2a 32       	cpi	r18, 0x2A	; 42
    2774:	81 f4       	brne	.+32     	; 0x2796 <Read_GPS+0xa0>
    2776:	3f 3f       	cpi	r19, 0xFF	; 255
    2778:	71 f0       	breq	.+28     	; 0x2796 <Read_GPS+0xa0>
    277a:	93 2f       	mov	r25, r19
			end_index = i;
    277c:	6e 2f       	mov	r22, r30
			Check_Sum[0] = g_GPS_Data[++i];
    277e:	a1 e0       	ldi	r26, 0x01	; 1
    2780:	ae 0f       	add	r26, r30
    2782:	b0 e0       	ldi	r27, 0x00	; 0
    2784:	a3 53       	subi	r26, 0x33	; 51
    2786:	b4 4b       	sbci	r27, 0xB4	; 180
    2788:	7c 90       	ld	r7, X
			Check_Sum[1] = g_GPS_Data[++i];
    278a:	ee 5f       	subi	r30, 0xFE	; 254
    278c:	f0 e0       	ldi	r31, 0x00	; 0
    278e:	e3 53       	subi	r30, 0x33	; 51
    2790:	f4 4b       	sbci	r31, 0xB4	; 180
    2792:	60 80       	ld	r6, Z
			break;
    2794:	24 c0       	rjmp	.+72     	; 0x27de <Read_GPS+0xe8>
		}
		else if ((g_GPS_Data[i] == 44)&&(start_index != -1)){comma_indices[j++] = i;}
    2796:	dc 01       	movw	r26, r24
    2798:	a3 53       	subi	r26, 0x33	; 51
    279a:	b4 4b       	sbci	r27, 0xB4	; 180
    279c:	2c 91       	ld	r18, X
    279e:	2c 32       	cpi	r18, 0x2C	; 44
    27a0:	51 f4       	brne	.+20     	; 0x27b6 <Read_GPS+0xc0>
    27a2:	3f 3f       	cpi	r19, 0xFF	; 255
    27a4:	41 f0       	breq	.+16     	; 0x27b6 <Read_GPS+0xc0>
    27a6:	a1 e0       	ldi	r26, 0x01	; 1
    27a8:	b0 e0       	ldi	r27, 0x00	; 0
    27aa:	ac 0f       	add	r26, r28
    27ac:	bd 1f       	adc	r27, r29
    27ae:	a4 0f       	add	r26, r20
    27b0:	b1 1d       	adc	r27, r1
    27b2:	ec 93       	st	X, r30
    27b4:	4f 5f       	subi	r20, 0xFF	; 255
		if (start_index != -1){GPS_Data[i] = g_GPS_Data[i];}
    27b6:	3f 3f       	cpi	r19, 0xFF	; 255
    27b8:	59 f0       	breq	.+22     	; 0x27d0 <Read_GPS+0xda>
    27ba:	dc 01       	movw	r26, r24
    27bc:	a3 53       	subi	r26, 0x33	; 51
    27be:	b4 4b       	sbci	r27, 0xB4	; 180
    27c0:	2c 91       	ld	r18, X
    27c2:	ae e0       	ldi	r26, 0x0E	; 14
    27c4:	b0 e0       	ldi	r27, 0x00	; 0
    27c6:	ac 0f       	add	r26, r28
    27c8:	bd 1f       	adc	r27, r29
    27ca:	a8 0f       	add	r26, r24
    27cc:	b9 1f       	adc	r27, r25
    27ce:	2c 93       	st	X, r18
		i++;
    27d0:	ef 5f       	subi	r30, 0xFF	; 255
		comma_indices[13] = {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
	char 
		GPS_Data[100] = {0},
		Check_Sum[2] = {0};
	
	while(i != g_GPS_Data_Index){
    27d2:	80 91 cc 4b 	lds	r24, 0x4BCC	; 0x804bcc <g_GPS_Data_Index>
    27d6:	e8 13       	cpse	r30, r24
    27d8:	be cf       	rjmp	.-132    	; 0x2756 <Read_GPS+0x60>
    27da:	93 2f       	mov	r25, r19
	unsigned char 
		i = 0,
		j = 0;
	signed char 
		start_index = -1,
		end_index = -1,
    27dc:	6f ef       	ldi	r22, 0xFF	; 255
		}
		else if ((g_GPS_Data[i] == 44)&&(start_index != -1)){comma_indices[j++] = i;}
		if (start_index != -1){GPS_Data[i] = g_GPS_Data[i];}
		i++;
	}
	g_GPS_Data_Index = 0;
    27de:	10 92 cc 4b 	sts	0x4BCC, r1	; 0x804bcc <g_GPS_Data_Index>
	if ((start_index == -1)||(end_index == -1)){return 0;}
    27e2:	9f 3f       	cpi	r25, 0xFF	; 255
    27e4:	09 f4       	brne	.+2      	; 0x27e8 <Read_GPS+0xf2>
    27e6:	16 c4       	rjmp	.+2092   	; 0x3014 <Read_GPS+0x91e>
    27e8:	6f 3f       	cpi	r22, 0xFF	; 255
    27ea:	09 f4       	brne	.+2      	; 0x27ee <Read_GPS+0xf8>
    27ec:	15 c4       	rjmp	.+2090   	; 0x3018 <Read_GPS+0x922>
	
	signed char checksum = GPS_Data[start_index+1];
    27ee:	e9 2f       	mov	r30, r25
    27f0:	09 2e       	mov	r0, r25
    27f2:	00 0c       	add	r0, r0
    27f4:	ff 0b       	sbc	r31, r31
    27f6:	31 96       	adiw	r30, 0x01	; 1
    27f8:	2e e0       	ldi	r18, 0x0E	; 14
    27fa:	30 e0       	ldi	r19, 0x00	; 0
    27fc:	2c 0f       	add	r18, r28
    27fe:	3d 1f       	adc	r19, r29
    2800:	e2 0f       	add	r30, r18
    2802:	f3 1f       	adc	r31, r19
    2804:	80 81       	ld	r24, Z
	for (unsigned char k=start_index+2;k<=end_index;k++){
    2806:	9e 5f       	subi	r25, 0xFE	; 254
    2808:	09 c0       	rjmp	.+18     	; 0x281c <Read_GPS+0x126>
		checksum ^= GPS_Data[k];
    280a:	ee e0       	ldi	r30, 0x0E	; 14
    280c:	f0 e0       	ldi	r31, 0x00	; 0
    280e:	ec 0f       	add	r30, r28
    2810:	fd 1f       	adc	r31, r29
    2812:	e2 0f       	add	r30, r18
    2814:	f3 1f       	adc	r31, r19
    2816:	20 81       	ld	r18, Z
    2818:	82 27       	eor	r24, r18
	}
	g_GPS_Data_Index = 0;
	if ((start_index == -1)||(end_index == -1)){return 0;}
	
	signed char checksum = GPS_Data[start_index+1];
	for (unsigned char k=start_index+2;k<=end_index;k++){
    281a:	9f 5f       	subi	r25, 0xFF	; 255
    281c:	29 2f       	mov	r18, r25
    281e:	30 e0       	ldi	r19, 0x00	; 0
    2820:	46 2f       	mov	r20, r22
    2822:	06 2e       	mov	r0, r22
    2824:	00 0c       	add	r0, r0
    2826:	55 0b       	sbc	r21, r21
    2828:	42 17       	cp	r20, r18
    282a:	53 07       	cpc	r21, r19
    282c:	74 f7       	brge	.-36     	; 0x280a <Read_GPS+0x114>
		checksum ^= GPS_Data[k];
	}
	char checksum_hex[3] = {0};
    282e:	fe 01       	movw	r30, r28
    2830:	ee 58       	subi	r30, 0x8E	; 142
    2832:	ff 4f       	sbci	r31, 0xFF	; 255
    2834:	10 82       	st	Z, r1
    2836:	11 82       	std	Z+1, r1	; 0x01
    2838:	12 82       	std	Z+2, r1	; 0x02
	unsigned char converted_length = snprintf(checksum_hex, sizeof(checksum_hex), "%X", checksum);
    283a:	28 2f       	mov	r18, r24
    283c:	08 2e       	mov	r0, r24
    283e:	00 0c       	add	r0, r0
    2840:	33 0b       	sbc	r19, r19
    2842:	3f 93       	push	r19
    2844:	8f 93       	push	r24
    2846:	8f ed       	ldi	r24, 0xDF	; 223
    2848:	91 e4       	ldi	r25, 0x41	; 65
    284a:	9f 93       	push	r25
    284c:	8f 93       	push	r24
    284e:	1f 92       	push	r1
    2850:	83 e0       	ldi	r24, 0x03	; 3
    2852:	8f 93       	push	r24
    2854:	ff 93       	push	r31
    2856:	ef 93       	push	r30
    2858:	0e 94 58 2a 	call	0x54b0	; 0x54b0 <snprintf>
	if (converted_length == 1){ // Won't add the 0 in automatically if the number is less than 8
    285c:	cd bf       	out	0x3d, r28	; 61
    285e:	de bf       	out	0x3e, r29	; 62
    2860:	81 30       	cpi	r24, 0x01	; 1
    2862:	51 f4       	brne	.+20     	; 0x2878 <Read_GPS+0x182>
		checksum_hex[1] = checksum_hex[0];
    2864:	e3 96       	adiw	r28, 0x33	; 51
    2866:	8f ad       	ldd	r24, Y+63	; 0x3f
    2868:	e3 97       	sbiw	r28, 0x33	; 51
    286a:	e4 96       	adiw	r28, 0x34	; 52
    286c:	8f af       	std	Y+63, r24	; 0x3f
    286e:	e4 97       	sbiw	r28, 0x34	; 52
		checksum_hex[0] = 48;
    2870:	80 e3       	ldi	r24, 0x30	; 48
    2872:	e3 96       	adiw	r28, 0x33	; 51
    2874:	8f af       	std	Y+63, r24	; 0x3f
    2876:	e3 97       	sbiw	r28, 0x33	; 51
	}
	
	if ((checksum_hex[0] == Check_Sum[0])&&(checksum_hex[1] == Check_Sum[1])){
    2878:	e3 96       	adiw	r28, 0x33	; 51
    287a:	8f ad       	ldd	r24, Y+63	; 0x3f
    287c:	e3 97       	sbiw	r28, 0x33	; 51
    287e:	87 11       	cpse	r24, r7
    2880:	cd c3       	rjmp	.+1946   	; 0x301c <Read_GPS+0x926>
    2882:	e4 96       	adiw	r28, 0x34	; 52
    2884:	8f ad       	ldd	r24, Y+63	; 0x3f
    2886:	e4 97       	sbiw	r28, 0x34	; 52
    2888:	86 11       	cpse	r24, r6
    288a:	ca c3       	rjmp	.+1940   	; 0x3020 <Read_GPS+0x92a>
		// If the checksum signifies that the message is valid, then we go through parsing it
		// NMEA RMC information comes in the following order:
		// -> Name, time, status, latitude, NS, longitude, EW, speed, course over ground, date,
		// magnetic variation, magnetic variation EW, position mode, navigation status
		if (comma_indices[2] - comma_indices[1] - 1){
    288c:	2b 81       	ldd	r18, Y+3	; 0x03
    288e:	02 2e       	mov	r0, r18
    2890:	00 0c       	add	r0, r0
    2892:	33 0b       	sbc	r19, r19
    2894:	8a 81       	ldd	r24, Y+2	; 0x02
    2896:	08 2e       	mov	r0, r24
    2898:	00 0c       	add	r0, r0
    289a:	99 0b       	sbc	r25, r25
    289c:	a9 01       	movw	r20, r18
    289e:	48 1b       	sub	r20, r24
    28a0:	59 0b       	sbc	r21, r25
    28a2:	41 30       	cpi	r20, 0x01	; 1
    28a4:	51 05       	cpc	r21, r1
    28a6:	51 f0       	breq	.+20     	; 0x28bc <Read_GPS+0x1c6>
			GPS_Position_Status = GPS_Data[comma_indices[1]+1];
    28a8:	01 96       	adiw	r24, 0x01	; 1
    28aa:	ee e0       	ldi	r30, 0x0E	; 14
    28ac:	f0 e0       	ldi	r31, 0x00	; 0
    28ae:	ec 0f       	add	r30, r28
    28b0:	fd 1f       	adc	r31, r29
    28b2:	e8 0f       	add	r30, r24
    28b4:	f9 1f       	adc	r31, r25
    28b6:	80 81       	ld	r24, Z
    28b8:	80 93 af 4a 	sts	0x4AAF, r24	; 0x804aaf <GPS_Position_Status.4952>
		}
		if (comma_indices[12] - comma_indices[11] - 1){
    28bc:	4d 85       	ldd	r20, Y+13	; 0x0d
    28be:	8c 85       	ldd	r24, Y+12	; 0x0c
    28c0:	08 2e       	mov	r0, r24
    28c2:	00 0c       	add	r0, r0
    28c4:	99 0b       	sbc	r25, r25
    28c6:	04 2e       	mov	r0, r20
    28c8:	00 0c       	add	r0, r0
    28ca:	55 0b       	sbc	r21, r21
    28cc:	48 1b       	sub	r20, r24
    28ce:	59 0b       	sbc	r21, r25
    28d0:	41 30       	cpi	r20, 0x01	; 1
    28d2:	51 05       	cpc	r21, r1
    28d4:	51 f0       	breq	.+20     	; 0x28ea <Read_GPS+0x1f4>
			GPS_Position_Mode = GPS_Data[comma_indices[11]+1];
    28d6:	01 96       	adiw	r24, 0x01	; 1
    28d8:	ee e0       	ldi	r30, 0x0E	; 14
    28da:	f0 e0       	ldi	r31, 0x00	; 0
    28dc:	ec 0f       	add	r30, r28
    28de:	fd 1f       	adc	r31, r29
    28e0:	e8 0f       	add	r30, r24
    28e2:	f9 1f       	adc	r31, r25
    28e4:	80 81       	ld	r24, Z
    28e6:	80 93 ae 4a 	sts	0x4AAE, r24	; 0x804aae <GPS_Position_Mode.4953>
		}
		if ((GPS_Position_Status == 'A')&&(GPS_Position_Mode == 'A')){
    28ea:	80 91 af 4a 	lds	r24, 0x4AAF	; 0x804aaf <GPS_Position_Status.4952>
    28ee:	81 34       	cpi	r24, 0x41	; 65
    28f0:	09 f0       	breq	.+2      	; 0x28f4 <Read_GPS+0x1fe>
    28f2:	98 c3       	rjmp	.+1840   	; 0x3024 <Read_GPS+0x92e>
    28f4:	80 91 ae 4a 	lds	r24, 0x4AAE	; 0x804aae <GPS_Position_Mode.4953>
    28f8:	81 34       	cpi	r24, 0x41	; 65
    28fa:	09 f0       	breq	.+2      	; 0x28fe <Read_GPS+0x208>
    28fc:	95 c3       	rjmp	.+1834   	; 0x3028 <Read_GPS+0x932>
			if (comma_indices[3]-comma_indices[2] - 1){
    28fe:	6c 80       	ldd	r6, Y+4	; 0x04
    2900:	06 2c       	mov	r0, r6
    2902:	00 0c       	add	r0, r0
    2904:	77 08       	sbc	r7, r7
    2906:	c3 01       	movw	r24, r6
    2908:	82 1b       	sub	r24, r18
    290a:	93 0b       	sbc	r25, r19
    290c:	01 97       	sbiw	r24, 0x01	; 1
    290e:	09 f4       	brne	.+2      	; 0x2912 <Read_GPS+0x21c>
    2910:	96 c0       	rjmp	.+300    	; 0x2a3e <Read_GPS+0x348>
				char Latitude_degrees[] = {GPS_Data[comma_indices[2]+1], GPS_Data[comma_indices[2]+2], '\0'};
    2912:	f9 01       	movw	r30, r18
    2914:	31 96       	adiw	r30, 0x01	; 1
    2916:	6e e0       	ldi	r22, 0x0E	; 14
    2918:	70 e0       	ldi	r23, 0x00	; 0
    291a:	6c 0f       	add	r22, r28
    291c:	7d 1f       	adc	r23, r29
    291e:	e6 0f       	add	r30, r22
    2920:	f7 1f       	adc	r31, r23
    2922:	80 81       	ld	r24, Z
    2924:	c1 58       	subi	r28, 0x81	; 129
    2926:	df 4f       	sbci	r29, 0xFF	; 255
    2928:	88 83       	st	Y, r24
    292a:	cf 57       	subi	r28, 0x7F	; 127
    292c:	d0 40       	sbci	r29, 0x00	; 0
    292e:	f9 01       	movw	r30, r18
    2930:	32 96       	adiw	r30, 0x02	; 2
    2932:	e6 0f       	add	r30, r22
    2934:	f7 1f       	adc	r31, r23
    2936:	80 81       	ld	r24, Z
    2938:	c0 58       	subi	r28, 0x80	; 128
    293a:	df 4f       	sbci	r29, 0xFF	; 255
    293c:	88 83       	st	Y, r24
    293e:	c0 58       	subi	r28, 0x80	; 128
    2940:	d0 40       	sbci	r29, 0x00	; 0
    2942:	cf 57       	subi	r28, 0x7F	; 127
    2944:	df 4f       	sbci	r29, 0xFF	; 255
    2946:	18 82       	st	Y, r1
    2948:	c1 58       	subi	r28, 0x81	; 129
    294a:	d0 40       	sbci	r29, 0x00	; 0
				char Latitude_minutes_integer[] = {GPS_Data[comma_indices[2]+3], GPS_Data[comma_indices[2]+4], '\0'};
    294c:	f9 01       	movw	r30, r18
    294e:	33 96       	adiw	r30, 0x03	; 3
    2950:	e6 0f       	add	r30, r22
    2952:	f7 1f       	adc	r31, r23
    2954:	80 81       	ld	r24, Z
    2956:	ec 96       	adiw	r28, 0x3c	; 60
    2958:	8f af       	std	Y+63, r24	; 0x3f
    295a:	ec 97       	sbiw	r28, 0x3c	; 60
    295c:	f9 01       	movw	r30, r18
    295e:	34 96       	adiw	r30, 0x04	; 4
    2960:	e6 0f       	add	r30, r22
    2962:	f7 1f       	adc	r31, r23
    2964:	80 81       	ld	r24, Z
    2966:	ed 96       	adiw	r28, 0x3d	; 61
    2968:	8f af       	std	Y+63, r24	; 0x3f
    296a:	ed 97       	sbiw	r28, 0x3d	; 61
    296c:	ee 96       	adiw	r28, 0x3e	; 62
    296e:	1f ae       	std	Y+63, r1	; 0x3f
    2970:	ee 97       	sbiw	r28, 0x3e	; 62
				char Latitude_minutes_decimal[] = {GPS_Data[comma_indices[2]+6], GPS_Data[comma_indices[2]+7], GPS_Data[comma_indices[2]+8], GPS_Data[comma_indices[2]+9], GPS_Data[comma_indices[2]+10], '\0'};
    2972:	f9 01       	movw	r30, r18
    2974:	36 96       	adiw	r30, 0x06	; 6
    2976:	e6 0f       	add	r30, r22
    2978:	f7 1f       	adc	r31, r23
    297a:	80 81       	ld	r24, Z
    297c:	e6 96       	adiw	r28, 0x36	; 54
    297e:	8f af       	std	Y+63, r24	; 0x3f
    2980:	e6 97       	sbiw	r28, 0x36	; 54
    2982:	f9 01       	movw	r30, r18
    2984:	37 96       	adiw	r30, 0x07	; 7
    2986:	e6 0f       	add	r30, r22
    2988:	f7 1f       	adc	r31, r23
    298a:	80 81       	ld	r24, Z
    298c:	e7 96       	adiw	r28, 0x37	; 55
    298e:	8f af       	std	Y+63, r24	; 0x3f
    2990:	e7 97       	sbiw	r28, 0x37	; 55
    2992:	f9 01       	movw	r30, r18
    2994:	38 96       	adiw	r30, 0x08	; 8
    2996:	e6 0f       	add	r30, r22
    2998:	f7 1f       	adc	r31, r23
    299a:	80 81       	ld	r24, Z
    299c:	e8 96       	adiw	r28, 0x38	; 56
    299e:	8f af       	std	Y+63, r24	; 0x3f
    29a0:	e8 97       	sbiw	r28, 0x38	; 56
    29a2:	f9 01       	movw	r30, r18
    29a4:	39 96       	adiw	r30, 0x09	; 9
    29a6:	e6 0f       	add	r30, r22
    29a8:	f7 1f       	adc	r31, r23
    29aa:	80 81       	ld	r24, Z
    29ac:	e9 96       	adiw	r28, 0x39	; 57
    29ae:	8f af       	std	Y+63, r24	; 0x3f
    29b0:	e9 97       	sbiw	r28, 0x39	; 57
    29b2:	26 5f       	subi	r18, 0xF6	; 246
    29b4:	3f 4f       	sbci	r19, 0xFF	; 255
    29b6:	fb 01       	movw	r30, r22
    29b8:	e2 0f       	add	r30, r18
    29ba:	f3 1f       	adc	r31, r19
    29bc:	80 81       	ld	r24, Z
    29be:	ea 96       	adiw	r28, 0x3a	; 58
    29c0:	8f af       	std	Y+63, r24	; 0x3f
    29c2:	ea 97       	sbiw	r28, 0x3a	; 58
    29c4:	eb 96       	adiw	r28, 0x3b	; 59
    29c6:	1f ae       	std	Y+63, r1	; 0x3f
    29c8:	eb 97       	sbiw	r28, 0x3b	; 59
				Latitude_window[window_counter] = ((atol(Latitude_degrees)*60)+atol(Latitude_minutes_integer))*100000 + atol(Latitude_minutes_decimal);
    29ca:	e0 91 ad 4a 	lds	r30, 0x4AAD	; 0x804aad <window_counter.4954>
    29ce:	4e 2e       	mov	r4, r30
    29d0:	51 2c       	mov	r5, r1
    29d2:	ce 01       	movw	r24, r28
    29d4:	81 58       	subi	r24, 0x81	; 129
    29d6:	9f 4f       	sbci	r25, 0xFF	; 255
    29d8:	0e 94 c9 28 	call	0x5192	; 0x5192 <atol>
    29dc:	9b 01       	movw	r18, r22
    29de:	ac 01       	movw	r20, r24
    29e0:	ac e3       	ldi	r26, 0x3C	; 60
    29e2:	b0 e0       	ldi	r27, 0x00	; 0
    29e4:	0e 94 d8 25 	call	0x4bb0	; 0x4bb0 <__muluhisi3>
    29e8:	6b 01       	movw	r12, r22
    29ea:	7c 01       	movw	r14, r24
    29ec:	ce 01       	movw	r24, r28
    29ee:	85 58       	subi	r24, 0x85	; 133
    29f0:	9f 4f       	sbci	r25, 0xFF	; 255
    29f2:	0e 94 c9 28 	call	0x5192	; 0x5192 <atol>
    29f6:	a7 01       	movw	r20, r14
    29f8:	96 01       	movw	r18, r12
    29fa:	26 0f       	add	r18, r22
    29fc:	37 1f       	adc	r19, r23
    29fe:	48 1f       	adc	r20, r24
    2a00:	59 1f       	adc	r21, r25
    2a02:	60 ea       	ldi	r22, 0xA0	; 160
    2a04:	76 e8       	ldi	r23, 0x86	; 134
    2a06:	81 e0       	ldi	r24, 0x01	; 1
    2a08:	90 e0       	ldi	r25, 0x00	; 0
    2a0a:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <__mulsi3>
    2a0e:	6b 01       	movw	r12, r22
    2a10:	7c 01       	movw	r14, r24
    2a12:	ce 01       	movw	r24, r28
    2a14:	8b 58       	subi	r24, 0x8B	; 139
    2a16:	9f 4f       	sbci	r25, 0xFF	; 255
    2a18:	0e 94 c9 28 	call	0x5192	; 0x5192 <atol>
    2a1c:	dc 01       	movw	r26, r24
    2a1e:	cb 01       	movw	r24, r22
    2a20:	8c 0d       	add	r24, r12
    2a22:	9d 1d       	adc	r25, r13
    2a24:	ae 1d       	adc	r26, r14
    2a26:	bf 1d       	adc	r27, r15
    2a28:	f2 01       	movw	r30, r4
    2a2a:	ee 0f       	add	r30, r30
    2a2c:	ff 1f       	adc	r31, r31
    2a2e:	ee 0f       	add	r30, r30
    2a30:	ff 1f       	adc	r31, r31
    2a32:	e3 56       	subi	r30, 0x63	; 99
    2a34:	f5 4b       	sbci	r31, 0xB5	; 181
    2a36:	80 83       	st	Z, r24
    2a38:	91 83       	std	Z+1, r25	; 0x01
    2a3a:	a2 83       	std	Z+2, r26	; 0x02
    2a3c:	b3 83       	std	Z+3, r27	; 0x03
			}
			if (comma_indices[4] - comma_indices[3] - 1){
    2a3e:	ed 81       	ldd	r30, Y+5	; 0x05
    2a40:	0e 2e       	mov	r0, r30
    2a42:	00 0c       	add	r0, r0
    2a44:	ff 0b       	sbc	r31, r31
    2a46:	cf 01       	movw	r24, r30
    2a48:	86 19       	sub	r24, r6
    2a4a:	97 09       	sbc	r25, r7
    2a4c:	01 97       	sbiw	r24, 0x01	; 1
    2a4e:	91 f1       	breq	.+100    	; 0x2ab4 <Read_GPS+0x3be>
				Latitude_window[window_counter] *= (GPS_Data[comma_indices[3]+1] == 'N') ? 1 : -1;
    2a50:	80 91 ad 4a 	lds	r24, 0x4AAD	; 0x804aad <window_counter.4954>
    2a54:	08 2f       	mov	r16, r24
    2a56:	10 e0       	ldi	r17, 0x00	; 0
    2a58:	d8 01       	movw	r26, r16
    2a5a:	aa 0f       	add	r26, r26
    2a5c:	bb 1f       	adc	r27, r27
    2a5e:	aa 0f       	add	r26, r26
    2a60:	bb 1f       	adc	r27, r27
    2a62:	a3 56       	subi	r26, 0x63	; 99
    2a64:	b5 4b       	sbci	r27, 0xB5	; 181
    2a66:	6d 91       	ld	r22, X+
    2a68:	7d 91       	ld	r23, X+
    2a6a:	8d 91       	ld	r24, X+
    2a6c:	9c 91       	ld	r25, X
    2a6e:	d3 01       	movw	r26, r6
    2a70:	11 96       	adiw	r26, 0x01	; 1
    2a72:	2e e0       	ldi	r18, 0x0E	; 14
    2a74:	30 e0       	ldi	r19, 0x00	; 0
    2a76:	2c 0f       	add	r18, r28
    2a78:	3d 1f       	adc	r19, r29
    2a7a:	a2 0f       	add	r26, r18
    2a7c:	b3 1f       	adc	r27, r19
    2a7e:	2c 91       	ld	r18, X
    2a80:	2e 34       	cpi	r18, 0x4E	; 78
    2a82:	29 f4       	brne	.+10     	; 0x2a8e <Read_GPS+0x398>
    2a84:	21 e0       	ldi	r18, 0x01	; 1
    2a86:	30 e0       	ldi	r19, 0x00	; 0
    2a88:	40 e0       	ldi	r20, 0x00	; 0
    2a8a:	50 e0       	ldi	r21, 0x00	; 0
    2a8c:	03 c0       	rjmp	.+6      	; 0x2a94 <Read_GPS+0x39e>
    2a8e:	2f ef       	ldi	r18, 0xFF	; 255
    2a90:	3f ef       	ldi	r19, 0xFF	; 255
    2a92:	a9 01       	movw	r20, r18
    2a94:	d8 01       	movw	r26, r16
    2a96:	aa 0f       	add	r26, r26
    2a98:	bb 1f       	adc	r27, r27
    2a9a:	aa 0f       	add	r26, r26
    2a9c:	bb 1f       	adc	r27, r27
    2a9e:	8d 01       	movw	r16, r26
    2aa0:	03 56       	subi	r16, 0x63	; 99
    2aa2:	15 4b       	sbci	r17, 0xB5	; 181
    2aa4:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <__mulsi3>
    2aa8:	d8 01       	movw	r26, r16
    2aaa:	6d 93       	st	X+, r22
    2aac:	7d 93       	st	X+, r23
    2aae:	8d 93       	st	X+, r24
    2ab0:	9c 93       	st	X, r25
    2ab2:	13 97       	sbiw	r26, 0x03	; 3
			}
			if (comma_indices[5]-comma_indices[4] - 1){
    2ab4:	6e 80       	ldd	r6, Y+6	; 0x06
    2ab6:	06 2c       	mov	r0, r6
    2ab8:	00 0c       	add	r0, r0
    2aba:	77 08       	sbc	r7, r7
    2abc:	c3 01       	movw	r24, r6
    2abe:	8e 1b       	sub	r24, r30
    2ac0:	9f 0b       	sbc	r25, r31
    2ac2:	01 97       	sbiw	r24, 0x01	; 1
    2ac4:	09 f4       	brne	.+2      	; 0x2ac8 <Read_GPS+0x3d2>
    2ac6:	9c c0       	rjmp	.+312    	; 0x2c00 <Read_GPS+0x50a>
				char Longitude_degrees[] = {GPS_Data[comma_indices[4]+1], GPS_Data[comma_indices[4]+2], GPS_Data[comma_indices[4]+3], '\0'};
    2ac8:	df 01       	movw	r26, r30
    2aca:	11 96       	adiw	r26, 0x01	; 1
    2acc:	2e e0       	ldi	r18, 0x0E	; 14
    2ace:	30 e0       	ldi	r19, 0x00	; 0
    2ad0:	2c 0f       	add	r18, r28
    2ad2:	3d 1f       	adc	r19, r29
    2ad4:	a2 0f       	add	r26, r18
    2ad6:	b3 1f       	adc	r27, r19
    2ad8:	8c 91       	ld	r24, X
    2ada:	ec 96       	adiw	r28, 0x3c	; 60
    2adc:	8f af       	std	Y+63, r24	; 0x3f
    2ade:	ec 97       	sbiw	r28, 0x3c	; 60
    2ae0:	df 01       	movw	r26, r30
    2ae2:	12 96       	adiw	r26, 0x02	; 2
    2ae4:	a2 0f       	add	r26, r18
    2ae6:	b3 1f       	adc	r27, r19
    2ae8:	8c 91       	ld	r24, X
    2aea:	ed 96       	adiw	r28, 0x3d	; 61
    2aec:	8f af       	std	Y+63, r24	; 0x3f
    2aee:	ed 97       	sbiw	r28, 0x3d	; 61
    2af0:	df 01       	movw	r26, r30
    2af2:	13 96       	adiw	r26, 0x03	; 3
    2af4:	a2 0f       	add	r26, r18
    2af6:	b3 1f       	adc	r27, r19
    2af8:	8c 91       	ld	r24, X
    2afa:	ee 96       	adiw	r28, 0x3e	; 62
    2afc:	8f af       	std	Y+63, r24	; 0x3f
    2afe:	ee 97       	sbiw	r28, 0x3e	; 62
    2b00:	ef 96       	adiw	r28, 0x3f	; 63
    2b02:	1f ae       	std	Y+63, r1	; 0x3f
    2b04:	ef 97       	sbiw	r28, 0x3f	; 63
				char Longitude_minutes_integer[] = {GPS_Data[comma_indices[4]+4], GPS_Data[comma_indices[4]+5], '\0'};
    2b06:	df 01       	movw	r26, r30
    2b08:	14 96       	adiw	r26, 0x04	; 4
    2b0a:	a2 0f       	add	r26, r18
    2b0c:	b3 1f       	adc	r27, r19
    2b0e:	8c 91       	ld	r24, X
    2b10:	c1 58       	subi	r28, 0x81	; 129
    2b12:	df 4f       	sbci	r29, 0xFF	; 255
    2b14:	88 83       	st	Y, r24
    2b16:	cf 57       	subi	r28, 0x7F	; 127
    2b18:	d0 40       	sbci	r29, 0x00	; 0
    2b1a:	df 01       	movw	r26, r30
    2b1c:	15 96       	adiw	r26, 0x05	; 5
    2b1e:	a2 0f       	add	r26, r18
    2b20:	b3 1f       	adc	r27, r19
    2b22:	8c 91       	ld	r24, X
    2b24:	c0 58       	subi	r28, 0x80	; 128
    2b26:	df 4f       	sbci	r29, 0xFF	; 255
    2b28:	88 83       	st	Y, r24
    2b2a:	c0 58       	subi	r28, 0x80	; 128
    2b2c:	d0 40       	sbci	r29, 0x00	; 0
    2b2e:	cf 57       	subi	r28, 0x7F	; 127
    2b30:	df 4f       	sbci	r29, 0xFF	; 255
    2b32:	18 82       	st	Y, r1
    2b34:	c1 58       	subi	r28, 0x81	; 129
    2b36:	d0 40       	sbci	r29, 0x00	; 0
				char Longitude_minutes_decimal[] = {GPS_Data[comma_indices[4]+7], GPS_Data[comma_indices[4]+8], GPS_Data[comma_indices[4]+9], GPS_Data[comma_indices[4]+10], GPS_Data[comma_indices[4]+11], '\0'};
    2b38:	df 01       	movw	r26, r30
    2b3a:	17 96       	adiw	r26, 0x07	; 7
    2b3c:	a2 0f       	add	r26, r18
    2b3e:	b3 1f       	adc	r27, r19
    2b40:	8c 91       	ld	r24, X
    2b42:	e6 96       	adiw	r28, 0x36	; 54
    2b44:	8f af       	std	Y+63, r24	; 0x3f
    2b46:	e6 97       	sbiw	r28, 0x36	; 54
    2b48:	df 01       	movw	r26, r30
    2b4a:	18 96       	adiw	r26, 0x08	; 8
    2b4c:	a2 0f       	add	r26, r18
    2b4e:	b3 1f       	adc	r27, r19
    2b50:	8c 91       	ld	r24, X
    2b52:	e7 96       	adiw	r28, 0x37	; 55
    2b54:	8f af       	std	Y+63, r24	; 0x3f
    2b56:	e7 97       	sbiw	r28, 0x37	; 55
    2b58:	df 01       	movw	r26, r30
    2b5a:	19 96       	adiw	r26, 0x09	; 9
    2b5c:	a2 0f       	add	r26, r18
    2b5e:	b3 1f       	adc	r27, r19
    2b60:	8c 91       	ld	r24, X
    2b62:	e8 96       	adiw	r28, 0x38	; 56
    2b64:	8f af       	std	Y+63, r24	; 0x3f
    2b66:	e8 97       	sbiw	r28, 0x38	; 56
    2b68:	df 01       	movw	r26, r30
    2b6a:	1a 96       	adiw	r26, 0x0a	; 10
    2b6c:	a2 0f       	add	r26, r18
    2b6e:	b3 1f       	adc	r27, r19
    2b70:	8c 91       	ld	r24, X
    2b72:	e9 96       	adiw	r28, 0x39	; 57
    2b74:	8f af       	std	Y+63, r24	; 0x3f
    2b76:	e9 97       	sbiw	r28, 0x39	; 57
    2b78:	3b 96       	adiw	r30, 0x0b	; 11
    2b7a:	e2 0f       	add	r30, r18
    2b7c:	f3 1f       	adc	r31, r19
    2b7e:	80 81       	ld	r24, Z
    2b80:	ea 96       	adiw	r28, 0x3a	; 58
    2b82:	8f af       	std	Y+63, r24	; 0x3f
    2b84:	ea 97       	sbiw	r28, 0x3a	; 58
    2b86:	eb 96       	adiw	r28, 0x3b	; 59
    2b88:	1f ae       	std	Y+63, r1	; 0x3f
    2b8a:	eb 97       	sbiw	r28, 0x3b	; 59
				Longitude_window[window_counter] = ((atol(Longitude_degrees)*60)+atol(Longitude_minutes_integer))*100000 + atol(Longitude_minutes_decimal);
    2b8c:	e0 91 ad 4a 	lds	r30, 0x4AAD	; 0x804aad <window_counter.4954>
    2b90:	4e 2e       	mov	r4, r30
    2b92:	51 2c       	mov	r5, r1
    2b94:	ce 01       	movw	r24, r28
    2b96:	85 58       	subi	r24, 0x85	; 133
    2b98:	9f 4f       	sbci	r25, 0xFF	; 255
    2b9a:	0e 94 c9 28 	call	0x5192	; 0x5192 <atol>
    2b9e:	9b 01       	movw	r18, r22
    2ba0:	ac 01       	movw	r20, r24
    2ba2:	ac e3       	ldi	r26, 0x3C	; 60
    2ba4:	b0 e0       	ldi	r27, 0x00	; 0
    2ba6:	0e 94 d8 25 	call	0x4bb0	; 0x4bb0 <__muluhisi3>
    2baa:	6b 01       	movw	r12, r22
    2bac:	7c 01       	movw	r14, r24
    2bae:	ce 01       	movw	r24, r28
    2bb0:	81 58       	subi	r24, 0x81	; 129
    2bb2:	9f 4f       	sbci	r25, 0xFF	; 255
    2bb4:	0e 94 c9 28 	call	0x5192	; 0x5192 <atol>
    2bb8:	a7 01       	movw	r20, r14
    2bba:	96 01       	movw	r18, r12
    2bbc:	26 0f       	add	r18, r22
    2bbe:	37 1f       	adc	r19, r23
    2bc0:	48 1f       	adc	r20, r24
    2bc2:	59 1f       	adc	r21, r25
    2bc4:	60 ea       	ldi	r22, 0xA0	; 160
    2bc6:	76 e8       	ldi	r23, 0x86	; 134
    2bc8:	81 e0       	ldi	r24, 0x01	; 1
    2bca:	90 e0       	ldi	r25, 0x00	; 0
    2bcc:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <__mulsi3>
    2bd0:	6b 01       	movw	r12, r22
    2bd2:	7c 01       	movw	r14, r24
    2bd4:	ce 01       	movw	r24, r28
    2bd6:	8b 58       	subi	r24, 0x8B	; 139
    2bd8:	9f 4f       	sbci	r25, 0xFF	; 255
    2bda:	0e 94 c9 28 	call	0x5192	; 0x5192 <atol>
    2bde:	dc 01       	movw	r26, r24
    2be0:	cb 01       	movw	r24, r22
    2be2:	8c 0d       	add	r24, r12
    2be4:	9d 1d       	adc	r25, r13
    2be6:	ae 1d       	adc	r26, r14
    2be8:	bf 1d       	adc	r27, r15
    2bea:	f2 01       	movw	r30, r4
    2bec:	ee 0f       	add	r30, r30
    2bee:	ff 1f       	adc	r31, r31
    2bf0:	ee 0f       	add	r30, r30
    2bf2:	ff 1f       	adc	r31, r31
    2bf4:	e3 57       	subi	r30, 0x73	; 115
    2bf6:	f5 4b       	sbci	r31, 0xB5	; 181
    2bf8:	80 83       	st	Z, r24
    2bfa:	91 83       	std	Z+1, r25	; 0x01
    2bfc:	a2 83       	std	Z+2, r26	; 0x02
    2bfe:	b3 83       	std	Z+3, r27	; 0x03
			}
			if (comma_indices[6] - comma_indices[5] - 1){
    2c00:	2f 80       	ldd	r2, Y+7	; 0x07
    2c02:	42 2c       	mov	r4, r2
    2c04:	02 2c       	mov	r0, r2
    2c06:	00 0c       	add	r0, r0
    2c08:	55 08       	sbc	r5, r5
    2c0a:	c2 01       	movw	r24, r4
    2c0c:	86 19       	sub	r24, r6
    2c0e:	97 09       	sbc	r25, r7
    2c10:	01 97       	sbiw	r24, 0x01	; 1
    2c12:	79 f1       	breq	.+94     	; 0x2c72 <Read_GPS+0x57c>
				Longitude_window[window_counter] *= (GPS_Data[comma_indices[5]+1] == 'W') ? -1 : 1;
    2c14:	80 91 ad 4a 	lds	r24, 0x4AAD	; 0x804aad <window_counter.4954>
    2c18:	a8 2f       	mov	r26, r24
    2c1a:	b0 e0       	ldi	r27, 0x00	; 0
    2c1c:	fd 01       	movw	r30, r26
    2c1e:	ee 0f       	add	r30, r30
    2c20:	ff 1f       	adc	r31, r31
    2c22:	ee 0f       	add	r30, r30
    2c24:	ff 1f       	adc	r31, r31
    2c26:	e3 57       	subi	r30, 0x73	; 115
    2c28:	f5 4b       	sbci	r31, 0xB5	; 181
    2c2a:	60 81       	ld	r22, Z
    2c2c:	71 81       	ldd	r23, Z+1	; 0x01
    2c2e:	82 81       	ldd	r24, Z+2	; 0x02
    2c30:	93 81       	ldd	r25, Z+3	; 0x03
    2c32:	f3 01       	movw	r30, r6
    2c34:	31 96       	adiw	r30, 0x01	; 1
    2c36:	4e e0       	ldi	r20, 0x0E	; 14
    2c38:	50 e0       	ldi	r21, 0x00	; 0
    2c3a:	4c 0f       	add	r20, r28
    2c3c:	5d 1f       	adc	r21, r29
    2c3e:	e4 0f       	add	r30, r20
    2c40:	f5 1f       	adc	r31, r21
    2c42:	20 81       	ld	r18, Z
    2c44:	27 35       	cpi	r18, 0x57	; 87
    2c46:	21 f4       	brne	.+8      	; 0x2c50 <Read_GPS+0x55a>
    2c48:	2f ef       	ldi	r18, 0xFF	; 255
    2c4a:	3f ef       	ldi	r19, 0xFF	; 255
    2c4c:	a9 01       	movw	r20, r18
    2c4e:	04 c0       	rjmp	.+8      	; 0x2c58 <Read_GPS+0x562>
    2c50:	21 e0       	ldi	r18, 0x01	; 1
    2c52:	30 e0       	ldi	r19, 0x00	; 0
    2c54:	40 e0       	ldi	r20, 0x00	; 0
    2c56:	50 e0       	ldi	r21, 0x00	; 0
    2c58:	fd 01       	movw	r30, r26
    2c5a:	ee 0f       	add	r30, r30
    2c5c:	ff 1f       	adc	r31, r31
    2c5e:	ee 0f       	add	r30, r30
    2c60:	ff 1f       	adc	r31, r31
    2c62:	e3 57       	subi	r30, 0x73	; 115
    2c64:	f5 4b       	sbci	r31, 0xB5	; 181
    2c66:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <__mulsi3>
    2c6a:	60 83       	st	Z, r22
    2c6c:	71 83       	std	Z+1, r23	; 0x01
    2c6e:	82 83       	std	Z+2, r24	; 0x02
    2c70:	93 83       	std	Z+3, r25	; 0x03
			}
			if (comma_indices[7] - comma_indices[6] - 1){
    2c72:	38 84       	ldd	r3, Y+8	; 0x08
    2c74:	63 2c       	mov	r6, r3
    2c76:	03 2c       	mov	r0, r3
    2c78:	00 0c       	add	r0, r0
    2c7a:	77 08       	sbc	r7, r7
    2c7c:	c3 01       	movw	r24, r6
    2c7e:	84 19       	sub	r24, r4
    2c80:	95 09       	sbc	r25, r5
    2c82:	01 97       	sbiw	r24, 0x01	; 1
    2c84:	09 f4       	brne	.+2      	; 0x2c88 <Read_GPS+0x592>
    2c86:	4d c0       	rjmp	.+154    	; 0x2d22 <Read_GPS+0x62c>
				unsigned char k = comma_indices[7] - comma_indices[6];
    2c88:	43 2d       	mov	r20, r3
    2c8a:	42 19       	sub	r20, r2
				char Speed[6] = {0};
    2c8c:	fe 01       	movw	r30, r28
    2c8e:	eb 58       	subi	r30, 0x8B	; 139
    2c90:	ff 4f       	sbci	r31, 0xFF	; 255
    2c92:	86 e0       	ldi	r24, 0x06	; 6
    2c94:	df 01       	movw	r26, r30
    2c96:	1d 92       	st	X+, r1
    2c98:	8a 95       	dec	r24
    2c9a:	e9 f7       	brne	.-6      	; 0x2c96 <Read_GPS+0x5a0>
				char *ptr;
				for (unsigned char index=0;index<k;index++){
    2c9c:	20 e0       	ldi	r18, 0x00	; 0
    2c9e:	15 c0       	rjmp	.+42     	; 0x2cca <Read_GPS+0x5d4>
					Speed[index] = GPS_Data[comma_indices[6]+1+index];
    2ca0:	82 2f       	mov	r24, r18
    2ca2:	90 e0       	ldi	r25, 0x00	; 0
    2ca4:	f2 01       	movw	r30, r4
    2ca6:	31 96       	adiw	r30, 0x01	; 1
    2ca8:	e8 0f       	add	r30, r24
    2caa:	f9 1f       	adc	r31, r25
    2cac:	6e e0       	ldi	r22, 0x0E	; 14
    2cae:	70 e0       	ldi	r23, 0x00	; 0
    2cb0:	6c 0f       	add	r22, r28
    2cb2:	7d 1f       	adc	r23, r29
    2cb4:	e6 0f       	add	r30, r22
    2cb6:	f7 1f       	adc	r31, r23
    2cb8:	30 81       	ld	r19, Z
    2cba:	e5 e7       	ldi	r30, 0x75	; 117
    2cbc:	f0 e0       	ldi	r31, 0x00	; 0
    2cbe:	ec 0f       	add	r30, r28
    2cc0:	fd 1f       	adc	r31, r29
    2cc2:	e8 0f       	add	r30, r24
    2cc4:	f9 1f       	adc	r31, r25
    2cc6:	30 83       	st	Z, r19
			}
			if (comma_indices[7] - comma_indices[6] - 1){
				unsigned char k = comma_indices[7] - comma_indices[6];
				char Speed[6] = {0};
				char *ptr;
				for (unsigned char index=0;index<k;index++){
    2cc8:	2f 5f       	subi	r18, 0xFF	; 255
    2cca:	24 17       	cp	r18, r20
    2ccc:	48 f3       	brcs	.-46     	; 0x2ca0 <Read_GPS+0x5aa>
					Speed[index] = GPS_Data[comma_indices[6]+1+index];
				}
				Drone->Speed_over_ground = Drone->Speed_over_ground*0.9 + strtod(Speed, &ptr)*0.1;
    2cce:	24 01       	movw	r4, r8
    2cd0:	74 e5       	ldi	r23, 0x54	; 84
    2cd2:	47 0e       	add	r4, r23
    2cd4:	51 1c       	adc	r5, r1
    2cd6:	d2 01       	movw	r26, r4
    2cd8:	6d 91       	ld	r22, X+
    2cda:	7d 91       	ld	r23, X+
    2cdc:	8d 91       	ld	r24, X+
    2cde:	9c 91       	ld	r25, X
    2ce0:	26 e6       	ldi	r18, 0x66	; 102
    2ce2:	36 e6       	ldi	r19, 0x66	; 102
    2ce4:	46 e6       	ldi	r20, 0x66	; 102
    2ce6:	5f e3       	ldi	r21, 0x3F	; 63
    2ce8:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <__mulsf3>
    2cec:	6b 01       	movw	r12, r22
    2cee:	7c 01       	movw	r14, r24
    2cf0:	be 01       	movw	r22, r28
    2cf2:	65 58       	subi	r22, 0x85	; 133
    2cf4:	7f 4f       	sbci	r23, 0xFF	; 255
    2cf6:	ce 01       	movw	r24, r28
    2cf8:	8b 58       	subi	r24, 0x8B	; 139
    2cfa:	9f 4f       	sbci	r25, 0xFF	; 255
    2cfc:	0e 94 4f 27 	call	0x4e9e	; 0x4e9e <strtod>
    2d00:	2d ec       	ldi	r18, 0xCD	; 205
    2d02:	3c ec       	ldi	r19, 0xCC	; 204
    2d04:	4c ec       	ldi	r20, 0xCC	; 204
    2d06:	5d e3       	ldi	r21, 0x3D	; 61
    2d08:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <__mulsf3>
    2d0c:	9b 01       	movw	r18, r22
    2d0e:	ac 01       	movw	r20, r24
    2d10:	c7 01       	movw	r24, r14
    2d12:	b6 01       	movw	r22, r12
    2d14:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <__addsf3>
    2d18:	f2 01       	movw	r30, r4
    2d1a:	60 83       	st	Z, r22
    2d1c:	71 83       	std	Z+1, r23	; 0x01
    2d1e:	82 83       	std	Z+2, r24	; 0x02
    2d20:	93 83       	std	Z+3, r25	; 0x03
			}
			if (comma_indices[8] - comma_indices[7] - 1){
    2d22:	39 85       	ldd	r19, Y+9	; 0x09
    2d24:	83 2f       	mov	r24, r19
    2d26:	03 2e       	mov	r0, r19
    2d28:	00 0c       	add	r0, r0
    2d2a:	99 0b       	sbc	r25, r25
    2d2c:	86 19       	sub	r24, r6
    2d2e:	97 09       	sbc	r25, r7
    2d30:	01 97       	sbiw	r24, 0x01	; 1
    2d32:	49 f1       	breq	.+82     	; 0x2d86 <Read_GPS+0x690>
				unsigned char k = comma_indices[8] - comma_indices[7];
    2d34:	33 19       	sub	r19, r3
				char Course[6];
				char *ptr;
				for (unsigned char index=0;index<k;index++){
    2d36:	20 e0       	ldi	r18, 0x00	; 0
    2d38:	15 c0       	rjmp	.+42     	; 0x2d64 <Read_GPS+0x66e>
					Course[index] = GPS_Data[comma_indices[7]+1+index];
    2d3a:	82 2f       	mov	r24, r18
    2d3c:	90 e0       	ldi	r25, 0x00	; 0
    2d3e:	f3 01       	movw	r30, r6
    2d40:	31 96       	adiw	r30, 0x01	; 1
    2d42:	e8 0f       	add	r30, r24
    2d44:	f9 1f       	adc	r31, r25
    2d46:	4e e0       	ldi	r20, 0x0E	; 14
    2d48:	50 e0       	ldi	r21, 0x00	; 0
    2d4a:	4c 0f       	add	r20, r28
    2d4c:	5d 1f       	adc	r21, r29
    2d4e:	e4 0f       	add	r30, r20
    2d50:	f5 1f       	adc	r31, r21
    2d52:	40 81       	ld	r20, Z
    2d54:	e5 e7       	ldi	r30, 0x75	; 117
    2d56:	f0 e0       	ldi	r31, 0x00	; 0
    2d58:	ec 0f       	add	r30, r28
    2d5a:	fd 1f       	adc	r31, r29
    2d5c:	e8 0f       	add	r30, r24
    2d5e:	f9 1f       	adc	r31, r25
    2d60:	40 83       	st	Z, r20
			}
			if (comma_indices[8] - comma_indices[7] - 1){
				unsigned char k = comma_indices[8] - comma_indices[7];
				char Course[6];
				char *ptr;
				for (unsigned char index=0;index<k;index++){
    2d62:	2f 5f       	subi	r18, 0xFF	; 255
    2d64:	23 17       	cp	r18, r19
    2d66:	48 f3       	brcs	.-46     	; 0x2d3a <Read_GPS+0x644>
					Course[index] = GPS_Data[comma_indices[7]+1+index];
				}
				Drone->Course_over_ground = strtod(Course, &ptr);
    2d68:	be 01       	movw	r22, r28
    2d6a:	65 58       	subi	r22, 0x85	; 133
    2d6c:	7f 4f       	sbci	r23, 0xFF	; 255
    2d6e:	ce 01       	movw	r24, r28
    2d70:	8b 58       	subi	r24, 0x8B	; 139
    2d72:	9f 4f       	sbci	r25, 0xFF	; 255
    2d74:	0e 94 4f 27 	call	0x4e9e	; 0x4e9e <strtod>
    2d78:	f4 01       	movw	r30, r8
    2d7a:	e8 5a       	subi	r30, 0xA8	; 168
    2d7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d7e:	60 83       	st	Z, r22
    2d80:	71 83       	std	Z+1, r23	; 0x01
    2d82:	82 83       	std	Z+2, r24	; 0x02
    2d84:	93 83       	std	Z+3, r25	; 0x03
			}
			
			if (++window_counter >= GPS_WINDOW_SIZE){
    2d86:	80 91 ad 4a 	lds	r24, 0x4AAD	; 0x804aad <window_counter.4954>
    2d8a:	8f 5f       	subi	r24, 0xFF	; 255
    2d8c:	80 93 ad 4a 	sts	0x4AAD, r24	; 0x804aad <window_counter.4954>
    2d90:	84 30       	cpi	r24, 0x04	; 4
    2d92:	08 f4       	brcc	.+2      	; 0x2d96 <Read_GPS+0x6a0>
    2d94:	4b c1       	rjmp	.+662    	; 0x302c <Read_GPS+0x936>
				window_counter = 0;
    2d96:	10 92 ad 4a 	sts	0x4AAD, r1	; 0x804aad <window_counter.4954>
				signed long long Latitude_oversampled = 0;
				signed long long Longitude_oversampled = 0;
				for (unsigned char k=0;k<GPS_WINDOW_SIZE;k++){
    2d9a:	61 2c       	mov	r6, r1
			}
			
			if (++window_counter >= GPS_WINDOW_SIZE){
				window_counter = 0;
				signed long long Latitude_oversampled = 0;
				signed long long Longitude_oversampled = 0;
    2d9c:	cb 57       	subi	r28, 0x7B	; 123
    2d9e:	df 4f       	sbci	r29, 0xFF	; 255
    2da0:	18 82       	st	Y, r1
    2da2:	c5 58       	subi	r28, 0x85	; 133
    2da4:	d0 40       	sbci	r29, 0x00	; 0
    2da6:	ca 57       	subi	r28, 0x7A	; 122
    2da8:	df 4f       	sbci	r29, 0xFF	; 255
    2daa:	18 82       	st	Y, r1
    2dac:	c6 58       	subi	r28, 0x86	; 134
    2dae:	d0 40       	sbci	r29, 0x00	; 0
    2db0:	c9 57       	subi	r28, 0x79	; 121
    2db2:	df 4f       	sbci	r29, 0xFF	; 255
    2db4:	18 82       	st	Y, r1
    2db6:	c7 58       	subi	r28, 0x87	; 135
    2db8:	d0 40       	sbci	r29, 0x00	; 0
    2dba:	c8 57       	subi	r28, 0x78	; 120
    2dbc:	df 4f       	sbci	r29, 0xFF	; 255
    2dbe:	18 82       	st	Y, r1
    2dc0:	c8 58       	subi	r28, 0x88	; 136
    2dc2:	d0 40       	sbci	r29, 0x00	; 0
    2dc4:	c7 57       	subi	r28, 0x77	; 119
    2dc6:	df 4f       	sbci	r29, 0xFF	; 255
    2dc8:	18 82       	st	Y, r1
    2dca:	c9 58       	subi	r28, 0x89	; 137
    2dcc:	d0 40       	sbci	r29, 0x00	; 0
    2dce:	c6 57       	subi	r28, 0x76	; 118
    2dd0:	df 4f       	sbci	r29, 0xFF	; 255
    2dd2:	18 82       	st	Y, r1
    2dd4:	ca 58       	subi	r28, 0x8A	; 138
    2dd6:	d0 40       	sbci	r29, 0x00	; 0
    2dd8:	41 2c       	mov	r4, r1
    2dda:	51 2c       	mov	r5, r1
				Drone->Course_over_ground = strtod(Course, &ptr);
			}
			
			if (++window_counter >= GPS_WINDOW_SIZE){
				window_counter = 0;
				signed long long Latitude_oversampled = 0;
    2ddc:	71 2c       	mov	r7, r1
    2dde:	b0 e0       	ldi	r27, 0x00	; 0
    2de0:	a0 e0       	ldi	r26, 0x00	; 0
    2de2:	ce 57       	subi	r28, 0x7E	; 126
    2de4:	df 4f       	sbci	r29, 0xFF	; 255
    2de6:	18 82       	st	Y, r1
    2de8:	c2 58       	subi	r28, 0x82	; 130
    2dea:	d0 40       	sbci	r29, 0x00	; 0
    2dec:	cd 57       	subi	r28, 0x7D	; 125
    2dee:	df 4f       	sbci	r29, 0xFF	; 255
    2df0:	18 82       	st	Y, r1
    2df2:	c3 58       	subi	r28, 0x83	; 131
    2df4:	d0 40       	sbci	r29, 0x00	; 0
    2df6:	cc 57       	subi	r28, 0x7C	; 124
    2df8:	df 4f       	sbci	r29, 0xFF	; 255
    2dfa:	18 82       	st	Y, r1
    2dfc:	c4 58       	subi	r28, 0x84	; 132
    2dfe:	d0 40       	sbci	r29, 0x00	; 0
    2e00:	21 2c       	mov	r2, r1
    2e02:	31 2c       	mov	r3, r1
				signed long long Longitude_oversampled = 0;
				for (unsigned char k=0;k<GPS_WINDOW_SIZE;k++){
    2e04:	aa c0       	rjmp	.+340    	; 0x2f5a <Read_GPS+0x864>
					Latitude_oversampled += Latitude_window[k];
    2e06:	e6 2d       	mov	r30, r6
    2e08:	f0 e0       	ldi	r31, 0x00	; 0
    2e0a:	bf 01       	movw	r22, r30
    2e0c:	66 0f       	add	r22, r22
    2e0e:	77 1f       	adc	r23, r23
    2e10:	66 0f       	add	r22, r22
    2e12:	77 1f       	adc	r23, r23
    2e14:	c5 57       	subi	r28, 0x75	; 117
    2e16:	df 4f       	sbci	r29, 0xFF	; 255
    2e18:	68 83       	st	Y, r22
    2e1a:	79 83       	std	Y+1, r23	; 0x01
    2e1c:	cb 58       	subi	r28, 0x8B	; 139
    2e1e:	d0 40       	sbci	r29, 0x00	; 0
    2e20:	cb 01       	movw	r24, r22
    2e22:	83 56       	subi	r24, 0x63	; 99
    2e24:	95 4b       	sbci	r25, 0xB5	; 181
    2e26:	fc 01       	movw	r30, r24
    2e28:	60 81       	ld	r22, Z
    2e2a:	71 81       	ldd	r23, Z+1	; 0x01
    2e2c:	82 81       	ldd	r24, Z+2	; 0x02
    2e2e:	93 81       	ldd	r25, Z+3	; 0x03
    2e30:	6b 01       	movw	r12, r22
    2e32:	7c 01       	movw	r14, r24
    2e34:	ff 0c       	add	r15, r15
    2e36:	cc 08       	sbc	r12, r12
    2e38:	dc 2c       	mov	r13, r12
    2e3a:	76 01       	movw	r14, r12
    2e3c:	26 2f       	mov	r18, r22
    2e3e:	37 2f       	mov	r19, r23
    2e40:	48 2f       	mov	r20, r24
    2e42:	59 2f       	mov	r21, r25
    2e44:	6c 2d       	mov	r22, r12
    2e46:	7c 2d       	mov	r23, r12
    2e48:	8c 2d       	mov	r24, r12
    2e4a:	9c 2d       	mov	r25, r12
    2e4c:	a7 2c       	mov	r10, r7
    2e4e:	bb 2e       	mov	r11, r27
    2e50:	ca 2e       	mov	r12, r26
    2e52:	ce 57       	subi	r28, 0x7E	; 126
    2e54:	df 4f       	sbci	r29, 0xFF	; 255
    2e56:	d8 80       	ld	r13, Y
    2e58:	c2 58       	subi	r28, 0x82	; 130
    2e5a:	d0 40       	sbci	r29, 0x00	; 0
    2e5c:	cd 57       	subi	r28, 0x7D	; 125
    2e5e:	df 4f       	sbci	r29, 0xFF	; 255
    2e60:	e8 80       	ld	r14, Y
    2e62:	c3 58       	subi	r28, 0x83	; 131
    2e64:	d0 40       	sbci	r29, 0x00	; 0
    2e66:	cc 57       	subi	r28, 0x7C	; 124
    2e68:	df 4f       	sbci	r29, 0xFF	; 255
    2e6a:	f8 80       	ld	r15, Y
    2e6c:	c4 58       	subi	r28, 0x84	; 132
    2e6e:	d0 40       	sbci	r29, 0x00	; 0
    2e70:	02 2d       	mov	r16, r2
    2e72:	13 2d       	mov	r17, r3
    2e74:	0e 94 01 26 	call	0x4c02	; 0x4c02 <__adddi3>
    2e78:	72 2e       	mov	r7, r18
    2e7a:	b3 2f       	mov	r27, r19
    2e7c:	a4 2f       	mov	r26, r20
    2e7e:	ce 57       	subi	r28, 0x7E	; 126
    2e80:	df 4f       	sbci	r29, 0xFF	; 255
    2e82:	58 83       	st	Y, r21
    2e84:	c2 58       	subi	r28, 0x82	; 130
    2e86:	d0 40       	sbci	r29, 0x00	; 0
    2e88:	cd 57       	subi	r28, 0x7D	; 125
    2e8a:	df 4f       	sbci	r29, 0xFF	; 255
    2e8c:	68 83       	st	Y, r22
    2e8e:	c3 58       	subi	r28, 0x83	; 131
    2e90:	d0 40       	sbci	r29, 0x00	; 0
    2e92:	cc 57       	subi	r28, 0x7C	; 124
    2e94:	df 4f       	sbci	r29, 0xFF	; 255
    2e96:	78 83       	st	Y, r23
    2e98:	c4 58       	subi	r28, 0x84	; 132
    2e9a:	d0 40       	sbci	r29, 0x00	; 0
    2e9c:	28 2e       	mov	r2, r24
    2e9e:	39 2e       	mov	r3, r25
					Longitude_oversampled += Longitude_window[k];
    2ea0:	c5 57       	subi	r28, 0x75	; 117
    2ea2:	df 4f       	sbci	r29, 0xFF	; 255
    2ea4:	e8 81       	ld	r30, Y
    2ea6:	f9 81       	ldd	r31, Y+1	; 0x01
    2ea8:	cb 58       	subi	r28, 0x8B	; 139
    2eaa:	d0 40       	sbci	r29, 0x00	; 0
    2eac:	e3 57       	subi	r30, 0x73	; 115
    2eae:	f5 4b       	sbci	r31, 0xB5	; 181
    2eb0:	60 81       	ld	r22, Z
    2eb2:	71 81       	ldd	r23, Z+1	; 0x01
    2eb4:	82 81       	ldd	r24, Z+2	; 0x02
    2eb6:	93 81       	ldd	r25, Z+3	; 0x03
    2eb8:	6b 01       	movw	r12, r22
    2eba:	7c 01       	movw	r14, r24
    2ebc:	ff 0c       	add	r15, r15
    2ebe:	cc 08       	sbc	r12, r12
    2ec0:	dc 2c       	mov	r13, r12
    2ec2:	76 01       	movw	r14, r12
    2ec4:	26 2f       	mov	r18, r22
    2ec6:	37 2f       	mov	r19, r23
    2ec8:	48 2f       	mov	r20, r24
    2eca:	59 2f       	mov	r21, r25
    2ecc:	6c 2d       	mov	r22, r12
    2ece:	7c 2d       	mov	r23, r12
    2ed0:	8c 2d       	mov	r24, r12
    2ed2:	9c 2d       	mov	r25, r12
    2ed4:	cb 57       	subi	r28, 0x7B	; 123
    2ed6:	df 4f       	sbci	r29, 0xFF	; 255
    2ed8:	a8 80       	ld	r10, Y
    2eda:	c5 58       	subi	r28, 0x85	; 133
    2edc:	d0 40       	sbci	r29, 0x00	; 0
    2ede:	ca 57       	subi	r28, 0x7A	; 122
    2ee0:	df 4f       	sbci	r29, 0xFF	; 255
    2ee2:	b8 80       	ld	r11, Y
    2ee4:	c6 58       	subi	r28, 0x86	; 134
    2ee6:	d0 40       	sbci	r29, 0x00	; 0
    2ee8:	c9 57       	subi	r28, 0x79	; 121
    2eea:	df 4f       	sbci	r29, 0xFF	; 255
    2eec:	c8 80       	ld	r12, Y
    2eee:	c7 58       	subi	r28, 0x87	; 135
    2ef0:	d0 40       	sbci	r29, 0x00	; 0
    2ef2:	c8 57       	subi	r28, 0x78	; 120
    2ef4:	df 4f       	sbci	r29, 0xFF	; 255
    2ef6:	d8 80       	ld	r13, Y
    2ef8:	c8 58       	subi	r28, 0x88	; 136
    2efa:	d0 40       	sbci	r29, 0x00	; 0
    2efc:	c7 57       	subi	r28, 0x77	; 119
    2efe:	df 4f       	sbci	r29, 0xFF	; 255
    2f00:	e8 80       	ld	r14, Y
    2f02:	c9 58       	subi	r28, 0x89	; 137
    2f04:	d0 40       	sbci	r29, 0x00	; 0
    2f06:	c6 57       	subi	r28, 0x76	; 118
    2f08:	df 4f       	sbci	r29, 0xFF	; 255
    2f0a:	f8 80       	ld	r15, Y
    2f0c:	ca 58       	subi	r28, 0x8A	; 138
    2f0e:	d0 40       	sbci	r29, 0x00	; 0
    2f10:	04 2d       	mov	r16, r4
    2f12:	15 2d       	mov	r17, r5
    2f14:	0e 94 01 26 	call	0x4c02	; 0x4c02 <__adddi3>
    2f18:	cb 57       	subi	r28, 0x7B	; 123
    2f1a:	df 4f       	sbci	r29, 0xFF	; 255
    2f1c:	28 83       	st	Y, r18
    2f1e:	c5 58       	subi	r28, 0x85	; 133
    2f20:	d0 40       	sbci	r29, 0x00	; 0
    2f22:	ca 57       	subi	r28, 0x7A	; 122
    2f24:	df 4f       	sbci	r29, 0xFF	; 255
    2f26:	38 83       	st	Y, r19
    2f28:	c6 58       	subi	r28, 0x86	; 134
    2f2a:	d0 40       	sbci	r29, 0x00	; 0
    2f2c:	c9 57       	subi	r28, 0x79	; 121
    2f2e:	df 4f       	sbci	r29, 0xFF	; 255
    2f30:	48 83       	st	Y, r20
    2f32:	c7 58       	subi	r28, 0x87	; 135
    2f34:	d0 40       	sbci	r29, 0x00	; 0
    2f36:	c8 57       	subi	r28, 0x78	; 120
    2f38:	df 4f       	sbci	r29, 0xFF	; 255
    2f3a:	58 83       	st	Y, r21
    2f3c:	c8 58       	subi	r28, 0x88	; 136
    2f3e:	d0 40       	sbci	r29, 0x00	; 0
    2f40:	c7 57       	subi	r28, 0x77	; 119
    2f42:	df 4f       	sbci	r29, 0xFF	; 255
    2f44:	68 83       	st	Y, r22
    2f46:	c9 58       	subi	r28, 0x89	; 137
    2f48:	d0 40       	sbci	r29, 0x00	; 0
    2f4a:	c6 57       	subi	r28, 0x76	; 118
    2f4c:	df 4f       	sbci	r29, 0xFF	; 255
    2f4e:	78 83       	st	Y, r23
    2f50:	ca 58       	subi	r28, 0x8A	; 138
    2f52:	d0 40       	sbci	r29, 0x00	; 0
    2f54:	48 2e       	mov	r4, r24
    2f56:	59 2e       	mov	r5, r25
			
			if (++window_counter >= GPS_WINDOW_SIZE){
				window_counter = 0;
				signed long long Latitude_oversampled = 0;
				signed long long Longitude_oversampled = 0;
				for (unsigned char k=0;k<GPS_WINDOW_SIZE;k++){
    2f58:	63 94       	inc	r6
    2f5a:	f3 e0       	ldi	r31, 0x03	; 3
    2f5c:	f6 15       	cp	r31, r6
    2f5e:	08 f0       	brcs	.+2      	; 0x2f62 <Read_GPS+0x86c>
    2f60:	52 cf       	rjmp	.-348    	; 0x2e06 <Read_GPS+0x710>
					Latitude_oversampled += Latitude_window[k];
					Longitude_oversampled += Longitude_window[k];
				}
				Latitude_oversampled >>= 2;
    2f62:	27 2d       	mov	r18, r7
    2f64:	3b 2f       	mov	r19, r27
    2f66:	4a 2f       	mov	r20, r26
    2f68:	ce 57       	subi	r28, 0x7E	; 126
    2f6a:	df 4f       	sbci	r29, 0xFF	; 255
    2f6c:	58 81       	ld	r21, Y
    2f6e:	c2 58       	subi	r28, 0x82	; 130
    2f70:	d0 40       	sbci	r29, 0x00	; 0
    2f72:	cd 57       	subi	r28, 0x7D	; 125
    2f74:	df 4f       	sbci	r29, 0xFF	; 255
    2f76:	68 81       	ld	r22, Y
    2f78:	c3 58       	subi	r28, 0x83	; 131
    2f7a:	d0 40       	sbci	r29, 0x00	; 0
    2f7c:	cc 57       	subi	r28, 0x7C	; 124
    2f7e:	df 4f       	sbci	r29, 0xFF	; 255
    2f80:	78 81       	ld	r23, Y
    2f82:	c4 58       	subi	r28, 0x84	; 132
    2f84:	d0 40       	sbci	r29, 0x00	; 0
    2f86:	82 2d       	mov	r24, r2
    2f88:	93 2d       	mov	r25, r3
    2f8a:	02 e0       	ldi	r16, 0x02	; 2
    2f8c:	0e 94 e3 25 	call	0x4bc6	; 0x4bc6 <__ashrdi3>
    2f90:	62 2e       	mov	r6, r18
    2f92:	73 2e       	mov	r7, r19
    2f94:	b4 2f       	mov	r27, r20
    2f96:	a5 2f       	mov	r26, r21
				Longitude_oversampled >>= 2;
    2f98:	cb 57       	subi	r28, 0x7B	; 123
    2f9a:	df 4f       	sbci	r29, 0xFF	; 255
    2f9c:	28 81       	ld	r18, Y
    2f9e:	c5 58       	subi	r28, 0x85	; 133
    2fa0:	d0 40       	sbci	r29, 0x00	; 0
    2fa2:	ca 57       	subi	r28, 0x7A	; 122
    2fa4:	df 4f       	sbci	r29, 0xFF	; 255
    2fa6:	38 81       	ld	r19, Y
    2fa8:	c6 58       	subi	r28, 0x86	; 134
    2faa:	d0 40       	sbci	r29, 0x00	; 0
    2fac:	c9 57       	subi	r28, 0x79	; 121
    2fae:	df 4f       	sbci	r29, 0xFF	; 255
    2fb0:	48 81       	ld	r20, Y
    2fb2:	c7 58       	subi	r28, 0x87	; 135
    2fb4:	d0 40       	sbci	r29, 0x00	; 0
    2fb6:	c8 57       	subi	r28, 0x78	; 120
    2fb8:	df 4f       	sbci	r29, 0xFF	; 255
    2fba:	58 81       	ld	r21, Y
    2fbc:	c8 58       	subi	r28, 0x88	; 136
    2fbe:	d0 40       	sbci	r29, 0x00	; 0
    2fc0:	c7 57       	subi	r28, 0x77	; 119
    2fc2:	df 4f       	sbci	r29, 0xFF	; 255
    2fc4:	68 81       	ld	r22, Y
    2fc6:	c9 58       	subi	r28, 0x89	; 137
    2fc8:	d0 40       	sbci	r29, 0x00	; 0
    2fca:	c6 57       	subi	r28, 0x76	; 118
    2fcc:	df 4f       	sbci	r29, 0xFF	; 255
    2fce:	78 81       	ld	r23, Y
    2fd0:	ca 58       	subi	r28, 0x8A	; 138
    2fd2:	d0 40       	sbci	r29, 0x00	; 0
    2fd4:	84 2d       	mov	r24, r4
    2fd6:	95 2d       	mov	r25, r5
    2fd8:	0e 94 e3 25 	call	0x4bc6	; 0x4bc6 <__ashrdi3>
				Drone->Longitude = Longitude_oversampled;
    2fdc:	f4 01       	movw	r30, r8
    2fde:	e0 5c       	subi	r30, 0xC0	; 192
    2fe0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe2:	20 83       	st	Z, r18
    2fe4:	31 83       	std	Z+1, r19	; 0x01
    2fe6:	42 83       	std	Z+2, r20	; 0x02
    2fe8:	53 83       	std	Z+3, r21	; 0x03
				Drone->Latitude = Latitude_oversampled;
    2fea:	66 2d       	mov	r22, r6
    2fec:	77 2d       	mov	r23, r7
    2fee:	8b 2f       	mov	r24, r27
    2ff0:	9a 2f       	mov	r25, r26
    2ff2:	34 96       	adiw	r30, 0x04	; 4
    2ff4:	60 82       	st	Z, r6
    2ff6:	71 82       	std	Z+1, r7	; 0x01
    2ff8:	b2 83       	std	Z+2, r27	; 0x02
    2ffa:	a3 83       	std	Z+3, r26	; 0x03
				unsigned char NED_status = LLA_to_NED(Latitude_oversampled, Longitude_oversampled, Drone->pressure_altitude, Drone->Position_NED);
    2ffc:	64 01       	movw	r12, r8
    2ffe:	a4 e3       	ldi	r26, 0x34	; 52
    3000:	ca 0e       	add	r12, r26
    3002:	d1 1c       	adc	r13, r1
    3004:	f4 01       	movw	r30, r8
    3006:	e0 a8       	ldd	r14, Z+48	; 0x30
    3008:	f1 a8       	ldd	r15, Z+49	; 0x31
    300a:	02 a9       	ldd	r16, Z+50	; 0x32
    300c:	13 a9       	ldd	r17, Z+51	; 0x33
    300e:	0e 94 b1 11 	call	0x2362	; 0x2362 <LLA_to_NED>
				return NED_status;
    3012:	0d c0       	rjmp	.+26     	; 0x302e <Read_GPS+0x938>
		else if ((g_GPS_Data[i] == 44)&&(start_index != -1)){comma_indices[j++] = i;}
		if (start_index != -1){GPS_Data[i] = g_GPS_Data[i];}
		i++;
	}
	g_GPS_Data_Index = 0;
	if ((start_index == -1)||(end_index == -1)){return 0;}
    3014:	80 e0       	ldi	r24, 0x00	; 0
    3016:	0b c0       	rjmp	.+22     	; 0x302e <Read_GPS+0x938>
    3018:	80 e0       	ldi	r24, 0x00	; 0
    301a:	09 c0       	rjmp	.+18     	; 0x302e <Read_GPS+0x938>
				unsigned char NED_status = LLA_to_NED(Latitude_oversampled, Longitude_oversampled, Drone->pressure_altitude, Drone->Position_NED);
				return NED_status;
			}
		}
	}
	return 0;
    301c:	80 e0       	ldi	r24, 0x00	; 0
    301e:	07 c0       	rjmp	.+14     	; 0x302e <Read_GPS+0x938>
    3020:	80 e0       	ldi	r24, 0x00	; 0
    3022:	05 c0       	rjmp	.+10     	; 0x302e <Read_GPS+0x938>
    3024:	80 e0       	ldi	r24, 0x00	; 0
    3026:	03 c0       	rjmp	.+6      	; 0x302e <Read_GPS+0x938>
    3028:	80 e0       	ldi	r24, 0x00	; 0
    302a:	01 c0       	rjmp	.+2      	; 0x302e <Read_GPS+0x938>
    302c:	80 e0       	ldi	r24, 0x00	; 0
}
    302e:	c4 57       	subi	r28, 0x74	; 116
    3030:	df 4f       	sbci	r29, 0xFF	; 255
    3032:	cd bf       	out	0x3d, r28	; 61
    3034:	de bf       	out	0x3e, r29	; 62
    3036:	df 91       	pop	r29
    3038:	cf 91       	pop	r28
    303a:	1f 91       	pop	r17
    303c:	0f 91       	pop	r16
    303e:	ff 90       	pop	r15
    3040:	ef 90       	pop	r14
    3042:	df 90       	pop	r13
    3044:	cf 90       	pop	r12
    3046:	bf 90       	pop	r11
    3048:	af 90       	pop	r10
    304a:	9f 90       	pop	r9
    304c:	8f 90       	pop	r8
    304e:	7f 90       	pop	r7
    3050:	6f 90       	pop	r6
    3052:	5f 90       	pop	r5
    3054:	4f 90       	pop	r4
    3056:	3f 90       	pop	r3
    3058:	2f 90       	pop	r2
    305a:	08 95       	ret

0000305c <USART_Transmit>:
	Position_NED[2] = -Height;
	
	return 1;
}

void USART_Transmit(char* Message, unsigned char length){
    305c:	fc 01       	movw	r30, r24
	for (unsigned char i=0;i<length;i++){
    305e:	90 e0       	ldi	r25, 0x00	; 0
    3060:	0f c0       	rjmp	.+30     	; 0x3080 <USART_Transmit+0x24>
		USART3_TXDATAL = *Message++;
    3062:	9f 01       	movw	r18, r30
    3064:	2f 5f       	subi	r18, 0xFF	; 255
    3066:	3f 4f       	sbci	r19, 0xFF	; 255
    3068:	80 81       	ld	r24, Z
    306a:	80 93 62 08 	sts	0x0862, r24	; 0x800862 <__TEXT_REGION_LENGTH__+0x7e0862>
		while(!(USART3_STATUS & USART_TXCIF_bm));
    306e:	80 91 64 08 	lds	r24, 0x0864	; 0x800864 <__TEXT_REGION_LENGTH__+0x7e0864>
    3072:	86 ff       	sbrs	r24, 6
    3074:	fc cf       	rjmp	.-8      	; 0x306e <USART_Transmit+0x12>
		USART3_STATUS = USART_TXCIF_bm;
    3076:	80 e4       	ldi	r24, 0x40	; 64
    3078:	80 93 64 08 	sts	0x0864, r24	; 0x800864 <__TEXT_REGION_LENGTH__+0x7e0864>
	
	return 1;
}

void USART_Transmit(char* Message, unsigned char length){
	for (unsigned char i=0;i<length;i++){
    307c:	9f 5f       	subi	r25, 0xFF	; 255
		USART3_TXDATAL = *Message++;
    307e:	f9 01       	movw	r30, r18
	
	return 1;
}

void USART_Transmit(char* Message, unsigned char length){
	for (unsigned char i=0;i<length;i++){
    3080:	96 17       	cp	r25, r22
    3082:	78 f3       	brcs	.-34     	; 0x3062 <USART_Transmit+0x6>
		USART3_TXDATAL = *Message++;
		while(!(USART3_STATUS & USART_TXCIF_bm));
		USART3_STATUS = USART_TXCIF_bm;
	}
	Delay(1000);
    3084:	28 ee       	ldi	r18, 0xE8	; 232
    3086:	33 e0       	ldi	r19, 0x03	; 3
    3088:	40 e0       	ldi	r20, 0x00	; 0
    308a:	50 e0       	ldi	r21, 0x00	; 0
    308c:	60 e0       	ldi	r22, 0x00	; 0
    308e:	70 e0       	ldi	r23, 0x00	; 0
    3090:	80 e0       	ldi	r24, 0x00	; 0
    3092:	90 e0       	ldi	r25, 0x00	; 0
    3094:	0e 94 35 0b 	call	0x166a	; 0x166a <Delay>
    3098:	08 95       	ret

0000309a <Setup_GPS>:
// GPS CODE
static volatile char g_GPS_Data[256];
static volatile unsigned char g_GPS_Data_Index;
volatile unsigned char g_GPS_Read_Flag = 0;

unsigned char Setup_GPS(){
    309a:	cf 93       	push	r28
    309c:	df 93       	push	r29
    309e:	cd b7       	in	r28, 0x3d	; 61
    30a0:	de b7       	in	r29, 0x3e	; 62
    30a2:	c2 58       	subi	r28, 0x82	; 130
    30a4:	d1 40       	sbci	r29, 0x01	; 1
    30a6:	cd bf       	out	0x3d, r28	; 61
    30a8:	de bf       	out	0x3e, r29	; 62
	USART3_BAUD = 2500; // Corresponds to 38400 baud rate
    30aa:	84 ec       	ldi	r24, 0xC4	; 196
    30ac:	99 e0       	ldi	r25, 0x09	; 9
    30ae:	80 93 68 08 	sts	0x0868, r24	; 0x800868 <__TEXT_REGION_LENGTH__+0x7e0868>
    30b2:	90 93 69 08 	sts	0x0869, r25	; 0x800869 <__TEXT_REGION_LENGTH__+0x7e0869>
	PORTB_DIR |= (1<<0);
    30b6:	e0 e2       	ldi	r30, 0x20	; 32
    30b8:	f4 e0       	ldi	r31, 0x04	; 4
    30ba:	80 81       	ld	r24, Z
    30bc:	81 60       	ori	r24, 0x01	; 1
    30be:	80 83       	st	Z, r24
	USART3_CTRLA |= USART_RXCIE_bm;
    30c0:	e5 e6       	ldi	r30, 0x65	; 101
    30c2:	f8 e0       	ldi	r31, 0x08	; 8
    30c4:	80 81       	ld	r24, Z
    30c6:	80 68       	ori	r24, 0x80	; 128
    30c8:	80 83       	st	Z, r24
	USART3_CTRLB |= USART_RXEN_bm | USART_TXEN_bm;
    30ca:	e6 e6       	ldi	r30, 0x66	; 102
    30cc:	f8 e0       	ldi	r31, 0x08	; 8
    30ce:	80 81       	ld	r24, Z
    30d0:	80 6c       	ori	r24, 0xC0	; 192
    30d2:	80 83       	st	Z, r24
	//USART3_DBGCTRL |= 1;
	Delay(10);
    30d4:	2a e0       	ldi	r18, 0x0A	; 10
    30d6:	30 e0       	ldi	r19, 0x00	; 0
    30d8:	40 e0       	ldi	r20, 0x00	; 0
    30da:	50 e0       	ldi	r21, 0x00	; 0
    30dc:	60 e0       	ldi	r22, 0x00	; 0
    30de:	70 e0       	ldi	r23, 0x00	; 0
    30e0:	80 e0       	ldi	r24, 0x00	; 0
    30e2:	90 e0       	ldi	r25, 0x00	; 0
    30e4:	0e 94 35 0b 	call	0x166a	; 0x166a <Delay>
	if (USART3_RXDATAH & USART_FERR_bm){
    30e8:	80 91 61 08 	lds	r24, 0x0861	; 0x800861 <__TEXT_REGION_LENGTH__+0x7e0861>
    30ec:	82 ff       	sbrs	r24, 2
    30ee:	0a c0       	rjmp	.+20     	; 0x3104 <Setup_GPS+0x6a>
		USART3_BAUD = 208; // Corresponds to 460800 baud rate
    30f0:	80 ed       	ldi	r24, 0xD0	; 208
    30f2:	90 e0       	ldi	r25, 0x00	; 0
    30f4:	80 93 68 08 	sts	0x0868, r24	; 0x800868 <__TEXT_REGION_LENGTH__+0x7e0868>
    30f8:	90 93 69 08 	sts	0x0869, r25	; 0x800869 <__TEXT_REGION_LENGTH__+0x7e0869>
		USART3_RXDATAH = USART_FERR_bm;
    30fc:	84 e0       	ldi	r24, 0x04	; 4
    30fe:	80 93 61 08 	sts	0x0861, r24	; 0x800861 <__TEXT_REGION_LENGTH__+0x7e0861>
    3102:	16 c0       	rjmp	.+44     	; 0x3130 <Setup_GPS+0x96>
	}
	else{
		char Increase_Baud[] = {0xB5,0x62,0x06,0x00,0x14,0x00,0x01,0x00,0x00,0x00,0xD0,0x08,0x00,0x00,0x00,0x08,0x07,0x00,0x07,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x0C,0xBC};
    3104:	8c e1       	ldi	r24, 0x1C	; 28
    3106:	e4 e5       	ldi	r30, 0x54	; 84
    3108:	f0 e4       	ldi	r31, 0x40	; 64
    310a:	de 01       	movw	r26, r28
    310c:	a9 59       	subi	r26, 0x99	; 153
    310e:	be 4f       	sbci	r27, 0xFE	; 254
    3110:	01 90       	ld	r0, Z+
    3112:	0d 92       	st	X+, r0
    3114:	8a 95       	dec	r24
    3116:	e1 f7       	brne	.-8      	; 0x3110 <Setup_GPS+0x76>
		USART_Transmit(Increase_Baud, sizeof(Increase_Baud));
    3118:	6c e1       	ldi	r22, 0x1C	; 28
    311a:	ce 01       	movw	r24, r28
    311c:	89 59       	subi	r24, 0x99	; 153
    311e:	9e 4f       	sbci	r25, 0xFE	; 254
    3120:	0e 94 2e 18 	call	0x305c	; 0x305c <USART_Transmit>
		USART3_BAUD = 208; // Corresponds to 460800 baud rate
    3124:	80 ed       	ldi	r24, 0xD0	; 208
    3126:	90 e0       	ldi	r25, 0x00	; 0
    3128:	80 93 68 08 	sts	0x0868, r24	; 0x800868 <__TEXT_REGION_LENGTH__+0x7e0868>
    312c:	90 93 69 08 	sts	0x0869, r25	; 0x800869 <__TEXT_REGION_LENGTH__+0x7e0869>
	}
	Delay(100000);
    3130:	20 ea       	ldi	r18, 0xA0	; 160
    3132:	36 e8       	ldi	r19, 0x86	; 134
    3134:	41 e0       	ldi	r20, 0x01	; 1
    3136:	50 e0       	ldi	r21, 0x00	; 0
    3138:	60 e0       	ldi	r22, 0x00	; 0
    313a:	70 e0       	ldi	r23, 0x00	; 0
    313c:	80 e0       	ldi	r24, 0x00	; 0
    313e:	90 e0       	ldi	r25, 0x00	; 0
    3140:	0e 94 35 0b 	call	0x166a	; 0x166a <Delay>
	
	// Disable all the messages we don't want
	char Disable_DTM[] = {0xB5,0x62,0x06,0x01,0x08,0x00,0xF0,0x0A,0x00,0x00,0x00,0x00,0x00,0x00,0x09,0x69};
    3144:	80 e1       	ldi	r24, 0x10	; 16
    3146:	e0 e7       	ldi	r30, 0x70	; 112
    3148:	f0 e4       	ldi	r31, 0x40	; 64
    314a:	de 01       	movw	r26, r28
    314c:	11 96       	adiw	r26, 0x01	; 1
    314e:	01 90       	ld	r0, Z+
    3150:	0d 92       	st	X+, r0
    3152:	8a 95       	dec	r24
    3154:	e1 f7       	brne	.-8      	; 0x314e <Setup_GPS+0xb4>
	USART_Transmit(Disable_DTM, sizeof(Disable_DTM));
    3156:	60 e1       	ldi	r22, 0x10	; 16
    3158:	ce 01       	movw	r24, r28
    315a:	01 96       	adiw	r24, 0x01	; 1
    315c:	0e 94 2e 18 	call	0x305c	; 0x305c <USART_Transmit>
	char Disable_GBQ[] = {0xB5,0x62,0x06,0x01,0x08,0x00,0xF0,0x44,0x00,0x00,0x00,0x00,0x00,0x00,0x43,0xFF};
    3160:	80 e1       	ldi	r24, 0x10	; 16
    3162:	e0 e8       	ldi	r30, 0x80	; 128
    3164:	f0 e4       	ldi	r31, 0x40	; 64
    3166:	de 01       	movw	r26, r28
    3168:	51 96       	adiw	r26, 0x11	; 17
    316a:	01 90       	ld	r0, Z+
    316c:	0d 92       	st	X+, r0
    316e:	8a 95       	dec	r24
    3170:	e1 f7       	brne	.-8      	; 0x316a <Setup_GPS+0xd0>
	USART_Transmit(Disable_GBQ, sizeof(Disable_GBQ));
    3172:	60 e1       	ldi	r22, 0x10	; 16
    3174:	ce 01       	movw	r24, r28
    3176:	41 96       	adiw	r24, 0x11	; 17
    3178:	0e 94 2e 18 	call	0x305c	; 0x305c <USART_Transmit>
	char Disable_GBS[] = {0xB5,0x62,0x06,0x01,0x08,0x00,0xF0,0x09,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x62};
    317c:	80 e1       	ldi	r24, 0x10	; 16
    317e:	e0 e9       	ldi	r30, 0x90	; 144
    3180:	f0 e4       	ldi	r31, 0x40	; 64
    3182:	de 01       	movw	r26, r28
    3184:	91 96       	adiw	r26, 0x21	; 33
    3186:	01 90       	ld	r0, Z+
    3188:	0d 92       	st	X+, r0
    318a:	8a 95       	dec	r24
    318c:	e1 f7       	brne	.-8      	; 0x3186 <Setup_GPS+0xec>
	USART_Transmit(Disable_GBS, sizeof(Disable_GBS));
    318e:	60 e1       	ldi	r22, 0x10	; 16
    3190:	ce 01       	movw	r24, r28
    3192:	81 96       	adiw	r24, 0x21	; 33
    3194:	0e 94 2e 18 	call	0x305c	; 0x305c <USART_Transmit>
	char Disable_GGA[] = {0xB5,0x62,0x06,0x01,0x08,0x00,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x23};
    3198:	80 e1       	ldi	r24, 0x10	; 16
    319a:	e0 ea       	ldi	r30, 0xA0	; 160
    319c:	f0 e4       	ldi	r31, 0x40	; 64
    319e:	de 01       	movw	r26, r28
    31a0:	d1 96       	adiw	r26, 0x31	; 49
    31a2:	01 90       	ld	r0, Z+
    31a4:	0d 92       	st	X+, r0
    31a6:	8a 95       	dec	r24
    31a8:	e1 f7       	brne	.-8      	; 0x31a2 <Setup_GPS+0x108>
	USART_Transmit(Disable_GGA, sizeof(Disable_GGA));
    31aa:	60 e1       	ldi	r22, 0x10	; 16
    31ac:	ce 01       	movw	r24, r28
    31ae:	c1 96       	adiw	r24, 0x31	; 49
    31b0:	0e 94 2e 18 	call	0x305c	; 0x305c <USART_Transmit>
	char Disable_GLL[] = {0xB5,0x62,0x06,0x01,0x08,0x00,0xF0,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x2A};
    31b4:	80 e1       	ldi	r24, 0x10	; 16
    31b6:	e0 eb       	ldi	r30, 0xB0	; 176
    31b8:	f0 e4       	ldi	r31, 0x40	; 64
    31ba:	de 01       	movw	r26, r28
    31bc:	af 5b       	subi	r26, 0xBF	; 191
    31be:	bf 4f       	sbci	r27, 0xFF	; 255
    31c0:	01 90       	ld	r0, Z+
    31c2:	0d 92       	st	X+, r0
    31c4:	8a 95       	dec	r24
    31c6:	e1 f7       	brne	.-8      	; 0x31c0 <Setup_GPS+0x126>
	USART_Transmit(Disable_GLL, sizeof(Disable_GLL));
    31c8:	60 e1       	ldi	r22, 0x10	; 16
    31ca:	ce 01       	movw	r24, r28
    31cc:	8f 5b       	subi	r24, 0xBF	; 191
    31ce:	9f 4f       	sbci	r25, 0xFF	; 255
    31d0:	0e 94 2e 18 	call	0x305c	; 0x305c <USART_Transmit>
	char Disable_GLQ[] = {0xB5,0x62,0x06,0x01,0x08,0x00,0xF0,0x43,0x00,0x00,0x00,0x00,0x00,0x00,0x42,0xF8};
    31d4:	80 e1       	ldi	r24, 0x10	; 16
    31d6:	e0 ec       	ldi	r30, 0xC0	; 192
    31d8:	f0 e4       	ldi	r31, 0x40	; 64
    31da:	de 01       	movw	r26, r28
    31dc:	af 5a       	subi	r26, 0xAF	; 175
    31de:	bf 4f       	sbci	r27, 0xFF	; 255
    31e0:	01 90       	ld	r0, Z+
    31e2:	0d 92       	st	X+, r0
    31e4:	8a 95       	dec	r24
    31e6:	e1 f7       	brne	.-8      	; 0x31e0 <Setup_GPS+0x146>
	USART_Transmit(Disable_GLQ, sizeof(Disable_GLQ));
    31e8:	60 e1       	ldi	r22, 0x10	; 16
    31ea:	ce 01       	movw	r24, r28
    31ec:	8f 5a       	subi	r24, 0xAF	; 175
    31ee:	9f 4f       	sbci	r25, 0xFF	; 255
    31f0:	0e 94 2e 18 	call	0x305c	; 0x305c <USART_Transmit>
	char Disable_GNQ[] = {0xB5,0x62,0x06,0x01,0x08,0x00,0xF0,0x42,0x00,0x00,0x00,0x00,0x00,0x00,0x41,0xF1};
    31f4:	80 e1       	ldi	r24, 0x10	; 16
    31f6:	e0 ed       	ldi	r30, 0xD0	; 208
    31f8:	f0 e4       	ldi	r31, 0x40	; 64
    31fa:	de 01       	movw	r26, r28
    31fc:	af 59       	subi	r26, 0x9F	; 159
    31fe:	bf 4f       	sbci	r27, 0xFF	; 255
    3200:	01 90       	ld	r0, Z+
    3202:	0d 92       	st	X+, r0
    3204:	8a 95       	dec	r24
    3206:	e1 f7       	brne	.-8      	; 0x3200 <Setup_GPS+0x166>
	USART_Transmit(Disable_GNQ, sizeof(Disable_GNQ));
    3208:	60 e1       	ldi	r22, 0x10	; 16
    320a:	ce 01       	movw	r24, r28
    320c:	8f 59       	subi	r24, 0x9F	; 159
    320e:	9f 4f       	sbci	r25, 0xFF	; 255
    3210:	0e 94 2e 18 	call	0x305c	; 0x305c <USART_Transmit>
	char Disable_GNS[] = {0xB5,0x62,0x06,0x01,0x08,0x00,0xF0,0x0D,0x00,0x00,0x00,0x00,0x00,0x00,0x0C,0x7E};
    3214:	80 e1       	ldi	r24, 0x10	; 16
    3216:	e0 ee       	ldi	r30, 0xE0	; 224
    3218:	f0 e4       	ldi	r31, 0x40	; 64
    321a:	de 01       	movw	r26, r28
    321c:	af 58       	subi	r26, 0x8F	; 143
    321e:	bf 4f       	sbci	r27, 0xFF	; 255
    3220:	01 90       	ld	r0, Z+
    3222:	0d 92       	st	X+, r0
    3224:	8a 95       	dec	r24
    3226:	e1 f7       	brne	.-8      	; 0x3220 <Setup_GPS+0x186>
	USART_Transmit(Disable_GNS, sizeof(Disable_GNS));
    3228:	60 e1       	ldi	r22, 0x10	; 16
    322a:	ce 01       	movw	r24, r28
    322c:	8f 58       	subi	r24, 0x8F	; 143
    322e:	9f 4f       	sbci	r25, 0xFF	; 255
    3230:	0e 94 2e 18 	call	0x305c	; 0x305c <USART_Transmit>
	char Disable_GPQ[] = {0xB5,0x62,0x06,0x01,0x08,0x00,0xF0,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xE3};
    3234:	80 e1       	ldi	r24, 0x10	; 16
    3236:	e0 ef       	ldi	r30, 0xF0	; 240
    3238:	f0 e4       	ldi	r31, 0x40	; 64
    323a:	de 01       	movw	r26, r28
    323c:	af 57       	subi	r26, 0x7F	; 127
    323e:	bf 4f       	sbci	r27, 0xFF	; 255
    3240:	01 90       	ld	r0, Z+
    3242:	0d 92       	st	X+, r0
    3244:	8a 95       	dec	r24
    3246:	e1 f7       	brne	.-8      	; 0x3240 <Setup_GPS+0x1a6>
	USART_Transmit(Disable_GPQ, sizeof(Disable_GPQ));
    3248:	60 e1       	ldi	r22, 0x10	; 16
    324a:	ce 01       	movw	r24, r28
    324c:	8f 57       	subi	r24, 0x7F	; 127
    324e:	9f 4f       	sbci	r25, 0xFF	; 255
    3250:	0e 94 2e 18 	call	0x305c	; 0x305c <USART_Transmit>
	char Disable_GRS[] = {0xB5,0x62,0x06,0x01,0x08,0x00,0xF0,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x4D};
    3254:	80 e1       	ldi	r24, 0x10	; 16
    3256:	e0 e0       	ldi	r30, 0x00	; 0
    3258:	f1 e4       	ldi	r31, 0x41	; 65
    325a:	de 01       	movw	r26, r28
    325c:	af 56       	subi	r26, 0x6F	; 111
    325e:	bf 4f       	sbci	r27, 0xFF	; 255
    3260:	01 90       	ld	r0, Z+
    3262:	0d 92       	st	X+, r0
    3264:	8a 95       	dec	r24
    3266:	e1 f7       	brne	.-8      	; 0x3260 <Setup_GPS+0x1c6>
	USART_Transmit(Disable_GRS, sizeof(Disable_GRS));
    3268:	60 e1       	ldi	r22, 0x10	; 16
    326a:	ce 01       	movw	r24, r28
    326c:	8f 56       	subi	r24, 0x6F	; 111
    326e:	9f 4f       	sbci	r25, 0xFF	; 255
    3270:	0e 94 2e 18 	call	0x305c	; 0x305c <USART_Transmit>
	char Disable_GSA[] = {0xB5,0x62,0x06,0x01,0x08,0x00,0xF0,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x31};
    3274:	80 e1       	ldi	r24, 0x10	; 16
    3276:	e0 e1       	ldi	r30, 0x10	; 16
    3278:	f1 e4       	ldi	r31, 0x41	; 65
    327a:	de 01       	movw	r26, r28
    327c:	af 55       	subi	r26, 0x5F	; 95
    327e:	bf 4f       	sbci	r27, 0xFF	; 255
    3280:	01 90       	ld	r0, Z+
    3282:	0d 92       	st	X+, r0
    3284:	8a 95       	dec	r24
    3286:	e1 f7       	brne	.-8      	; 0x3280 <Setup_GPS+0x1e6>
	USART_Transmit(Disable_GSA, sizeof(Disable_GSA));
    3288:	60 e1       	ldi	r22, 0x10	; 16
    328a:	ce 01       	movw	r24, r28
    328c:	8f 55       	subi	r24, 0x5F	; 95
    328e:	9f 4f       	sbci	r25, 0xFF	; 255
    3290:	0e 94 2e 18 	call	0x305c	; 0x305c <USART_Transmit>
	char Disable_GST[] = {0xB5,0x62,0x06,0x01,0x08,0x00,0xF0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x54};
    3294:	80 e1       	ldi	r24, 0x10	; 16
    3296:	e0 e2       	ldi	r30, 0x20	; 32
    3298:	f1 e4       	ldi	r31, 0x41	; 65
    329a:	de 01       	movw	r26, r28
    329c:	af 54       	subi	r26, 0x4F	; 79
    329e:	bf 4f       	sbci	r27, 0xFF	; 255
    32a0:	01 90       	ld	r0, Z+
    32a2:	0d 92       	st	X+, r0
    32a4:	8a 95       	dec	r24
    32a6:	e1 f7       	brne	.-8      	; 0x32a0 <Setup_GPS+0x206>
	USART_Transmit(Disable_GST, sizeof(Disable_GST));
    32a8:	60 e1       	ldi	r22, 0x10	; 16
    32aa:	ce 01       	movw	r24, r28
    32ac:	8f 54       	subi	r24, 0x4F	; 79
    32ae:	9f 4f       	sbci	r25, 0xFF	; 255
    32b0:	0e 94 2e 18 	call	0x305c	; 0x305c <USART_Transmit>
	char Disable_GSV[] = {0xB5,0x62,0x06,0x01,0x08,0x00,0xF0,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x38};
    32b4:	80 e1       	ldi	r24, 0x10	; 16
    32b6:	e0 e3       	ldi	r30, 0x30	; 48
    32b8:	f1 e4       	ldi	r31, 0x41	; 65
    32ba:	de 01       	movw	r26, r28
    32bc:	af 53       	subi	r26, 0x3F	; 63
    32be:	bf 4f       	sbci	r27, 0xFF	; 255
    32c0:	01 90       	ld	r0, Z+
    32c2:	0d 92       	st	X+, r0
    32c4:	8a 95       	dec	r24
    32c6:	e1 f7       	brne	.-8      	; 0x32c0 <Setup_GPS+0x226>
	USART_Transmit(Disable_GSV, sizeof(Disable_GSV));
    32c8:	60 e1       	ldi	r22, 0x10	; 16
    32ca:	ce 01       	movw	r24, r28
    32cc:	8f 53       	subi	r24, 0x3F	; 63
    32ce:	9f 4f       	sbci	r25, 0xFF	; 255
    32d0:	0e 94 2e 18 	call	0x305c	; 0x305c <USART_Transmit>
	char Disable_THS[] = {0xB5,0x62,0x06,0x01,0x08,0x00,0xF0,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,0x0D,0x85};
    32d4:	80 e1       	ldi	r24, 0x10	; 16
    32d6:	e0 e4       	ldi	r30, 0x40	; 64
    32d8:	f1 e4       	ldi	r31, 0x41	; 65
    32da:	de 01       	movw	r26, r28
    32dc:	af 52       	subi	r26, 0x2F	; 47
    32de:	bf 4f       	sbci	r27, 0xFF	; 255
    32e0:	01 90       	ld	r0, Z+
    32e2:	0d 92       	st	X+, r0
    32e4:	8a 95       	dec	r24
    32e6:	e1 f7       	brne	.-8      	; 0x32e0 <Setup_GPS+0x246>
	USART_Transmit(Disable_THS, sizeof(Disable_THS));
    32e8:	60 e1       	ldi	r22, 0x10	; 16
    32ea:	ce 01       	movw	r24, r28
    32ec:	8f 52       	subi	r24, 0x2F	; 47
    32ee:	9f 4f       	sbci	r25, 0xFF	; 255
    32f0:	0e 94 2e 18 	call	0x305c	; 0x305c <USART_Transmit>
	char Disable_TXT[] = {0xB5,0x62,0x06,0x01,0x08,0x00,0xF0,0x41,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0xEA};
    32f4:	80 e1       	ldi	r24, 0x10	; 16
    32f6:	e0 e5       	ldi	r30, 0x50	; 80
    32f8:	f1 e4       	ldi	r31, 0x41	; 65
    32fa:	de 01       	movw	r26, r28
    32fc:	af 51       	subi	r26, 0x1F	; 31
    32fe:	bf 4f       	sbci	r27, 0xFF	; 255
    3300:	01 90       	ld	r0, Z+
    3302:	0d 92       	st	X+, r0
    3304:	8a 95       	dec	r24
    3306:	e1 f7       	brne	.-8      	; 0x3300 <Setup_GPS+0x266>
	USART_Transmit(Disable_TXT, sizeof(Disable_TXT));
    3308:	60 e1       	ldi	r22, 0x10	; 16
    330a:	ce 01       	movw	r24, r28
    330c:	8f 51       	subi	r24, 0x1F	; 31
    330e:	9f 4f       	sbci	r25, 0xFF	; 255
    3310:	0e 94 2e 18 	call	0x305c	; 0x305c <USART_Transmit>
	char Disable_VLW[] = {0xB5,0x62,0x06,0x01,0x08,0x00,0xF0,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x0E,0x8C};
    3314:	80 e1       	ldi	r24, 0x10	; 16
    3316:	e0 e6       	ldi	r30, 0x60	; 96
    3318:	f1 e4       	ldi	r31, 0x41	; 65
    331a:	de 01       	movw	r26, r28
    331c:	af 50       	subi	r26, 0x0F	; 15
    331e:	bf 4f       	sbci	r27, 0xFF	; 255
    3320:	01 90       	ld	r0, Z+
    3322:	0d 92       	st	X+, r0
    3324:	8a 95       	dec	r24
    3326:	e1 f7       	brne	.-8      	; 0x3320 <Setup_GPS+0x286>
	USART_Transmit(Disable_VLW, sizeof(Disable_VLW));
    3328:	60 e1       	ldi	r22, 0x10	; 16
    332a:	ce 01       	movw	r24, r28
    332c:	8f 50       	subi	r24, 0x0F	; 15
    332e:	9f 4f       	sbci	r25, 0xFF	; 255
    3330:	0e 94 2e 18 	call	0x305c	; 0x305c <USART_Transmit>
	char Disable_VTG[] = {0xB5,0x62,0x06,0x01,0x08,0x00,0xF0,0x05,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x46};
    3334:	80 e1       	ldi	r24, 0x10	; 16
    3336:	e0 e7       	ldi	r30, 0x70	; 112
    3338:	f1 e4       	ldi	r31, 0x41	; 65
    333a:	de 01       	movw	r26, r28
    333c:	af 5f       	subi	r26, 0xFF	; 255
    333e:	be 4f       	sbci	r27, 0xFE	; 254
    3340:	01 90       	ld	r0, Z+
    3342:	0d 92       	st	X+, r0
    3344:	8a 95       	dec	r24
    3346:	e1 f7       	brne	.-8      	; 0x3340 <Setup_GPS+0x2a6>
	USART_Transmit(Disable_VTG, sizeof(Disable_VTG));
    3348:	60 e1       	ldi	r22, 0x10	; 16
    334a:	ce 01       	movw	r24, r28
    334c:	8f 5f       	subi	r24, 0xFF	; 255
    334e:	9e 4f       	sbci	r25, 0xFE	; 254
    3350:	0e 94 2e 18 	call	0x305c	; 0x305c <USART_Transmit>
	char Disable_ZDA[] = {0xB5,0x62,0x06,0x01,0x08,0x00,0xF0,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x5B};
    3354:	80 e1       	ldi	r24, 0x10	; 16
    3356:	e0 e8       	ldi	r30, 0x80	; 128
    3358:	f1 e4       	ldi	r31, 0x41	; 65
    335a:	de 01       	movw	r26, r28
    335c:	af 5e       	subi	r26, 0xEF	; 239
    335e:	be 4f       	sbci	r27, 0xFE	; 254
    3360:	01 90       	ld	r0, Z+
    3362:	0d 92       	st	X+, r0
    3364:	8a 95       	dec	r24
    3366:	e1 f7       	brne	.-8      	; 0x3360 <Setup_GPS+0x2c6>
	USART_Transmit(Disable_ZDA, sizeof(Disable_ZDA));
    3368:	60 e1       	ldi	r22, 0x10	; 16
    336a:	ce 01       	movw	r24, r28
    336c:	8f 5e       	subi	r24, 0xEF	; 239
    336e:	9e 4f       	sbci	r25, 0xFE	; 254
    3370:	0e 94 2e 18 	call	0x305c	; 0x305c <USART_Transmit>

	
	// Increase the update rate to 8Hz
	char Enable_UTC_8Hz[] = {0xB5, 0x62, 0x06, 0x08, 0x06, 0x00, 0x7D, 0x00, 0x01, 0x00, 0x00, 0x00, 0x92, 0xA6};
    3374:	8e e0       	ldi	r24, 0x0E	; 14
    3376:	e0 e9       	ldi	r30, 0x90	; 144
    3378:	f1 e4       	ldi	r31, 0x41	; 65
    337a:	de 01       	movw	r26, r28
    337c:	af 5d       	subi	r26, 0xDF	; 223
    337e:	be 4f       	sbci	r27, 0xFE	; 254
    3380:	01 90       	ld	r0, Z+
    3382:	0d 92       	st	X+, r0
    3384:	8a 95       	dec	r24
    3386:	e1 f7       	brne	.-8      	; 0x3380 <Setup_GPS+0x2e6>
	USART_Transmit(Enable_UTC_8Hz, sizeof(Enable_UTC_8Hz));
    3388:	6e e0       	ldi	r22, 0x0E	; 14
    338a:	ce 01       	movw	r24, r28
    338c:	8f 5d       	subi	r24, 0xDF	; 223
    338e:	9e 4f       	sbci	r25, 0xFE	; 254
    3390:	0e 94 2e 18 	call	0x305c	; 0x305c <USART_Transmit>
	char Enable_GPS_8Hz[] = {0xB5, 0x62, 0x06, 0x08, 0x06, 0x00, 0x7D, 0x00, 0x01, 0x00, 0x01, 0x00, 0x93, 0xA8};
    3394:	8e e0       	ldi	r24, 0x0E	; 14
    3396:	ee e9       	ldi	r30, 0x9E	; 158
    3398:	f1 e4       	ldi	r31, 0x41	; 65
    339a:	de 01       	movw	r26, r28
    339c:	a1 5d       	subi	r26, 0xD1	; 209
    339e:	be 4f       	sbci	r27, 0xFE	; 254
    33a0:	01 90       	ld	r0, Z+
    33a2:	0d 92       	st	X+, r0
    33a4:	8a 95       	dec	r24
    33a6:	e1 f7       	brne	.-8      	; 0x33a0 <Setup_GPS+0x306>
	USART_Transmit(Enable_GPS_8Hz, sizeof(Enable_GPS_8Hz));
    33a8:	6e e0       	ldi	r22, 0x0E	; 14
    33aa:	ce 01       	movw	r24, r28
    33ac:	81 5d       	subi	r24, 0xD1	; 209
    33ae:	9e 4f       	sbci	r25, 0xFE	; 254
    33b0:	0e 94 2e 18 	call	0x305c	; 0x305c <USART_Transmit>
	char Enable_GLO_8Hz[] = {0xB5, 0x62, 0x06, 0x08, 0x06, 0x00, 0x7D, 0x00, 0x01, 0x00, 0x02, 0x00, 0x94, 0xAA};
    33b4:	8e e0       	ldi	r24, 0x0E	; 14
    33b6:	ec ea       	ldi	r30, 0xAC	; 172
    33b8:	f1 e4       	ldi	r31, 0x41	; 65
    33ba:	de 01       	movw	r26, r28
    33bc:	a3 5c       	subi	r26, 0xC3	; 195
    33be:	be 4f       	sbci	r27, 0xFE	; 254
    33c0:	01 90       	ld	r0, Z+
    33c2:	0d 92       	st	X+, r0
    33c4:	8a 95       	dec	r24
    33c6:	e1 f7       	brne	.-8      	; 0x33c0 <Setup_GPS+0x326>
	USART_Transmit(Enable_GLO_8Hz, sizeof(Enable_GLO_8Hz));
    33c8:	6e e0       	ldi	r22, 0x0E	; 14
    33ca:	ce 01       	movw	r24, r28
    33cc:	83 5c       	subi	r24, 0xC3	; 195
    33ce:	9e 4f       	sbci	r25, 0xFE	; 254
    33d0:	0e 94 2e 18 	call	0x305c	; 0x305c <USART_Transmit>
	char Enable_BDS_8Hz[] = {0xB5, 0x62, 0x06, 0x08, 0x06, 0x00, 0x7D, 0x00, 0x01, 0x00, 0x03, 0x00, 0x95, 0xAC};
    33d4:	8e e0       	ldi	r24, 0x0E	; 14
    33d6:	ea eb       	ldi	r30, 0xBA	; 186
    33d8:	f1 e4       	ldi	r31, 0x41	; 65
    33da:	de 01       	movw	r26, r28
    33dc:	a5 5b       	subi	r26, 0xB5	; 181
    33de:	be 4f       	sbci	r27, 0xFE	; 254
    33e0:	01 90       	ld	r0, Z+
    33e2:	0d 92       	st	X+, r0
    33e4:	8a 95       	dec	r24
    33e6:	e1 f7       	brne	.-8      	; 0x33e0 <Setup_GPS+0x346>
	USART_Transmit(Enable_BDS_8Hz, sizeof(Enable_BDS_8Hz));
    33e8:	6e e0       	ldi	r22, 0x0E	; 14
    33ea:	ce 01       	movw	r24, r28
    33ec:	85 5b       	subi	r24, 0xB5	; 181
    33ee:	9e 4f       	sbci	r25, 0xFE	; 254
    33f0:	0e 94 2e 18 	call	0x305c	; 0x305c <USART_Transmit>
	char Enable_GAL_8Hz[] = {0xB5, 0x62, 0x06, 0x08, 0x06, 0x00, 0x7D, 0x00, 0x01, 0x00, 0x04, 0x00, 0x96, 0xAE};
    33f4:	8e e0       	ldi	r24, 0x0E	; 14
    33f6:	e8 ec       	ldi	r30, 0xC8	; 200
    33f8:	f1 e4       	ldi	r31, 0x41	; 65
    33fa:	de 01       	movw	r26, r28
    33fc:	a7 5a       	subi	r26, 0xA7	; 167
    33fe:	be 4f       	sbci	r27, 0xFE	; 254
    3400:	01 90       	ld	r0, Z+
    3402:	0d 92       	st	X+, r0
    3404:	8a 95       	dec	r24
    3406:	e1 f7       	brne	.-8      	; 0x3400 <Setup_GPS+0x366>
	USART_Transmit(Enable_GAL_8Hz, sizeof(Enable_GAL_8Hz));
    3408:	6e e0       	ldi	r22, 0x0E	; 14
    340a:	ce 01       	movw	r24, r28
    340c:	87 5a       	subi	r24, 0xA7	; 167
    340e:	9e 4f       	sbci	r25, 0xFE	; 254
    3410:	0e 94 2e 18 	call	0x305c	; 0x305c <USART_Transmit>

	return (USART3_RXDATAH & USART_FERR_bm) ? 0 : 1;
    3414:	80 91 61 08 	lds	r24, 0x0861	; 0x800861 <__TEXT_REGION_LENGTH__+0x7e0861>
    3418:	86 95       	lsr	r24
    341a:	86 95       	lsr	r24
    341c:	91 e0       	ldi	r25, 0x01	; 1
    341e:	89 27       	eor	r24, r25
}
    3420:	81 70       	andi	r24, 0x01	; 1
    3422:	ce 57       	subi	r28, 0x7E	; 126
    3424:	de 4f       	sbci	r29, 0xFE	; 254
    3426:	cd bf       	out	0x3d, r28	; 61
    3428:	de bf       	out	0x3e, r29	; 62
    342a:	df 91       	pop	r29
    342c:	cf 91       	pop	r28
    342e:	08 95       	ret

00003430 <__vector_53>:
		USART3_STATUS = USART_TXCIF_bm;
	}
	Delay(1000);
}

ISR(USART3_RXC_vect){
    3430:	1f 92       	push	r1
    3432:	0f 92       	push	r0
    3434:	0f b6       	in	r0, 0x3f	; 63
    3436:	0f 92       	push	r0
    3438:	11 24       	eor	r1, r1
    343a:	0b b6       	in	r0, 0x3b	; 59
    343c:	0f 92       	push	r0
    343e:	8f 93       	push	r24
    3440:	9f 93       	push	r25
    3442:	ef 93       	push	r30
    3444:	ff 93       	push	r31
	while(USART3_STATUS & USART_RXCIF_bm){
    3446:	11 c0       	rjmp	.+34     	; 0x346a <__vector_53+0x3a>
		char temp = USART3_RXDATAL;
    3448:	80 91 60 08 	lds	r24, 0x0860	; 0x800860 <__TEXT_REGION_LENGTH__+0x7e0860>
		if (temp == 10){g_GPS_Read_Flag = 1;}
    344c:	8a 30       	cpi	r24, 0x0A	; 10
    344e:	19 f4       	brne	.+6      	; 0x3456 <__vector_53+0x26>
    3450:	91 e0       	ldi	r25, 0x01	; 1
    3452:	90 93 cb 4b 	sts	0x4BCB, r25	; 0x804bcb <g_GPS_Read_Flag>
		g_GPS_Data[g_GPS_Data_Index++] = temp;
    3456:	e0 91 cc 4b 	lds	r30, 0x4BCC	; 0x804bcc <g_GPS_Data_Index>
    345a:	91 e0       	ldi	r25, 0x01	; 1
    345c:	9e 0f       	add	r25, r30
    345e:	90 93 cc 4b 	sts	0x4BCC, r25	; 0x804bcc <g_GPS_Data_Index>
    3462:	f0 e0       	ldi	r31, 0x00	; 0
    3464:	e3 53       	subi	r30, 0x33	; 51
    3466:	f4 4b       	sbci	r31, 0xB4	; 180
    3468:	80 83       	st	Z, r24
	}
	Delay(1000);
}

ISR(USART3_RXC_vect){
	while(USART3_STATUS & USART_RXCIF_bm){
    346a:	80 91 64 08 	lds	r24, 0x0864	; 0x800864 <__TEXT_REGION_LENGTH__+0x7e0864>
    346e:	88 23       	and	r24, r24
    3470:	5c f3       	brlt	.-42     	; 0x3448 <__vector_53+0x18>
		char temp = USART3_RXDATAL;
		if (temp == 10){g_GPS_Read_Flag = 1;}
		g_GPS_Data[g_GPS_Data_Index++] = temp;
	}
}
    3472:	ff 91       	pop	r31
    3474:	ef 91       	pop	r30
    3476:	9f 91       	pop	r25
    3478:	8f 91       	pop	r24
    347a:	0f 90       	pop	r0
    347c:	0b be       	out	0x3b, r0	; 59
    347e:	0f 90       	pop	r0
    3480:	0f be       	out	0x3f, r0	; 63
    3482:	0f 90       	pop	r0
    3484:	1f 90       	pop	r1
    3486:	18 95       	reti

00003488 <Observer>:

// OBSERVER CODE
void Observer(States *Drone){
    3488:	4f 92       	push	r4
    348a:	5f 92       	push	r5
    348c:	6f 92       	push	r6
    348e:	7f 92       	push	r7
    3490:	8f 92       	push	r8
    3492:	9f 92       	push	r9
    3494:	af 92       	push	r10
    3496:	bf 92       	push	r11
    3498:	cf 92       	push	r12
    349a:	df 92       	push	r13
    349c:	ef 92       	push	r14
    349e:	ff 92       	push	r15
    34a0:	cf 93       	push	r28
    34a2:	df 93       	push	r29
    34a4:	cd b7       	in	r28, 0x3d	; 61
    34a6:	de b7       	in	r29, 0x3e	; 62
    34a8:	aa 97       	sbiw	r28, 0x2a	; 42
    34aa:	cd bf       	out	0x3d, r28	; 61
    34ac:	de bf       	out	0x3e, r29	; 62
    34ae:	89 a7       	std	Y+41, r24	; 0x29
    34b0:	9a a7       	std	Y+42, r25	; 0x2a
	// and decreasing it increases the trust on the measurement (accelerometer and magnetometer)
		dt = 0.04, // Time between integrations
		Gimbal_Lock_Check_Angle = 5.0*D2R;
	// Measure
	
	float phi_m = atan2f(Drone->g_vec[1], Drone->g_vec[2]);
    34b2:	dc 01       	movw	r26, r24
    34b4:	54 96       	adiw	r26, 0x14	; 20
    34b6:	8d 90       	ld	r8, X+
    34b8:	9d 90       	ld	r9, X+
    34ba:	ad 90       	ld	r10, X+
    34bc:	bc 90       	ld	r11, X
    34be:	57 97       	sbiw	r26, 0x17	; 23
    34c0:	50 96       	adiw	r26, 0x10	; 16
    34c2:	cd 90       	ld	r12, X+
    34c4:	dd 90       	ld	r13, X+
    34c6:	ed 90       	ld	r14, X+
    34c8:	fc 90       	ld	r15, X
    34ca:	53 97       	sbiw	r26, 0x13	; 19
    34cc:	a5 01       	movw	r20, r10
    34ce:	94 01       	movw	r18, r8
    34d0:	c7 01       	movw	r24, r14
    34d2:	b6 01       	movw	r22, r12
    34d4:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <atan2>
    34d8:	69 8b       	std	Y+17, r22	; 0x11
    34da:	7a 8b       	std	Y+18, r23	; 0x12
    34dc:	8b 8b       	std	Y+19, r24	; 0x13
    34de:	9c 8b       	std	Y+20, r25	; 0x14
	if (isnan(phi_m)){
    34e0:	9b 01       	movw	r18, r22
    34e2:	ac 01       	movw	r20, r24
    34e4:	0e 94 f9 20 	call	0x41f2	; 0x41f2 <__unordsf2>
    34e8:	88 23       	and	r24, r24
    34ea:	61 f0       	breq	.+24     	; 0x3504 <Observer+0x7c>
		phi_m = Drone->Euler[0];
    34ec:	a9 a5       	ldd	r26, Y+41	; 0x29
    34ee:	ba a5       	ldd	r27, Y+42	; 0x2a
    34f0:	94 96       	adiw	r26, 0x24	; 36
    34f2:	2d 91       	ld	r18, X+
    34f4:	3d 91       	ld	r19, X+
    34f6:	4d 91       	ld	r20, X+
    34f8:	5c 91       	ld	r21, X
    34fa:	97 97       	sbiw	r26, 0x27	; 39
    34fc:	29 8b       	std	Y+17, r18	; 0x11
    34fe:	3a 8b       	std	Y+18, r19	; 0x12
    3500:	4b 8b       	std	Y+19, r20	; 0x13
    3502:	5c 8b       	std	Y+20, r21	; 0x14
	}
	float theta_m = atan2f(-Drone->g_vec[0], sqrt(pow(Drone->g_vec[1],2) + pow(Drone->g_vec[2],2)));
    3504:	20 e0       	ldi	r18, 0x00	; 0
    3506:	30 e0       	ldi	r19, 0x00	; 0
    3508:	40 e0       	ldi	r20, 0x00	; 0
    350a:	50 e4       	ldi	r21, 0x40	; 64
    350c:	c7 01       	movw	r24, r14
    350e:	b6 01       	movw	r22, r12
    3510:	0e 94 32 20 	call	0x4064	; 0x4064 <pow>
    3514:	6b 01       	movw	r12, r22
    3516:	7c 01       	movw	r14, r24
    3518:	20 e0       	ldi	r18, 0x00	; 0
    351a:	30 e0       	ldi	r19, 0x00	; 0
    351c:	40 e0       	ldi	r20, 0x00	; 0
    351e:	50 e4       	ldi	r21, 0x40	; 64
    3520:	c5 01       	movw	r24, r10
    3522:	b4 01       	movw	r22, r8
    3524:	0e 94 32 20 	call	0x4064	; 0x4064 <pow>
    3528:	4b 01       	movw	r8, r22
    352a:	5c 01       	movw	r10, r24
    352c:	a5 01       	movw	r20, r10
    352e:	94 01       	movw	r18, r8
    3530:	c7 01       	movw	r24, r14
    3532:	b6 01       	movw	r22, r12
    3534:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <__addsf3>
    3538:	0e 94 90 20 	call	0x4120	; 0x4120 <sqrt>
    353c:	9b 01       	movw	r18, r22
    353e:	ac 01       	movw	r20, r24
    3540:	e9 a5       	ldd	r30, Y+41	; 0x29
    3542:	fa a5       	ldd	r31, Y+42	; 0x2a
    3544:	84 85       	ldd	r24, Z+12	; 0x0c
    3546:	95 85       	ldd	r25, Z+13	; 0x0d
    3548:	a6 85       	ldd	r26, Z+14	; 0x0e
    354a:	b7 85       	ldd	r27, Z+15	; 0x0f
    354c:	bc 01       	movw	r22, r24
    354e:	cd 01       	movw	r24, r26
    3550:	90 58       	subi	r25, 0x80	; 128
    3552:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <atan2>
    3556:	6d 8b       	std	Y+21, r22	; 0x15
    3558:	7e 8b       	std	Y+22, r23	; 0x16
    355a:	8f 8b       	std	Y+23, r24	; 0x17
    355c:	98 8f       	std	Y+24, r25	; 0x18
	if (isnan(theta_m)){
    355e:	9b 01       	movw	r18, r22
    3560:	ac 01       	movw	r20, r24
    3562:	0e 94 f9 20 	call	0x41f2	; 0x41f2 <__unordsf2>
    3566:	88 23       	and	r24, r24
    3568:	61 f0       	breq	.+24     	; 0x3582 <Observer+0xfa>
		theta_m = Drone->Euler[1];
    356a:	a9 a5       	ldd	r26, Y+41	; 0x29
    356c:	ba a5       	ldd	r27, Y+42	; 0x2a
    356e:	98 96       	adiw	r26, 0x28	; 40
    3570:	2d 91       	ld	r18, X+
    3572:	3d 91       	ld	r19, X+
    3574:	4d 91       	ld	r20, X+
    3576:	5c 91       	ld	r21, X
    3578:	9b 97       	sbiw	r26, 0x2b	; 43
    357a:	2d 8b       	std	Y+21, r18	; 0x15
    357c:	3e 8b       	std	Y+22, r19	; 0x16
    357e:	4f 8b       	std	Y+23, r20	; 0x17
    3580:	58 8f       	std	Y+24, r21	; 0x18
	}
	float mag_x_NED = cosf(Drone->Euler[1])*Drone->m_vec[0] + sinf(Drone->Euler[0])*sinf(Drone->Euler[1])*Drone->m_vec[1] + cosf(Drone->Euler[0])*sinf(Drone->Euler[1])*Drone->m_vec[2];
    3582:	a9 a5       	ldd	r26, Y+41	; 0x29
    3584:	ba a5       	ldd	r27, Y+42	; 0x2a
    3586:	98 96       	adiw	r26, 0x28	; 40
    3588:	2d 91       	ld	r18, X+
    358a:	3d 91       	ld	r19, X+
    358c:	4d 91       	ld	r20, X+
    358e:	5c 91       	ld	r21, X
    3590:	9b 97       	sbiw	r26, 0x2b	; 43
    3592:	29 83       	std	Y+1, r18	; 0x01
    3594:	3a 83       	std	Y+2, r19	; 0x02
    3596:	4b 83       	std	Y+3, r20	; 0x03
    3598:	5c 83       	std	Y+4, r21	; 0x04
    359a:	ca 01       	movw	r24, r20
    359c:	b9 01       	movw	r22, r18
    359e:	0e 94 f3 1d 	call	0x3be6	; 0x3be6 <cos>
    35a2:	69 8f       	std	Y+25, r22	; 0x19
    35a4:	7a 8f       	std	Y+26, r23	; 0x1a
    35a6:	8b 8f       	std	Y+27, r24	; 0x1b
    35a8:	9c 8f       	std	Y+28, r25	; 0x1c
    35aa:	e9 a5       	ldd	r30, Y+41	; 0x29
    35ac:	fa a5       	ldd	r31, Y+42	; 0x2a
    35ae:	20 8d       	ldd	r18, Z+24	; 0x18
    35b0:	31 8d       	ldd	r19, Z+25	; 0x19
    35b2:	42 8d       	ldd	r20, Z+26	; 0x1a
    35b4:	53 8d       	ldd	r21, Z+27	; 0x1b
    35b6:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <__mulsf3>
    35ba:	2b 01       	movw	r4, r22
    35bc:	3c 01       	movw	r6, r24
    35be:	a9 a5       	ldd	r26, Y+41	; 0x29
    35c0:	ba a5       	ldd	r27, Y+42	; 0x2a
    35c2:	94 96       	adiw	r26, 0x24	; 36
    35c4:	2d 91       	ld	r18, X+
    35c6:	3d 91       	ld	r19, X+
    35c8:	4d 91       	ld	r20, X+
    35ca:	5c 91       	ld	r21, X
    35cc:	97 97       	sbiw	r26, 0x27	; 39
    35ce:	2d 83       	std	Y+5, r18	; 0x05
    35d0:	3e 83       	std	Y+6, r19	; 0x06
    35d2:	4f 83       	std	Y+7, r20	; 0x07
    35d4:	58 87       	std	Y+8, r21	; 0x08
    35d6:	ca 01       	movw	r24, r20
    35d8:	b9 01       	movw	r22, r18
    35da:	0e 94 82 20 	call	0x4104	; 0x4104 <sin>
    35de:	69 87       	std	Y+9, r22	; 0x09
    35e0:	7a 87       	std	Y+10, r23	; 0x0a
    35e2:	8b 87       	std	Y+11, r24	; 0x0b
    35e4:	9c 87       	std	Y+12, r25	; 0x0c
    35e6:	69 81       	ldd	r22, Y+1	; 0x01
    35e8:	7a 81       	ldd	r23, Y+2	; 0x02
    35ea:	8b 81       	ldd	r24, Y+3	; 0x03
    35ec:	9c 81       	ldd	r25, Y+4	; 0x04
    35ee:	0e 94 82 20 	call	0x4104	; 0x4104 <sin>
    35f2:	6b 01       	movw	r12, r22
    35f4:	7c 01       	movw	r14, r24
    35f6:	9b 01       	movw	r18, r22
    35f8:	ac 01       	movw	r20, r24
    35fa:	69 85       	ldd	r22, Y+9	; 0x09
    35fc:	7a 85       	ldd	r23, Y+10	; 0x0a
    35fe:	8b 85       	ldd	r24, Y+11	; 0x0b
    3600:	9c 85       	ldd	r25, Y+12	; 0x0c
    3602:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <__mulsf3>
    3606:	e9 a5       	ldd	r30, Y+41	; 0x29
    3608:	fa a5       	ldd	r31, Y+42	; 0x2a
    360a:	84 8c       	ldd	r8, Z+28	; 0x1c
    360c:	95 8c       	ldd	r9, Z+29	; 0x1d
    360e:	a6 8c       	ldd	r10, Z+30	; 0x1e
    3610:	b7 8c       	ldd	r11, Z+31	; 0x1f
    3612:	a5 01       	movw	r20, r10
    3614:	94 01       	movw	r18, r8
    3616:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <__mulsf3>
    361a:	9b 01       	movw	r18, r22
    361c:	ac 01       	movw	r20, r24
    361e:	c3 01       	movw	r24, r6
    3620:	b2 01       	movw	r22, r4
    3622:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <__addsf3>
    3626:	2b 01       	movw	r4, r22
    3628:	3c 01       	movw	r6, r24
    362a:	6d 81       	ldd	r22, Y+5	; 0x05
    362c:	7e 81       	ldd	r23, Y+6	; 0x06
    362e:	8f 81       	ldd	r24, Y+7	; 0x07
    3630:	98 85       	ldd	r25, Y+8	; 0x08
    3632:	0e 94 f3 1d 	call	0x3be6	; 0x3be6 <cos>
    3636:	6d 87       	std	Y+13, r22	; 0x0d
    3638:	7e 87       	std	Y+14, r23	; 0x0e
    363a:	8f 87       	std	Y+15, r24	; 0x0f
    363c:	98 8b       	std	Y+16, r25	; 0x10
    363e:	9b 01       	movw	r18, r22
    3640:	ac 01       	movw	r20, r24
    3642:	c7 01       	movw	r24, r14
    3644:	b6 01       	movw	r22, r12
    3646:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <__mulsf3>
    364a:	a9 a5       	ldd	r26, Y+41	; 0x29
    364c:	ba a5       	ldd	r27, Y+42	; 0x2a
    364e:	90 96       	adiw	r26, 0x20	; 32
    3650:	cd 90       	ld	r12, X+
    3652:	dd 90       	ld	r13, X+
    3654:	ed 90       	ld	r14, X+
    3656:	fc 90       	ld	r15, X
    3658:	93 97       	sbiw	r26, 0x23	; 35
    365a:	a7 01       	movw	r20, r14
    365c:	96 01       	movw	r18, r12
    365e:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <__mulsf3>
    3662:	9b 01       	movw	r18, r22
    3664:	ac 01       	movw	r20, r24
    3666:	c3 01       	movw	r24, r6
    3668:	b2 01       	movw	r22, r4
    366a:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <__addsf3>
    366e:	2b 01       	movw	r4, r22
    3670:	3c 01       	movw	r6, r24
	float mag_y_NED = cosf(Drone->Euler[0])*Drone->m_vec[1] - sinf(Drone->Euler[0])*Drone->m_vec[2];
    3672:	2d 85       	ldd	r18, Y+13	; 0x0d
    3674:	3e 85       	ldd	r19, Y+14	; 0x0e
    3676:	4f 85       	ldd	r20, Y+15	; 0x0f
    3678:	58 89       	ldd	r21, Y+16	; 0x10
    367a:	c5 01       	movw	r24, r10
    367c:	b4 01       	movw	r22, r8
    367e:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <__mulsf3>
    3682:	4b 01       	movw	r8, r22
    3684:	5c 01       	movw	r10, r24
    3686:	a7 01       	movw	r20, r14
    3688:	96 01       	movw	r18, r12
    368a:	69 85       	ldd	r22, Y+9	; 0x09
    368c:	7a 85       	ldd	r23, Y+10	; 0x0a
    368e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3690:	9c 85       	ldd	r25, Y+12	; 0x0c
    3692:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <__mulsf3>
    3696:	9b 01       	movw	r18, r22
    3698:	ac 01       	movw	r20, r24
    369a:	c5 01       	movw	r24, r10
    369c:	b4 01       	movw	r22, r8
    369e:	0e 94 0f 1d 	call	0x3a1e	; 0x3a1e <__subsf3>
	float psi_m = -atan2f(mag_y_NED, mag_x_NED);
    36a2:	a3 01       	movw	r20, r6
    36a4:	92 01       	movw	r18, r4
    36a6:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <atan2>
    36aa:	2b 01       	movw	r4, r22
    36ac:	3c 01       	movw	r6, r24
    36ae:	77 fa       	bst	r7, 7
    36b0:	70 94       	com	r7
    36b2:	77 f8       	bld	r7, 7
    36b4:	70 94       	com	r7
	if (isnan(psi_m)){
    36b6:	a3 01       	movw	r20, r6
    36b8:	92 01       	movw	r18, r4
    36ba:	c3 01       	movw	r24, r6
    36bc:	b2 01       	movw	r22, r4
    36be:	0e 94 f9 20 	call	0x41f2	; 0x41f2 <__unordsf2>
    36c2:	88 23       	and	r24, r24
    36c4:	31 f0       	breq	.+12     	; 0x36d2 <Observer+0x24a>
		psi_m = Drone->Euler[2];
    36c6:	e9 a5       	ldd	r30, Y+41	; 0x29
    36c8:	fa a5       	ldd	r31, Y+42	; 0x2a
    36ca:	44 a4       	ldd	r4, Z+44	; 0x2c
    36cc:	55 a4       	ldd	r5, Z+45	; 0x2d
    36ce:	66 a4       	ldd	r6, Z+46	; 0x2e
    36d0:	77 a4       	ldd	r7, Z+47	; 0x2f
	}
	if (psi_m <= 0){
    36d2:	20 e0       	ldi	r18, 0x00	; 0
    36d4:	30 e0       	ldi	r19, 0x00	; 0
    36d6:	a9 01       	movw	r20, r18
    36d8:	c3 01       	movw	r24, r6
    36da:	b2 01       	movw	r22, r4
    36dc:	0e 94 ee 1d 	call	0x3bdc	; 0x3bdc <__cmpsf2>
    36e0:	18 16       	cp	r1, r24
    36e2:	54 f0       	brlt	.+20     	; 0x36f8 <Observer+0x270>
		psi_m += 2.0*M_PI;
    36e4:	2b ed       	ldi	r18, 0xDB	; 219
    36e6:	3f e0       	ldi	r19, 0x0F	; 15
    36e8:	49 ec       	ldi	r20, 0xC9	; 201
    36ea:	50 e4       	ldi	r21, 0x40	; 64
    36ec:	c3 01       	movw	r24, r6
    36ee:	b2 01       	movw	r22, r4
    36f0:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <__addsf3>
    36f4:	2b 01       	movw	r4, r22
    36f6:	3c 01       	movw	r6, r24
	}
	
	// Predict
	float phi_hat = Drone->Euler[0];
	float theta_hat = Drone->Euler[1];
	float psi_hat = Drone->Euler[2];
    36f8:	a9 a5       	ldd	r26, Y+41	; 0x29
    36fa:	ba a5       	ldd	r27, Y+42	; 0x2a
    36fc:	9c 96       	adiw	r26, 0x2c	; 44
    36fe:	8d 90       	ld	r8, X+
    3700:	9d 90       	ld	r9, X+
    3702:	ad 90       	ld	r10, X+
    3704:	bc 90       	ld	r11, X
    3706:	9f 97       	sbiw	r26, 0x2f	; 47
	if (abs(abs(Drone->Euler[1]) - M_PI_2) > Gimbal_Lock_Check_Angle){
    3708:	69 81       	ldd	r22, Y+1	; 0x01
    370a:	7a 81       	ldd	r23, Y+2	; 0x02
    370c:	8b 81       	ldd	r24, Y+3	; 0x03
    370e:	9c 81       	ldd	r25, Y+4	; 0x04
    3710:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <__fixsfsi>
    3714:	9b 01       	movw	r18, r22
    3716:	77 23       	and	r23, r23
    3718:	24 f4       	brge	.+8      	; 0x3722 <Observer+0x29a>
    371a:	22 27       	eor	r18, r18
    371c:	33 27       	eor	r19, r19
    371e:	26 1b       	sub	r18, r22
    3720:	37 0b       	sbc	r19, r23
    3722:	b9 01       	movw	r22, r18
    3724:	33 0f       	add	r19, r19
    3726:	88 0b       	sbc	r24, r24
    3728:	99 0b       	sbc	r25, r25
    372a:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <__floatsisf>
    372e:	2b ed       	ldi	r18, 0xDB	; 219
    3730:	3f e0       	ldi	r19, 0x0F	; 15
    3732:	49 ec       	ldi	r20, 0xC9	; 201
    3734:	5f e3       	ldi	r21, 0x3F	; 63
    3736:	0e 94 0f 1d 	call	0x3a1e	; 0x3a1e <__subsf3>
    373a:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <__fixsfsi>
    373e:	9b 01       	movw	r18, r22
    3740:	77 23       	and	r23, r23
    3742:	24 f4       	brge	.+8      	; 0x374c <Observer+0x2c4>
    3744:	22 27       	eor	r18, r18
    3746:	33 27       	eor	r19, r19
    3748:	26 1b       	sub	r18, r22
    374a:	37 0b       	sbc	r19, r23
    374c:	b9 01       	movw	r22, r18
    374e:	33 0f       	add	r19, r19
    3750:	88 0b       	sbc	r24, r24
    3752:	99 0b       	sbc	r25, r25
    3754:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <__floatsisf>
    3758:	23 ec       	ldi	r18, 0xC3	; 195
    375a:	38 eb       	ldi	r19, 0xB8	; 184
    375c:	42 eb       	ldi	r20, 0xB2	; 178
    375e:	5d e3       	ldi	r21, 0x3D	; 61
    3760:	0e 94 b8 1f 	call	0x3f70	; 0x3f70 <__gesf2>
    3764:	18 16       	cp	r1, r24
    3766:	0c f0       	brlt	.+2      	; 0x376a <Observer+0x2e2>
    3768:	ca c0       	rjmp	.+404    	; 0x38fe <Observer+0x476>
		phi_hat += (Drone->w[0] + sinf(Drone->Euler[0])*tanf(Drone->Euler[1])*Drone->w[1] + cosf(Drone->Euler[0])*tanf(Drone->Euler[1])*Drone->w[2])*dt;
    376a:	e9 a5       	ldd	r30, Y+41	; 0x29
    376c:	fa a5       	ldd	r31, Y+42	; 0x2a
    376e:	c0 80       	ld	r12, Z
    3770:	d1 80       	ldd	r13, Z+1	; 0x01
    3772:	e2 80       	ldd	r14, Z+2	; 0x02
    3774:	f3 80       	ldd	r15, Z+3	; 0x03
    3776:	69 81       	ldd	r22, Y+1	; 0x01
    3778:	7a 81       	ldd	r23, Y+2	; 0x02
    377a:	8b 81       	ldd	r24, Y+3	; 0x03
    377c:	9c 81       	ldd	r25, Y+4	; 0x04
    377e:	0e 94 d4 20 	call	0x41a8	; 0x41a8 <tan>
    3782:	6d 8f       	std	Y+29, r22	; 0x1d
    3784:	7e 8f       	std	Y+30, r23	; 0x1e
    3786:	8f 8f       	std	Y+31, r24	; 0x1f
    3788:	98 a3       	std	Y+32, r25	; 0x20
    378a:	9b 01       	movw	r18, r22
    378c:	ac 01       	movw	r20, r24
    378e:	69 85       	ldd	r22, Y+9	; 0x09
    3790:	7a 85       	ldd	r23, Y+10	; 0x0a
    3792:	8b 85       	ldd	r24, Y+11	; 0x0b
    3794:	9c 85       	ldd	r25, Y+12	; 0x0c
    3796:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <__mulsf3>
    379a:	a9 a5       	ldd	r26, Y+41	; 0x29
    379c:	ba a5       	ldd	r27, Y+42	; 0x2a
    379e:	14 96       	adiw	r26, 0x04	; 4
    37a0:	2d 91       	ld	r18, X+
    37a2:	3d 91       	ld	r19, X+
    37a4:	4d 91       	ld	r20, X+
    37a6:	5c 91       	ld	r21, X
    37a8:	17 97       	sbiw	r26, 0x07	; 7
    37aa:	29 a3       	std	Y+33, r18	; 0x21
    37ac:	3a a3       	std	Y+34, r19	; 0x22
    37ae:	4b a3       	std	Y+35, r20	; 0x23
    37b0:	5c a3       	std	Y+36, r21	; 0x24
    37b2:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <__mulsf3>
    37b6:	9b 01       	movw	r18, r22
    37b8:	ac 01       	movw	r20, r24
    37ba:	c7 01       	movw	r24, r14
    37bc:	b6 01       	movw	r22, r12
    37be:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <__addsf3>
    37c2:	6d a3       	std	Y+37, r22	; 0x25
    37c4:	7e a3       	std	Y+38, r23	; 0x26
    37c6:	8f a3       	std	Y+39, r24	; 0x27
    37c8:	98 a7       	std	Y+40, r25	; 0x28
    37ca:	2d 8d       	ldd	r18, Y+29	; 0x1d
    37cc:	3e 8d       	ldd	r19, Y+30	; 0x1e
    37ce:	4f 8d       	ldd	r20, Y+31	; 0x1f
    37d0:	58 a1       	ldd	r21, Y+32	; 0x20
    37d2:	6d 85       	ldd	r22, Y+13	; 0x0d
    37d4:	7e 85       	ldd	r23, Y+14	; 0x0e
    37d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    37d8:	98 89       	ldd	r25, Y+16	; 0x10
    37da:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <__mulsf3>
    37de:	e9 a5       	ldd	r30, Y+41	; 0x29
    37e0:	fa a5       	ldd	r31, Y+42	; 0x2a
    37e2:	c0 84       	ldd	r12, Z+8	; 0x08
    37e4:	d1 84       	ldd	r13, Z+9	; 0x09
    37e6:	e2 84       	ldd	r14, Z+10	; 0x0a
    37e8:	f3 84       	ldd	r15, Z+11	; 0x0b
    37ea:	a7 01       	movw	r20, r14
    37ec:	96 01       	movw	r18, r12
    37ee:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <__mulsf3>
    37f2:	9b 01       	movw	r18, r22
    37f4:	ac 01       	movw	r20, r24
    37f6:	6d a1       	ldd	r22, Y+37	; 0x25
    37f8:	7e a1       	ldd	r23, Y+38	; 0x26
    37fa:	8f a1       	ldd	r24, Y+39	; 0x27
    37fc:	98 a5       	ldd	r25, Y+40	; 0x28
    37fe:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <__addsf3>
    3802:	2a e0       	ldi	r18, 0x0A	; 10
    3804:	37 ed       	ldi	r19, 0xD7	; 215
    3806:	43 e2       	ldi	r20, 0x23	; 35
    3808:	5d e3       	ldi	r21, 0x3D	; 61
    380a:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <__mulsf3>
    380e:	9b 01       	movw	r18, r22
    3810:	ac 01       	movw	r20, r24
    3812:	6d 81       	ldd	r22, Y+5	; 0x05
    3814:	7e 81       	ldd	r23, Y+6	; 0x06
    3816:	8f 81       	ldd	r24, Y+7	; 0x07
    3818:	98 85       	ldd	r25, Y+8	; 0x08
    381a:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <__addsf3>
    381e:	6d 83       	std	Y+5, r22	; 0x05
    3820:	7e 83       	std	Y+6, r23	; 0x06
    3822:	8f 83       	std	Y+7, r24	; 0x07
    3824:	98 87       	std	Y+8, r25	; 0x08
		theta_hat += (cosf(Drone->Euler[0])*Drone->w[1] - sinf(Drone->Euler[0])*Drone->w[2])*dt;
    3826:	29 a1       	ldd	r18, Y+33	; 0x21
    3828:	3a a1       	ldd	r19, Y+34	; 0x22
    382a:	4b a1       	ldd	r20, Y+35	; 0x23
    382c:	5c a1       	ldd	r21, Y+36	; 0x24
    382e:	6d 85       	ldd	r22, Y+13	; 0x0d
    3830:	7e 85       	ldd	r23, Y+14	; 0x0e
    3832:	8f 85       	ldd	r24, Y+15	; 0x0f
    3834:	98 89       	ldd	r25, Y+16	; 0x10
    3836:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <__mulsf3>
    383a:	6d 8f       	std	Y+29, r22	; 0x1d
    383c:	7e 8f       	std	Y+30, r23	; 0x1e
    383e:	8f 8f       	std	Y+31, r24	; 0x1f
    3840:	98 a3       	std	Y+32, r25	; 0x20
    3842:	a7 01       	movw	r20, r14
    3844:	96 01       	movw	r18, r12
    3846:	69 85       	ldd	r22, Y+9	; 0x09
    3848:	7a 85       	ldd	r23, Y+10	; 0x0a
    384a:	8b 85       	ldd	r24, Y+11	; 0x0b
    384c:	9c 85       	ldd	r25, Y+12	; 0x0c
    384e:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <__mulsf3>
    3852:	9b 01       	movw	r18, r22
    3854:	ac 01       	movw	r20, r24
    3856:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3858:	7e 8d       	ldd	r23, Y+30	; 0x1e
    385a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    385c:	98 a1       	ldd	r25, Y+32	; 0x20
    385e:	0e 94 0f 1d 	call	0x3a1e	; 0x3a1e <__subsf3>
    3862:	2a e0       	ldi	r18, 0x0A	; 10
    3864:	37 ed       	ldi	r19, 0xD7	; 215
    3866:	43 e2       	ldi	r20, 0x23	; 35
    3868:	5d e3       	ldi	r21, 0x3D	; 61
    386a:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <__mulsf3>
    386e:	9b 01       	movw	r18, r22
    3870:	ac 01       	movw	r20, r24
    3872:	69 81       	ldd	r22, Y+1	; 0x01
    3874:	7a 81       	ldd	r23, Y+2	; 0x02
    3876:	8b 81       	ldd	r24, Y+3	; 0x03
    3878:	9c 81       	ldd	r25, Y+4	; 0x04
    387a:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <__addsf3>
    387e:	69 83       	std	Y+1, r22	; 0x01
    3880:	7a 83       	std	Y+2, r23	; 0x02
    3882:	8b 83       	std	Y+3, r24	; 0x03
    3884:	9c 83       	std	Y+4, r25	; 0x04
		psi_hat += ((sinf(Drone->Euler[0])/cosf(Drone->Euler[1]))*Drone->w[1] + (cosf(Drone->Euler[0])/cosf(Drone->Euler[1]))*Drone->w[2])*dt;
    3886:	29 8d       	ldd	r18, Y+25	; 0x19
    3888:	3a 8d       	ldd	r19, Y+26	; 0x1a
    388a:	4b 8d       	ldd	r20, Y+27	; 0x1b
    388c:	5c 8d       	ldd	r21, Y+28	; 0x1c
    388e:	69 85       	ldd	r22, Y+9	; 0x09
    3890:	7a 85       	ldd	r23, Y+10	; 0x0a
    3892:	8b 85       	ldd	r24, Y+11	; 0x0b
    3894:	9c 85       	ldd	r25, Y+12	; 0x0c
    3896:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <__divsf3>
    389a:	9b 01       	movw	r18, r22
    389c:	ac 01       	movw	r20, r24
    389e:	69 a1       	ldd	r22, Y+33	; 0x21
    38a0:	7a a1       	ldd	r23, Y+34	; 0x22
    38a2:	8b a1       	ldd	r24, Y+35	; 0x23
    38a4:	9c a1       	ldd	r25, Y+36	; 0x24
    38a6:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <__mulsf3>
    38aa:	69 87       	std	Y+9, r22	; 0x09
    38ac:	7a 87       	std	Y+10, r23	; 0x0a
    38ae:	8b 87       	std	Y+11, r24	; 0x0b
    38b0:	9c 87       	std	Y+12, r25	; 0x0c
    38b2:	29 8d       	ldd	r18, Y+25	; 0x19
    38b4:	3a 8d       	ldd	r19, Y+26	; 0x1a
    38b6:	4b 8d       	ldd	r20, Y+27	; 0x1b
    38b8:	5c 8d       	ldd	r21, Y+28	; 0x1c
    38ba:	6d 85       	ldd	r22, Y+13	; 0x0d
    38bc:	7e 85       	ldd	r23, Y+14	; 0x0e
    38be:	8f 85       	ldd	r24, Y+15	; 0x0f
    38c0:	98 89       	ldd	r25, Y+16	; 0x10
    38c2:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <__divsf3>
    38c6:	9b 01       	movw	r18, r22
    38c8:	ac 01       	movw	r20, r24
    38ca:	c7 01       	movw	r24, r14
    38cc:	b6 01       	movw	r22, r12
    38ce:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <__mulsf3>
    38d2:	9b 01       	movw	r18, r22
    38d4:	ac 01       	movw	r20, r24
    38d6:	69 85       	ldd	r22, Y+9	; 0x09
    38d8:	7a 85       	ldd	r23, Y+10	; 0x0a
    38da:	8b 85       	ldd	r24, Y+11	; 0x0b
    38dc:	9c 85       	ldd	r25, Y+12	; 0x0c
    38de:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <__addsf3>
    38e2:	2a e0       	ldi	r18, 0x0A	; 10
    38e4:	37 ed       	ldi	r19, 0xD7	; 215
    38e6:	43 e2       	ldi	r20, 0x23	; 35
    38e8:	5d e3       	ldi	r21, 0x3D	; 61
    38ea:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <__mulsf3>
    38ee:	9b 01       	movw	r18, r22
    38f0:	ac 01       	movw	r20, r24
    38f2:	c5 01       	movw	r24, r10
    38f4:	b4 01       	movw	r22, r8
    38f6:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <__addsf3>
    38fa:	4b 01       	movw	r8, r22
    38fc:	5c 01       	movw	r10, r24
	}
	// Update
	Drone->Euler[0] = phi_hat + L*(phi_m-phi_hat);
    38fe:	2d 81       	ldd	r18, Y+5	; 0x05
    3900:	3e 81       	ldd	r19, Y+6	; 0x06
    3902:	4f 81       	ldd	r20, Y+7	; 0x07
    3904:	58 85       	ldd	r21, Y+8	; 0x08
    3906:	69 89       	ldd	r22, Y+17	; 0x11
    3908:	7a 89       	ldd	r23, Y+18	; 0x12
    390a:	8b 89       	ldd	r24, Y+19	; 0x13
    390c:	9c 89       	ldd	r25, Y+20	; 0x14
    390e:	0e 94 0f 1d 	call	0x3a1e	; 0x3a1e <__subsf3>
    3912:	2d ec       	ldi	r18, 0xCD	; 205
    3914:	3c ec       	ldi	r19, 0xCC	; 204
    3916:	4c e4       	ldi	r20, 0x4C	; 76
    3918:	5d e3       	ldi	r21, 0x3D	; 61
    391a:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <__mulsf3>
    391e:	9b 01       	movw	r18, r22
    3920:	ac 01       	movw	r20, r24
    3922:	6d 81       	ldd	r22, Y+5	; 0x05
    3924:	7e 81       	ldd	r23, Y+6	; 0x06
    3926:	8f 81       	ldd	r24, Y+7	; 0x07
    3928:	98 85       	ldd	r25, Y+8	; 0x08
    392a:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <__addsf3>
    392e:	a9 a5       	ldd	r26, Y+41	; 0x29
    3930:	ba a5       	ldd	r27, Y+42	; 0x2a
    3932:	94 96       	adiw	r26, 0x24	; 36
    3934:	6d 93       	st	X+, r22
    3936:	7d 93       	st	X+, r23
    3938:	8d 93       	st	X+, r24
    393a:	9c 93       	st	X, r25
    393c:	97 97       	sbiw	r26, 0x27	; 39
	Drone->Euler[1] = theta_hat + L*(theta_m-theta_hat);
    393e:	29 81       	ldd	r18, Y+1	; 0x01
    3940:	3a 81       	ldd	r19, Y+2	; 0x02
    3942:	4b 81       	ldd	r20, Y+3	; 0x03
    3944:	5c 81       	ldd	r21, Y+4	; 0x04
    3946:	6d 89       	ldd	r22, Y+21	; 0x15
    3948:	7e 89       	ldd	r23, Y+22	; 0x16
    394a:	8f 89       	ldd	r24, Y+23	; 0x17
    394c:	98 8d       	ldd	r25, Y+24	; 0x18
    394e:	0e 94 0f 1d 	call	0x3a1e	; 0x3a1e <__subsf3>
    3952:	2d ec       	ldi	r18, 0xCD	; 205
    3954:	3c ec       	ldi	r19, 0xCC	; 204
    3956:	4c e4       	ldi	r20, 0x4C	; 76
    3958:	5d e3       	ldi	r21, 0x3D	; 61
    395a:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <__mulsf3>
    395e:	9b 01       	movw	r18, r22
    3960:	ac 01       	movw	r20, r24
    3962:	69 81       	ldd	r22, Y+1	; 0x01
    3964:	7a 81       	ldd	r23, Y+2	; 0x02
    3966:	8b 81       	ldd	r24, Y+3	; 0x03
    3968:	9c 81       	ldd	r25, Y+4	; 0x04
    396a:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <__addsf3>
    396e:	e9 a5       	ldd	r30, Y+41	; 0x29
    3970:	fa a5       	ldd	r31, Y+42	; 0x2a
    3972:	60 a7       	std	Z+40, r22	; 0x28
    3974:	71 a7       	std	Z+41, r23	; 0x29
    3976:	82 a7       	std	Z+42, r24	; 0x2a
    3978:	93 a7       	std	Z+43, r25	; 0x2b
	// Prevent yaw angle discontinuity at 2pi - 0 to cause the filter to slowly cycle between them
	Drone->Euler[2] = (abs(psi_m-psi_hat)>M_PI)?(psi_m):(psi_hat + L*(psi_m-psi_hat));
    397a:	a5 01       	movw	r20, r10
    397c:	94 01       	movw	r18, r8
    397e:	c3 01       	movw	r24, r6
    3980:	b2 01       	movw	r22, r4
    3982:	0e 94 0f 1d 	call	0x3a1e	; 0x3a1e <__subsf3>
    3986:	6b 01       	movw	r12, r22
    3988:	7c 01       	movw	r14, r24
    398a:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <__fixsfsi>
    398e:	9b 01       	movw	r18, r22
    3990:	77 23       	and	r23, r23
    3992:	24 f4       	brge	.+8      	; 0x399c <Observer+0x514>
    3994:	22 27       	eor	r18, r18
    3996:	33 27       	eor	r19, r19
    3998:	26 1b       	sub	r18, r22
    399a:	37 0b       	sbc	r19, r23
    399c:	b9 01       	movw	r22, r18
    399e:	33 0f       	add	r19, r19
    39a0:	88 0b       	sbc	r24, r24
    39a2:	99 0b       	sbc	r25, r25
    39a4:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <__floatsisf>
    39a8:	2b ed       	ldi	r18, 0xDB	; 219
    39aa:	3f e0       	ldi	r19, 0x0F	; 15
    39ac:	49 e4       	ldi	r20, 0x49	; 73
    39ae:	50 e4       	ldi	r21, 0x40	; 64
    39b0:	0e 94 b8 1f 	call	0x3f70	; 0x3f70 <__gesf2>
    39b4:	18 16       	cp	r1, r24
    39b6:	8c f0       	brlt	.+34     	; 0x39da <Observer+0x552>
    39b8:	2d ec       	ldi	r18, 0xCD	; 205
    39ba:	3c ec       	ldi	r19, 0xCC	; 204
    39bc:	4c e4       	ldi	r20, 0x4C	; 76
    39be:	5d e3       	ldi	r21, 0x3D	; 61
    39c0:	c7 01       	movw	r24, r14
    39c2:	b6 01       	movw	r22, r12
    39c4:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <__mulsf3>
    39c8:	9b 01       	movw	r18, r22
    39ca:	ac 01       	movw	r20, r24
    39cc:	c5 01       	movw	r24, r10
    39ce:	b4 01       	movw	r22, r8
    39d0:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <__addsf3>
    39d4:	36 2f       	mov	r19, r22
    39d6:	27 2f       	mov	r18, r23
    39d8:	04 c0       	rjmp	.+8      	; 0x39e2 <Observer+0x55a>
    39da:	34 2d       	mov	r19, r4
    39dc:	25 2d       	mov	r18, r5
    39de:	86 2d       	mov	r24, r6
    39e0:	97 2d       	mov	r25, r7
    39e2:	43 2f       	mov	r20, r19
    39e4:	52 2f       	mov	r21, r18
    39e6:	68 2f       	mov	r22, r24
    39e8:	79 2f       	mov	r23, r25
    39ea:	a9 a5       	ldd	r26, Y+41	; 0x29
    39ec:	ba a5       	ldd	r27, Y+42	; 0x2a
    39ee:	9c 96       	adiw	r26, 0x2c	; 44
    39f0:	4d 93       	st	X+, r20
    39f2:	5d 93       	st	X+, r21
    39f4:	6d 93       	st	X+, r22
    39f6:	7c 93       	st	X, r23
    39f8:	9f 97       	sbiw	r26, 0x2f	; 47
    39fa:	aa 96       	adiw	r28, 0x2a	; 42
    39fc:	cd bf       	out	0x3d, r28	; 61
    39fe:	de bf       	out	0x3e, r29	; 62
    3a00:	df 91       	pop	r29
    3a02:	cf 91       	pop	r28
    3a04:	ff 90       	pop	r15
    3a06:	ef 90       	pop	r14
    3a08:	df 90       	pop	r13
    3a0a:	cf 90       	pop	r12
    3a0c:	bf 90       	pop	r11
    3a0e:	af 90       	pop	r10
    3a10:	9f 90       	pop	r9
    3a12:	8f 90       	pop	r8
    3a14:	7f 90       	pop	r7
    3a16:	6f 90       	pop	r6
    3a18:	5f 90       	pop	r5
    3a1a:	4f 90       	pop	r4
    3a1c:	08 95       	ret

00003a1e <__subsf3>:
    3a1e:	50 58       	subi	r21, 0x80	; 128

00003a20 <__addsf3>:
    3a20:	bb 27       	eor	r27, r27
    3a22:	aa 27       	eor	r26, r26
    3a24:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__addsf3x>
    3a28:	0c 94 6a 1f 	jmp	0x3ed4	; 0x3ed4 <__fp_round>
    3a2c:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <__fp_pscA>
    3a30:	38 f0       	brcs	.+14     	; 0x3a40 <__addsf3+0x20>
    3a32:	0e 94 38 1f 	call	0x3e70	; 0x3e70 <__fp_pscB>
    3a36:	20 f0       	brcs	.+8      	; 0x3a40 <__addsf3+0x20>
    3a38:	39 f4       	brne	.+14     	; 0x3a48 <__addsf3+0x28>
    3a3a:	9f 3f       	cpi	r25, 0xFF	; 255
    3a3c:	19 f4       	brne	.+6      	; 0x3a44 <__addsf3+0x24>
    3a3e:	26 f4       	brtc	.+8      	; 0x3a48 <__addsf3+0x28>
    3a40:	0c 94 07 1f 	jmp	0x3e0e	; 0x3e0e <__fp_nan>
    3a44:	0e f4       	brtc	.+2      	; 0x3a48 <__addsf3+0x28>
    3a46:	e0 95       	com	r30
    3a48:	e7 fb       	bst	r30, 7
    3a4a:	0c 94 01 1f 	jmp	0x3e02	; 0x3e02 <__fp_inf>

00003a4e <__addsf3x>:
    3a4e:	e9 2f       	mov	r30, r25
    3a50:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <__fp_split3>
    3a54:	58 f3       	brcs	.-42     	; 0x3a2c <__addsf3+0xc>
    3a56:	ba 17       	cp	r27, r26
    3a58:	62 07       	cpc	r22, r18
    3a5a:	73 07       	cpc	r23, r19
    3a5c:	84 07       	cpc	r24, r20
    3a5e:	95 07       	cpc	r25, r21
    3a60:	20 f0       	brcs	.+8      	; 0x3a6a <__addsf3x+0x1c>
    3a62:	79 f4       	brne	.+30     	; 0x3a82 <__addsf3x+0x34>
    3a64:	a6 f5       	brtc	.+104    	; 0x3ace <__addsf3x+0x80>
    3a66:	0c 94 b1 1f 	jmp	0x3f62	; 0x3f62 <__fp_zero>
    3a6a:	0e f4       	brtc	.+2      	; 0x3a6e <__addsf3x+0x20>
    3a6c:	e0 95       	com	r30
    3a6e:	0b 2e       	mov	r0, r27
    3a70:	ba 2f       	mov	r27, r26
    3a72:	a0 2d       	mov	r26, r0
    3a74:	0b 01       	movw	r0, r22
    3a76:	b9 01       	movw	r22, r18
    3a78:	90 01       	movw	r18, r0
    3a7a:	0c 01       	movw	r0, r24
    3a7c:	ca 01       	movw	r24, r20
    3a7e:	a0 01       	movw	r20, r0
    3a80:	11 24       	eor	r1, r1
    3a82:	ff 27       	eor	r31, r31
    3a84:	59 1b       	sub	r21, r25
    3a86:	99 f0       	breq	.+38     	; 0x3aae <__addsf3x+0x60>
    3a88:	59 3f       	cpi	r21, 0xF9	; 249
    3a8a:	50 f4       	brcc	.+20     	; 0x3aa0 <__addsf3x+0x52>
    3a8c:	50 3e       	cpi	r21, 0xE0	; 224
    3a8e:	68 f1       	brcs	.+90     	; 0x3aea <__addsf3x+0x9c>
    3a90:	1a 16       	cp	r1, r26
    3a92:	f0 40       	sbci	r31, 0x00	; 0
    3a94:	a2 2f       	mov	r26, r18
    3a96:	23 2f       	mov	r18, r19
    3a98:	34 2f       	mov	r19, r20
    3a9a:	44 27       	eor	r20, r20
    3a9c:	58 5f       	subi	r21, 0xF8	; 248
    3a9e:	f3 cf       	rjmp	.-26     	; 0x3a86 <__addsf3x+0x38>
    3aa0:	46 95       	lsr	r20
    3aa2:	37 95       	ror	r19
    3aa4:	27 95       	ror	r18
    3aa6:	a7 95       	ror	r26
    3aa8:	f0 40       	sbci	r31, 0x00	; 0
    3aaa:	53 95       	inc	r21
    3aac:	c9 f7       	brne	.-14     	; 0x3aa0 <__addsf3x+0x52>
    3aae:	7e f4       	brtc	.+30     	; 0x3ace <__addsf3x+0x80>
    3ab0:	1f 16       	cp	r1, r31
    3ab2:	ba 0b       	sbc	r27, r26
    3ab4:	62 0b       	sbc	r22, r18
    3ab6:	73 0b       	sbc	r23, r19
    3ab8:	84 0b       	sbc	r24, r20
    3aba:	ba f0       	brmi	.+46     	; 0x3aea <__addsf3x+0x9c>
    3abc:	91 50       	subi	r25, 0x01	; 1
    3abe:	a1 f0       	breq	.+40     	; 0x3ae8 <__addsf3x+0x9a>
    3ac0:	ff 0f       	add	r31, r31
    3ac2:	bb 1f       	adc	r27, r27
    3ac4:	66 1f       	adc	r22, r22
    3ac6:	77 1f       	adc	r23, r23
    3ac8:	88 1f       	adc	r24, r24
    3aca:	c2 f7       	brpl	.-16     	; 0x3abc <__addsf3x+0x6e>
    3acc:	0e c0       	rjmp	.+28     	; 0x3aea <__addsf3x+0x9c>
    3ace:	ba 0f       	add	r27, r26
    3ad0:	62 1f       	adc	r22, r18
    3ad2:	73 1f       	adc	r23, r19
    3ad4:	84 1f       	adc	r24, r20
    3ad6:	48 f4       	brcc	.+18     	; 0x3aea <__addsf3x+0x9c>
    3ad8:	87 95       	ror	r24
    3ada:	77 95       	ror	r23
    3adc:	67 95       	ror	r22
    3ade:	b7 95       	ror	r27
    3ae0:	f7 95       	ror	r31
    3ae2:	9e 3f       	cpi	r25, 0xFE	; 254
    3ae4:	08 f0       	brcs	.+2      	; 0x3ae8 <__addsf3x+0x9a>
    3ae6:	b0 cf       	rjmp	.-160    	; 0x3a48 <__addsf3+0x28>
    3ae8:	93 95       	inc	r25
    3aea:	88 0f       	add	r24, r24
    3aec:	08 f0       	brcs	.+2      	; 0x3af0 <__addsf3x+0xa2>
    3aee:	99 27       	eor	r25, r25
    3af0:	ee 0f       	add	r30, r30
    3af2:	97 95       	ror	r25
    3af4:	87 95       	ror	r24
    3af6:	08 95       	ret
    3af8:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <__fp_pscA>
    3afc:	60 f0       	brcs	.+24     	; 0x3b16 <__addsf3x+0xc8>
    3afe:	80 e8       	ldi	r24, 0x80	; 128
    3b00:	91 e0       	ldi	r25, 0x01	; 1
    3b02:	09 f4       	brne	.+2      	; 0x3b06 <__addsf3x+0xb8>
    3b04:	9e ef       	ldi	r25, 0xFE	; 254
    3b06:	0e 94 38 1f 	call	0x3e70	; 0x3e70 <__fp_pscB>
    3b0a:	28 f0       	brcs	.+10     	; 0x3b16 <__addsf3x+0xc8>
    3b0c:	40 e8       	ldi	r20, 0x80	; 128
    3b0e:	51 e0       	ldi	r21, 0x01	; 1
    3b10:	71 f4       	brne	.+28     	; 0x3b2e <atan2+0x10>
    3b12:	5e ef       	ldi	r21, 0xFE	; 254
    3b14:	0c c0       	rjmp	.+24     	; 0x3b2e <atan2+0x10>
    3b16:	0c 94 07 1f 	jmp	0x3e0e	; 0x3e0e <__fp_nan>
    3b1a:	0c 94 b1 1f 	jmp	0x3f62	; 0x3f62 <__fp_zero>

00003b1e <atan2>:
    3b1e:	e9 2f       	mov	r30, r25
    3b20:	e0 78       	andi	r30, 0x80	; 128
    3b22:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <__fp_split3>
    3b26:	40 f3       	brcs	.-48     	; 0x3af8 <__addsf3x+0xaa>
    3b28:	09 2e       	mov	r0, r25
    3b2a:	05 2a       	or	r0, r21
    3b2c:	b1 f3       	breq	.-20     	; 0x3b1a <__addsf3x+0xcc>
    3b2e:	26 17       	cp	r18, r22
    3b30:	37 07       	cpc	r19, r23
    3b32:	48 07       	cpc	r20, r24
    3b34:	59 07       	cpc	r21, r25
    3b36:	38 f0       	brcs	.+14     	; 0x3b46 <atan2+0x28>
    3b38:	0e 2e       	mov	r0, r30
    3b3a:	07 f8       	bld	r0, 7
    3b3c:	e0 25       	eor	r30, r0
    3b3e:	69 f0       	breq	.+26     	; 0x3b5a <atan2+0x3c>
    3b40:	e0 25       	eor	r30, r0
    3b42:	e0 64       	ori	r30, 0x40	; 64
    3b44:	0a c0       	rjmp	.+20     	; 0x3b5a <atan2+0x3c>
    3b46:	ef 63       	ori	r30, 0x3F	; 63
    3b48:	07 f8       	bld	r0, 7
    3b4a:	00 94       	com	r0
    3b4c:	07 fa       	bst	r0, 7
    3b4e:	db 01       	movw	r26, r22
    3b50:	b9 01       	movw	r22, r18
    3b52:	9d 01       	movw	r18, r26
    3b54:	dc 01       	movw	r26, r24
    3b56:	ca 01       	movw	r24, r20
    3b58:	ad 01       	movw	r20, r26
    3b5a:	ef 93       	push	r30
    3b5c:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <__divsf3_pse>
    3b60:	0e 94 6a 1f 	call	0x3ed4	; 0x3ed4 <__fp_round>
    3b64:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <atan>
    3b68:	5f 91       	pop	r21
    3b6a:	55 23       	and	r21, r21
    3b6c:	39 f0       	breq	.+14     	; 0x3b7c <atan2+0x5e>
    3b6e:	2b ed       	ldi	r18, 0xDB	; 219
    3b70:	3f e0       	ldi	r19, 0x0F	; 15
    3b72:	49 e4       	ldi	r20, 0x49	; 73
    3b74:	50 fd       	sbrc	r21, 0
    3b76:	49 ec       	ldi	r20, 0xC9	; 201
    3b78:	0c 94 10 1d 	jmp	0x3a20	; 0x3a20 <__addsf3>
    3b7c:	08 95       	ret

00003b7e <atan>:
    3b7e:	df 93       	push	r29
    3b80:	dd 27       	eor	r29, r29
    3b82:	b9 2f       	mov	r27, r25
    3b84:	bf 77       	andi	r27, 0x7F	; 127
    3b86:	40 e8       	ldi	r20, 0x80	; 128
    3b88:	5f e3       	ldi	r21, 0x3F	; 63
    3b8a:	16 16       	cp	r1, r22
    3b8c:	17 06       	cpc	r1, r23
    3b8e:	48 07       	cpc	r20, r24
    3b90:	5b 07       	cpc	r21, r27
    3b92:	18 f4       	brcc	.+6      	; 0x3b9a <atan+0x1c>
    3b94:	d9 2f       	mov	r29, r25
    3b96:	0e 94 bd 1f 	call	0x3f7a	; 0x3f7a <inverse>
    3b9a:	9f 93       	push	r25
    3b9c:	8f 93       	push	r24
    3b9e:	7f 93       	push	r23
    3ba0:	6f 93       	push	r22
    3ba2:	0e 94 d0 20 	call	0x41a0	; 0x41a0 <square>
    3ba6:	e0 e7       	ldi	r30, 0x70	; 112
    3ba8:	f1 e0       	ldi	r31, 0x01	; 1
    3baa:	0e 94 0a 1f 	call	0x3e14	; 0x3e14 <__fp_powser>
    3bae:	0e 94 6a 1f 	call	0x3ed4	; 0x3ed4 <__fp_round>
    3bb2:	2f 91       	pop	r18
    3bb4:	3f 91       	pop	r19
    3bb6:	4f 91       	pop	r20
    3bb8:	5f 91       	pop	r21
    3bba:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <__mulsf3x>
    3bbe:	dd 23       	and	r29, r29
    3bc0:	51 f0       	breq	.+20     	; 0x3bd6 <atan+0x58>
    3bc2:	90 58       	subi	r25, 0x80	; 128
    3bc4:	a2 ea       	ldi	r26, 0xA2	; 162
    3bc6:	2a ed       	ldi	r18, 0xDA	; 218
    3bc8:	3f e0       	ldi	r19, 0x0F	; 15
    3bca:	49 ec       	ldi	r20, 0xC9	; 201
    3bcc:	5f e3       	ldi	r21, 0x3F	; 63
    3bce:	d0 78       	andi	r29, 0x80	; 128
    3bd0:	5d 27       	eor	r21, r29
    3bd2:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__addsf3x>
    3bd6:	df 91       	pop	r29
    3bd8:	0c 94 6a 1f 	jmp	0x3ed4	; 0x3ed4 <__fp_round>

00003bdc <__cmpsf2>:
    3bdc:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__fp_cmp>
    3be0:	08 f4       	brcc	.+2      	; 0x3be4 <__cmpsf2+0x8>
    3be2:	81 e0       	ldi	r24, 0x01	; 1
    3be4:	08 95       	ret

00003be6 <cos>:
    3be6:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <__fp_rempio2>
    3bea:	e3 95       	inc	r30
    3bec:	0c 94 7b 1f 	jmp	0x3ef6	; 0x3ef6 <__fp_sinus>

00003bf0 <__divsf3>:
    3bf0:	0e 94 0c 1e 	call	0x3c18	; 0x3c18 <__divsf3x>
    3bf4:	0c 94 6a 1f 	jmp	0x3ed4	; 0x3ed4 <__fp_round>
    3bf8:	0e 94 38 1f 	call	0x3e70	; 0x3e70 <__fp_pscB>
    3bfc:	58 f0       	brcs	.+22     	; 0x3c14 <__divsf3+0x24>
    3bfe:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <__fp_pscA>
    3c02:	40 f0       	brcs	.+16     	; 0x3c14 <__divsf3+0x24>
    3c04:	29 f4       	brne	.+10     	; 0x3c10 <__divsf3+0x20>
    3c06:	5f 3f       	cpi	r21, 0xFF	; 255
    3c08:	29 f0       	breq	.+10     	; 0x3c14 <__divsf3+0x24>
    3c0a:	0c 94 01 1f 	jmp	0x3e02	; 0x3e02 <__fp_inf>
    3c0e:	51 11       	cpse	r21, r1
    3c10:	0c 94 b2 1f 	jmp	0x3f64	; 0x3f64 <__fp_szero>
    3c14:	0c 94 07 1f 	jmp	0x3e0e	; 0x3e0e <__fp_nan>

00003c18 <__divsf3x>:
    3c18:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <__fp_split3>
    3c1c:	68 f3       	brcs	.-38     	; 0x3bf8 <__divsf3+0x8>

00003c1e <__divsf3_pse>:
    3c1e:	99 23       	and	r25, r25
    3c20:	b1 f3       	breq	.-20     	; 0x3c0e <__divsf3+0x1e>
    3c22:	55 23       	and	r21, r21
    3c24:	91 f3       	breq	.-28     	; 0x3c0a <__divsf3+0x1a>
    3c26:	95 1b       	sub	r25, r21
    3c28:	55 0b       	sbc	r21, r21
    3c2a:	bb 27       	eor	r27, r27
    3c2c:	aa 27       	eor	r26, r26
    3c2e:	62 17       	cp	r22, r18
    3c30:	73 07       	cpc	r23, r19
    3c32:	84 07       	cpc	r24, r20
    3c34:	38 f0       	brcs	.+14     	; 0x3c44 <__divsf3_pse+0x26>
    3c36:	9f 5f       	subi	r25, 0xFF	; 255
    3c38:	5f 4f       	sbci	r21, 0xFF	; 255
    3c3a:	22 0f       	add	r18, r18
    3c3c:	33 1f       	adc	r19, r19
    3c3e:	44 1f       	adc	r20, r20
    3c40:	aa 1f       	adc	r26, r26
    3c42:	a9 f3       	breq	.-22     	; 0x3c2e <__divsf3_pse+0x10>
    3c44:	35 d0       	rcall	.+106    	; 0x3cb0 <__divsf3_pse+0x92>
    3c46:	0e 2e       	mov	r0, r30
    3c48:	3a f0       	brmi	.+14     	; 0x3c58 <__divsf3_pse+0x3a>
    3c4a:	e0 e8       	ldi	r30, 0x80	; 128
    3c4c:	32 d0       	rcall	.+100    	; 0x3cb2 <__divsf3_pse+0x94>
    3c4e:	91 50       	subi	r25, 0x01	; 1
    3c50:	50 40       	sbci	r21, 0x00	; 0
    3c52:	e6 95       	lsr	r30
    3c54:	00 1c       	adc	r0, r0
    3c56:	ca f7       	brpl	.-14     	; 0x3c4a <__divsf3_pse+0x2c>
    3c58:	2b d0       	rcall	.+86     	; 0x3cb0 <__divsf3_pse+0x92>
    3c5a:	fe 2f       	mov	r31, r30
    3c5c:	29 d0       	rcall	.+82     	; 0x3cb0 <__divsf3_pse+0x92>
    3c5e:	66 0f       	add	r22, r22
    3c60:	77 1f       	adc	r23, r23
    3c62:	88 1f       	adc	r24, r24
    3c64:	bb 1f       	adc	r27, r27
    3c66:	26 17       	cp	r18, r22
    3c68:	37 07       	cpc	r19, r23
    3c6a:	48 07       	cpc	r20, r24
    3c6c:	ab 07       	cpc	r26, r27
    3c6e:	b0 e8       	ldi	r27, 0x80	; 128
    3c70:	09 f0       	breq	.+2      	; 0x3c74 <__divsf3_pse+0x56>
    3c72:	bb 0b       	sbc	r27, r27
    3c74:	80 2d       	mov	r24, r0
    3c76:	bf 01       	movw	r22, r30
    3c78:	ff 27       	eor	r31, r31
    3c7a:	93 58       	subi	r25, 0x83	; 131
    3c7c:	5f 4f       	sbci	r21, 0xFF	; 255
    3c7e:	3a f0       	brmi	.+14     	; 0x3c8e <__divsf3_pse+0x70>
    3c80:	9e 3f       	cpi	r25, 0xFE	; 254
    3c82:	51 05       	cpc	r21, r1
    3c84:	78 f0       	brcs	.+30     	; 0x3ca4 <__divsf3_pse+0x86>
    3c86:	0c 94 01 1f 	jmp	0x3e02	; 0x3e02 <__fp_inf>
    3c8a:	0c 94 b2 1f 	jmp	0x3f64	; 0x3f64 <__fp_szero>
    3c8e:	5f 3f       	cpi	r21, 0xFF	; 255
    3c90:	e4 f3       	brlt	.-8      	; 0x3c8a <__divsf3_pse+0x6c>
    3c92:	98 3e       	cpi	r25, 0xE8	; 232
    3c94:	d4 f3       	brlt	.-12     	; 0x3c8a <__divsf3_pse+0x6c>
    3c96:	86 95       	lsr	r24
    3c98:	77 95       	ror	r23
    3c9a:	67 95       	ror	r22
    3c9c:	b7 95       	ror	r27
    3c9e:	f7 95       	ror	r31
    3ca0:	9f 5f       	subi	r25, 0xFF	; 255
    3ca2:	c9 f7       	brne	.-14     	; 0x3c96 <__divsf3_pse+0x78>
    3ca4:	88 0f       	add	r24, r24
    3ca6:	91 1d       	adc	r25, r1
    3ca8:	96 95       	lsr	r25
    3caa:	87 95       	ror	r24
    3cac:	97 f9       	bld	r25, 7
    3cae:	08 95       	ret
    3cb0:	e1 e0       	ldi	r30, 0x01	; 1
    3cb2:	66 0f       	add	r22, r22
    3cb4:	77 1f       	adc	r23, r23
    3cb6:	88 1f       	adc	r24, r24
    3cb8:	bb 1f       	adc	r27, r27
    3cba:	62 17       	cp	r22, r18
    3cbc:	73 07       	cpc	r23, r19
    3cbe:	84 07       	cpc	r24, r20
    3cc0:	ba 07       	cpc	r27, r26
    3cc2:	20 f0       	brcs	.+8      	; 0x3ccc <__divsf3_pse+0xae>
    3cc4:	62 1b       	sub	r22, r18
    3cc6:	73 0b       	sbc	r23, r19
    3cc8:	84 0b       	sbc	r24, r20
    3cca:	ba 0b       	sbc	r27, r26
    3ccc:	ee 1f       	adc	r30, r30
    3cce:	88 f7       	brcc	.-30     	; 0x3cb2 <__divsf3_pse+0x94>
    3cd0:	e0 95       	com	r30
    3cd2:	08 95       	ret

00003cd4 <__fixsfsi>:
    3cd4:	0e 94 71 1e 	call	0x3ce2	; 0x3ce2 <__fixunssfsi>
    3cd8:	68 94       	set
    3cda:	b1 11       	cpse	r27, r1
    3cdc:	0c 94 b2 1f 	jmp	0x3f64	; 0x3f64 <__fp_szero>
    3ce0:	08 95       	ret

00003ce2 <__fixunssfsi>:
    3ce2:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <__fp_splitA>
    3ce6:	88 f0       	brcs	.+34     	; 0x3d0a <__fixunssfsi+0x28>
    3ce8:	9f 57       	subi	r25, 0x7F	; 127
    3cea:	98 f0       	brcs	.+38     	; 0x3d12 <__fixunssfsi+0x30>
    3cec:	b9 2f       	mov	r27, r25
    3cee:	99 27       	eor	r25, r25
    3cf0:	b7 51       	subi	r27, 0x17	; 23
    3cf2:	b0 f0       	brcs	.+44     	; 0x3d20 <__fixunssfsi+0x3e>
    3cf4:	e1 f0       	breq	.+56     	; 0x3d2e <__fixunssfsi+0x4c>
    3cf6:	66 0f       	add	r22, r22
    3cf8:	77 1f       	adc	r23, r23
    3cfa:	88 1f       	adc	r24, r24
    3cfc:	99 1f       	adc	r25, r25
    3cfe:	1a f0       	brmi	.+6      	; 0x3d06 <__fixunssfsi+0x24>
    3d00:	ba 95       	dec	r27
    3d02:	c9 f7       	brne	.-14     	; 0x3cf6 <__fixunssfsi+0x14>
    3d04:	14 c0       	rjmp	.+40     	; 0x3d2e <__fixunssfsi+0x4c>
    3d06:	b1 30       	cpi	r27, 0x01	; 1
    3d08:	91 f0       	breq	.+36     	; 0x3d2e <__fixunssfsi+0x4c>
    3d0a:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <__fp_zero>
    3d0e:	b1 e0       	ldi	r27, 0x01	; 1
    3d10:	08 95       	ret
    3d12:	0c 94 b1 1f 	jmp	0x3f62	; 0x3f62 <__fp_zero>
    3d16:	67 2f       	mov	r22, r23
    3d18:	78 2f       	mov	r23, r24
    3d1a:	88 27       	eor	r24, r24
    3d1c:	b8 5f       	subi	r27, 0xF8	; 248
    3d1e:	39 f0       	breq	.+14     	; 0x3d2e <__fixunssfsi+0x4c>
    3d20:	b9 3f       	cpi	r27, 0xF9	; 249
    3d22:	cc f3       	brlt	.-14     	; 0x3d16 <__fixunssfsi+0x34>
    3d24:	86 95       	lsr	r24
    3d26:	77 95       	ror	r23
    3d28:	67 95       	ror	r22
    3d2a:	b3 95       	inc	r27
    3d2c:	d9 f7       	brne	.-10     	; 0x3d24 <__fixunssfsi+0x42>
    3d2e:	3e f4       	brtc	.+14     	; 0x3d3e <__fixunssfsi+0x5c>
    3d30:	90 95       	com	r25
    3d32:	80 95       	com	r24
    3d34:	70 95       	com	r23
    3d36:	61 95       	neg	r22
    3d38:	7f 4f       	sbci	r23, 0xFF	; 255
    3d3a:	8f 4f       	sbci	r24, 0xFF	; 255
    3d3c:	9f 4f       	sbci	r25, 0xFF	; 255
    3d3e:	08 95       	ret

00003d40 <__floatunsisf>:
    3d40:	e8 94       	clt
    3d42:	09 c0       	rjmp	.+18     	; 0x3d56 <__floatsisf+0x12>

00003d44 <__floatsisf>:
    3d44:	97 fb       	bst	r25, 7
    3d46:	3e f4       	brtc	.+14     	; 0x3d56 <__floatsisf+0x12>
    3d48:	90 95       	com	r25
    3d4a:	80 95       	com	r24
    3d4c:	70 95       	com	r23
    3d4e:	61 95       	neg	r22
    3d50:	7f 4f       	sbci	r23, 0xFF	; 255
    3d52:	8f 4f       	sbci	r24, 0xFF	; 255
    3d54:	9f 4f       	sbci	r25, 0xFF	; 255
    3d56:	99 23       	and	r25, r25
    3d58:	a9 f0       	breq	.+42     	; 0x3d84 <__floatsisf+0x40>
    3d5a:	f9 2f       	mov	r31, r25
    3d5c:	96 e9       	ldi	r25, 0x96	; 150
    3d5e:	bb 27       	eor	r27, r27
    3d60:	93 95       	inc	r25
    3d62:	f6 95       	lsr	r31
    3d64:	87 95       	ror	r24
    3d66:	77 95       	ror	r23
    3d68:	67 95       	ror	r22
    3d6a:	b7 95       	ror	r27
    3d6c:	f1 11       	cpse	r31, r1
    3d6e:	f8 cf       	rjmp	.-16     	; 0x3d60 <__floatsisf+0x1c>
    3d70:	fa f4       	brpl	.+62     	; 0x3db0 <__floatsisf+0x6c>
    3d72:	bb 0f       	add	r27, r27
    3d74:	11 f4       	brne	.+4      	; 0x3d7a <__floatsisf+0x36>
    3d76:	60 ff       	sbrs	r22, 0
    3d78:	1b c0       	rjmp	.+54     	; 0x3db0 <__floatsisf+0x6c>
    3d7a:	6f 5f       	subi	r22, 0xFF	; 255
    3d7c:	7f 4f       	sbci	r23, 0xFF	; 255
    3d7e:	8f 4f       	sbci	r24, 0xFF	; 255
    3d80:	9f 4f       	sbci	r25, 0xFF	; 255
    3d82:	16 c0       	rjmp	.+44     	; 0x3db0 <__floatsisf+0x6c>
    3d84:	88 23       	and	r24, r24
    3d86:	11 f0       	breq	.+4      	; 0x3d8c <__floatsisf+0x48>
    3d88:	96 e9       	ldi	r25, 0x96	; 150
    3d8a:	11 c0       	rjmp	.+34     	; 0x3dae <__floatsisf+0x6a>
    3d8c:	77 23       	and	r23, r23
    3d8e:	21 f0       	breq	.+8      	; 0x3d98 <__floatsisf+0x54>
    3d90:	9e e8       	ldi	r25, 0x8E	; 142
    3d92:	87 2f       	mov	r24, r23
    3d94:	76 2f       	mov	r23, r22
    3d96:	05 c0       	rjmp	.+10     	; 0x3da2 <__floatsisf+0x5e>
    3d98:	66 23       	and	r22, r22
    3d9a:	71 f0       	breq	.+28     	; 0x3db8 <__floatsisf+0x74>
    3d9c:	96 e8       	ldi	r25, 0x86	; 134
    3d9e:	86 2f       	mov	r24, r22
    3da0:	70 e0       	ldi	r23, 0x00	; 0
    3da2:	60 e0       	ldi	r22, 0x00	; 0
    3da4:	2a f0       	brmi	.+10     	; 0x3db0 <__floatsisf+0x6c>
    3da6:	9a 95       	dec	r25
    3da8:	66 0f       	add	r22, r22
    3daa:	77 1f       	adc	r23, r23
    3dac:	88 1f       	adc	r24, r24
    3dae:	da f7       	brpl	.-10     	; 0x3da6 <__floatsisf+0x62>
    3db0:	88 0f       	add	r24, r24
    3db2:	96 95       	lsr	r25
    3db4:	87 95       	ror	r24
    3db6:	97 f9       	bld	r25, 7
    3db8:	08 95       	ret

00003dba <__fp_cmp>:
    3dba:	99 0f       	add	r25, r25
    3dbc:	00 08       	sbc	r0, r0
    3dbe:	55 0f       	add	r21, r21
    3dc0:	aa 0b       	sbc	r26, r26
    3dc2:	e0 e8       	ldi	r30, 0x80	; 128
    3dc4:	fe ef       	ldi	r31, 0xFE	; 254
    3dc6:	16 16       	cp	r1, r22
    3dc8:	17 06       	cpc	r1, r23
    3dca:	e8 07       	cpc	r30, r24
    3dcc:	f9 07       	cpc	r31, r25
    3dce:	c0 f0       	brcs	.+48     	; 0x3e00 <__fp_cmp+0x46>
    3dd0:	12 16       	cp	r1, r18
    3dd2:	13 06       	cpc	r1, r19
    3dd4:	e4 07       	cpc	r30, r20
    3dd6:	f5 07       	cpc	r31, r21
    3dd8:	98 f0       	brcs	.+38     	; 0x3e00 <__fp_cmp+0x46>
    3dda:	62 1b       	sub	r22, r18
    3ddc:	73 0b       	sbc	r23, r19
    3dde:	84 0b       	sbc	r24, r20
    3de0:	95 0b       	sbc	r25, r21
    3de2:	39 f4       	brne	.+14     	; 0x3df2 <__fp_cmp+0x38>
    3de4:	0a 26       	eor	r0, r26
    3de6:	61 f0       	breq	.+24     	; 0x3e00 <__fp_cmp+0x46>
    3de8:	23 2b       	or	r18, r19
    3dea:	24 2b       	or	r18, r20
    3dec:	25 2b       	or	r18, r21
    3dee:	21 f4       	brne	.+8      	; 0x3df8 <__fp_cmp+0x3e>
    3df0:	08 95       	ret
    3df2:	0a 26       	eor	r0, r26
    3df4:	09 f4       	brne	.+2      	; 0x3df8 <__fp_cmp+0x3e>
    3df6:	a1 40       	sbci	r26, 0x01	; 1
    3df8:	a6 95       	lsr	r26
    3dfa:	8f ef       	ldi	r24, 0xFF	; 255
    3dfc:	81 1d       	adc	r24, r1
    3dfe:	81 1d       	adc	r24, r1
    3e00:	08 95       	ret

00003e02 <__fp_inf>:
    3e02:	97 f9       	bld	r25, 7
    3e04:	9f 67       	ori	r25, 0x7F	; 127
    3e06:	80 e8       	ldi	r24, 0x80	; 128
    3e08:	70 e0       	ldi	r23, 0x00	; 0
    3e0a:	60 e0       	ldi	r22, 0x00	; 0
    3e0c:	08 95       	ret

00003e0e <__fp_nan>:
    3e0e:	9f ef       	ldi	r25, 0xFF	; 255
    3e10:	80 ec       	ldi	r24, 0xC0	; 192
    3e12:	08 95       	ret

00003e14 <__fp_powser>:
    3e14:	df 93       	push	r29
    3e16:	cf 93       	push	r28
    3e18:	1f 93       	push	r17
    3e1a:	0f 93       	push	r16
    3e1c:	ff 92       	push	r15
    3e1e:	ef 92       	push	r14
    3e20:	df 92       	push	r13
    3e22:	7b 01       	movw	r14, r22
    3e24:	8c 01       	movw	r16, r24
    3e26:	68 94       	set
    3e28:	06 c0       	rjmp	.+12     	; 0x3e36 <__fp_powser+0x22>
    3e2a:	da 2e       	mov	r13, r26
    3e2c:	ef 01       	movw	r28, r30
    3e2e:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <__mulsf3x>
    3e32:	fe 01       	movw	r30, r28
    3e34:	e8 94       	clt
    3e36:	a5 91       	lpm	r26, Z+
    3e38:	25 91       	lpm	r18, Z+
    3e3a:	35 91       	lpm	r19, Z+
    3e3c:	45 91       	lpm	r20, Z+
    3e3e:	55 91       	lpm	r21, Z+
    3e40:	a6 f3       	brts	.-24     	; 0x3e2a <__fp_powser+0x16>
    3e42:	ef 01       	movw	r28, r30
    3e44:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__addsf3x>
    3e48:	fe 01       	movw	r30, r28
    3e4a:	97 01       	movw	r18, r14
    3e4c:	a8 01       	movw	r20, r16
    3e4e:	da 94       	dec	r13
    3e50:	69 f7       	brne	.-38     	; 0x3e2c <__fp_powser+0x18>
    3e52:	df 90       	pop	r13
    3e54:	ef 90       	pop	r14
    3e56:	ff 90       	pop	r15
    3e58:	0f 91       	pop	r16
    3e5a:	1f 91       	pop	r17
    3e5c:	cf 91       	pop	r28
    3e5e:	df 91       	pop	r29
    3e60:	08 95       	ret

00003e62 <__fp_pscA>:
    3e62:	00 24       	eor	r0, r0
    3e64:	0a 94       	dec	r0
    3e66:	16 16       	cp	r1, r22
    3e68:	17 06       	cpc	r1, r23
    3e6a:	18 06       	cpc	r1, r24
    3e6c:	09 06       	cpc	r0, r25
    3e6e:	08 95       	ret

00003e70 <__fp_pscB>:
    3e70:	00 24       	eor	r0, r0
    3e72:	0a 94       	dec	r0
    3e74:	12 16       	cp	r1, r18
    3e76:	13 06       	cpc	r1, r19
    3e78:	14 06       	cpc	r1, r20
    3e7a:	05 06       	cpc	r0, r21
    3e7c:	08 95       	ret
    3e7e:	0c 94 07 1f 	jmp	0x3e0e	; 0x3e0e <__fp_nan>

00003e82 <__fp_rempio2>:
    3e82:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <__fp_splitA>
    3e86:	d8 f3       	brcs	.-10     	; 0x3e7e <__fp_pscB+0xe>
    3e88:	e8 94       	clt
    3e8a:	e0 e0       	ldi	r30, 0x00	; 0
    3e8c:	bb 27       	eor	r27, r27
    3e8e:	9f 57       	subi	r25, 0x7F	; 127
    3e90:	f0 f0       	brcs	.+60     	; 0x3ece <__fp_rempio2+0x4c>
    3e92:	2a ed       	ldi	r18, 0xDA	; 218
    3e94:	3f e0       	ldi	r19, 0x0F	; 15
    3e96:	49 ec       	ldi	r20, 0xC9	; 201
    3e98:	06 c0       	rjmp	.+12     	; 0x3ea6 <__fp_rempio2+0x24>
    3e9a:	ee 0f       	add	r30, r30
    3e9c:	bb 0f       	add	r27, r27
    3e9e:	66 1f       	adc	r22, r22
    3ea0:	77 1f       	adc	r23, r23
    3ea2:	88 1f       	adc	r24, r24
    3ea4:	28 f0       	brcs	.+10     	; 0x3eb0 <__fp_rempio2+0x2e>
    3ea6:	b2 3a       	cpi	r27, 0xA2	; 162
    3ea8:	62 07       	cpc	r22, r18
    3eaa:	73 07       	cpc	r23, r19
    3eac:	84 07       	cpc	r24, r20
    3eae:	28 f0       	brcs	.+10     	; 0x3eba <__fp_rempio2+0x38>
    3eb0:	b2 5a       	subi	r27, 0xA2	; 162
    3eb2:	62 0b       	sbc	r22, r18
    3eb4:	73 0b       	sbc	r23, r19
    3eb6:	84 0b       	sbc	r24, r20
    3eb8:	e3 95       	inc	r30
    3eba:	9a 95       	dec	r25
    3ebc:	72 f7       	brpl	.-36     	; 0x3e9a <__fp_rempio2+0x18>
    3ebe:	80 38       	cpi	r24, 0x80	; 128
    3ec0:	30 f4       	brcc	.+12     	; 0x3ece <__fp_rempio2+0x4c>
    3ec2:	9a 95       	dec	r25
    3ec4:	bb 0f       	add	r27, r27
    3ec6:	66 1f       	adc	r22, r22
    3ec8:	77 1f       	adc	r23, r23
    3eca:	88 1f       	adc	r24, r24
    3ecc:	d2 f7       	brpl	.-12     	; 0x3ec2 <__fp_rempio2+0x40>
    3ece:	90 48       	sbci	r25, 0x80	; 128
    3ed0:	0c 94 3a 21 	jmp	0x4274	; 0x4274 <__fp_mpack_finite>

00003ed4 <__fp_round>:
    3ed4:	09 2e       	mov	r0, r25
    3ed6:	03 94       	inc	r0
    3ed8:	00 0c       	add	r0, r0
    3eda:	11 f4       	brne	.+4      	; 0x3ee0 <__fp_round+0xc>
    3edc:	88 23       	and	r24, r24
    3ede:	52 f0       	brmi	.+20     	; 0x3ef4 <__fp_round+0x20>
    3ee0:	bb 0f       	add	r27, r27
    3ee2:	40 f4       	brcc	.+16     	; 0x3ef4 <__fp_round+0x20>
    3ee4:	bf 2b       	or	r27, r31
    3ee6:	11 f4       	brne	.+4      	; 0x3eec <__fp_round+0x18>
    3ee8:	60 ff       	sbrs	r22, 0
    3eea:	04 c0       	rjmp	.+8      	; 0x3ef4 <__fp_round+0x20>
    3eec:	6f 5f       	subi	r22, 0xFF	; 255
    3eee:	7f 4f       	sbci	r23, 0xFF	; 255
    3ef0:	8f 4f       	sbci	r24, 0xFF	; 255
    3ef2:	9f 4f       	sbci	r25, 0xFF	; 255
    3ef4:	08 95       	ret

00003ef6 <__fp_sinus>:
    3ef6:	ef 93       	push	r30
    3ef8:	e0 ff       	sbrs	r30, 0
    3efa:	07 c0       	rjmp	.+14     	; 0x3f0a <__fp_sinus+0x14>
    3efc:	a2 ea       	ldi	r26, 0xA2	; 162
    3efe:	2a ed       	ldi	r18, 0xDA	; 218
    3f00:	3f e0       	ldi	r19, 0x0F	; 15
    3f02:	49 ec       	ldi	r20, 0xC9	; 201
    3f04:	5f eb       	ldi	r21, 0xBF	; 191
    3f06:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__addsf3x>
    3f0a:	0e 94 6a 1f 	call	0x3ed4	; 0x3ed4 <__fp_round>
    3f0e:	0f 90       	pop	r0
    3f10:	03 94       	inc	r0
    3f12:	01 fc       	sbrc	r0, 1
    3f14:	90 58       	subi	r25, 0x80	; 128
    3f16:	ed e9       	ldi	r30, 0x9D	; 157
    3f18:	f1 e0       	ldi	r31, 0x01	; 1
    3f1a:	0c 94 4d 21 	jmp	0x429a	; 0x429a <__fp_powsodd>

00003f1e <__fp_split3>:
    3f1e:	57 fd       	sbrc	r21, 7
    3f20:	90 58       	subi	r25, 0x80	; 128
    3f22:	44 0f       	add	r20, r20
    3f24:	55 1f       	adc	r21, r21
    3f26:	59 f0       	breq	.+22     	; 0x3f3e <__fp_splitA+0x10>
    3f28:	5f 3f       	cpi	r21, 0xFF	; 255
    3f2a:	71 f0       	breq	.+28     	; 0x3f48 <__fp_splitA+0x1a>
    3f2c:	47 95       	ror	r20

00003f2e <__fp_splitA>:
    3f2e:	88 0f       	add	r24, r24
    3f30:	97 fb       	bst	r25, 7
    3f32:	99 1f       	adc	r25, r25
    3f34:	61 f0       	breq	.+24     	; 0x3f4e <__fp_splitA+0x20>
    3f36:	9f 3f       	cpi	r25, 0xFF	; 255
    3f38:	79 f0       	breq	.+30     	; 0x3f58 <__fp_splitA+0x2a>
    3f3a:	87 95       	ror	r24
    3f3c:	08 95       	ret
    3f3e:	12 16       	cp	r1, r18
    3f40:	13 06       	cpc	r1, r19
    3f42:	14 06       	cpc	r1, r20
    3f44:	55 1f       	adc	r21, r21
    3f46:	f2 cf       	rjmp	.-28     	; 0x3f2c <__fp_split3+0xe>
    3f48:	46 95       	lsr	r20
    3f4a:	f1 df       	rcall	.-30     	; 0x3f2e <__fp_splitA>
    3f4c:	08 c0       	rjmp	.+16     	; 0x3f5e <__fp_splitA+0x30>
    3f4e:	16 16       	cp	r1, r22
    3f50:	17 06       	cpc	r1, r23
    3f52:	18 06       	cpc	r1, r24
    3f54:	99 1f       	adc	r25, r25
    3f56:	f1 cf       	rjmp	.-30     	; 0x3f3a <__fp_splitA+0xc>
    3f58:	86 95       	lsr	r24
    3f5a:	71 05       	cpc	r23, r1
    3f5c:	61 05       	cpc	r22, r1
    3f5e:	08 94       	sec
    3f60:	08 95       	ret

00003f62 <__fp_zero>:
    3f62:	e8 94       	clt

00003f64 <__fp_szero>:
    3f64:	bb 27       	eor	r27, r27
    3f66:	66 27       	eor	r22, r22
    3f68:	77 27       	eor	r23, r23
    3f6a:	cb 01       	movw	r24, r22
    3f6c:	97 f9       	bld	r25, 7
    3f6e:	08 95       	ret

00003f70 <__gesf2>:
    3f70:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__fp_cmp>
    3f74:	08 f4       	brcc	.+2      	; 0x3f78 <__gesf2+0x8>
    3f76:	8f ef       	ldi	r24, 0xFF	; 255
    3f78:	08 95       	ret

00003f7a <inverse>:
    3f7a:	9b 01       	movw	r18, r22
    3f7c:	ac 01       	movw	r20, r24
    3f7e:	60 e0       	ldi	r22, 0x00	; 0
    3f80:	70 e0       	ldi	r23, 0x00	; 0
    3f82:	80 e8       	ldi	r24, 0x80	; 128
    3f84:	9f e3       	ldi	r25, 0x3F	; 63
    3f86:	0c 94 f8 1d 	jmp	0x3bf0	; 0x3bf0 <__divsf3>

00003f8a <__mulsf3>:
    3f8a:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <__mulsf3x>
    3f8e:	0c 94 6a 1f 	jmp	0x3ed4	; 0x3ed4 <__fp_round>
    3f92:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <__fp_pscA>
    3f96:	38 f0       	brcs	.+14     	; 0x3fa6 <__mulsf3+0x1c>
    3f98:	0e 94 38 1f 	call	0x3e70	; 0x3e70 <__fp_pscB>
    3f9c:	20 f0       	brcs	.+8      	; 0x3fa6 <__mulsf3+0x1c>
    3f9e:	95 23       	and	r25, r21
    3fa0:	11 f0       	breq	.+4      	; 0x3fa6 <__mulsf3+0x1c>
    3fa2:	0c 94 01 1f 	jmp	0x3e02	; 0x3e02 <__fp_inf>
    3fa6:	0c 94 07 1f 	jmp	0x3e0e	; 0x3e0e <__fp_nan>
    3faa:	11 24       	eor	r1, r1
    3fac:	0c 94 b2 1f 	jmp	0x3f64	; 0x3f64 <__fp_szero>

00003fb0 <__mulsf3x>:
    3fb0:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <__fp_split3>
    3fb4:	70 f3       	brcs	.-36     	; 0x3f92 <__mulsf3+0x8>

00003fb6 <__mulsf3_pse>:
    3fb6:	95 9f       	mul	r25, r21
    3fb8:	c1 f3       	breq	.-16     	; 0x3faa <__mulsf3+0x20>
    3fba:	95 0f       	add	r25, r21
    3fbc:	50 e0       	ldi	r21, 0x00	; 0
    3fbe:	55 1f       	adc	r21, r21
    3fc0:	62 9f       	mul	r22, r18
    3fc2:	f0 01       	movw	r30, r0
    3fc4:	72 9f       	mul	r23, r18
    3fc6:	bb 27       	eor	r27, r27
    3fc8:	f0 0d       	add	r31, r0
    3fca:	b1 1d       	adc	r27, r1
    3fcc:	63 9f       	mul	r22, r19
    3fce:	aa 27       	eor	r26, r26
    3fd0:	f0 0d       	add	r31, r0
    3fd2:	b1 1d       	adc	r27, r1
    3fd4:	aa 1f       	adc	r26, r26
    3fd6:	64 9f       	mul	r22, r20
    3fd8:	66 27       	eor	r22, r22
    3fda:	b0 0d       	add	r27, r0
    3fdc:	a1 1d       	adc	r26, r1
    3fde:	66 1f       	adc	r22, r22
    3fe0:	82 9f       	mul	r24, r18
    3fe2:	22 27       	eor	r18, r18
    3fe4:	b0 0d       	add	r27, r0
    3fe6:	a1 1d       	adc	r26, r1
    3fe8:	62 1f       	adc	r22, r18
    3fea:	73 9f       	mul	r23, r19
    3fec:	b0 0d       	add	r27, r0
    3fee:	a1 1d       	adc	r26, r1
    3ff0:	62 1f       	adc	r22, r18
    3ff2:	83 9f       	mul	r24, r19
    3ff4:	a0 0d       	add	r26, r0
    3ff6:	61 1d       	adc	r22, r1
    3ff8:	22 1f       	adc	r18, r18
    3ffa:	74 9f       	mul	r23, r20
    3ffc:	33 27       	eor	r19, r19
    3ffe:	a0 0d       	add	r26, r0
    4000:	61 1d       	adc	r22, r1
    4002:	23 1f       	adc	r18, r19
    4004:	84 9f       	mul	r24, r20
    4006:	60 0d       	add	r22, r0
    4008:	21 1d       	adc	r18, r1
    400a:	82 2f       	mov	r24, r18
    400c:	76 2f       	mov	r23, r22
    400e:	6a 2f       	mov	r22, r26
    4010:	11 24       	eor	r1, r1
    4012:	9f 57       	subi	r25, 0x7F	; 127
    4014:	50 40       	sbci	r21, 0x00	; 0
    4016:	9a f0       	brmi	.+38     	; 0x403e <__DATA_REGION_LENGTH__+0x3e>
    4018:	f1 f0       	breq	.+60     	; 0x4056 <__DATA_REGION_LENGTH__+0x56>
    401a:	88 23       	and	r24, r24
    401c:	4a f0       	brmi	.+18     	; 0x4030 <__DATA_REGION_LENGTH__+0x30>
    401e:	ee 0f       	add	r30, r30
    4020:	ff 1f       	adc	r31, r31
    4022:	bb 1f       	adc	r27, r27
    4024:	66 1f       	adc	r22, r22
    4026:	77 1f       	adc	r23, r23
    4028:	88 1f       	adc	r24, r24
    402a:	91 50       	subi	r25, 0x01	; 1
    402c:	50 40       	sbci	r21, 0x00	; 0
    402e:	a9 f7       	brne	.-22     	; 0x401a <__DATA_REGION_LENGTH__+0x1a>
    4030:	9e 3f       	cpi	r25, 0xFE	; 254
    4032:	51 05       	cpc	r21, r1
    4034:	80 f0       	brcs	.+32     	; 0x4056 <__DATA_REGION_LENGTH__+0x56>
    4036:	0c 94 01 1f 	jmp	0x3e02	; 0x3e02 <__fp_inf>
    403a:	0c 94 b2 1f 	jmp	0x3f64	; 0x3f64 <__fp_szero>
    403e:	5f 3f       	cpi	r21, 0xFF	; 255
    4040:	e4 f3       	brlt	.-8      	; 0x403a <__DATA_REGION_LENGTH__+0x3a>
    4042:	98 3e       	cpi	r25, 0xE8	; 232
    4044:	d4 f3       	brlt	.-12     	; 0x403a <__DATA_REGION_LENGTH__+0x3a>
    4046:	86 95       	lsr	r24
    4048:	77 95       	ror	r23
    404a:	67 95       	ror	r22
    404c:	b7 95       	ror	r27
    404e:	f7 95       	ror	r31
    4050:	e7 95       	ror	r30
    4052:	9f 5f       	subi	r25, 0xFF	; 255
    4054:	c1 f7       	brne	.-16     	; 0x4046 <__DATA_REGION_LENGTH__+0x46>
    4056:	fe 2b       	or	r31, r30
    4058:	88 0f       	add	r24, r24
    405a:	91 1d       	adc	r25, r1
    405c:	96 95       	lsr	r25
    405e:	87 95       	ror	r24
    4060:	97 f9       	bld	r25, 7
    4062:	08 95       	ret

00004064 <pow>:
    4064:	fa 01       	movw	r30, r20
    4066:	ee 0f       	add	r30, r30
    4068:	ff 1f       	adc	r31, r31
    406a:	30 96       	adiw	r30, 0x00	; 0
    406c:	21 05       	cpc	r18, r1
    406e:	31 05       	cpc	r19, r1
    4070:	a1 f1       	breq	.+104    	; 0x40da <pow+0x76>
    4072:	61 15       	cp	r22, r1
    4074:	71 05       	cpc	r23, r1
    4076:	61 f4       	brne	.+24     	; 0x4090 <pow+0x2c>
    4078:	80 38       	cpi	r24, 0x80	; 128
    407a:	bf e3       	ldi	r27, 0x3F	; 63
    407c:	9b 07       	cpc	r25, r27
    407e:	49 f1       	breq	.+82     	; 0x40d2 <pow+0x6e>
    4080:	68 94       	set
    4082:	90 38       	cpi	r25, 0x80	; 128
    4084:	81 05       	cpc	r24, r1
    4086:	61 f0       	breq	.+24     	; 0x40a0 <pow+0x3c>
    4088:	80 38       	cpi	r24, 0x80	; 128
    408a:	bf ef       	ldi	r27, 0xFF	; 255
    408c:	9b 07       	cpc	r25, r27
    408e:	41 f0       	breq	.+16     	; 0x40a0 <pow+0x3c>
    4090:	99 23       	and	r25, r25
    4092:	4a f5       	brpl	.+82     	; 0x40e6 <pow+0x82>
    4094:	ff 3f       	cpi	r31, 0xFF	; 255
    4096:	e1 05       	cpc	r30, r1
    4098:	31 05       	cpc	r19, r1
    409a:	21 05       	cpc	r18, r1
    409c:	19 f1       	breq	.+70     	; 0x40e4 <pow+0x80>
    409e:	e8 94       	clt
    40a0:	08 94       	sec
    40a2:	e7 95       	ror	r30
    40a4:	d9 01       	movw	r26, r18
    40a6:	aa 23       	and	r26, r26
    40a8:	29 f4       	brne	.+10     	; 0x40b4 <pow+0x50>
    40aa:	ab 2f       	mov	r26, r27
    40ac:	be 2f       	mov	r27, r30
    40ae:	f8 5f       	subi	r31, 0xF8	; 248
    40b0:	d0 f3       	brcs	.-12     	; 0x40a6 <pow+0x42>
    40b2:	10 c0       	rjmp	.+32     	; 0x40d4 <pow+0x70>
    40b4:	ff 5f       	subi	r31, 0xFF	; 255
    40b6:	70 f4       	brcc	.+28     	; 0x40d4 <pow+0x70>
    40b8:	a6 95       	lsr	r26
    40ba:	e0 f7       	brcc	.-8      	; 0x40b4 <pow+0x50>
    40bc:	f7 39       	cpi	r31, 0x97	; 151
    40be:	50 f0       	brcs	.+20     	; 0x40d4 <pow+0x70>
    40c0:	19 f0       	breq	.+6      	; 0x40c8 <pow+0x64>
    40c2:	ff 3a       	cpi	r31, 0xAF	; 175
    40c4:	38 f4       	brcc	.+14     	; 0x40d4 <pow+0x70>
    40c6:	9f 77       	andi	r25, 0x7F	; 127
    40c8:	9f 93       	push	r25
    40ca:	0d d0       	rcall	.+26     	; 0x40e6 <pow+0x82>
    40cc:	0f 90       	pop	r0
    40ce:	07 fc       	sbrc	r0, 7
    40d0:	90 58       	subi	r25, 0x80	; 128
    40d2:	08 95       	ret
    40d4:	46 f0       	brts	.+16     	; 0x40e6 <pow+0x82>
    40d6:	0c 94 07 1f 	jmp	0x3e0e	; 0x3e0e <__fp_nan>
    40da:	60 e0       	ldi	r22, 0x00	; 0
    40dc:	70 e0       	ldi	r23, 0x00	; 0
    40de:	80 e8       	ldi	r24, 0x80	; 128
    40e0:	9f e3       	ldi	r25, 0x3F	; 63
    40e2:	08 95       	ret
    40e4:	4f e7       	ldi	r20, 0x7F	; 127
    40e6:	9f 77       	andi	r25, 0x7F	; 127
    40e8:	5f 93       	push	r21
    40ea:	4f 93       	push	r20
    40ec:	3f 93       	push	r19
    40ee:	2f 93       	push	r18
    40f0:	0e 94 a3 21 	call	0x4346	; 0x4346 <log>
    40f4:	2f 91       	pop	r18
    40f6:	3f 91       	pop	r19
    40f8:	4f 91       	pop	r20
    40fa:	5f 91       	pop	r21
    40fc:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <__mulsf3>
    4100:	0c 94 06 21 	jmp	0x420c	; 0x420c <exp>

00004104 <sin>:
    4104:	9f 93       	push	r25
    4106:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <__fp_rempio2>
    410a:	0f 90       	pop	r0
    410c:	07 fc       	sbrc	r0, 7
    410e:	ee 5f       	subi	r30, 0xFE	; 254
    4110:	0c 94 7b 1f 	jmp	0x3ef6	; 0x3ef6 <__fp_sinus>
    4114:	19 f4       	brne	.+6      	; 0x411c <sin+0x18>
    4116:	16 f4       	brtc	.+4      	; 0x411c <sin+0x18>
    4118:	0c 94 07 1f 	jmp	0x3e0e	; 0x3e0e <__fp_nan>
    411c:	0c 94 38 21 	jmp	0x4270	; 0x4270 <__fp_mpack>

00004120 <sqrt>:
    4120:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <__fp_splitA>
    4124:	b8 f3       	brcs	.-18     	; 0x4114 <sin+0x10>
    4126:	99 23       	and	r25, r25
    4128:	c9 f3       	breq	.-14     	; 0x411c <sin+0x18>
    412a:	b6 f3       	brts	.-20     	; 0x4118 <sin+0x14>
    412c:	9f 57       	subi	r25, 0x7F	; 127
    412e:	55 0b       	sbc	r21, r21
    4130:	87 ff       	sbrs	r24, 7
    4132:	0e 94 46 21 	call	0x428c	; 0x428c <__fp_norm2>
    4136:	00 24       	eor	r0, r0
    4138:	a0 e6       	ldi	r26, 0x60	; 96
    413a:	40 ea       	ldi	r20, 0xA0	; 160
    413c:	90 01       	movw	r18, r0
    413e:	80 58       	subi	r24, 0x80	; 128
    4140:	56 95       	lsr	r21
    4142:	97 95       	ror	r25
    4144:	28 f4       	brcc	.+10     	; 0x4150 <sqrt+0x30>
    4146:	80 5c       	subi	r24, 0xC0	; 192
    4148:	66 0f       	add	r22, r22
    414a:	77 1f       	adc	r23, r23
    414c:	88 1f       	adc	r24, r24
    414e:	20 f0       	brcs	.+8      	; 0x4158 <sqrt+0x38>
    4150:	26 17       	cp	r18, r22
    4152:	37 07       	cpc	r19, r23
    4154:	48 07       	cpc	r20, r24
    4156:	30 f4       	brcc	.+12     	; 0x4164 <sqrt+0x44>
    4158:	62 1b       	sub	r22, r18
    415a:	73 0b       	sbc	r23, r19
    415c:	84 0b       	sbc	r24, r20
    415e:	20 29       	or	r18, r0
    4160:	31 29       	or	r19, r1
    4162:	4a 2b       	or	r20, r26
    4164:	a6 95       	lsr	r26
    4166:	17 94       	ror	r1
    4168:	07 94       	ror	r0
    416a:	20 25       	eor	r18, r0
    416c:	31 25       	eor	r19, r1
    416e:	4a 27       	eor	r20, r26
    4170:	58 f7       	brcc	.-42     	; 0x4148 <sqrt+0x28>
    4172:	66 0f       	add	r22, r22
    4174:	77 1f       	adc	r23, r23
    4176:	88 1f       	adc	r24, r24
    4178:	20 f0       	brcs	.+8      	; 0x4182 <sqrt+0x62>
    417a:	26 17       	cp	r18, r22
    417c:	37 07       	cpc	r19, r23
    417e:	48 07       	cpc	r20, r24
    4180:	30 f4       	brcc	.+12     	; 0x418e <sqrt+0x6e>
    4182:	62 0b       	sbc	r22, r18
    4184:	73 0b       	sbc	r23, r19
    4186:	84 0b       	sbc	r24, r20
    4188:	20 0d       	add	r18, r0
    418a:	31 1d       	adc	r19, r1
    418c:	41 1d       	adc	r20, r1
    418e:	a0 95       	com	r26
    4190:	81 f7       	brne	.-32     	; 0x4172 <sqrt+0x52>
    4192:	b9 01       	movw	r22, r18
    4194:	84 2f       	mov	r24, r20
    4196:	91 58       	subi	r25, 0x81	; 129
    4198:	88 0f       	add	r24, r24
    419a:	96 95       	lsr	r25
    419c:	87 95       	ror	r24
    419e:	08 95       	ret

000041a0 <square>:
    41a0:	9b 01       	movw	r18, r22
    41a2:	ac 01       	movw	r20, r24
    41a4:	0c 94 c5 1f 	jmp	0x3f8a	; 0x3f8a <__mulsf3>

000041a8 <tan>:
    41a8:	df 93       	push	r29
    41aa:	d9 2f       	mov	r29, r25
    41ac:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <__fp_rempio2>
    41b0:	e6 95       	lsr	r30
    41b2:	d7 95       	ror	r29
    41b4:	2a ed       	ldi	r18, 0xDA	; 218
    41b6:	3f e0       	ldi	r19, 0x0F	; 15
    41b8:	49 e4       	ldi	r20, 0x49	; 73
    41ba:	5f e3       	ldi	r21, 0x3F	; 63
    41bc:	b3 3a       	cpi	r27, 0xA3	; 163
    41be:	62 07       	cpc	r22, r18
    41c0:	73 07       	cpc	r23, r19
    41c2:	84 07       	cpc	r24, r20
    41c4:	95 07       	cpc	r25, r21
    41c6:	d7 95       	ror	r29
    41c8:	3a f0       	brmi	.+14     	; 0x41d8 <tan+0x30>
    41ca:	a2 ea       	ldi	r26, 0xA2	; 162
    41cc:	49 ec       	ldi	r20, 0xC9	; 201
    41ce:	90 68       	ori	r25, 0x80	; 128
    41d0:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__addsf3x>
    41d4:	0e 94 6a 1f 	call	0x3ed4	; 0x3ed4 <__fp_round>
    41d8:	eb eb       	ldi	r30, 0xBB	; 187
    41da:	f1 e0       	ldi	r31, 0x01	; 1
    41dc:	0e 94 4d 21 	call	0x429a	; 0x429a <__fp_powsodd>
    41e0:	dd 0f       	add	r29, r29
    41e2:	13 f0       	brvs	.+4      	; 0x41e8 <tan+0x40>
    41e4:	0e 94 bd 1f 	call	0x3f7a	; 0x3f7a <inverse>
    41e8:	dd 0f       	add	r29, r29
    41ea:	0b f4       	brvc	.+2      	; 0x41ee <tan+0x46>
    41ec:	90 58       	subi	r25, 0x80	; 128
    41ee:	df 91       	pop	r29
    41f0:	08 95       	ret

000041f2 <__unordsf2>:
    41f2:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__fp_cmp>
    41f6:	88 0b       	sbc	r24, r24
    41f8:	99 0b       	sbc	r25, r25
    41fa:	08 95       	ret
    41fc:	29 f4       	brne	.+10     	; 0x4208 <__unordsf2+0x16>
    41fe:	16 f0       	brts	.+4      	; 0x4204 <__unordsf2+0x12>
    4200:	0c 94 01 1f 	jmp	0x3e02	; 0x3e02 <__fp_inf>
    4204:	0c 94 b1 1f 	jmp	0x3f62	; 0x3f62 <__fp_zero>
    4208:	0c 94 07 1f 	jmp	0x3e0e	; 0x3e0e <__fp_nan>

0000420c <exp>:
    420c:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <__fp_splitA>
    4210:	a8 f3       	brcs	.-22     	; 0x41fc <__unordsf2+0xa>
    4212:	96 38       	cpi	r25, 0x86	; 134
    4214:	a0 f7       	brcc	.-24     	; 0x41fe <__unordsf2+0xc>
    4216:	07 f8       	bld	r0, 7
    4218:	0f 92       	push	r0
    421a:	e8 94       	clt
    421c:	2b e3       	ldi	r18, 0x3B	; 59
    421e:	3a ea       	ldi	r19, 0xAA	; 170
    4220:	48 eb       	ldi	r20, 0xB8	; 184
    4222:	5f e7       	ldi	r21, 0x7F	; 127
    4224:	0e 94 db 1f 	call	0x3fb6	; 0x3fb6 <__mulsf3_pse>
    4228:	0f 92       	push	r0
    422a:	0f 92       	push	r0
    422c:	0f 92       	push	r0
    422e:	4d b7       	in	r20, 0x3d	; 61
    4230:	5e b7       	in	r21, 0x3e	; 62
    4232:	0f 92       	push	r0
    4234:	0e 94 eb 21 	call	0x43d6	; 0x43d6 <modf>
    4238:	ee ed       	ldi	r30, 0xDE	; 222
    423a:	f1 e0       	ldi	r31, 0x01	; 1
    423c:	0e 94 0a 1f 	call	0x3e14	; 0x3e14 <__fp_powser>
    4240:	4f 91       	pop	r20
    4242:	5f 91       	pop	r21
    4244:	ef 91       	pop	r30
    4246:	ff 91       	pop	r31
    4248:	e5 95       	asr	r30
    424a:	ee 1f       	adc	r30, r30
    424c:	ff 1f       	adc	r31, r31
    424e:	49 f0       	breq	.+18     	; 0x4262 <exp+0x56>
    4250:	fe 57       	subi	r31, 0x7E	; 126
    4252:	e0 68       	ori	r30, 0x80	; 128
    4254:	44 27       	eor	r20, r20
    4256:	ee 0f       	add	r30, r30
    4258:	44 1f       	adc	r20, r20
    425a:	fa 95       	dec	r31
    425c:	e1 f7       	brne	.-8      	; 0x4256 <exp+0x4a>
    425e:	41 95       	neg	r20
    4260:	55 0b       	sbc	r21, r21
    4262:	0e 94 65 21 	call	0x42ca	; 0x42ca <ldexp>
    4266:	0f 90       	pop	r0
    4268:	07 fe       	sbrs	r0, 7
    426a:	0c 94 bd 1f 	jmp	0x3f7a	; 0x3f7a <inverse>
    426e:	08 95       	ret

00004270 <__fp_mpack>:
    4270:	9f 3f       	cpi	r25, 0xFF	; 255
    4272:	31 f0       	breq	.+12     	; 0x4280 <__fp_mpack_finite+0xc>

00004274 <__fp_mpack_finite>:
    4274:	91 50       	subi	r25, 0x01	; 1
    4276:	20 f4       	brcc	.+8      	; 0x4280 <__fp_mpack_finite+0xc>
    4278:	87 95       	ror	r24
    427a:	77 95       	ror	r23
    427c:	67 95       	ror	r22
    427e:	b7 95       	ror	r27
    4280:	88 0f       	add	r24, r24
    4282:	91 1d       	adc	r25, r1
    4284:	96 95       	lsr	r25
    4286:	87 95       	ror	r24
    4288:	97 f9       	bld	r25, 7
    428a:	08 95       	ret

0000428c <__fp_norm2>:
    428c:	91 50       	subi	r25, 0x01	; 1
    428e:	50 40       	sbci	r21, 0x00	; 0
    4290:	66 0f       	add	r22, r22
    4292:	77 1f       	adc	r23, r23
    4294:	88 1f       	adc	r24, r24
    4296:	d2 f7       	brpl	.-12     	; 0x428c <__fp_norm2>
    4298:	08 95       	ret

0000429a <__fp_powsodd>:
    429a:	9f 93       	push	r25
    429c:	8f 93       	push	r24
    429e:	7f 93       	push	r23
    42a0:	6f 93       	push	r22
    42a2:	ff 93       	push	r31
    42a4:	ef 93       	push	r30
    42a6:	9b 01       	movw	r18, r22
    42a8:	ac 01       	movw	r20, r24
    42aa:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <__mulsf3>
    42ae:	ef 91       	pop	r30
    42b0:	ff 91       	pop	r31
    42b2:	0e 94 0a 1f 	call	0x3e14	; 0x3e14 <__fp_powser>
    42b6:	2f 91       	pop	r18
    42b8:	3f 91       	pop	r19
    42ba:	4f 91       	pop	r20
    42bc:	5f 91       	pop	r21
    42be:	0c 94 c5 1f 	jmp	0x3f8a	; 0x3f8a <__mulsf3>
    42c2:	0c 94 01 1f 	jmp	0x3e02	; 0x3e02 <__fp_inf>
    42c6:	0c 94 38 21 	jmp	0x4270	; 0x4270 <__fp_mpack>

000042ca <ldexp>:
    42ca:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <__fp_splitA>
    42ce:	d8 f3       	brcs	.-10     	; 0x42c6 <__fp_powsodd+0x2c>
    42d0:	99 23       	and	r25, r25
    42d2:	c9 f3       	breq	.-14     	; 0x42c6 <__fp_powsodd+0x2c>
    42d4:	94 0f       	add	r25, r20
    42d6:	51 1d       	adc	r21, r1
    42d8:	a3 f3       	brvs	.-24     	; 0x42c2 <__fp_powsodd+0x28>
    42da:	91 50       	subi	r25, 0x01	; 1
    42dc:	50 40       	sbci	r21, 0x00	; 0
    42de:	94 f0       	brlt	.+36     	; 0x4304 <ldexp+0x3a>
    42e0:	59 f0       	breq	.+22     	; 0x42f8 <ldexp+0x2e>
    42e2:	88 23       	and	r24, r24
    42e4:	32 f0       	brmi	.+12     	; 0x42f2 <ldexp+0x28>
    42e6:	66 0f       	add	r22, r22
    42e8:	77 1f       	adc	r23, r23
    42ea:	88 1f       	adc	r24, r24
    42ec:	91 50       	subi	r25, 0x01	; 1
    42ee:	50 40       	sbci	r21, 0x00	; 0
    42f0:	c1 f7       	brne	.-16     	; 0x42e2 <ldexp+0x18>
    42f2:	9e 3f       	cpi	r25, 0xFE	; 254
    42f4:	51 05       	cpc	r21, r1
    42f6:	2c f7       	brge	.-54     	; 0x42c2 <__fp_powsodd+0x28>
    42f8:	88 0f       	add	r24, r24
    42fa:	91 1d       	adc	r25, r1
    42fc:	96 95       	lsr	r25
    42fe:	87 95       	ror	r24
    4300:	97 f9       	bld	r25, 7
    4302:	08 95       	ret
    4304:	5f 3f       	cpi	r21, 0xFF	; 255
    4306:	ac f0       	brlt	.+42     	; 0x4332 <ldexp+0x68>
    4308:	98 3e       	cpi	r25, 0xE8	; 232
    430a:	9c f0       	brlt	.+38     	; 0x4332 <ldexp+0x68>
    430c:	bb 27       	eor	r27, r27
    430e:	86 95       	lsr	r24
    4310:	77 95       	ror	r23
    4312:	67 95       	ror	r22
    4314:	b7 95       	ror	r27
    4316:	08 f4       	brcc	.+2      	; 0x431a <ldexp+0x50>
    4318:	b1 60       	ori	r27, 0x01	; 1
    431a:	93 95       	inc	r25
    431c:	c1 f7       	brne	.-16     	; 0x430e <ldexp+0x44>
    431e:	bb 0f       	add	r27, r27
    4320:	58 f7       	brcc	.-42     	; 0x42f8 <ldexp+0x2e>
    4322:	11 f4       	brne	.+4      	; 0x4328 <ldexp+0x5e>
    4324:	60 ff       	sbrs	r22, 0
    4326:	e8 cf       	rjmp	.-48     	; 0x42f8 <ldexp+0x2e>
    4328:	6f 5f       	subi	r22, 0xFF	; 255
    432a:	7f 4f       	sbci	r23, 0xFF	; 255
    432c:	8f 4f       	sbci	r24, 0xFF	; 255
    432e:	9f 4f       	sbci	r25, 0xFF	; 255
    4330:	e3 cf       	rjmp	.-58     	; 0x42f8 <ldexp+0x2e>
    4332:	0c 94 b2 1f 	jmp	0x3f64	; 0x3f64 <__fp_szero>
    4336:	16 f0       	brts	.+4      	; 0x433c <ldexp+0x72>
    4338:	0c 94 38 21 	jmp	0x4270	; 0x4270 <__fp_mpack>
    433c:	0c 94 07 1f 	jmp	0x3e0e	; 0x3e0e <__fp_nan>
    4340:	68 94       	set
    4342:	0c 94 01 1f 	jmp	0x3e02	; 0x3e02 <__fp_inf>

00004346 <log>:
    4346:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <__fp_splitA>
    434a:	a8 f3       	brcs	.-22     	; 0x4336 <ldexp+0x6c>
    434c:	99 23       	and	r25, r25
    434e:	c1 f3       	breq	.-16     	; 0x4340 <ldexp+0x76>
    4350:	ae f3       	brts	.-22     	; 0x433c <ldexp+0x72>
    4352:	df 93       	push	r29
    4354:	cf 93       	push	r28
    4356:	1f 93       	push	r17
    4358:	0f 93       	push	r16
    435a:	ff 92       	push	r15
    435c:	c9 2f       	mov	r28, r25
    435e:	dd 27       	eor	r29, r29
    4360:	88 23       	and	r24, r24
    4362:	2a f0       	brmi	.+10     	; 0x436e <log+0x28>
    4364:	21 97       	sbiw	r28, 0x01	; 1
    4366:	66 0f       	add	r22, r22
    4368:	77 1f       	adc	r23, r23
    436a:	88 1f       	adc	r24, r24
    436c:	da f7       	brpl	.-10     	; 0x4364 <log+0x1e>
    436e:	20 e0       	ldi	r18, 0x00	; 0
    4370:	30 e0       	ldi	r19, 0x00	; 0
    4372:	40 e8       	ldi	r20, 0x80	; 128
    4374:	5f eb       	ldi	r21, 0xBF	; 191
    4376:	9f e3       	ldi	r25, 0x3F	; 63
    4378:	88 39       	cpi	r24, 0x98	; 152
    437a:	20 f0       	brcs	.+8      	; 0x4384 <log+0x3e>
    437c:	80 3e       	cpi	r24, 0xE0	; 224
    437e:	38 f0       	brcs	.+14     	; 0x438e <log+0x48>
    4380:	21 96       	adiw	r28, 0x01	; 1
    4382:	8f 77       	andi	r24, 0x7F	; 127
    4384:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <__addsf3>
    4388:	e6 e0       	ldi	r30, 0x06	; 6
    438a:	f2 e0       	ldi	r31, 0x02	; 2
    438c:	04 c0       	rjmp	.+8      	; 0x4396 <log+0x50>
    438e:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <__addsf3>
    4392:	e3 e3       	ldi	r30, 0x33	; 51
    4394:	f2 e0       	ldi	r31, 0x02	; 2
    4396:	0e 94 0a 1f 	call	0x3e14	; 0x3e14 <__fp_powser>
    439a:	8b 01       	movw	r16, r22
    439c:	be 01       	movw	r22, r28
    439e:	ec 01       	movw	r28, r24
    43a0:	fb 2e       	mov	r15, r27
    43a2:	6f 57       	subi	r22, 0x7F	; 127
    43a4:	71 09       	sbc	r23, r1
    43a6:	75 95       	asr	r23
    43a8:	77 1f       	adc	r23, r23
    43aa:	88 0b       	sbc	r24, r24
    43ac:	99 0b       	sbc	r25, r25
    43ae:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <__floatsisf>
    43b2:	28 e1       	ldi	r18, 0x18	; 24
    43b4:	32 e7       	ldi	r19, 0x72	; 114
    43b6:	41 e3       	ldi	r20, 0x31	; 49
    43b8:	5f e3       	ldi	r21, 0x3F	; 63
    43ba:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <__mulsf3x>
    43be:	af 2d       	mov	r26, r15
    43c0:	98 01       	movw	r18, r16
    43c2:	ae 01       	movw	r20, r28
    43c4:	ff 90       	pop	r15
    43c6:	0f 91       	pop	r16
    43c8:	1f 91       	pop	r17
    43ca:	cf 91       	pop	r28
    43cc:	df 91       	pop	r29
    43ce:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__addsf3x>
    43d2:	0c 94 6a 1f 	jmp	0x3ed4	; 0x3ed4 <__fp_round>

000043d6 <modf>:
    43d6:	fa 01       	movw	r30, r20
    43d8:	dc 01       	movw	r26, r24
    43da:	aa 0f       	add	r26, r26
    43dc:	bb 1f       	adc	r27, r27
    43de:	9b 01       	movw	r18, r22
    43e0:	ac 01       	movw	r20, r24
    43e2:	bf 57       	subi	r27, 0x7F	; 127
    43e4:	28 f4       	brcc	.+10     	; 0x43f0 <modf+0x1a>
    43e6:	22 27       	eor	r18, r18
    43e8:	33 27       	eor	r19, r19
    43ea:	44 27       	eor	r20, r20
    43ec:	50 78       	andi	r21, 0x80	; 128
    43ee:	20 c0       	rjmp	.+64     	; 0x4430 <modf+0x5a>
    43f0:	b7 51       	subi	r27, 0x17	; 23
    43f2:	90 f4       	brcc	.+36     	; 0x4418 <modf+0x42>
    43f4:	ab 2f       	mov	r26, r27
    43f6:	00 24       	eor	r0, r0
    43f8:	46 95       	lsr	r20
    43fa:	37 95       	ror	r19
    43fc:	27 95       	ror	r18
    43fe:	01 1c       	adc	r0, r1
    4400:	a3 95       	inc	r26
    4402:	d2 f3       	brmi	.-12     	; 0x43f8 <modf+0x22>
    4404:	00 20       	and	r0, r0
    4406:	71 f0       	breq	.+28     	; 0x4424 <modf+0x4e>
    4408:	22 0f       	add	r18, r18
    440a:	33 1f       	adc	r19, r19
    440c:	44 1f       	adc	r20, r20
    440e:	b3 95       	inc	r27
    4410:	da f3       	brmi	.-10     	; 0x4408 <modf+0x32>
    4412:	0e d0       	rcall	.+28     	; 0x4430 <modf+0x5a>
    4414:	0c 94 0f 1d 	jmp	0x3a1e	; 0x3a1e <__subsf3>
    4418:	61 30       	cpi	r22, 0x01	; 1
    441a:	71 05       	cpc	r23, r1
    441c:	a0 e8       	ldi	r26, 0x80	; 128
    441e:	8a 07       	cpc	r24, r26
    4420:	b9 46       	sbci	r27, 0x69	; 105
    4422:	30 f4       	brcc	.+12     	; 0x4430 <modf+0x5a>
    4424:	9b 01       	movw	r18, r22
    4426:	ac 01       	movw	r20, r24
    4428:	66 27       	eor	r22, r22
    442a:	77 27       	eor	r23, r23
    442c:	88 27       	eor	r24, r24
    442e:	90 78       	andi	r25, 0x80	; 128
    4430:	30 96       	adiw	r30, 0x00	; 0
    4432:	21 f0       	breq	.+8      	; 0x443c <modf+0x66>
    4434:	20 83       	st	Z, r18
    4436:	31 83       	std	Z+1, r19	; 0x01
    4438:	42 83       	std	Z+2, r20	; 0x02
    443a:	53 83       	std	Z+3, r21	; 0x03
    443c:	08 95       	ret

0000443e <vfprintf>:
    443e:	2f 92       	push	r2
    4440:	3f 92       	push	r3
    4442:	4f 92       	push	r4
    4444:	5f 92       	push	r5
    4446:	6f 92       	push	r6
    4448:	7f 92       	push	r7
    444a:	8f 92       	push	r8
    444c:	9f 92       	push	r9
    444e:	af 92       	push	r10
    4450:	bf 92       	push	r11
    4452:	cf 92       	push	r12
    4454:	df 92       	push	r13
    4456:	ef 92       	push	r14
    4458:	ff 92       	push	r15
    445a:	0f 93       	push	r16
    445c:	1f 93       	push	r17
    445e:	cf 93       	push	r28
    4460:	df 93       	push	r29
    4462:	cd b7       	in	r28, 0x3d	; 61
    4464:	de b7       	in	r29, 0x3e	; 62
    4466:	60 97       	sbiw	r28, 0x10	; 16
    4468:	cd bf       	out	0x3d, r28	; 61
    446a:	de bf       	out	0x3e, r29	; 62
    446c:	7c 01       	movw	r14, r24
    446e:	1b 01       	movw	r2, r22
    4470:	6a 01       	movw	r12, r20
    4472:	fc 01       	movw	r30, r24
    4474:	16 82       	std	Z+6, r1	; 0x06
    4476:	17 82       	std	Z+7, r1	; 0x07
    4478:	83 81       	ldd	r24, Z+3	; 0x03
    447a:	81 ff       	sbrs	r24, 1
    447c:	44 c3       	rjmp	.+1672   	; 0x4b06 <vfprintf+0x6c8>
    447e:	9e 01       	movw	r18, r28
    4480:	2f 5f       	subi	r18, 0xFF	; 255
    4482:	3f 4f       	sbci	r19, 0xFF	; 255
    4484:	39 01       	movw	r6, r18
    4486:	f7 01       	movw	r30, r14
    4488:	93 81       	ldd	r25, Z+3	; 0x03
    448a:	f1 01       	movw	r30, r2
    448c:	93 fd       	sbrc	r25, 3
    448e:	85 91       	lpm	r24, Z+
    4490:	93 ff       	sbrs	r25, 3
    4492:	81 91       	ld	r24, Z+
    4494:	1f 01       	movw	r2, r30
    4496:	88 23       	and	r24, r24
    4498:	09 f4       	brne	.+2      	; 0x449c <vfprintf+0x5e>
    449a:	31 c3       	rjmp	.+1634   	; 0x4afe <vfprintf+0x6c0>
    449c:	85 32       	cpi	r24, 0x25	; 37
    449e:	39 f4       	brne	.+14     	; 0x44ae <vfprintf+0x70>
    44a0:	93 fd       	sbrc	r25, 3
    44a2:	85 91       	lpm	r24, Z+
    44a4:	93 ff       	sbrs	r25, 3
    44a6:	81 91       	ld	r24, Z+
    44a8:	1f 01       	movw	r2, r30
    44aa:	85 32       	cpi	r24, 0x25	; 37
    44ac:	39 f4       	brne	.+14     	; 0x44bc <vfprintf+0x7e>
    44ae:	b7 01       	movw	r22, r14
    44b0:	90 e0       	ldi	r25, 0x00	; 0
    44b2:	0e 94 1c 2a 	call	0x5438	; 0x5438 <fputc>
    44b6:	56 01       	movw	r10, r12
    44b8:	65 01       	movw	r12, r10
    44ba:	e5 cf       	rjmp	.-54     	; 0x4486 <vfprintf+0x48>
    44bc:	10 e0       	ldi	r17, 0x00	; 0
    44be:	51 2c       	mov	r5, r1
    44c0:	91 2c       	mov	r9, r1
    44c2:	ff e1       	ldi	r31, 0x1F	; 31
    44c4:	f9 15       	cp	r31, r9
    44c6:	d8 f0       	brcs	.+54     	; 0x44fe <vfprintf+0xc0>
    44c8:	8b 32       	cpi	r24, 0x2B	; 43
    44ca:	79 f0       	breq	.+30     	; 0x44ea <vfprintf+0xac>
    44cc:	38 f4       	brcc	.+14     	; 0x44dc <vfprintf+0x9e>
    44ce:	80 32       	cpi	r24, 0x20	; 32
    44d0:	79 f0       	breq	.+30     	; 0x44f0 <vfprintf+0xb2>
    44d2:	83 32       	cpi	r24, 0x23	; 35
    44d4:	a1 f4       	brne	.+40     	; 0x44fe <vfprintf+0xc0>
    44d6:	f9 2d       	mov	r31, r9
    44d8:	f0 61       	ori	r31, 0x10	; 16
    44da:	2e c0       	rjmp	.+92     	; 0x4538 <vfprintf+0xfa>
    44dc:	8d 32       	cpi	r24, 0x2D	; 45
    44de:	61 f0       	breq	.+24     	; 0x44f8 <vfprintf+0xba>
    44e0:	80 33       	cpi	r24, 0x30	; 48
    44e2:	69 f4       	brne	.+26     	; 0x44fe <vfprintf+0xc0>
    44e4:	29 2d       	mov	r18, r9
    44e6:	21 60       	ori	r18, 0x01	; 1
    44e8:	2d c0       	rjmp	.+90     	; 0x4544 <vfprintf+0x106>
    44ea:	39 2d       	mov	r19, r9
    44ec:	32 60       	ori	r19, 0x02	; 2
    44ee:	93 2e       	mov	r9, r19
    44f0:	89 2d       	mov	r24, r9
    44f2:	84 60       	ori	r24, 0x04	; 4
    44f4:	98 2e       	mov	r9, r24
    44f6:	2a c0       	rjmp	.+84     	; 0x454c <vfprintf+0x10e>
    44f8:	e9 2d       	mov	r30, r9
    44fa:	e8 60       	ori	r30, 0x08	; 8
    44fc:	15 c0       	rjmp	.+42     	; 0x4528 <vfprintf+0xea>
    44fe:	97 fc       	sbrc	r9, 7
    4500:	2d c0       	rjmp	.+90     	; 0x455c <vfprintf+0x11e>
    4502:	20 ed       	ldi	r18, 0xD0	; 208
    4504:	28 0f       	add	r18, r24
    4506:	2a 30       	cpi	r18, 0x0A	; 10
    4508:	88 f4       	brcc	.+34     	; 0x452c <vfprintf+0xee>
    450a:	96 fe       	sbrs	r9, 6
    450c:	06 c0       	rjmp	.+12     	; 0x451a <vfprintf+0xdc>
    450e:	3a e0       	ldi	r19, 0x0A	; 10
    4510:	13 9f       	mul	r17, r19
    4512:	20 0d       	add	r18, r0
    4514:	11 24       	eor	r1, r1
    4516:	12 2f       	mov	r17, r18
    4518:	19 c0       	rjmp	.+50     	; 0x454c <vfprintf+0x10e>
    451a:	8a e0       	ldi	r24, 0x0A	; 10
    451c:	58 9e       	mul	r5, r24
    451e:	20 0d       	add	r18, r0
    4520:	11 24       	eor	r1, r1
    4522:	52 2e       	mov	r5, r18
    4524:	e9 2d       	mov	r30, r9
    4526:	e0 62       	ori	r30, 0x20	; 32
    4528:	9e 2e       	mov	r9, r30
    452a:	10 c0       	rjmp	.+32     	; 0x454c <vfprintf+0x10e>
    452c:	8e 32       	cpi	r24, 0x2E	; 46
    452e:	31 f4       	brne	.+12     	; 0x453c <vfprintf+0xfe>
    4530:	96 fc       	sbrc	r9, 6
    4532:	e5 c2       	rjmp	.+1482   	; 0x4afe <vfprintf+0x6c0>
    4534:	f9 2d       	mov	r31, r9
    4536:	f0 64       	ori	r31, 0x40	; 64
    4538:	9f 2e       	mov	r9, r31
    453a:	08 c0       	rjmp	.+16     	; 0x454c <vfprintf+0x10e>
    453c:	8c 36       	cpi	r24, 0x6C	; 108
    453e:	21 f4       	brne	.+8      	; 0x4548 <vfprintf+0x10a>
    4540:	29 2d       	mov	r18, r9
    4542:	20 68       	ori	r18, 0x80	; 128
    4544:	92 2e       	mov	r9, r18
    4546:	02 c0       	rjmp	.+4      	; 0x454c <vfprintf+0x10e>
    4548:	88 36       	cpi	r24, 0x68	; 104
    454a:	41 f4       	brne	.+16     	; 0x455c <vfprintf+0x11e>
    454c:	f1 01       	movw	r30, r2
    454e:	93 fd       	sbrc	r25, 3
    4550:	85 91       	lpm	r24, Z+
    4552:	93 ff       	sbrs	r25, 3
    4554:	81 91       	ld	r24, Z+
    4556:	1f 01       	movw	r2, r30
    4558:	81 11       	cpse	r24, r1
    455a:	b3 cf       	rjmp	.-154    	; 0x44c2 <vfprintf+0x84>
    455c:	9b eb       	ldi	r25, 0xBB	; 187
    455e:	98 0f       	add	r25, r24
    4560:	93 30       	cpi	r25, 0x03	; 3
    4562:	20 f4       	brcc	.+8      	; 0x456c <vfprintf+0x12e>
    4564:	99 2d       	mov	r25, r9
    4566:	90 61       	ori	r25, 0x10	; 16
    4568:	80 5e       	subi	r24, 0xE0	; 224
    456a:	07 c0       	rjmp	.+14     	; 0x457a <vfprintf+0x13c>
    456c:	9b e9       	ldi	r25, 0x9B	; 155
    456e:	98 0f       	add	r25, r24
    4570:	93 30       	cpi	r25, 0x03	; 3
    4572:	08 f0       	brcs	.+2      	; 0x4576 <vfprintf+0x138>
    4574:	66 c1       	rjmp	.+716    	; 0x4842 <vfprintf+0x404>
    4576:	99 2d       	mov	r25, r9
    4578:	9f 7e       	andi	r25, 0xEF	; 239
    457a:	96 ff       	sbrs	r25, 6
    457c:	16 e0       	ldi	r17, 0x06	; 6
    457e:	9f 73       	andi	r25, 0x3F	; 63
    4580:	99 2e       	mov	r9, r25
    4582:	85 36       	cpi	r24, 0x65	; 101
    4584:	19 f4       	brne	.+6      	; 0x458c <vfprintf+0x14e>
    4586:	90 64       	ori	r25, 0x40	; 64
    4588:	99 2e       	mov	r9, r25
    458a:	08 c0       	rjmp	.+16     	; 0x459c <vfprintf+0x15e>
    458c:	86 36       	cpi	r24, 0x66	; 102
    458e:	21 f4       	brne	.+8      	; 0x4598 <vfprintf+0x15a>
    4590:	39 2f       	mov	r19, r25
    4592:	30 68       	ori	r19, 0x80	; 128
    4594:	93 2e       	mov	r9, r19
    4596:	02 c0       	rjmp	.+4      	; 0x459c <vfprintf+0x15e>
    4598:	11 11       	cpse	r17, r1
    459a:	11 50       	subi	r17, 0x01	; 1
    459c:	97 fe       	sbrs	r9, 7
    459e:	07 c0       	rjmp	.+14     	; 0x45ae <vfprintf+0x170>
    45a0:	1c 33       	cpi	r17, 0x3C	; 60
    45a2:	50 f4       	brcc	.+20     	; 0x45b8 <vfprintf+0x17a>
    45a4:	44 24       	eor	r4, r4
    45a6:	43 94       	inc	r4
    45a8:	41 0e       	add	r4, r17
    45aa:	27 e0       	ldi	r18, 0x07	; 7
    45ac:	0b c0       	rjmp	.+22     	; 0x45c4 <vfprintf+0x186>
    45ae:	18 30       	cpi	r17, 0x08	; 8
    45b0:	38 f0       	brcs	.+14     	; 0x45c0 <vfprintf+0x182>
    45b2:	27 e0       	ldi	r18, 0x07	; 7
    45b4:	17 e0       	ldi	r17, 0x07	; 7
    45b6:	05 c0       	rjmp	.+10     	; 0x45c2 <vfprintf+0x184>
    45b8:	27 e0       	ldi	r18, 0x07	; 7
    45ba:	9c e3       	ldi	r25, 0x3C	; 60
    45bc:	49 2e       	mov	r4, r25
    45be:	02 c0       	rjmp	.+4      	; 0x45c4 <vfprintf+0x186>
    45c0:	21 2f       	mov	r18, r17
    45c2:	41 2c       	mov	r4, r1
    45c4:	56 01       	movw	r10, r12
    45c6:	84 e0       	ldi	r24, 0x04	; 4
    45c8:	a8 0e       	add	r10, r24
    45ca:	b1 1c       	adc	r11, r1
    45cc:	f6 01       	movw	r30, r12
    45ce:	60 81       	ld	r22, Z
    45d0:	71 81       	ldd	r23, Z+1	; 0x01
    45d2:	82 81       	ldd	r24, Z+2	; 0x02
    45d4:	93 81       	ldd	r25, Z+3	; 0x03
    45d6:	04 2d       	mov	r16, r4
    45d8:	a3 01       	movw	r20, r6
    45da:	0e 94 f0 28 	call	0x51e0	; 0x51e0 <__ftoa_engine>
    45de:	6c 01       	movw	r12, r24
    45e0:	f9 81       	ldd	r31, Y+1	; 0x01
    45e2:	fc 87       	std	Y+12, r31	; 0x0c
    45e4:	f0 ff       	sbrs	r31, 0
    45e6:	02 c0       	rjmp	.+4      	; 0x45ec <vfprintf+0x1ae>
    45e8:	f3 ff       	sbrs	r31, 3
    45ea:	06 c0       	rjmp	.+12     	; 0x45f8 <vfprintf+0x1ba>
    45ec:	91 fc       	sbrc	r9, 1
    45ee:	06 c0       	rjmp	.+12     	; 0x45fc <vfprintf+0x1be>
    45f0:	92 fe       	sbrs	r9, 2
    45f2:	06 c0       	rjmp	.+12     	; 0x4600 <vfprintf+0x1c2>
    45f4:	00 e2       	ldi	r16, 0x20	; 32
    45f6:	05 c0       	rjmp	.+10     	; 0x4602 <vfprintf+0x1c4>
    45f8:	0d e2       	ldi	r16, 0x2D	; 45
    45fa:	03 c0       	rjmp	.+6      	; 0x4602 <vfprintf+0x1c4>
    45fc:	0b e2       	ldi	r16, 0x2B	; 43
    45fe:	01 c0       	rjmp	.+2      	; 0x4602 <vfprintf+0x1c4>
    4600:	00 e0       	ldi	r16, 0x00	; 0
    4602:	8c 85       	ldd	r24, Y+12	; 0x0c
    4604:	8c 70       	andi	r24, 0x0C	; 12
    4606:	19 f0       	breq	.+6      	; 0x460e <vfprintf+0x1d0>
    4608:	01 11       	cpse	r16, r1
    460a:	5a c2       	rjmp	.+1204   	; 0x4ac0 <vfprintf+0x682>
    460c:	9b c2       	rjmp	.+1334   	; 0x4b44 <vfprintf+0x706>
    460e:	97 fe       	sbrs	r9, 7
    4610:	10 c0       	rjmp	.+32     	; 0x4632 <vfprintf+0x1f4>
    4612:	4c 0c       	add	r4, r12
    4614:	fc 85       	ldd	r31, Y+12	; 0x0c
    4616:	f4 ff       	sbrs	r31, 4
    4618:	04 c0       	rjmp	.+8      	; 0x4622 <vfprintf+0x1e4>
    461a:	8a 81       	ldd	r24, Y+2	; 0x02
    461c:	81 33       	cpi	r24, 0x31	; 49
    461e:	09 f4       	brne	.+2      	; 0x4622 <vfprintf+0x1e4>
    4620:	4a 94       	dec	r4
    4622:	14 14       	cp	r1, r4
    4624:	74 f5       	brge	.+92     	; 0x4682 <vfprintf+0x244>
    4626:	28 e0       	ldi	r18, 0x08	; 8
    4628:	24 15       	cp	r18, r4
    462a:	78 f5       	brcc	.+94     	; 0x468a <vfprintf+0x24c>
    462c:	88 e0       	ldi	r24, 0x08	; 8
    462e:	48 2e       	mov	r4, r24
    4630:	2c c0       	rjmp	.+88     	; 0x468a <vfprintf+0x24c>
    4632:	96 fc       	sbrc	r9, 6
    4634:	2a c0       	rjmp	.+84     	; 0x468a <vfprintf+0x24c>
    4636:	81 2f       	mov	r24, r17
    4638:	90 e0       	ldi	r25, 0x00	; 0
    463a:	8c 15       	cp	r24, r12
    463c:	9d 05       	cpc	r25, r13
    463e:	9c f0       	brlt	.+38     	; 0x4666 <vfprintf+0x228>
    4640:	3c ef       	ldi	r19, 0xFC	; 252
    4642:	c3 16       	cp	r12, r19
    4644:	3f ef       	ldi	r19, 0xFF	; 255
    4646:	d3 06       	cpc	r13, r19
    4648:	74 f0       	brlt	.+28     	; 0x4666 <vfprintf+0x228>
    464a:	89 2d       	mov	r24, r9
    464c:	80 68       	ori	r24, 0x80	; 128
    464e:	98 2e       	mov	r9, r24
    4650:	0a c0       	rjmp	.+20     	; 0x4666 <vfprintf+0x228>
    4652:	e2 e0       	ldi	r30, 0x02	; 2
    4654:	f0 e0       	ldi	r31, 0x00	; 0
    4656:	ec 0f       	add	r30, r28
    4658:	fd 1f       	adc	r31, r29
    465a:	e1 0f       	add	r30, r17
    465c:	f1 1d       	adc	r31, r1
    465e:	80 81       	ld	r24, Z
    4660:	80 33       	cpi	r24, 0x30	; 48
    4662:	19 f4       	brne	.+6      	; 0x466a <vfprintf+0x22c>
    4664:	11 50       	subi	r17, 0x01	; 1
    4666:	11 11       	cpse	r17, r1
    4668:	f4 cf       	rjmp	.-24     	; 0x4652 <vfprintf+0x214>
    466a:	97 fe       	sbrs	r9, 7
    466c:	0e c0       	rjmp	.+28     	; 0x468a <vfprintf+0x24c>
    466e:	44 24       	eor	r4, r4
    4670:	43 94       	inc	r4
    4672:	41 0e       	add	r4, r17
    4674:	81 2f       	mov	r24, r17
    4676:	90 e0       	ldi	r25, 0x00	; 0
    4678:	c8 16       	cp	r12, r24
    467a:	d9 06       	cpc	r13, r25
    467c:	2c f4       	brge	.+10     	; 0x4688 <vfprintf+0x24a>
    467e:	1c 19       	sub	r17, r12
    4680:	04 c0       	rjmp	.+8      	; 0x468a <vfprintf+0x24c>
    4682:	44 24       	eor	r4, r4
    4684:	43 94       	inc	r4
    4686:	01 c0       	rjmp	.+2      	; 0x468a <vfprintf+0x24c>
    4688:	10 e0       	ldi	r17, 0x00	; 0
    468a:	97 fe       	sbrs	r9, 7
    468c:	06 c0       	rjmp	.+12     	; 0x469a <vfprintf+0x25c>
    468e:	1c 14       	cp	r1, r12
    4690:	1d 04       	cpc	r1, r13
    4692:	34 f4       	brge	.+12     	; 0x46a0 <vfprintf+0x262>
    4694:	c6 01       	movw	r24, r12
    4696:	01 96       	adiw	r24, 0x01	; 1
    4698:	05 c0       	rjmp	.+10     	; 0x46a4 <vfprintf+0x266>
    469a:	85 e0       	ldi	r24, 0x05	; 5
    469c:	90 e0       	ldi	r25, 0x00	; 0
    469e:	02 c0       	rjmp	.+4      	; 0x46a4 <vfprintf+0x266>
    46a0:	81 e0       	ldi	r24, 0x01	; 1
    46a2:	90 e0       	ldi	r25, 0x00	; 0
    46a4:	01 11       	cpse	r16, r1
    46a6:	01 96       	adiw	r24, 0x01	; 1
    46a8:	11 23       	and	r17, r17
    46aa:	31 f0       	breq	.+12     	; 0x46b8 <vfprintf+0x27a>
    46ac:	21 2f       	mov	r18, r17
    46ae:	30 e0       	ldi	r19, 0x00	; 0
    46b0:	2f 5f       	subi	r18, 0xFF	; 255
    46b2:	3f 4f       	sbci	r19, 0xFF	; 255
    46b4:	82 0f       	add	r24, r18
    46b6:	93 1f       	adc	r25, r19
    46b8:	25 2d       	mov	r18, r5
    46ba:	30 e0       	ldi	r19, 0x00	; 0
    46bc:	82 17       	cp	r24, r18
    46be:	93 07       	cpc	r25, r19
    46c0:	14 f4       	brge	.+4      	; 0x46c6 <vfprintf+0x288>
    46c2:	58 1a       	sub	r5, r24
    46c4:	01 c0       	rjmp	.+2      	; 0x46c8 <vfprintf+0x28a>
    46c6:	51 2c       	mov	r5, r1
    46c8:	89 2d       	mov	r24, r9
    46ca:	89 70       	andi	r24, 0x09	; 9
    46cc:	49 f4       	brne	.+18     	; 0x46e0 <vfprintf+0x2a2>
    46ce:	55 20       	and	r5, r5
    46d0:	39 f0       	breq	.+14     	; 0x46e0 <vfprintf+0x2a2>
    46d2:	b7 01       	movw	r22, r14
    46d4:	80 e2       	ldi	r24, 0x20	; 32
    46d6:	90 e0       	ldi	r25, 0x00	; 0
    46d8:	0e 94 1c 2a 	call	0x5438	; 0x5438 <fputc>
    46dc:	5a 94       	dec	r5
    46de:	f7 cf       	rjmp	.-18     	; 0x46ce <vfprintf+0x290>
    46e0:	00 23       	and	r16, r16
    46e2:	29 f0       	breq	.+10     	; 0x46ee <vfprintf+0x2b0>
    46e4:	b7 01       	movw	r22, r14
    46e6:	80 2f       	mov	r24, r16
    46e8:	90 e0       	ldi	r25, 0x00	; 0
    46ea:	0e 94 1c 2a 	call	0x5438	; 0x5438 <fputc>
    46ee:	93 fc       	sbrc	r9, 3
    46f0:	09 c0       	rjmp	.+18     	; 0x4704 <vfprintf+0x2c6>
    46f2:	55 20       	and	r5, r5
    46f4:	39 f0       	breq	.+14     	; 0x4704 <vfprintf+0x2c6>
    46f6:	b7 01       	movw	r22, r14
    46f8:	80 e3       	ldi	r24, 0x30	; 48
    46fa:	90 e0       	ldi	r25, 0x00	; 0
    46fc:	0e 94 1c 2a 	call	0x5438	; 0x5438 <fputc>
    4700:	5a 94       	dec	r5
    4702:	f7 cf       	rjmp	.-18     	; 0x46f2 <vfprintf+0x2b4>
    4704:	97 fe       	sbrs	r9, 7
    4706:	4c c0       	rjmp	.+152    	; 0x47a0 <vfprintf+0x362>
    4708:	46 01       	movw	r8, r12
    470a:	d7 fe       	sbrs	r13, 7
    470c:	02 c0       	rjmp	.+4      	; 0x4712 <vfprintf+0x2d4>
    470e:	81 2c       	mov	r8, r1
    4710:	91 2c       	mov	r9, r1
    4712:	c6 01       	movw	r24, r12
    4714:	88 19       	sub	r24, r8
    4716:	99 09       	sbc	r25, r9
    4718:	f3 01       	movw	r30, r6
    471a:	e8 0f       	add	r30, r24
    471c:	f9 1f       	adc	r31, r25
    471e:	ed 87       	std	Y+13, r30	; 0x0d
    4720:	fe 87       	std	Y+14, r31	; 0x0e
    4722:	96 01       	movw	r18, r12
    4724:	24 19       	sub	r18, r4
    4726:	31 09       	sbc	r19, r1
    4728:	2f 87       	std	Y+15, r18	; 0x0f
    472a:	38 8b       	std	Y+16, r19	; 0x10
    472c:	01 2f       	mov	r16, r17
    472e:	10 e0       	ldi	r17, 0x00	; 0
    4730:	11 95       	neg	r17
    4732:	01 95       	neg	r16
    4734:	11 09       	sbc	r17, r1
    4736:	3f ef       	ldi	r19, 0xFF	; 255
    4738:	83 16       	cp	r8, r19
    473a:	93 06       	cpc	r9, r19
    473c:	29 f4       	brne	.+10     	; 0x4748 <vfprintf+0x30a>
    473e:	b7 01       	movw	r22, r14
    4740:	8e e2       	ldi	r24, 0x2E	; 46
    4742:	90 e0       	ldi	r25, 0x00	; 0
    4744:	0e 94 1c 2a 	call	0x5438	; 0x5438 <fputc>
    4748:	c8 14       	cp	r12, r8
    474a:	d9 04       	cpc	r13, r9
    474c:	4c f0       	brlt	.+18     	; 0x4760 <vfprintf+0x322>
    474e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4750:	98 89       	ldd	r25, Y+16	; 0x10
    4752:	88 15       	cp	r24, r8
    4754:	99 05       	cpc	r25, r9
    4756:	24 f4       	brge	.+8      	; 0x4760 <vfprintf+0x322>
    4758:	ed 85       	ldd	r30, Y+13	; 0x0d
    475a:	fe 85       	ldd	r31, Y+14	; 0x0e
    475c:	81 81       	ldd	r24, Z+1	; 0x01
    475e:	01 c0       	rjmp	.+2      	; 0x4762 <vfprintf+0x324>
    4760:	80 e3       	ldi	r24, 0x30	; 48
    4762:	f1 e0       	ldi	r31, 0x01	; 1
    4764:	8f 1a       	sub	r8, r31
    4766:	91 08       	sbc	r9, r1
    4768:	2d 85       	ldd	r18, Y+13	; 0x0d
    476a:	3e 85       	ldd	r19, Y+14	; 0x0e
    476c:	2f 5f       	subi	r18, 0xFF	; 255
    476e:	3f 4f       	sbci	r19, 0xFF	; 255
    4770:	2d 87       	std	Y+13, r18	; 0x0d
    4772:	3e 87       	std	Y+14, r19	; 0x0e
    4774:	80 16       	cp	r8, r16
    4776:	91 06       	cpc	r9, r17
    4778:	2c f0       	brlt	.+10     	; 0x4784 <vfprintf+0x346>
    477a:	b7 01       	movw	r22, r14
    477c:	90 e0       	ldi	r25, 0x00	; 0
    477e:	0e 94 1c 2a 	call	0x5438	; 0x5438 <fputc>
    4782:	d9 cf       	rjmp	.-78     	; 0x4736 <vfprintf+0x2f8>
    4784:	c8 14       	cp	r12, r8
    4786:	d9 04       	cpc	r13, r9
    4788:	41 f4       	brne	.+16     	; 0x479a <vfprintf+0x35c>
    478a:	9a 81       	ldd	r25, Y+2	; 0x02
    478c:	96 33       	cpi	r25, 0x36	; 54
    478e:	20 f4       	brcc	.+8      	; 0x4798 <vfprintf+0x35a>
    4790:	95 33       	cpi	r25, 0x35	; 53
    4792:	19 f4       	brne	.+6      	; 0x479a <vfprintf+0x35c>
    4794:	3c 85       	ldd	r19, Y+12	; 0x0c
    4796:	34 ff       	sbrs	r19, 4
    4798:	81 e3       	ldi	r24, 0x31	; 49
    479a:	b7 01       	movw	r22, r14
    479c:	90 e0       	ldi	r25, 0x00	; 0
    479e:	4e c0       	rjmp	.+156    	; 0x483c <vfprintf+0x3fe>
    47a0:	8a 81       	ldd	r24, Y+2	; 0x02
    47a2:	81 33       	cpi	r24, 0x31	; 49
    47a4:	19 f0       	breq	.+6      	; 0x47ac <vfprintf+0x36e>
    47a6:	9c 85       	ldd	r25, Y+12	; 0x0c
    47a8:	9f 7e       	andi	r25, 0xEF	; 239
    47aa:	9c 87       	std	Y+12, r25	; 0x0c
    47ac:	b7 01       	movw	r22, r14
    47ae:	90 e0       	ldi	r25, 0x00	; 0
    47b0:	0e 94 1c 2a 	call	0x5438	; 0x5438 <fputc>
    47b4:	11 11       	cpse	r17, r1
    47b6:	05 c0       	rjmp	.+10     	; 0x47c2 <vfprintf+0x384>
    47b8:	94 fc       	sbrc	r9, 4
    47ba:	18 c0       	rjmp	.+48     	; 0x47ec <vfprintf+0x3ae>
    47bc:	85 e6       	ldi	r24, 0x65	; 101
    47be:	90 e0       	ldi	r25, 0x00	; 0
    47c0:	17 c0       	rjmp	.+46     	; 0x47f0 <vfprintf+0x3b2>
    47c2:	b7 01       	movw	r22, r14
    47c4:	8e e2       	ldi	r24, 0x2E	; 46
    47c6:	90 e0       	ldi	r25, 0x00	; 0
    47c8:	0e 94 1c 2a 	call	0x5438	; 0x5438 <fputc>
    47cc:	1e 5f       	subi	r17, 0xFE	; 254
    47ce:	82 e0       	ldi	r24, 0x02	; 2
    47d0:	01 e0       	ldi	r16, 0x01	; 1
    47d2:	08 0f       	add	r16, r24
    47d4:	f3 01       	movw	r30, r6
    47d6:	e8 0f       	add	r30, r24
    47d8:	f1 1d       	adc	r31, r1
    47da:	80 81       	ld	r24, Z
    47dc:	b7 01       	movw	r22, r14
    47de:	90 e0       	ldi	r25, 0x00	; 0
    47e0:	0e 94 1c 2a 	call	0x5438	; 0x5438 <fputc>
    47e4:	80 2f       	mov	r24, r16
    47e6:	01 13       	cpse	r16, r17
    47e8:	f3 cf       	rjmp	.-26     	; 0x47d0 <vfprintf+0x392>
    47ea:	e6 cf       	rjmp	.-52     	; 0x47b8 <vfprintf+0x37a>
    47ec:	85 e4       	ldi	r24, 0x45	; 69
    47ee:	90 e0       	ldi	r25, 0x00	; 0
    47f0:	b7 01       	movw	r22, r14
    47f2:	0e 94 1c 2a 	call	0x5438	; 0x5438 <fputc>
    47f6:	d7 fc       	sbrc	r13, 7
    47f8:	06 c0       	rjmp	.+12     	; 0x4806 <vfprintf+0x3c8>
    47fa:	c1 14       	cp	r12, r1
    47fc:	d1 04       	cpc	r13, r1
    47fe:	41 f4       	brne	.+16     	; 0x4810 <vfprintf+0x3d2>
    4800:	ec 85       	ldd	r30, Y+12	; 0x0c
    4802:	e4 ff       	sbrs	r30, 4
    4804:	05 c0       	rjmp	.+10     	; 0x4810 <vfprintf+0x3d2>
    4806:	d1 94       	neg	r13
    4808:	c1 94       	neg	r12
    480a:	d1 08       	sbc	r13, r1
    480c:	8d e2       	ldi	r24, 0x2D	; 45
    480e:	01 c0       	rjmp	.+2      	; 0x4812 <vfprintf+0x3d4>
    4810:	8b e2       	ldi	r24, 0x2B	; 43
    4812:	b7 01       	movw	r22, r14
    4814:	90 e0       	ldi	r25, 0x00	; 0
    4816:	0e 94 1c 2a 	call	0x5438	; 0x5438 <fputc>
    481a:	80 e3       	ldi	r24, 0x30	; 48
    481c:	2a e0       	ldi	r18, 0x0A	; 10
    481e:	c2 16       	cp	r12, r18
    4820:	d1 04       	cpc	r13, r1
    4822:	2c f0       	brlt	.+10     	; 0x482e <vfprintf+0x3f0>
    4824:	8f 5f       	subi	r24, 0xFF	; 255
    4826:	fa e0       	ldi	r31, 0x0A	; 10
    4828:	cf 1a       	sub	r12, r31
    482a:	d1 08       	sbc	r13, r1
    482c:	f7 cf       	rjmp	.-18     	; 0x481c <vfprintf+0x3de>
    482e:	b7 01       	movw	r22, r14
    4830:	90 e0       	ldi	r25, 0x00	; 0
    4832:	0e 94 1c 2a 	call	0x5438	; 0x5438 <fputc>
    4836:	b7 01       	movw	r22, r14
    4838:	c6 01       	movw	r24, r12
    483a:	c0 96       	adiw	r24, 0x30	; 48
    483c:	0e 94 1c 2a 	call	0x5438	; 0x5438 <fputc>
    4840:	54 c1       	rjmp	.+680    	; 0x4aea <vfprintf+0x6ac>
    4842:	83 36       	cpi	r24, 0x63	; 99
    4844:	31 f0       	breq	.+12     	; 0x4852 <vfprintf+0x414>
    4846:	83 37       	cpi	r24, 0x73	; 115
    4848:	79 f0       	breq	.+30     	; 0x4868 <vfprintf+0x42a>
    484a:	83 35       	cpi	r24, 0x53	; 83
    484c:	09 f0       	breq	.+2      	; 0x4850 <vfprintf+0x412>
    484e:	56 c0       	rjmp	.+172    	; 0x48fc <vfprintf+0x4be>
    4850:	20 c0       	rjmp	.+64     	; 0x4892 <vfprintf+0x454>
    4852:	56 01       	movw	r10, r12
    4854:	32 e0       	ldi	r19, 0x02	; 2
    4856:	a3 0e       	add	r10, r19
    4858:	b1 1c       	adc	r11, r1
    485a:	f6 01       	movw	r30, r12
    485c:	80 81       	ld	r24, Z
    485e:	89 83       	std	Y+1, r24	; 0x01
    4860:	01 e0       	ldi	r16, 0x01	; 1
    4862:	10 e0       	ldi	r17, 0x00	; 0
    4864:	63 01       	movw	r12, r6
    4866:	12 c0       	rjmp	.+36     	; 0x488c <vfprintf+0x44e>
    4868:	56 01       	movw	r10, r12
    486a:	f2 e0       	ldi	r31, 0x02	; 2
    486c:	af 0e       	add	r10, r31
    486e:	b1 1c       	adc	r11, r1
    4870:	f6 01       	movw	r30, r12
    4872:	c0 80       	ld	r12, Z
    4874:	d1 80       	ldd	r13, Z+1	; 0x01
    4876:	96 fe       	sbrs	r9, 6
    4878:	03 c0       	rjmp	.+6      	; 0x4880 <vfprintf+0x442>
    487a:	61 2f       	mov	r22, r17
    487c:	70 e0       	ldi	r23, 0x00	; 0
    487e:	02 c0       	rjmp	.+4      	; 0x4884 <vfprintf+0x446>
    4880:	6f ef       	ldi	r22, 0xFF	; 255
    4882:	7f ef       	ldi	r23, 0xFF	; 255
    4884:	c6 01       	movw	r24, r12
    4886:	0e 94 f4 29 	call	0x53e8	; 0x53e8 <strnlen>
    488a:	8c 01       	movw	r16, r24
    488c:	f9 2d       	mov	r31, r9
    488e:	ff 77       	andi	r31, 0x7F	; 127
    4890:	14 c0       	rjmp	.+40     	; 0x48ba <vfprintf+0x47c>
    4892:	56 01       	movw	r10, r12
    4894:	22 e0       	ldi	r18, 0x02	; 2
    4896:	a2 0e       	add	r10, r18
    4898:	b1 1c       	adc	r11, r1
    489a:	f6 01       	movw	r30, r12
    489c:	c0 80       	ld	r12, Z
    489e:	d1 80       	ldd	r13, Z+1	; 0x01
    48a0:	96 fe       	sbrs	r9, 6
    48a2:	03 c0       	rjmp	.+6      	; 0x48aa <vfprintf+0x46c>
    48a4:	61 2f       	mov	r22, r17
    48a6:	70 e0       	ldi	r23, 0x00	; 0
    48a8:	02 c0       	rjmp	.+4      	; 0x48ae <vfprintf+0x470>
    48aa:	6f ef       	ldi	r22, 0xFF	; 255
    48ac:	7f ef       	ldi	r23, 0xFF	; 255
    48ae:	c6 01       	movw	r24, r12
    48b0:	0e 94 e9 29 	call	0x53d2	; 0x53d2 <strnlen_P>
    48b4:	8c 01       	movw	r16, r24
    48b6:	f9 2d       	mov	r31, r9
    48b8:	f0 68       	ori	r31, 0x80	; 128
    48ba:	9f 2e       	mov	r9, r31
    48bc:	f3 fd       	sbrc	r31, 3
    48be:	1a c0       	rjmp	.+52     	; 0x48f4 <vfprintf+0x4b6>
    48c0:	85 2d       	mov	r24, r5
    48c2:	90 e0       	ldi	r25, 0x00	; 0
    48c4:	08 17       	cp	r16, r24
    48c6:	19 07       	cpc	r17, r25
    48c8:	a8 f4       	brcc	.+42     	; 0x48f4 <vfprintf+0x4b6>
    48ca:	b7 01       	movw	r22, r14
    48cc:	80 e2       	ldi	r24, 0x20	; 32
    48ce:	90 e0       	ldi	r25, 0x00	; 0
    48d0:	0e 94 1c 2a 	call	0x5438	; 0x5438 <fputc>
    48d4:	5a 94       	dec	r5
    48d6:	f4 cf       	rjmp	.-24     	; 0x48c0 <vfprintf+0x482>
    48d8:	f6 01       	movw	r30, r12
    48da:	97 fc       	sbrc	r9, 7
    48dc:	85 91       	lpm	r24, Z+
    48de:	97 fe       	sbrs	r9, 7
    48e0:	81 91       	ld	r24, Z+
    48e2:	6f 01       	movw	r12, r30
    48e4:	b7 01       	movw	r22, r14
    48e6:	90 e0       	ldi	r25, 0x00	; 0
    48e8:	0e 94 1c 2a 	call	0x5438	; 0x5438 <fputc>
    48ec:	51 10       	cpse	r5, r1
    48ee:	5a 94       	dec	r5
    48f0:	01 50       	subi	r16, 0x01	; 1
    48f2:	11 09       	sbc	r17, r1
    48f4:	01 15       	cp	r16, r1
    48f6:	11 05       	cpc	r17, r1
    48f8:	79 f7       	brne	.-34     	; 0x48d8 <vfprintf+0x49a>
    48fa:	f7 c0       	rjmp	.+494    	; 0x4aea <vfprintf+0x6ac>
    48fc:	84 36       	cpi	r24, 0x64	; 100
    48fe:	11 f0       	breq	.+4      	; 0x4904 <vfprintf+0x4c6>
    4900:	89 36       	cpi	r24, 0x69	; 105
    4902:	61 f5       	brne	.+88     	; 0x495c <vfprintf+0x51e>
    4904:	56 01       	movw	r10, r12
    4906:	97 fe       	sbrs	r9, 7
    4908:	09 c0       	rjmp	.+18     	; 0x491c <vfprintf+0x4de>
    490a:	24 e0       	ldi	r18, 0x04	; 4
    490c:	a2 0e       	add	r10, r18
    490e:	b1 1c       	adc	r11, r1
    4910:	f6 01       	movw	r30, r12
    4912:	60 81       	ld	r22, Z
    4914:	71 81       	ldd	r23, Z+1	; 0x01
    4916:	82 81       	ldd	r24, Z+2	; 0x02
    4918:	93 81       	ldd	r25, Z+3	; 0x03
    491a:	0a c0       	rjmp	.+20     	; 0x4930 <vfprintf+0x4f2>
    491c:	f2 e0       	ldi	r31, 0x02	; 2
    491e:	af 0e       	add	r10, r31
    4920:	b1 1c       	adc	r11, r1
    4922:	f6 01       	movw	r30, r12
    4924:	60 81       	ld	r22, Z
    4926:	71 81       	ldd	r23, Z+1	; 0x01
    4928:	07 2e       	mov	r0, r23
    492a:	00 0c       	add	r0, r0
    492c:	88 0b       	sbc	r24, r24
    492e:	99 0b       	sbc	r25, r25
    4930:	f9 2d       	mov	r31, r9
    4932:	ff 76       	andi	r31, 0x6F	; 111
    4934:	9f 2e       	mov	r9, r31
    4936:	97 ff       	sbrs	r25, 7
    4938:	09 c0       	rjmp	.+18     	; 0x494c <vfprintf+0x50e>
    493a:	90 95       	com	r25
    493c:	80 95       	com	r24
    493e:	70 95       	com	r23
    4940:	61 95       	neg	r22
    4942:	7f 4f       	sbci	r23, 0xFF	; 255
    4944:	8f 4f       	sbci	r24, 0xFF	; 255
    4946:	9f 4f       	sbci	r25, 0xFF	; 255
    4948:	f0 68       	ori	r31, 0x80	; 128
    494a:	9f 2e       	mov	r9, r31
    494c:	2a e0       	ldi	r18, 0x0A	; 10
    494e:	30 e0       	ldi	r19, 0x00	; 0
    4950:	a3 01       	movw	r20, r6
    4952:	0e 94 8f 2a 	call	0x551e	; 0x551e <__ultoa_invert>
    4956:	c8 2e       	mov	r12, r24
    4958:	c6 18       	sub	r12, r6
    495a:	3f c0       	rjmp	.+126    	; 0x49da <vfprintf+0x59c>
    495c:	09 2d       	mov	r16, r9
    495e:	85 37       	cpi	r24, 0x75	; 117
    4960:	21 f4       	brne	.+8      	; 0x496a <vfprintf+0x52c>
    4962:	0f 7e       	andi	r16, 0xEF	; 239
    4964:	2a e0       	ldi	r18, 0x0A	; 10
    4966:	30 e0       	ldi	r19, 0x00	; 0
    4968:	1d c0       	rjmp	.+58     	; 0x49a4 <vfprintf+0x566>
    496a:	09 7f       	andi	r16, 0xF9	; 249
    496c:	8f 36       	cpi	r24, 0x6F	; 111
    496e:	91 f0       	breq	.+36     	; 0x4994 <vfprintf+0x556>
    4970:	18 f4       	brcc	.+6      	; 0x4978 <vfprintf+0x53a>
    4972:	88 35       	cpi	r24, 0x58	; 88
    4974:	59 f0       	breq	.+22     	; 0x498c <vfprintf+0x54e>
    4976:	c3 c0       	rjmp	.+390    	; 0x4afe <vfprintf+0x6c0>
    4978:	80 37       	cpi	r24, 0x70	; 112
    497a:	19 f0       	breq	.+6      	; 0x4982 <vfprintf+0x544>
    497c:	88 37       	cpi	r24, 0x78	; 120
    497e:	11 f0       	breq	.+4      	; 0x4984 <vfprintf+0x546>
    4980:	be c0       	rjmp	.+380    	; 0x4afe <vfprintf+0x6c0>
    4982:	00 61       	ori	r16, 0x10	; 16
    4984:	04 ff       	sbrs	r16, 4
    4986:	09 c0       	rjmp	.+18     	; 0x499a <vfprintf+0x55c>
    4988:	04 60       	ori	r16, 0x04	; 4
    498a:	07 c0       	rjmp	.+14     	; 0x499a <vfprintf+0x55c>
    498c:	94 fe       	sbrs	r9, 4
    498e:	08 c0       	rjmp	.+16     	; 0x49a0 <vfprintf+0x562>
    4990:	06 60       	ori	r16, 0x06	; 6
    4992:	06 c0       	rjmp	.+12     	; 0x49a0 <vfprintf+0x562>
    4994:	28 e0       	ldi	r18, 0x08	; 8
    4996:	30 e0       	ldi	r19, 0x00	; 0
    4998:	05 c0       	rjmp	.+10     	; 0x49a4 <vfprintf+0x566>
    499a:	20 e1       	ldi	r18, 0x10	; 16
    499c:	30 e0       	ldi	r19, 0x00	; 0
    499e:	02 c0       	rjmp	.+4      	; 0x49a4 <vfprintf+0x566>
    49a0:	20 e1       	ldi	r18, 0x10	; 16
    49a2:	32 e0       	ldi	r19, 0x02	; 2
    49a4:	56 01       	movw	r10, r12
    49a6:	07 ff       	sbrs	r16, 7
    49a8:	09 c0       	rjmp	.+18     	; 0x49bc <vfprintf+0x57e>
    49aa:	84 e0       	ldi	r24, 0x04	; 4
    49ac:	a8 0e       	add	r10, r24
    49ae:	b1 1c       	adc	r11, r1
    49b0:	f6 01       	movw	r30, r12
    49b2:	60 81       	ld	r22, Z
    49b4:	71 81       	ldd	r23, Z+1	; 0x01
    49b6:	82 81       	ldd	r24, Z+2	; 0x02
    49b8:	93 81       	ldd	r25, Z+3	; 0x03
    49ba:	08 c0       	rjmp	.+16     	; 0x49cc <vfprintf+0x58e>
    49bc:	f2 e0       	ldi	r31, 0x02	; 2
    49be:	af 0e       	add	r10, r31
    49c0:	b1 1c       	adc	r11, r1
    49c2:	f6 01       	movw	r30, r12
    49c4:	60 81       	ld	r22, Z
    49c6:	71 81       	ldd	r23, Z+1	; 0x01
    49c8:	80 e0       	ldi	r24, 0x00	; 0
    49ca:	90 e0       	ldi	r25, 0x00	; 0
    49cc:	a3 01       	movw	r20, r6
    49ce:	0e 94 8f 2a 	call	0x551e	; 0x551e <__ultoa_invert>
    49d2:	c8 2e       	mov	r12, r24
    49d4:	c6 18       	sub	r12, r6
    49d6:	0f 77       	andi	r16, 0x7F	; 127
    49d8:	90 2e       	mov	r9, r16
    49da:	96 fe       	sbrs	r9, 6
    49dc:	0b c0       	rjmp	.+22     	; 0x49f4 <vfprintf+0x5b6>
    49de:	09 2d       	mov	r16, r9
    49e0:	0e 7f       	andi	r16, 0xFE	; 254
    49e2:	c1 16       	cp	r12, r17
    49e4:	50 f4       	brcc	.+20     	; 0x49fa <vfprintf+0x5bc>
    49e6:	94 fe       	sbrs	r9, 4
    49e8:	0a c0       	rjmp	.+20     	; 0x49fe <vfprintf+0x5c0>
    49ea:	92 fc       	sbrc	r9, 2
    49ec:	08 c0       	rjmp	.+16     	; 0x49fe <vfprintf+0x5c0>
    49ee:	09 2d       	mov	r16, r9
    49f0:	0e 7e       	andi	r16, 0xEE	; 238
    49f2:	05 c0       	rjmp	.+10     	; 0x49fe <vfprintf+0x5c0>
    49f4:	dc 2c       	mov	r13, r12
    49f6:	09 2d       	mov	r16, r9
    49f8:	03 c0       	rjmp	.+6      	; 0x4a00 <vfprintf+0x5c2>
    49fa:	dc 2c       	mov	r13, r12
    49fc:	01 c0       	rjmp	.+2      	; 0x4a00 <vfprintf+0x5c2>
    49fe:	d1 2e       	mov	r13, r17
    4a00:	04 ff       	sbrs	r16, 4
    4a02:	0d c0       	rjmp	.+26     	; 0x4a1e <vfprintf+0x5e0>
    4a04:	fe 01       	movw	r30, r28
    4a06:	ec 0d       	add	r30, r12
    4a08:	f1 1d       	adc	r31, r1
    4a0a:	80 81       	ld	r24, Z
    4a0c:	80 33       	cpi	r24, 0x30	; 48
    4a0e:	11 f4       	brne	.+4      	; 0x4a14 <vfprintf+0x5d6>
    4a10:	09 7e       	andi	r16, 0xE9	; 233
    4a12:	09 c0       	rjmp	.+18     	; 0x4a26 <vfprintf+0x5e8>
    4a14:	02 ff       	sbrs	r16, 2
    4a16:	06 c0       	rjmp	.+12     	; 0x4a24 <vfprintf+0x5e6>
    4a18:	d3 94       	inc	r13
    4a1a:	d3 94       	inc	r13
    4a1c:	04 c0       	rjmp	.+8      	; 0x4a26 <vfprintf+0x5e8>
    4a1e:	80 2f       	mov	r24, r16
    4a20:	86 78       	andi	r24, 0x86	; 134
    4a22:	09 f0       	breq	.+2      	; 0x4a26 <vfprintf+0x5e8>
    4a24:	d3 94       	inc	r13
    4a26:	03 fd       	sbrc	r16, 3
    4a28:	11 c0       	rjmp	.+34     	; 0x4a4c <vfprintf+0x60e>
    4a2a:	00 ff       	sbrs	r16, 0
    4a2c:	06 c0       	rjmp	.+12     	; 0x4a3a <vfprintf+0x5fc>
    4a2e:	1c 2d       	mov	r17, r12
    4a30:	d5 14       	cp	r13, r5
    4a32:	80 f4       	brcc	.+32     	; 0x4a54 <vfprintf+0x616>
    4a34:	15 0d       	add	r17, r5
    4a36:	1d 19       	sub	r17, r13
    4a38:	0d c0       	rjmp	.+26     	; 0x4a54 <vfprintf+0x616>
    4a3a:	d5 14       	cp	r13, r5
    4a3c:	58 f4       	brcc	.+22     	; 0x4a54 <vfprintf+0x616>
    4a3e:	b7 01       	movw	r22, r14
    4a40:	80 e2       	ldi	r24, 0x20	; 32
    4a42:	90 e0       	ldi	r25, 0x00	; 0
    4a44:	0e 94 1c 2a 	call	0x5438	; 0x5438 <fputc>
    4a48:	d3 94       	inc	r13
    4a4a:	f7 cf       	rjmp	.-18     	; 0x4a3a <vfprintf+0x5fc>
    4a4c:	d5 14       	cp	r13, r5
    4a4e:	10 f4       	brcc	.+4      	; 0x4a54 <vfprintf+0x616>
    4a50:	5d 18       	sub	r5, r13
    4a52:	01 c0       	rjmp	.+2      	; 0x4a56 <vfprintf+0x618>
    4a54:	51 2c       	mov	r5, r1
    4a56:	04 ff       	sbrs	r16, 4
    4a58:	10 c0       	rjmp	.+32     	; 0x4a7a <vfprintf+0x63c>
    4a5a:	b7 01       	movw	r22, r14
    4a5c:	80 e3       	ldi	r24, 0x30	; 48
    4a5e:	90 e0       	ldi	r25, 0x00	; 0
    4a60:	0e 94 1c 2a 	call	0x5438	; 0x5438 <fputc>
    4a64:	02 ff       	sbrs	r16, 2
    4a66:	17 c0       	rjmp	.+46     	; 0x4a96 <vfprintf+0x658>
    4a68:	01 fd       	sbrc	r16, 1
    4a6a:	03 c0       	rjmp	.+6      	; 0x4a72 <vfprintf+0x634>
    4a6c:	88 e7       	ldi	r24, 0x78	; 120
    4a6e:	90 e0       	ldi	r25, 0x00	; 0
    4a70:	02 c0       	rjmp	.+4      	; 0x4a76 <vfprintf+0x638>
    4a72:	88 e5       	ldi	r24, 0x58	; 88
    4a74:	90 e0       	ldi	r25, 0x00	; 0
    4a76:	b7 01       	movw	r22, r14
    4a78:	0c c0       	rjmp	.+24     	; 0x4a92 <vfprintf+0x654>
    4a7a:	80 2f       	mov	r24, r16
    4a7c:	86 78       	andi	r24, 0x86	; 134
    4a7e:	59 f0       	breq	.+22     	; 0x4a96 <vfprintf+0x658>
    4a80:	01 ff       	sbrs	r16, 1
    4a82:	02 c0       	rjmp	.+4      	; 0x4a88 <vfprintf+0x64a>
    4a84:	8b e2       	ldi	r24, 0x2B	; 43
    4a86:	01 c0       	rjmp	.+2      	; 0x4a8a <vfprintf+0x64c>
    4a88:	80 e2       	ldi	r24, 0x20	; 32
    4a8a:	07 fd       	sbrc	r16, 7
    4a8c:	8d e2       	ldi	r24, 0x2D	; 45
    4a8e:	b7 01       	movw	r22, r14
    4a90:	90 e0       	ldi	r25, 0x00	; 0
    4a92:	0e 94 1c 2a 	call	0x5438	; 0x5438 <fputc>
    4a96:	c1 16       	cp	r12, r17
    4a98:	38 f4       	brcc	.+14     	; 0x4aa8 <vfprintf+0x66a>
    4a9a:	b7 01       	movw	r22, r14
    4a9c:	80 e3       	ldi	r24, 0x30	; 48
    4a9e:	90 e0       	ldi	r25, 0x00	; 0
    4aa0:	0e 94 1c 2a 	call	0x5438	; 0x5438 <fputc>
    4aa4:	11 50       	subi	r17, 0x01	; 1
    4aa6:	f7 cf       	rjmp	.-18     	; 0x4a96 <vfprintf+0x658>
    4aa8:	ca 94       	dec	r12
    4aaa:	f3 01       	movw	r30, r6
    4aac:	ec 0d       	add	r30, r12
    4aae:	f1 1d       	adc	r31, r1
    4ab0:	80 81       	ld	r24, Z
    4ab2:	b7 01       	movw	r22, r14
    4ab4:	90 e0       	ldi	r25, 0x00	; 0
    4ab6:	0e 94 1c 2a 	call	0x5438	; 0x5438 <fputc>
    4aba:	c1 10       	cpse	r12, r1
    4abc:	f5 cf       	rjmp	.-22     	; 0x4aa8 <vfprintf+0x66a>
    4abe:	15 c0       	rjmp	.+42     	; 0x4aea <vfprintf+0x6ac>
    4ac0:	f4 e0       	ldi	r31, 0x04	; 4
    4ac2:	f5 15       	cp	r31, r5
    4ac4:	60 f5       	brcc	.+88     	; 0x4b1e <vfprintf+0x6e0>
    4ac6:	84 e0       	ldi	r24, 0x04	; 4
    4ac8:	58 1a       	sub	r5, r24
    4aca:	93 fe       	sbrs	r9, 3
    4acc:	1f c0       	rjmp	.+62     	; 0x4b0c <vfprintf+0x6ce>
    4ace:	01 11       	cpse	r16, r1
    4ad0:	27 c0       	rjmp	.+78     	; 0x4b20 <vfprintf+0x6e2>
    4ad2:	2c 85       	ldd	r18, Y+12	; 0x0c
    4ad4:	23 ff       	sbrs	r18, 3
    4ad6:	2a c0       	rjmp	.+84     	; 0x4b2c <vfprintf+0x6ee>
    4ad8:	00 e6       	ldi	r16, 0x60	; 96
    4ada:	12 e0       	ldi	r17, 0x02	; 2
    4adc:	39 2d       	mov	r19, r9
    4ade:	30 71       	andi	r19, 0x10	; 16
    4ae0:	93 2e       	mov	r9, r19
    4ae2:	f8 01       	movw	r30, r16
    4ae4:	84 91       	lpm	r24, Z
    4ae6:	81 11       	cpse	r24, r1
    4ae8:	24 c0       	rjmp	.+72     	; 0x4b32 <vfprintf+0x6f4>
    4aea:	55 20       	and	r5, r5
    4aec:	09 f4       	brne	.+2      	; 0x4af0 <vfprintf+0x6b2>
    4aee:	e4 cc       	rjmp	.-1592   	; 0x44b8 <vfprintf+0x7a>
    4af0:	b7 01       	movw	r22, r14
    4af2:	80 e2       	ldi	r24, 0x20	; 32
    4af4:	90 e0       	ldi	r25, 0x00	; 0
    4af6:	0e 94 1c 2a 	call	0x5438	; 0x5438 <fputc>
    4afa:	5a 94       	dec	r5
    4afc:	f6 cf       	rjmp	.-20     	; 0x4aea <vfprintf+0x6ac>
    4afe:	f7 01       	movw	r30, r14
    4b00:	86 81       	ldd	r24, Z+6	; 0x06
    4b02:	97 81       	ldd	r25, Z+7	; 0x07
    4b04:	26 c0       	rjmp	.+76     	; 0x4b52 <vfprintf+0x714>
    4b06:	8f ef       	ldi	r24, 0xFF	; 255
    4b08:	9f ef       	ldi	r25, 0xFF	; 255
    4b0a:	23 c0       	rjmp	.+70     	; 0x4b52 <vfprintf+0x714>
    4b0c:	b7 01       	movw	r22, r14
    4b0e:	80 e2       	ldi	r24, 0x20	; 32
    4b10:	90 e0       	ldi	r25, 0x00	; 0
    4b12:	0e 94 1c 2a 	call	0x5438	; 0x5438 <fputc>
    4b16:	5a 94       	dec	r5
    4b18:	51 10       	cpse	r5, r1
    4b1a:	f8 cf       	rjmp	.-16     	; 0x4b0c <vfprintf+0x6ce>
    4b1c:	d8 cf       	rjmp	.-80     	; 0x4ace <vfprintf+0x690>
    4b1e:	51 2c       	mov	r5, r1
    4b20:	b7 01       	movw	r22, r14
    4b22:	80 2f       	mov	r24, r16
    4b24:	90 e0       	ldi	r25, 0x00	; 0
    4b26:	0e 94 1c 2a 	call	0x5438	; 0x5438 <fputc>
    4b2a:	d3 cf       	rjmp	.-90     	; 0x4ad2 <vfprintf+0x694>
    4b2c:	04 e6       	ldi	r16, 0x64	; 100
    4b2e:	12 e0       	ldi	r17, 0x02	; 2
    4b30:	d5 cf       	rjmp	.-86     	; 0x4adc <vfprintf+0x69e>
    4b32:	91 10       	cpse	r9, r1
    4b34:	80 52       	subi	r24, 0x20	; 32
    4b36:	b7 01       	movw	r22, r14
    4b38:	90 e0       	ldi	r25, 0x00	; 0
    4b3a:	0e 94 1c 2a 	call	0x5438	; 0x5438 <fputc>
    4b3e:	0f 5f       	subi	r16, 0xFF	; 255
    4b40:	1f 4f       	sbci	r17, 0xFF	; 255
    4b42:	cf cf       	rjmp	.-98     	; 0x4ae2 <vfprintf+0x6a4>
    4b44:	23 e0       	ldi	r18, 0x03	; 3
    4b46:	25 15       	cp	r18, r5
    4b48:	10 f4       	brcc	.+4      	; 0x4b4e <vfprintf+0x710>
    4b4a:	83 e0       	ldi	r24, 0x03	; 3
    4b4c:	bd cf       	rjmp	.-134    	; 0x4ac8 <vfprintf+0x68a>
    4b4e:	51 2c       	mov	r5, r1
    4b50:	c0 cf       	rjmp	.-128    	; 0x4ad2 <vfprintf+0x694>
    4b52:	60 96       	adiw	r28, 0x10	; 16
    4b54:	cd bf       	out	0x3d, r28	; 61
    4b56:	de bf       	out	0x3e, r29	; 62
    4b58:	df 91       	pop	r29
    4b5a:	cf 91       	pop	r28
    4b5c:	1f 91       	pop	r17
    4b5e:	0f 91       	pop	r16
    4b60:	ff 90       	pop	r15
    4b62:	ef 90       	pop	r14
    4b64:	df 90       	pop	r13
    4b66:	cf 90       	pop	r12
    4b68:	bf 90       	pop	r11
    4b6a:	af 90       	pop	r10
    4b6c:	9f 90       	pop	r9
    4b6e:	8f 90       	pop	r8
    4b70:	7f 90       	pop	r7
    4b72:	6f 90       	pop	r6
    4b74:	5f 90       	pop	r5
    4b76:	4f 90       	pop	r4
    4b78:	3f 90       	pop	r3
    4b7a:	2f 90       	pop	r2
    4b7c:	08 95       	ret

00004b7e <__mulsi3>:
    4b7e:	db 01       	movw	r26, r22
    4b80:	8f 93       	push	r24
    4b82:	9f 93       	push	r25
    4b84:	0e 94 d8 25 	call	0x4bb0	; 0x4bb0 <__muluhisi3>
    4b88:	bf 91       	pop	r27
    4b8a:	af 91       	pop	r26
    4b8c:	a2 9f       	mul	r26, r18
    4b8e:	80 0d       	add	r24, r0
    4b90:	91 1d       	adc	r25, r1
    4b92:	a3 9f       	mul	r26, r19
    4b94:	90 0d       	add	r25, r0
    4b96:	b2 9f       	mul	r27, r18
    4b98:	90 0d       	add	r25, r0
    4b9a:	11 24       	eor	r1, r1
    4b9c:	08 95       	ret

00004b9e <__tablejump2__>:
    4b9e:	ee 0f       	add	r30, r30
    4ba0:	ff 1f       	adc	r31, r31
    4ba2:	00 24       	eor	r0, r0
    4ba4:	00 1c       	adc	r0, r0
    4ba6:	0b be       	out	0x3b, r0	; 59
    4ba8:	07 90       	elpm	r0, Z+
    4baa:	f6 91       	elpm	r31, Z
    4bac:	e0 2d       	mov	r30, r0
    4bae:	09 94       	ijmp

00004bb0 <__muluhisi3>:
    4bb0:	0e 94 1f 26 	call	0x4c3e	; 0x4c3e <__umulhisi3>
    4bb4:	a5 9f       	mul	r26, r21
    4bb6:	90 0d       	add	r25, r0
    4bb8:	b4 9f       	mul	r27, r20
    4bba:	90 0d       	add	r25, r0
    4bbc:	a4 9f       	mul	r26, r20
    4bbe:	80 0d       	add	r24, r0
    4bc0:	91 1d       	adc	r25, r1
    4bc2:	11 24       	eor	r1, r1
    4bc4:	08 95       	ret

00004bc6 <__ashrdi3>:
    4bc6:	97 fb       	bst	r25, 7
    4bc8:	10 f8       	bld	r1, 0

00004bca <__lshrdi3>:
    4bca:	16 94       	lsr	r1
    4bcc:	00 08       	sbc	r0, r0
    4bce:	0f 93       	push	r16
    4bd0:	08 30       	cpi	r16, 0x08	; 8
    4bd2:	98 f0       	brcs	.+38     	; 0x4bfa <__lshrdi3+0x30>
    4bd4:	08 50       	subi	r16, 0x08	; 8
    4bd6:	23 2f       	mov	r18, r19
    4bd8:	34 2f       	mov	r19, r20
    4bda:	45 2f       	mov	r20, r21
    4bdc:	56 2f       	mov	r21, r22
    4bde:	67 2f       	mov	r22, r23
    4be0:	78 2f       	mov	r23, r24
    4be2:	89 2f       	mov	r24, r25
    4be4:	90 2d       	mov	r25, r0
    4be6:	f4 cf       	rjmp	.-24     	; 0x4bd0 <__lshrdi3+0x6>
    4be8:	05 94       	asr	r0
    4bea:	97 95       	ror	r25
    4bec:	87 95       	ror	r24
    4bee:	77 95       	ror	r23
    4bf0:	67 95       	ror	r22
    4bf2:	57 95       	ror	r21
    4bf4:	47 95       	ror	r20
    4bf6:	37 95       	ror	r19
    4bf8:	27 95       	ror	r18
    4bfa:	0a 95       	dec	r16
    4bfc:	aa f7       	brpl	.-22     	; 0x4be8 <__lshrdi3+0x1e>
    4bfe:	0f 91       	pop	r16
    4c00:	08 95       	ret

00004c02 <__adddi3>:
    4c02:	2a 0d       	add	r18, r10
    4c04:	3b 1d       	adc	r19, r11
    4c06:	4c 1d       	adc	r20, r12
    4c08:	5d 1d       	adc	r21, r13
    4c0a:	6e 1d       	adc	r22, r14
    4c0c:	7f 1d       	adc	r23, r15
    4c0e:	80 1f       	adc	r24, r16
    4c10:	91 1f       	adc	r25, r17
    4c12:	08 95       	ret

00004c14 <__adddi3_s8>:
    4c14:	00 24       	eor	r0, r0
    4c16:	a7 fd       	sbrc	r26, 7
    4c18:	00 94       	com	r0
    4c1a:	2a 0f       	add	r18, r26
    4c1c:	30 1d       	adc	r19, r0
    4c1e:	40 1d       	adc	r20, r0
    4c20:	50 1d       	adc	r21, r0
    4c22:	60 1d       	adc	r22, r0
    4c24:	70 1d       	adc	r23, r0
    4c26:	80 1d       	adc	r24, r0
    4c28:	90 1d       	adc	r25, r0
    4c2a:	08 95       	ret

00004c2c <__cmpdi2>:
    4c2c:	2a 15       	cp	r18, r10
    4c2e:	3b 05       	cpc	r19, r11
    4c30:	4c 05       	cpc	r20, r12
    4c32:	5d 05       	cpc	r21, r13
    4c34:	6e 05       	cpc	r22, r14
    4c36:	7f 05       	cpc	r23, r15
    4c38:	80 07       	cpc	r24, r16
    4c3a:	91 07       	cpc	r25, r17
    4c3c:	08 95       	ret

00004c3e <__umulhisi3>:
    4c3e:	a2 9f       	mul	r26, r18
    4c40:	b0 01       	movw	r22, r0
    4c42:	b3 9f       	mul	r27, r19
    4c44:	c0 01       	movw	r24, r0
    4c46:	a3 9f       	mul	r26, r19
    4c48:	70 0d       	add	r23, r0
    4c4a:	81 1d       	adc	r24, r1
    4c4c:	11 24       	eor	r1, r1
    4c4e:	91 1d       	adc	r25, r1
    4c50:	b2 9f       	mul	r27, r18
    4c52:	70 0d       	add	r23, r0
    4c54:	81 1d       	adc	r24, r1
    4c56:	11 24       	eor	r1, r1
    4c58:	91 1d       	adc	r25, r1
    4c5a:	08 95       	ret

00004c5c <malloc>:
    4c5c:	0f 93       	push	r16
    4c5e:	1f 93       	push	r17
    4c60:	cf 93       	push	r28
    4c62:	df 93       	push	r29
    4c64:	82 30       	cpi	r24, 0x02	; 2
    4c66:	91 05       	cpc	r25, r1
    4c68:	10 f4       	brcc	.+4      	; 0x4c6e <malloc+0x12>
    4c6a:	82 e0       	ldi	r24, 0x02	; 2
    4c6c:	90 e0       	ldi	r25, 0x00	; 0
    4c6e:	e0 91 cf 4c 	lds	r30, 0x4CCF	; 0x804ccf <__flp>
    4c72:	f0 91 d0 4c 	lds	r31, 0x4CD0	; 0x804cd0 <__flp+0x1>
    4c76:	20 e0       	ldi	r18, 0x00	; 0
    4c78:	30 e0       	ldi	r19, 0x00	; 0
    4c7a:	a0 e0       	ldi	r26, 0x00	; 0
    4c7c:	b0 e0       	ldi	r27, 0x00	; 0
    4c7e:	30 97       	sbiw	r30, 0x00	; 0
    4c80:	19 f1       	breq	.+70     	; 0x4cc8 <malloc+0x6c>
    4c82:	40 81       	ld	r20, Z
    4c84:	51 81       	ldd	r21, Z+1	; 0x01
    4c86:	02 81       	ldd	r16, Z+2	; 0x02
    4c88:	13 81       	ldd	r17, Z+3	; 0x03
    4c8a:	48 17       	cp	r20, r24
    4c8c:	59 07       	cpc	r21, r25
    4c8e:	c8 f0       	brcs	.+50     	; 0x4cc2 <malloc+0x66>
    4c90:	84 17       	cp	r24, r20
    4c92:	95 07       	cpc	r25, r21
    4c94:	69 f4       	brne	.+26     	; 0x4cb0 <malloc+0x54>
    4c96:	10 97       	sbiw	r26, 0x00	; 0
    4c98:	31 f0       	breq	.+12     	; 0x4ca6 <malloc+0x4a>
    4c9a:	12 96       	adiw	r26, 0x02	; 2
    4c9c:	0c 93       	st	X, r16
    4c9e:	12 97       	sbiw	r26, 0x02	; 2
    4ca0:	13 96       	adiw	r26, 0x03	; 3
    4ca2:	1c 93       	st	X, r17
    4ca4:	27 c0       	rjmp	.+78     	; 0x4cf4 <malloc+0x98>
    4ca6:	00 93 cf 4c 	sts	0x4CCF, r16	; 0x804ccf <__flp>
    4caa:	10 93 d0 4c 	sts	0x4CD0, r17	; 0x804cd0 <__flp+0x1>
    4cae:	22 c0       	rjmp	.+68     	; 0x4cf4 <malloc+0x98>
    4cb0:	21 15       	cp	r18, r1
    4cb2:	31 05       	cpc	r19, r1
    4cb4:	19 f0       	breq	.+6      	; 0x4cbc <malloc+0x60>
    4cb6:	42 17       	cp	r20, r18
    4cb8:	53 07       	cpc	r21, r19
    4cba:	18 f4       	brcc	.+6      	; 0x4cc2 <malloc+0x66>
    4cbc:	9a 01       	movw	r18, r20
    4cbe:	bd 01       	movw	r22, r26
    4cc0:	ef 01       	movw	r28, r30
    4cc2:	df 01       	movw	r26, r30
    4cc4:	f8 01       	movw	r30, r16
    4cc6:	db cf       	rjmp	.-74     	; 0x4c7e <malloc+0x22>
    4cc8:	21 15       	cp	r18, r1
    4cca:	31 05       	cpc	r19, r1
    4ccc:	f9 f0       	breq	.+62     	; 0x4d0c <malloc+0xb0>
    4cce:	28 1b       	sub	r18, r24
    4cd0:	39 0b       	sbc	r19, r25
    4cd2:	24 30       	cpi	r18, 0x04	; 4
    4cd4:	31 05       	cpc	r19, r1
    4cd6:	80 f4       	brcc	.+32     	; 0x4cf8 <malloc+0x9c>
    4cd8:	8a 81       	ldd	r24, Y+2	; 0x02
    4cda:	9b 81       	ldd	r25, Y+3	; 0x03
    4cdc:	61 15       	cp	r22, r1
    4cde:	71 05       	cpc	r23, r1
    4ce0:	21 f0       	breq	.+8      	; 0x4cea <malloc+0x8e>
    4ce2:	fb 01       	movw	r30, r22
    4ce4:	82 83       	std	Z+2, r24	; 0x02
    4ce6:	93 83       	std	Z+3, r25	; 0x03
    4ce8:	04 c0       	rjmp	.+8      	; 0x4cf2 <malloc+0x96>
    4cea:	80 93 cf 4c 	sts	0x4CCF, r24	; 0x804ccf <__flp>
    4cee:	90 93 d0 4c 	sts	0x4CD0, r25	; 0x804cd0 <__flp+0x1>
    4cf2:	fe 01       	movw	r30, r28
    4cf4:	32 96       	adiw	r30, 0x02	; 2
    4cf6:	44 c0       	rjmp	.+136    	; 0x4d80 <malloc+0x124>
    4cf8:	fe 01       	movw	r30, r28
    4cfa:	e2 0f       	add	r30, r18
    4cfc:	f3 1f       	adc	r31, r19
    4cfe:	81 93       	st	Z+, r24
    4d00:	91 93       	st	Z+, r25
    4d02:	22 50       	subi	r18, 0x02	; 2
    4d04:	31 09       	sbc	r19, r1
    4d06:	28 83       	st	Y, r18
    4d08:	39 83       	std	Y+1, r19	; 0x01
    4d0a:	3a c0       	rjmp	.+116    	; 0x4d80 <malloc+0x124>
    4d0c:	20 91 cd 4c 	lds	r18, 0x4CCD	; 0x804ccd <__brkval>
    4d10:	30 91 ce 4c 	lds	r19, 0x4CCE	; 0x804cce <__brkval+0x1>
    4d14:	23 2b       	or	r18, r19
    4d16:	41 f4       	brne	.+16     	; 0x4d28 <malloc+0xcc>
    4d18:	20 91 02 40 	lds	r18, 0x4002	; 0x804002 <__malloc_heap_start>
    4d1c:	30 91 03 40 	lds	r19, 0x4003	; 0x804003 <__malloc_heap_start+0x1>
    4d20:	20 93 cd 4c 	sts	0x4CCD, r18	; 0x804ccd <__brkval>
    4d24:	30 93 ce 4c 	sts	0x4CCE, r19	; 0x804cce <__brkval+0x1>
    4d28:	20 91 00 40 	lds	r18, 0x4000	; 0x804000 <__DATA_REGION_ORIGIN__>
    4d2c:	30 91 01 40 	lds	r19, 0x4001	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
    4d30:	21 15       	cp	r18, r1
    4d32:	31 05       	cpc	r19, r1
    4d34:	41 f4       	brne	.+16     	; 0x4d46 <malloc+0xea>
    4d36:	2d b7       	in	r18, 0x3d	; 61
    4d38:	3e b7       	in	r19, 0x3e	; 62
    4d3a:	40 91 04 40 	lds	r20, 0x4004	; 0x804004 <__malloc_margin>
    4d3e:	50 91 05 40 	lds	r21, 0x4005	; 0x804005 <__malloc_margin+0x1>
    4d42:	24 1b       	sub	r18, r20
    4d44:	35 0b       	sbc	r19, r21
    4d46:	e0 91 cd 4c 	lds	r30, 0x4CCD	; 0x804ccd <__brkval>
    4d4a:	f0 91 ce 4c 	lds	r31, 0x4CCE	; 0x804cce <__brkval+0x1>
    4d4e:	e2 17       	cp	r30, r18
    4d50:	f3 07       	cpc	r31, r19
    4d52:	a0 f4       	brcc	.+40     	; 0x4d7c <malloc+0x120>
    4d54:	2e 1b       	sub	r18, r30
    4d56:	3f 0b       	sbc	r19, r31
    4d58:	28 17       	cp	r18, r24
    4d5a:	39 07       	cpc	r19, r25
    4d5c:	78 f0       	brcs	.+30     	; 0x4d7c <malloc+0x120>
    4d5e:	ac 01       	movw	r20, r24
    4d60:	4e 5f       	subi	r20, 0xFE	; 254
    4d62:	5f 4f       	sbci	r21, 0xFF	; 255
    4d64:	24 17       	cp	r18, r20
    4d66:	35 07       	cpc	r19, r21
    4d68:	48 f0       	brcs	.+18     	; 0x4d7c <malloc+0x120>
    4d6a:	4e 0f       	add	r20, r30
    4d6c:	5f 1f       	adc	r21, r31
    4d6e:	40 93 cd 4c 	sts	0x4CCD, r20	; 0x804ccd <__brkval>
    4d72:	50 93 ce 4c 	sts	0x4CCE, r21	; 0x804cce <__brkval+0x1>
    4d76:	81 93       	st	Z+, r24
    4d78:	91 93       	st	Z+, r25
    4d7a:	02 c0       	rjmp	.+4      	; 0x4d80 <malloc+0x124>
    4d7c:	e0 e0       	ldi	r30, 0x00	; 0
    4d7e:	f0 e0       	ldi	r31, 0x00	; 0
    4d80:	cf 01       	movw	r24, r30
    4d82:	df 91       	pop	r29
    4d84:	cf 91       	pop	r28
    4d86:	1f 91       	pop	r17
    4d88:	0f 91       	pop	r16
    4d8a:	08 95       	ret

00004d8c <free>:
    4d8c:	cf 93       	push	r28
    4d8e:	df 93       	push	r29
    4d90:	00 97       	sbiw	r24, 0x00	; 0
    4d92:	09 f4       	brne	.+2      	; 0x4d96 <free+0xa>
    4d94:	81 c0       	rjmp	.+258    	; 0x4e98 <free+0x10c>
    4d96:	fc 01       	movw	r30, r24
    4d98:	32 97       	sbiw	r30, 0x02	; 2
    4d9a:	12 82       	std	Z+2, r1	; 0x02
    4d9c:	13 82       	std	Z+3, r1	; 0x03
    4d9e:	a0 91 cf 4c 	lds	r26, 0x4CCF	; 0x804ccf <__flp>
    4da2:	b0 91 d0 4c 	lds	r27, 0x4CD0	; 0x804cd0 <__flp+0x1>
    4da6:	10 97       	sbiw	r26, 0x00	; 0
    4da8:	81 f4       	brne	.+32     	; 0x4dca <free+0x3e>
    4daa:	20 81       	ld	r18, Z
    4dac:	31 81       	ldd	r19, Z+1	; 0x01
    4dae:	82 0f       	add	r24, r18
    4db0:	93 1f       	adc	r25, r19
    4db2:	20 91 cd 4c 	lds	r18, 0x4CCD	; 0x804ccd <__brkval>
    4db6:	30 91 ce 4c 	lds	r19, 0x4CCE	; 0x804cce <__brkval+0x1>
    4dba:	28 17       	cp	r18, r24
    4dbc:	39 07       	cpc	r19, r25
    4dbe:	51 f5       	brne	.+84     	; 0x4e14 <free+0x88>
    4dc0:	e0 93 cd 4c 	sts	0x4CCD, r30	; 0x804ccd <__brkval>
    4dc4:	f0 93 ce 4c 	sts	0x4CCE, r31	; 0x804cce <__brkval+0x1>
    4dc8:	67 c0       	rjmp	.+206    	; 0x4e98 <free+0x10c>
    4dca:	ed 01       	movw	r28, r26
    4dcc:	20 e0       	ldi	r18, 0x00	; 0
    4dce:	30 e0       	ldi	r19, 0x00	; 0
    4dd0:	ce 17       	cp	r28, r30
    4dd2:	df 07       	cpc	r29, r31
    4dd4:	40 f4       	brcc	.+16     	; 0x4de6 <free+0x5a>
    4dd6:	4a 81       	ldd	r20, Y+2	; 0x02
    4dd8:	5b 81       	ldd	r21, Y+3	; 0x03
    4dda:	9e 01       	movw	r18, r28
    4ddc:	41 15       	cp	r20, r1
    4dde:	51 05       	cpc	r21, r1
    4de0:	f1 f0       	breq	.+60     	; 0x4e1e <free+0x92>
    4de2:	ea 01       	movw	r28, r20
    4de4:	f5 cf       	rjmp	.-22     	; 0x4dd0 <free+0x44>
    4de6:	c2 83       	std	Z+2, r28	; 0x02
    4de8:	d3 83       	std	Z+3, r29	; 0x03
    4dea:	40 81       	ld	r20, Z
    4dec:	51 81       	ldd	r21, Z+1	; 0x01
    4dee:	84 0f       	add	r24, r20
    4df0:	95 1f       	adc	r25, r21
    4df2:	c8 17       	cp	r28, r24
    4df4:	d9 07       	cpc	r29, r25
    4df6:	59 f4       	brne	.+22     	; 0x4e0e <free+0x82>
    4df8:	88 81       	ld	r24, Y
    4dfa:	99 81       	ldd	r25, Y+1	; 0x01
    4dfc:	84 0f       	add	r24, r20
    4dfe:	95 1f       	adc	r25, r21
    4e00:	02 96       	adiw	r24, 0x02	; 2
    4e02:	80 83       	st	Z, r24
    4e04:	91 83       	std	Z+1, r25	; 0x01
    4e06:	8a 81       	ldd	r24, Y+2	; 0x02
    4e08:	9b 81       	ldd	r25, Y+3	; 0x03
    4e0a:	82 83       	std	Z+2, r24	; 0x02
    4e0c:	93 83       	std	Z+3, r25	; 0x03
    4e0e:	21 15       	cp	r18, r1
    4e10:	31 05       	cpc	r19, r1
    4e12:	29 f4       	brne	.+10     	; 0x4e1e <free+0x92>
    4e14:	e0 93 cf 4c 	sts	0x4CCF, r30	; 0x804ccf <__flp>
    4e18:	f0 93 d0 4c 	sts	0x4CD0, r31	; 0x804cd0 <__flp+0x1>
    4e1c:	3d c0       	rjmp	.+122    	; 0x4e98 <free+0x10c>
    4e1e:	e9 01       	movw	r28, r18
    4e20:	ea 83       	std	Y+2, r30	; 0x02
    4e22:	fb 83       	std	Y+3, r31	; 0x03
    4e24:	49 91       	ld	r20, Y+
    4e26:	59 91       	ld	r21, Y+
    4e28:	c4 0f       	add	r28, r20
    4e2a:	d5 1f       	adc	r29, r21
    4e2c:	ec 17       	cp	r30, r28
    4e2e:	fd 07       	cpc	r31, r29
    4e30:	61 f4       	brne	.+24     	; 0x4e4a <free+0xbe>
    4e32:	80 81       	ld	r24, Z
    4e34:	91 81       	ldd	r25, Z+1	; 0x01
    4e36:	84 0f       	add	r24, r20
    4e38:	95 1f       	adc	r25, r21
    4e3a:	02 96       	adiw	r24, 0x02	; 2
    4e3c:	e9 01       	movw	r28, r18
    4e3e:	88 83       	st	Y, r24
    4e40:	99 83       	std	Y+1, r25	; 0x01
    4e42:	82 81       	ldd	r24, Z+2	; 0x02
    4e44:	93 81       	ldd	r25, Z+3	; 0x03
    4e46:	8a 83       	std	Y+2, r24	; 0x02
    4e48:	9b 83       	std	Y+3, r25	; 0x03
    4e4a:	e0 e0       	ldi	r30, 0x00	; 0
    4e4c:	f0 e0       	ldi	r31, 0x00	; 0
    4e4e:	12 96       	adiw	r26, 0x02	; 2
    4e50:	8d 91       	ld	r24, X+
    4e52:	9c 91       	ld	r25, X
    4e54:	13 97       	sbiw	r26, 0x03	; 3
    4e56:	00 97       	sbiw	r24, 0x00	; 0
    4e58:	19 f0       	breq	.+6      	; 0x4e60 <free+0xd4>
    4e5a:	fd 01       	movw	r30, r26
    4e5c:	dc 01       	movw	r26, r24
    4e5e:	f7 cf       	rjmp	.-18     	; 0x4e4e <free+0xc2>
    4e60:	8d 91       	ld	r24, X+
    4e62:	9c 91       	ld	r25, X
    4e64:	11 97       	sbiw	r26, 0x01	; 1
    4e66:	9d 01       	movw	r18, r26
    4e68:	2e 5f       	subi	r18, 0xFE	; 254
    4e6a:	3f 4f       	sbci	r19, 0xFF	; 255
    4e6c:	82 0f       	add	r24, r18
    4e6e:	93 1f       	adc	r25, r19
    4e70:	20 91 cd 4c 	lds	r18, 0x4CCD	; 0x804ccd <__brkval>
    4e74:	30 91 ce 4c 	lds	r19, 0x4CCE	; 0x804cce <__brkval+0x1>
    4e78:	28 17       	cp	r18, r24
    4e7a:	39 07       	cpc	r19, r25
    4e7c:	69 f4       	brne	.+26     	; 0x4e98 <free+0x10c>
    4e7e:	30 97       	sbiw	r30, 0x00	; 0
    4e80:	29 f4       	brne	.+10     	; 0x4e8c <free+0x100>
    4e82:	10 92 cf 4c 	sts	0x4CCF, r1	; 0x804ccf <__flp>
    4e86:	10 92 d0 4c 	sts	0x4CD0, r1	; 0x804cd0 <__flp+0x1>
    4e8a:	02 c0       	rjmp	.+4      	; 0x4e90 <free+0x104>
    4e8c:	12 82       	std	Z+2, r1	; 0x02
    4e8e:	13 82       	std	Z+3, r1	; 0x03
    4e90:	a0 93 cd 4c 	sts	0x4CCD, r26	; 0x804ccd <__brkval>
    4e94:	b0 93 ce 4c 	sts	0x4CCE, r27	; 0x804cce <__brkval+0x1>
    4e98:	df 91       	pop	r29
    4e9a:	cf 91       	pop	r28
    4e9c:	08 95       	ret

00004e9e <strtod>:
    4e9e:	8f 92       	push	r8
    4ea0:	9f 92       	push	r9
    4ea2:	af 92       	push	r10
    4ea4:	bf 92       	push	r11
    4ea6:	cf 92       	push	r12
    4ea8:	df 92       	push	r13
    4eaa:	ef 92       	push	r14
    4eac:	ff 92       	push	r15
    4eae:	0f 93       	push	r16
    4eb0:	1f 93       	push	r17
    4eb2:	cf 93       	push	r28
    4eb4:	df 93       	push	r29
    4eb6:	ec 01       	movw	r28, r24
    4eb8:	6b 01       	movw	r12, r22
    4eba:	61 15       	cp	r22, r1
    4ebc:	71 05       	cpc	r23, r1
    4ebe:	19 f0       	breq	.+6      	; 0x4ec6 <strtod+0x28>
    4ec0:	fb 01       	movw	r30, r22
    4ec2:	80 83       	st	Z, r24
    4ec4:	91 83       	std	Z+1, r25	; 0x01
    4ec6:	7e 01       	movw	r14, r28
    4ec8:	ff ef       	ldi	r31, 0xFF	; 255
    4eca:	ef 1a       	sub	r14, r31
    4ecc:	ff 0a       	sbc	r15, r31
    4ece:	08 81       	ld	r16, Y
    4ed0:	80 2f       	mov	r24, r16
    4ed2:	90 e0       	ldi	r25, 0x00	; 0
    4ed4:	0e 94 c8 29 	call	0x5390	; 0x5390 <isspace>
    4ed8:	89 2b       	or	r24, r25
    4eda:	11 f0       	breq	.+4      	; 0x4ee0 <strtod+0x42>
    4edc:	e7 01       	movw	r28, r14
    4ede:	f3 cf       	rjmp	.-26     	; 0x4ec6 <strtod+0x28>
    4ee0:	0d 32       	cpi	r16, 0x2D	; 45
    4ee2:	39 f4       	brne	.+14     	; 0x4ef2 <strtod+0x54>
    4ee4:	7e 01       	movw	r14, r28
    4ee6:	82 e0       	ldi	r24, 0x02	; 2
    4ee8:	e8 0e       	add	r14, r24
    4eea:	f1 1c       	adc	r15, r1
    4eec:	09 81       	ldd	r16, Y+1	; 0x01
    4eee:	11 e0       	ldi	r17, 0x01	; 1
    4ef0:	08 c0       	rjmp	.+16     	; 0x4f02 <strtod+0x64>
    4ef2:	0b 32       	cpi	r16, 0x2B	; 43
    4ef4:	29 f4       	brne	.+10     	; 0x4f00 <strtod+0x62>
    4ef6:	7e 01       	movw	r14, r28
    4ef8:	92 e0       	ldi	r25, 0x02	; 2
    4efa:	e9 0e       	add	r14, r25
    4efc:	f1 1c       	adc	r15, r1
    4efe:	09 81       	ldd	r16, Y+1	; 0x01
    4f00:	10 e0       	ldi	r17, 0x00	; 0
    4f02:	e7 01       	movw	r28, r14
    4f04:	21 97       	sbiw	r28, 0x01	; 1
    4f06:	43 e0       	ldi	r20, 0x03	; 3
    4f08:	50 e0       	ldi	r21, 0x00	; 0
    4f0a:	60 e7       	ldi	r22, 0x70	; 112
    4f0c:	72 e0       	ldi	r23, 0x02	; 2
    4f0e:	ce 01       	movw	r24, r28
    4f10:	0e 94 d1 29 	call	0x53a2	; 0x53a2 <strncasecmp_P>
    4f14:	89 2b       	or	r24, r25
    4f16:	c1 f4       	brne	.+48     	; 0x4f48 <strtod+0xaa>
    4f18:	23 96       	adiw	r28, 0x03	; 3
    4f1a:	45 e0       	ldi	r20, 0x05	; 5
    4f1c:	50 e0       	ldi	r21, 0x00	; 0
    4f1e:	6b e6       	ldi	r22, 0x6B	; 107
    4f20:	72 e0       	ldi	r23, 0x02	; 2
    4f22:	ce 01       	movw	r24, r28
    4f24:	0e 94 d1 29 	call	0x53a2	; 0x53a2 <strncasecmp_P>
    4f28:	89 2b       	or	r24, r25
    4f2a:	09 f4       	brne	.+2      	; 0x4f2e <strtod+0x90>
    4f2c:	25 96       	adiw	r28, 0x05	; 5
    4f2e:	c1 14       	cp	r12, r1
    4f30:	d1 04       	cpc	r13, r1
    4f32:	19 f0       	breq	.+6      	; 0x4f3a <strtod+0x9c>
    4f34:	f6 01       	movw	r30, r12
    4f36:	c0 83       	st	Z, r28
    4f38:	d1 83       	std	Z+1, r29	; 0x01
    4f3a:	11 11       	cpse	r17, r1
    4f3c:	f6 c0       	rjmp	.+492    	; 0x512a <strtod+0x28c>
    4f3e:	60 e0       	ldi	r22, 0x00	; 0
    4f40:	70 e0       	ldi	r23, 0x00	; 0
    4f42:	80 e8       	ldi	r24, 0x80	; 128
    4f44:	9f e7       	ldi	r25, 0x7F	; 127
    4f46:	fa c0       	rjmp	.+500    	; 0x513c <strtod+0x29e>
    4f48:	43 e0       	ldi	r20, 0x03	; 3
    4f4a:	50 e0       	ldi	r21, 0x00	; 0
    4f4c:	68 e6       	ldi	r22, 0x68	; 104
    4f4e:	72 e0       	ldi	r23, 0x02	; 2
    4f50:	ce 01       	movw	r24, r28
    4f52:	0e 94 d1 29 	call	0x53a2	; 0x53a2 <strncasecmp_P>
    4f56:	89 2b       	or	r24, r25
    4f58:	59 f4       	brne	.+22     	; 0x4f70 <strtod+0xd2>
    4f5a:	c1 14       	cp	r12, r1
    4f5c:	d1 04       	cpc	r13, r1
    4f5e:	09 f4       	brne	.+2      	; 0x4f62 <strtod+0xc4>
    4f60:	e9 c0       	rjmp	.+466    	; 0x5134 <strtod+0x296>
    4f62:	f2 e0       	ldi	r31, 0x02	; 2
    4f64:	ef 0e       	add	r14, r31
    4f66:	f1 1c       	adc	r15, r1
    4f68:	f6 01       	movw	r30, r12
    4f6a:	e0 82       	st	Z, r14
    4f6c:	f1 82       	std	Z+1, r15	; 0x01
    4f6e:	e2 c0       	rjmp	.+452    	; 0x5134 <strtod+0x296>
    4f70:	20 e0       	ldi	r18, 0x00	; 0
    4f72:	30 e0       	ldi	r19, 0x00	; 0
    4f74:	a9 01       	movw	r20, r18
    4f76:	c0 e0       	ldi	r28, 0x00	; 0
    4f78:	d0 e0       	ldi	r29, 0x00	; 0
    4f7a:	f7 01       	movw	r30, r14
    4f7c:	60 ed       	ldi	r22, 0xD0	; 208
    4f7e:	a6 2e       	mov	r10, r22
    4f80:	a0 0e       	add	r10, r16
    4f82:	89 e0       	ldi	r24, 0x09	; 9
    4f84:	8a 15       	cp	r24, r10
    4f86:	30 f1       	brcs	.+76     	; 0x4fd4 <strtod+0x136>
    4f88:	91 2f       	mov	r25, r17
    4f8a:	92 60       	ori	r25, 0x02	; 2
    4f8c:	b9 2e       	mov	r11, r25
    4f8e:	81 2f       	mov	r24, r17
    4f90:	88 70       	andi	r24, 0x08	; 8
    4f92:	12 ff       	sbrs	r17, 2
    4f94:	04 c0       	rjmp	.+8      	; 0x4f9e <strtod+0x100>
    4f96:	81 11       	cpse	r24, r1
    4f98:	24 c0       	rjmp	.+72     	; 0x4fe2 <strtod+0x144>
    4f9a:	21 96       	adiw	r28, 0x01	; 1
    4f9c:	22 c0       	rjmp	.+68     	; 0x4fe2 <strtod+0x144>
    4f9e:	81 11       	cpse	r24, r1
    4fa0:	21 97       	sbiw	r28, 0x01	; 1
    4fa2:	a5 e0       	ldi	r26, 0x05	; 5
    4fa4:	b0 e0       	ldi	r27, 0x00	; 0
    4fa6:	0e 94 d8 25 	call	0x4bb0	; 0x4bb0 <__muluhisi3>
    4faa:	dc 01       	movw	r26, r24
    4fac:	cb 01       	movw	r24, r22
    4fae:	88 0f       	add	r24, r24
    4fb0:	99 1f       	adc	r25, r25
    4fb2:	aa 1f       	adc	r26, r26
    4fb4:	bb 1f       	adc	r27, r27
    4fb6:	9c 01       	movw	r18, r24
    4fb8:	ad 01       	movw	r20, r26
    4fba:	2a 0d       	add	r18, r10
    4fbc:	31 1d       	adc	r19, r1
    4fbe:	41 1d       	adc	r20, r1
    4fc0:	51 1d       	adc	r21, r1
    4fc2:	28 39       	cpi	r18, 0x98	; 152
    4fc4:	89 e9       	ldi	r24, 0x99	; 153
    4fc6:	38 07       	cpc	r19, r24
    4fc8:	48 07       	cpc	r20, r24
    4fca:	89 e1       	ldi	r24, 0x19	; 25
    4fcc:	58 07       	cpc	r21, r24
    4fce:	48 f0       	brcs	.+18     	; 0x4fe2 <strtod+0x144>
    4fd0:	16 60       	ori	r17, 0x06	; 6
    4fd2:	06 c0       	rjmp	.+12     	; 0x4fe0 <strtod+0x142>
    4fd4:	9e ef       	ldi	r25, 0xFE	; 254
    4fd6:	a9 12       	cpse	r10, r25
    4fd8:	0a c0       	rjmp	.+20     	; 0x4fee <strtod+0x150>
    4fda:	13 fd       	sbrc	r17, 3
    4fdc:	40 c0       	rjmp	.+128    	; 0x505e <strtod+0x1c0>
    4fde:	18 60       	ori	r17, 0x08	; 8
    4fe0:	b1 2e       	mov	r11, r17
    4fe2:	8f ef       	ldi	r24, 0xFF	; 255
    4fe4:	e8 1a       	sub	r14, r24
    4fe6:	f8 0a       	sbc	r15, r24
    4fe8:	00 81       	ld	r16, Z
    4fea:	1b 2d       	mov	r17, r11
    4fec:	c6 cf       	rjmp	.-116    	; 0x4f7a <strtod+0xdc>
    4fee:	80 2f       	mov	r24, r16
    4ff0:	8f 7d       	andi	r24, 0xDF	; 223
    4ff2:	85 34       	cpi	r24, 0x45	; 69
    4ff4:	a1 f5       	brne	.+104    	; 0x505e <strtod+0x1c0>
    4ff6:	80 81       	ld	r24, Z
    4ff8:	8d 32       	cpi	r24, 0x2D	; 45
    4ffa:	11 f4       	brne	.+4      	; 0x5000 <strtod+0x162>
    4ffc:	10 61       	ori	r17, 0x10	; 16
    4ffe:	06 c0       	rjmp	.+12     	; 0x500c <strtod+0x16e>
    5000:	8b 32       	cpi	r24, 0x2B	; 43
    5002:	21 f0       	breq	.+8      	; 0x500c <strtod+0x16e>
    5004:	31 96       	adiw	r30, 0x01	; 1
    5006:	61 e0       	ldi	r22, 0x01	; 1
    5008:	70 e0       	ldi	r23, 0x00	; 0
    500a:	04 c0       	rjmp	.+8      	; 0x5014 <strtod+0x176>
    500c:	81 81       	ldd	r24, Z+1	; 0x01
    500e:	32 96       	adiw	r30, 0x02	; 2
    5010:	62 e0       	ldi	r22, 0x02	; 2
    5012:	70 e0       	ldi	r23, 0x00	; 0
    5014:	80 53       	subi	r24, 0x30	; 48
    5016:	8a 30       	cpi	r24, 0x0A	; 10
    5018:	18 f0       	brcs	.+6      	; 0x5020 <strtod+0x182>
    501a:	e6 1b       	sub	r30, r22
    501c:	f7 0b       	sbc	r31, r23
    501e:	1f c0       	rjmp	.+62     	; 0x505e <strtod+0x1c0>
    5020:	60 e0       	ldi	r22, 0x00	; 0
    5022:	70 e0       	ldi	r23, 0x00	; 0
    5024:	60 38       	cpi	r22, 0x80	; 128
    5026:	9c e0       	ldi	r25, 0x0C	; 12
    5028:	79 07       	cpc	r23, r25
    502a:	5c f4       	brge	.+22     	; 0x5042 <strtod+0x1a4>
    502c:	db 01       	movw	r26, r22
    502e:	aa 0f       	add	r26, r26
    5030:	bb 1f       	adc	r27, r27
    5032:	aa 0f       	add	r26, r26
    5034:	bb 1f       	adc	r27, r27
    5036:	6a 0f       	add	r22, r26
    5038:	7b 1f       	adc	r23, r27
    503a:	66 0f       	add	r22, r22
    503c:	77 1f       	adc	r23, r23
    503e:	68 0f       	add	r22, r24
    5040:	71 1d       	adc	r23, r1
    5042:	31 96       	adiw	r30, 0x01	; 1
    5044:	df 01       	movw	r26, r30
    5046:	11 97       	sbiw	r26, 0x01	; 1
    5048:	8c 91       	ld	r24, X
    504a:	80 53       	subi	r24, 0x30	; 48
    504c:	8a 30       	cpi	r24, 0x0A	; 10
    504e:	50 f3       	brcs	.-44     	; 0x5024 <strtod+0x186>
    5050:	14 ff       	sbrs	r17, 4
    5052:	03 c0       	rjmp	.+6      	; 0x505a <strtod+0x1bc>
    5054:	71 95       	neg	r23
    5056:	61 95       	neg	r22
    5058:	71 09       	sbc	r23, r1
    505a:	c6 0f       	add	r28, r22
    505c:	d7 1f       	adc	r29, r23
    505e:	11 ff       	sbrs	r17, 1
    5060:	08 c0       	rjmp	.+16     	; 0x5072 <strtod+0x1d4>
    5062:	c1 14       	cp	r12, r1
    5064:	d1 04       	cpc	r13, r1
    5066:	29 f0       	breq	.+10     	; 0x5072 <strtod+0x1d4>
    5068:	cf 01       	movw	r24, r30
    506a:	01 97       	sbiw	r24, 0x01	; 1
    506c:	f6 01       	movw	r30, r12
    506e:	80 83       	st	Z, r24
    5070:	91 83       	std	Z+1, r25	; 0x01
    5072:	ca 01       	movw	r24, r20
    5074:	b9 01       	movw	r22, r18
    5076:	0e 94 a0 1e 	call	0x3d40	; 0x3d40 <__floatunsisf>
    507a:	21 2f       	mov	r18, r17
    507c:	23 70       	andi	r18, 0x03	; 3
    507e:	23 30       	cpi	r18, 0x03	; 3
    5080:	19 f0       	breq	.+6      	; 0x5088 <strtod+0x1ea>
    5082:	4b 01       	movw	r8, r22
    5084:	5c 01       	movw	r10, r24
    5086:	06 c0       	rjmp	.+12     	; 0x5094 <strtod+0x1f6>
    5088:	4b 01       	movw	r8, r22
    508a:	5c 01       	movw	r10, r24
    508c:	b7 fa       	bst	r11, 7
    508e:	b0 94       	com	r11
    5090:	b7 f8       	bld	r11, 7
    5092:	b0 94       	com	r11
    5094:	20 e0       	ldi	r18, 0x00	; 0
    5096:	30 e0       	ldi	r19, 0x00	; 0
    5098:	a9 01       	movw	r20, r18
    509a:	c5 01       	movw	r24, r10
    509c:	b4 01       	movw	r22, r8
    509e:	0e 94 ee 1d 	call	0x3bdc	; 0x3bdc <__cmpsf2>
    50a2:	88 23       	and	r24, r24
    50a4:	09 f4       	brne	.+2      	; 0x50a8 <strtod+0x20a>
    50a6:	3e c0       	rjmp	.+124    	; 0x5124 <strtod+0x286>
    50a8:	d7 ff       	sbrs	r29, 7
    50aa:	06 c0       	rjmp	.+12     	; 0x50b8 <strtod+0x21a>
    50ac:	d1 95       	neg	r29
    50ae:	c1 95       	neg	r28
    50b0:	d1 09       	sbc	r29, r1
    50b2:	07 e8       	ldi	r16, 0x87	; 135
    50b4:	12 e0       	ldi	r17, 0x02	; 2
    50b6:	02 c0       	rjmp	.+4      	; 0x50bc <strtod+0x21e>
    50b8:	0f e9       	ldi	r16, 0x9F	; 159
    50ba:	12 e0       	ldi	r17, 0x02	; 2
    50bc:	68 01       	movw	r12, r16
    50be:	f8 e1       	ldi	r31, 0x18	; 24
    50c0:	cf 1a       	sub	r12, r31
    50c2:	d1 08       	sbc	r13, r1
    50c4:	90 e2       	ldi	r25, 0x20	; 32
    50c6:	e9 2e       	mov	r14, r25
    50c8:	f1 2c       	mov	r15, r1
    50ca:	ce 15       	cp	r28, r14
    50cc:	df 05       	cpc	r29, r15
    50ce:	74 f0       	brlt	.+28     	; 0x50ec <strtod+0x24e>
    50d0:	f8 01       	movw	r30, r16
    50d2:	25 91       	lpm	r18, Z+
    50d4:	35 91       	lpm	r19, Z+
    50d6:	45 91       	lpm	r20, Z+
    50d8:	54 91       	lpm	r21, Z
    50da:	c5 01       	movw	r24, r10
    50dc:	b4 01       	movw	r22, r8
    50de:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <__mulsf3>
    50e2:	4b 01       	movw	r8, r22
    50e4:	5c 01       	movw	r10, r24
    50e6:	ce 19       	sub	r28, r14
    50e8:	df 09       	sbc	r29, r15
    50ea:	ef cf       	rjmp	.-34     	; 0x50ca <strtod+0x22c>
    50ec:	04 50       	subi	r16, 0x04	; 4
    50ee:	11 09       	sbc	r17, r1
    50f0:	f5 94       	asr	r15
    50f2:	e7 94       	ror	r14
    50f4:	0c 15       	cp	r16, r12
    50f6:	1d 05       	cpc	r17, r13
    50f8:	41 f7       	brne	.-48     	; 0x50ca <strtod+0x22c>
    50fa:	8a 2d       	mov	r24, r10
    50fc:	88 0f       	add	r24, r24
    50fe:	8b 2d       	mov	r24, r11
    5100:	88 1f       	adc	r24, r24
    5102:	8f 3f       	cpi	r24, 0xFF	; 255
    5104:	49 f0       	breq	.+18     	; 0x5118 <strtod+0x27a>
    5106:	20 e0       	ldi	r18, 0x00	; 0
    5108:	30 e0       	ldi	r19, 0x00	; 0
    510a:	a9 01       	movw	r20, r18
    510c:	c5 01       	movw	r24, r10
    510e:	b4 01       	movw	r22, r8
    5110:	0e 94 ee 1d 	call	0x3bdc	; 0x3bdc <__cmpsf2>
    5114:	81 11       	cpse	r24, r1
    5116:	06 c0       	rjmp	.+12     	; 0x5124 <strtod+0x286>
    5118:	82 e2       	ldi	r24, 0x22	; 34
    511a:	90 e0       	ldi	r25, 0x00	; 0
    511c:	80 93 d1 4c 	sts	0x4CD1, r24	; 0x804cd1 <errno>
    5120:	90 93 d2 4c 	sts	0x4CD2, r25	; 0x804cd2 <errno+0x1>
    5124:	c5 01       	movw	r24, r10
    5126:	b4 01       	movw	r22, r8
    5128:	09 c0       	rjmp	.+18     	; 0x513c <strtod+0x29e>
    512a:	60 e0       	ldi	r22, 0x00	; 0
    512c:	70 e0       	ldi	r23, 0x00	; 0
    512e:	80 e8       	ldi	r24, 0x80	; 128
    5130:	9f ef       	ldi	r25, 0xFF	; 255
    5132:	04 c0       	rjmp	.+8      	; 0x513c <strtod+0x29e>
    5134:	60 e0       	ldi	r22, 0x00	; 0
    5136:	70 e0       	ldi	r23, 0x00	; 0
    5138:	80 ec       	ldi	r24, 0xC0	; 192
    513a:	9f e7       	ldi	r25, 0x7F	; 127
    513c:	df 91       	pop	r29
    513e:	cf 91       	pop	r28
    5140:	1f 91       	pop	r17
    5142:	0f 91       	pop	r16
    5144:	ff 90       	pop	r15
    5146:	ef 90       	pop	r14
    5148:	df 90       	pop	r13
    514a:	cf 90       	pop	r12
    514c:	bf 90       	pop	r11
    514e:	af 90       	pop	r10
    5150:	9f 90       	pop	r9
    5152:	8f 90       	pop	r8
    5154:	08 95       	ret

00005156 <atoi>:
    5156:	fc 01       	movw	r30, r24
    5158:	88 27       	eor	r24, r24
    515a:	99 27       	eor	r25, r25
    515c:	e8 94       	clt
    515e:	21 91       	ld	r18, Z+
    5160:	20 32       	cpi	r18, 0x20	; 32
    5162:	e9 f3       	breq	.-6      	; 0x515e <atoi+0x8>
    5164:	29 30       	cpi	r18, 0x09	; 9
    5166:	10 f0       	brcs	.+4      	; 0x516c <atoi+0x16>
    5168:	2e 30       	cpi	r18, 0x0E	; 14
    516a:	c8 f3       	brcs	.-14     	; 0x515e <atoi+0x8>
    516c:	2b 32       	cpi	r18, 0x2B	; 43
    516e:	41 f0       	breq	.+16     	; 0x5180 <atoi+0x2a>
    5170:	2d 32       	cpi	r18, 0x2D	; 45
    5172:	39 f4       	brne	.+14     	; 0x5182 <atoi+0x2c>
    5174:	68 94       	set
    5176:	04 c0       	rjmp	.+8      	; 0x5180 <atoi+0x2a>
    5178:	0e 94 14 2a 	call	0x5428	; 0x5428 <__mulhi_const_10>
    517c:	82 0f       	add	r24, r18
    517e:	91 1d       	adc	r25, r1
    5180:	21 91       	ld	r18, Z+
    5182:	20 53       	subi	r18, 0x30	; 48
    5184:	2a 30       	cpi	r18, 0x0A	; 10
    5186:	c0 f3       	brcs	.-16     	; 0x5178 <atoi+0x22>
    5188:	1e f4       	brtc	.+6      	; 0x5190 <atoi+0x3a>
    518a:	90 95       	com	r25
    518c:	81 95       	neg	r24
    518e:	9f 4f       	sbci	r25, 0xFF	; 255
    5190:	08 95       	ret

00005192 <atol>:
    5192:	1f 93       	push	r17
    5194:	fc 01       	movw	r30, r24
    5196:	99 27       	eor	r25, r25
    5198:	88 27       	eor	r24, r24
    519a:	bc 01       	movw	r22, r24
    519c:	e8 94       	clt
    519e:	11 91       	ld	r17, Z+
    51a0:	10 32       	cpi	r17, 0x20	; 32
    51a2:	e9 f3       	breq	.-6      	; 0x519e <atol+0xc>
    51a4:	19 30       	cpi	r17, 0x09	; 9
    51a6:	10 f0       	brcs	.+4      	; 0x51ac <atol+0x1a>
    51a8:	1e 30       	cpi	r17, 0x0E	; 14
    51aa:	c8 f3       	brcs	.-14     	; 0x519e <atol+0xc>
    51ac:	1b 32       	cpi	r17, 0x2B	; 43
    51ae:	51 f0       	breq	.+20     	; 0x51c4 <atol+0x32>
    51b0:	1d 32       	cpi	r17, 0x2D	; 45
    51b2:	49 f4       	brne	.+18     	; 0x51c6 <atol+0x34>
    51b4:	68 94       	set
    51b6:	06 c0       	rjmp	.+12     	; 0x51c4 <atol+0x32>
    51b8:	0e 94 ff 29 	call	0x53fe	; 0x53fe <__mulsi_const_10>
    51bc:	61 0f       	add	r22, r17
    51be:	71 1d       	adc	r23, r1
    51c0:	81 1d       	adc	r24, r1
    51c2:	91 1d       	adc	r25, r1
    51c4:	11 91       	ld	r17, Z+
    51c6:	10 53       	subi	r17, 0x30	; 48
    51c8:	1a 30       	cpi	r17, 0x0A	; 10
    51ca:	b0 f3       	brcs	.-20     	; 0x51b8 <atol+0x26>
    51cc:	3e f4       	brtc	.+14     	; 0x51dc <atol+0x4a>
    51ce:	90 95       	com	r25
    51d0:	80 95       	com	r24
    51d2:	70 95       	com	r23
    51d4:	61 95       	neg	r22
    51d6:	7f 4f       	sbci	r23, 0xFF	; 255
    51d8:	8f 4f       	sbci	r24, 0xFF	; 255
    51da:	9f 4f       	sbci	r25, 0xFF	; 255
    51dc:	1f 91       	pop	r17
    51de:	08 95       	ret

000051e0 <__ftoa_engine>:
    51e0:	28 30       	cpi	r18, 0x08	; 8
    51e2:	08 f0       	brcs	.+2      	; 0x51e6 <__ftoa_engine+0x6>
    51e4:	27 e0       	ldi	r18, 0x07	; 7
    51e6:	33 27       	eor	r19, r19
    51e8:	da 01       	movw	r26, r20
    51ea:	99 0f       	add	r25, r25
    51ec:	31 1d       	adc	r19, r1
    51ee:	87 fd       	sbrc	r24, 7
    51f0:	91 60       	ori	r25, 0x01	; 1
    51f2:	00 96       	adiw	r24, 0x00	; 0
    51f4:	61 05       	cpc	r22, r1
    51f6:	71 05       	cpc	r23, r1
    51f8:	39 f4       	brne	.+14     	; 0x5208 <__ftoa_engine+0x28>
    51fa:	32 60       	ori	r19, 0x02	; 2
    51fc:	2e 5f       	subi	r18, 0xFE	; 254
    51fe:	3d 93       	st	X+, r19
    5200:	30 e3       	ldi	r19, 0x30	; 48
    5202:	2a 95       	dec	r18
    5204:	e1 f7       	brne	.-8      	; 0x51fe <__ftoa_engine+0x1e>
    5206:	08 95       	ret
    5208:	9f 3f       	cpi	r25, 0xFF	; 255
    520a:	30 f0       	brcs	.+12     	; 0x5218 <__ftoa_engine+0x38>
    520c:	80 38       	cpi	r24, 0x80	; 128
    520e:	71 05       	cpc	r23, r1
    5210:	61 05       	cpc	r22, r1
    5212:	09 f0       	breq	.+2      	; 0x5216 <__ftoa_engine+0x36>
    5214:	3c 5f       	subi	r19, 0xFC	; 252
    5216:	3c 5f       	subi	r19, 0xFC	; 252
    5218:	3d 93       	st	X+, r19
    521a:	91 30       	cpi	r25, 0x01	; 1
    521c:	08 f0       	brcs	.+2      	; 0x5220 <__ftoa_engine+0x40>
    521e:	80 68       	ori	r24, 0x80	; 128
    5220:	91 1d       	adc	r25, r1
    5222:	df 93       	push	r29
    5224:	cf 93       	push	r28
    5226:	1f 93       	push	r17
    5228:	0f 93       	push	r16
    522a:	ff 92       	push	r15
    522c:	ef 92       	push	r14
    522e:	19 2f       	mov	r17, r25
    5230:	98 7f       	andi	r25, 0xF8	; 248
    5232:	96 95       	lsr	r25
    5234:	e9 2f       	mov	r30, r25
    5236:	96 95       	lsr	r25
    5238:	96 95       	lsr	r25
    523a:	e9 0f       	add	r30, r25
    523c:	ff 27       	eor	r31, r31
    523e:	e3 50       	subi	r30, 0x03	; 3
    5240:	fd 4f       	sbci	r31, 0xFD	; 253
    5242:	99 27       	eor	r25, r25
    5244:	33 27       	eor	r19, r19
    5246:	ee 24       	eor	r14, r14
    5248:	ff 24       	eor	r15, r15
    524a:	a7 01       	movw	r20, r14
    524c:	e7 01       	movw	r28, r14
    524e:	05 90       	lpm	r0, Z+
    5250:	08 94       	sec
    5252:	07 94       	ror	r0
    5254:	28 f4       	brcc	.+10     	; 0x5260 <__ftoa_engine+0x80>
    5256:	36 0f       	add	r19, r22
    5258:	e7 1e       	adc	r14, r23
    525a:	f8 1e       	adc	r15, r24
    525c:	49 1f       	adc	r20, r25
    525e:	51 1d       	adc	r21, r1
    5260:	66 0f       	add	r22, r22
    5262:	77 1f       	adc	r23, r23
    5264:	88 1f       	adc	r24, r24
    5266:	99 1f       	adc	r25, r25
    5268:	06 94       	lsr	r0
    526a:	a1 f7       	brne	.-24     	; 0x5254 <__ftoa_engine+0x74>
    526c:	05 90       	lpm	r0, Z+
    526e:	07 94       	ror	r0
    5270:	28 f4       	brcc	.+10     	; 0x527c <__ftoa_engine+0x9c>
    5272:	e7 0e       	add	r14, r23
    5274:	f8 1e       	adc	r15, r24
    5276:	49 1f       	adc	r20, r25
    5278:	56 1f       	adc	r21, r22
    527a:	c1 1d       	adc	r28, r1
    527c:	77 0f       	add	r23, r23
    527e:	88 1f       	adc	r24, r24
    5280:	99 1f       	adc	r25, r25
    5282:	66 1f       	adc	r22, r22
    5284:	06 94       	lsr	r0
    5286:	a1 f7       	brne	.-24     	; 0x5270 <__ftoa_engine+0x90>
    5288:	05 90       	lpm	r0, Z+
    528a:	07 94       	ror	r0
    528c:	28 f4       	brcc	.+10     	; 0x5298 <__ftoa_engine+0xb8>
    528e:	f8 0e       	add	r15, r24
    5290:	49 1f       	adc	r20, r25
    5292:	56 1f       	adc	r21, r22
    5294:	c7 1f       	adc	r28, r23
    5296:	d1 1d       	adc	r29, r1
    5298:	88 0f       	add	r24, r24
    529a:	99 1f       	adc	r25, r25
    529c:	66 1f       	adc	r22, r22
    529e:	77 1f       	adc	r23, r23
    52a0:	06 94       	lsr	r0
    52a2:	a1 f7       	brne	.-24     	; 0x528c <__ftoa_engine+0xac>
    52a4:	05 90       	lpm	r0, Z+
    52a6:	07 94       	ror	r0
    52a8:	20 f4       	brcc	.+8      	; 0x52b2 <__ftoa_engine+0xd2>
    52aa:	49 0f       	add	r20, r25
    52ac:	56 1f       	adc	r21, r22
    52ae:	c7 1f       	adc	r28, r23
    52b0:	d8 1f       	adc	r29, r24
    52b2:	99 0f       	add	r25, r25
    52b4:	66 1f       	adc	r22, r22
    52b6:	77 1f       	adc	r23, r23
    52b8:	88 1f       	adc	r24, r24
    52ba:	06 94       	lsr	r0
    52bc:	a9 f7       	brne	.-22     	; 0x52a8 <__ftoa_engine+0xc8>
    52be:	84 91       	lpm	r24, Z
    52c0:	10 95       	com	r17
    52c2:	17 70       	andi	r17, 0x07	; 7
    52c4:	41 f0       	breq	.+16     	; 0x52d6 <__ftoa_engine+0xf6>
    52c6:	d6 95       	lsr	r29
    52c8:	c7 95       	ror	r28
    52ca:	57 95       	ror	r21
    52cc:	47 95       	ror	r20
    52ce:	f7 94       	ror	r15
    52d0:	e7 94       	ror	r14
    52d2:	1a 95       	dec	r17
    52d4:	c1 f7       	brne	.-16     	; 0x52c6 <__ftoa_engine+0xe6>
    52d6:	e3 ea       	ldi	r30, 0xA3	; 163
    52d8:	f2 e0       	ldi	r31, 0x02	; 2
    52da:	68 94       	set
    52dc:	15 90       	lpm	r1, Z+
    52de:	15 91       	lpm	r17, Z+
    52e0:	35 91       	lpm	r19, Z+
    52e2:	65 91       	lpm	r22, Z+
    52e4:	95 91       	lpm	r25, Z+
    52e6:	05 90       	lpm	r0, Z+
    52e8:	7f e2       	ldi	r23, 0x2F	; 47
    52ea:	73 95       	inc	r23
    52ec:	e1 18       	sub	r14, r1
    52ee:	f1 0a       	sbc	r15, r17
    52f0:	43 0b       	sbc	r20, r19
    52f2:	56 0b       	sbc	r21, r22
    52f4:	c9 0b       	sbc	r28, r25
    52f6:	d0 09       	sbc	r29, r0
    52f8:	c0 f7       	brcc	.-16     	; 0x52ea <__ftoa_engine+0x10a>
    52fa:	e1 0c       	add	r14, r1
    52fc:	f1 1e       	adc	r15, r17
    52fe:	43 1f       	adc	r20, r19
    5300:	56 1f       	adc	r21, r22
    5302:	c9 1f       	adc	r28, r25
    5304:	d0 1d       	adc	r29, r0
    5306:	7e f4       	brtc	.+30     	; 0x5326 <__ftoa_engine+0x146>
    5308:	70 33       	cpi	r23, 0x30	; 48
    530a:	11 f4       	brne	.+4      	; 0x5310 <__ftoa_engine+0x130>
    530c:	8a 95       	dec	r24
    530e:	e6 cf       	rjmp	.-52     	; 0x52dc <__ftoa_engine+0xfc>
    5310:	e8 94       	clt
    5312:	01 50       	subi	r16, 0x01	; 1
    5314:	30 f0       	brcs	.+12     	; 0x5322 <__ftoa_engine+0x142>
    5316:	08 0f       	add	r16, r24
    5318:	0a f4       	brpl	.+2      	; 0x531c <__ftoa_engine+0x13c>
    531a:	00 27       	eor	r16, r16
    531c:	02 17       	cp	r16, r18
    531e:	08 f4       	brcc	.+2      	; 0x5322 <__ftoa_engine+0x142>
    5320:	20 2f       	mov	r18, r16
    5322:	23 95       	inc	r18
    5324:	02 2f       	mov	r16, r18
    5326:	7a 33       	cpi	r23, 0x3A	; 58
    5328:	28 f0       	brcs	.+10     	; 0x5334 <__ftoa_engine+0x154>
    532a:	79 e3       	ldi	r23, 0x39	; 57
    532c:	7d 93       	st	X+, r23
    532e:	2a 95       	dec	r18
    5330:	e9 f7       	brne	.-6      	; 0x532c <__ftoa_engine+0x14c>
    5332:	10 c0       	rjmp	.+32     	; 0x5354 <__ftoa_engine+0x174>
    5334:	7d 93       	st	X+, r23
    5336:	2a 95       	dec	r18
    5338:	89 f6       	brne	.-94     	; 0x52dc <__ftoa_engine+0xfc>
    533a:	06 94       	lsr	r0
    533c:	97 95       	ror	r25
    533e:	67 95       	ror	r22
    5340:	37 95       	ror	r19
    5342:	17 95       	ror	r17
    5344:	17 94       	ror	r1
    5346:	e1 18       	sub	r14, r1
    5348:	f1 0a       	sbc	r15, r17
    534a:	43 0b       	sbc	r20, r19
    534c:	56 0b       	sbc	r21, r22
    534e:	c9 0b       	sbc	r28, r25
    5350:	d0 09       	sbc	r29, r0
    5352:	98 f0       	brcs	.+38     	; 0x537a <__ftoa_engine+0x19a>
    5354:	23 95       	inc	r18
    5356:	7e 91       	ld	r23, -X
    5358:	73 95       	inc	r23
    535a:	7a 33       	cpi	r23, 0x3A	; 58
    535c:	08 f0       	brcs	.+2      	; 0x5360 <__ftoa_engine+0x180>
    535e:	70 e3       	ldi	r23, 0x30	; 48
    5360:	7c 93       	st	X, r23
    5362:	20 13       	cpse	r18, r16
    5364:	b8 f7       	brcc	.-18     	; 0x5354 <__ftoa_engine+0x174>
    5366:	7e 91       	ld	r23, -X
    5368:	70 61       	ori	r23, 0x10	; 16
    536a:	7d 93       	st	X+, r23
    536c:	30 f0       	brcs	.+12     	; 0x537a <__ftoa_engine+0x19a>
    536e:	83 95       	inc	r24
    5370:	71 e3       	ldi	r23, 0x31	; 49
    5372:	7d 93       	st	X+, r23
    5374:	70 e3       	ldi	r23, 0x30	; 48
    5376:	2a 95       	dec	r18
    5378:	e1 f7       	brne	.-8      	; 0x5372 <__ftoa_engine+0x192>
    537a:	11 24       	eor	r1, r1
    537c:	ef 90       	pop	r14
    537e:	ff 90       	pop	r15
    5380:	0f 91       	pop	r16
    5382:	1f 91       	pop	r17
    5384:	cf 91       	pop	r28
    5386:	df 91       	pop	r29
    5388:	99 27       	eor	r25, r25
    538a:	87 fd       	sbrc	r24, 7
    538c:	90 95       	com	r25
    538e:	08 95       	ret

00005390 <isspace>:
    5390:	91 11       	cpse	r25, r1
    5392:	0c 94 ed 2a 	jmp	0x55da	; 0x55da <__ctype_isfalse>
    5396:	80 32       	cpi	r24, 0x20	; 32
    5398:	19 f0       	breq	.+6      	; 0x53a0 <isspace+0x10>
    539a:	89 50       	subi	r24, 0x09	; 9
    539c:	85 50       	subi	r24, 0x05	; 5
    539e:	c8 f7       	brcc	.-14     	; 0x5392 <isspace+0x2>
    53a0:	08 95       	ret

000053a2 <strncasecmp_P>:
    53a2:	fb 01       	movw	r30, r22
    53a4:	dc 01       	movw	r26, r24
    53a6:	41 50       	subi	r20, 0x01	; 1
    53a8:	50 40       	sbci	r21, 0x00	; 0
    53aa:	88 f0       	brcs	.+34     	; 0x53ce <strncasecmp_P+0x2c>
    53ac:	8d 91       	ld	r24, X+
    53ae:	81 34       	cpi	r24, 0x41	; 65
    53b0:	1c f0       	brlt	.+6      	; 0x53b8 <strncasecmp_P+0x16>
    53b2:	8b 35       	cpi	r24, 0x5B	; 91
    53b4:	0c f4       	brge	.+2      	; 0x53b8 <strncasecmp_P+0x16>
    53b6:	80 5e       	subi	r24, 0xE0	; 224
    53b8:	65 91       	lpm	r22, Z+
    53ba:	61 34       	cpi	r22, 0x41	; 65
    53bc:	1c f0       	brlt	.+6      	; 0x53c4 <strncasecmp_P+0x22>
    53be:	6b 35       	cpi	r22, 0x5B	; 91
    53c0:	0c f4       	brge	.+2      	; 0x53c4 <strncasecmp_P+0x22>
    53c2:	60 5e       	subi	r22, 0xE0	; 224
    53c4:	86 1b       	sub	r24, r22
    53c6:	61 11       	cpse	r22, r1
    53c8:	71 f3       	breq	.-36     	; 0x53a6 <strncasecmp_P+0x4>
    53ca:	99 0b       	sbc	r25, r25
    53cc:	08 95       	ret
    53ce:	88 1b       	sub	r24, r24
    53d0:	fc cf       	rjmp	.-8      	; 0x53ca <strncasecmp_P+0x28>

000053d2 <strnlen_P>:
    53d2:	fc 01       	movw	r30, r24
    53d4:	05 90       	lpm	r0, Z+
    53d6:	61 50       	subi	r22, 0x01	; 1
    53d8:	70 40       	sbci	r23, 0x00	; 0
    53da:	01 10       	cpse	r0, r1
    53dc:	d8 f7       	brcc	.-10     	; 0x53d4 <strnlen_P+0x2>
    53de:	80 95       	com	r24
    53e0:	90 95       	com	r25
    53e2:	8e 0f       	add	r24, r30
    53e4:	9f 1f       	adc	r25, r31
    53e6:	08 95       	ret

000053e8 <strnlen>:
    53e8:	fc 01       	movw	r30, r24
    53ea:	61 50       	subi	r22, 0x01	; 1
    53ec:	70 40       	sbci	r23, 0x00	; 0
    53ee:	01 90       	ld	r0, Z+
    53f0:	01 10       	cpse	r0, r1
    53f2:	d8 f7       	brcc	.-10     	; 0x53ea <strnlen+0x2>
    53f4:	80 95       	com	r24
    53f6:	90 95       	com	r25
    53f8:	8e 0f       	add	r24, r30
    53fa:	9f 1f       	adc	r25, r31
    53fc:	08 95       	ret

000053fe <__mulsi_const_10>:
    53fe:	59 2f       	mov	r21, r25
    5400:	48 2f       	mov	r20, r24
    5402:	37 2f       	mov	r19, r23
    5404:	26 2f       	mov	r18, r22
    5406:	66 0f       	add	r22, r22
    5408:	77 1f       	adc	r23, r23
    540a:	88 1f       	adc	r24, r24
    540c:	99 1f       	adc	r25, r25
    540e:	66 0f       	add	r22, r22
    5410:	77 1f       	adc	r23, r23
    5412:	88 1f       	adc	r24, r24
    5414:	99 1f       	adc	r25, r25
    5416:	62 0f       	add	r22, r18
    5418:	73 1f       	adc	r23, r19
    541a:	84 1f       	adc	r24, r20
    541c:	95 1f       	adc	r25, r21
    541e:	66 0f       	add	r22, r22
    5420:	77 1f       	adc	r23, r23
    5422:	88 1f       	adc	r24, r24
    5424:	99 1f       	adc	r25, r25
    5426:	08 95       	ret

00005428 <__mulhi_const_10>:
    5428:	7a e0       	ldi	r23, 0x0A	; 10
    542a:	97 9f       	mul	r25, r23
    542c:	90 2d       	mov	r25, r0
    542e:	87 9f       	mul	r24, r23
    5430:	80 2d       	mov	r24, r0
    5432:	91 0d       	add	r25, r1
    5434:	11 24       	eor	r1, r1
    5436:	08 95       	ret

00005438 <fputc>:
    5438:	0f 93       	push	r16
    543a:	1f 93       	push	r17
    543c:	cf 93       	push	r28
    543e:	df 93       	push	r29
    5440:	fb 01       	movw	r30, r22
    5442:	23 81       	ldd	r18, Z+3	; 0x03
    5444:	21 fd       	sbrc	r18, 1
    5446:	03 c0       	rjmp	.+6      	; 0x544e <fputc+0x16>
    5448:	8f ef       	ldi	r24, 0xFF	; 255
    544a:	9f ef       	ldi	r25, 0xFF	; 255
    544c:	2c c0       	rjmp	.+88     	; 0x54a6 <fputc+0x6e>
    544e:	22 ff       	sbrs	r18, 2
    5450:	16 c0       	rjmp	.+44     	; 0x547e <fputc+0x46>
    5452:	46 81       	ldd	r20, Z+6	; 0x06
    5454:	57 81       	ldd	r21, Z+7	; 0x07
    5456:	24 81       	ldd	r18, Z+4	; 0x04
    5458:	35 81       	ldd	r19, Z+5	; 0x05
    545a:	42 17       	cp	r20, r18
    545c:	53 07       	cpc	r21, r19
    545e:	44 f4       	brge	.+16     	; 0x5470 <fputc+0x38>
    5460:	a0 81       	ld	r26, Z
    5462:	b1 81       	ldd	r27, Z+1	; 0x01
    5464:	9d 01       	movw	r18, r26
    5466:	2f 5f       	subi	r18, 0xFF	; 255
    5468:	3f 4f       	sbci	r19, 0xFF	; 255
    546a:	20 83       	st	Z, r18
    546c:	31 83       	std	Z+1, r19	; 0x01
    546e:	8c 93       	st	X, r24
    5470:	26 81       	ldd	r18, Z+6	; 0x06
    5472:	37 81       	ldd	r19, Z+7	; 0x07
    5474:	2f 5f       	subi	r18, 0xFF	; 255
    5476:	3f 4f       	sbci	r19, 0xFF	; 255
    5478:	26 83       	std	Z+6, r18	; 0x06
    547a:	37 83       	std	Z+7, r19	; 0x07
    547c:	14 c0       	rjmp	.+40     	; 0x54a6 <fputc+0x6e>
    547e:	8b 01       	movw	r16, r22
    5480:	ec 01       	movw	r28, r24
    5482:	fb 01       	movw	r30, r22
    5484:	00 84       	ldd	r0, Z+8	; 0x08
    5486:	f1 85       	ldd	r31, Z+9	; 0x09
    5488:	e0 2d       	mov	r30, r0
    548a:	09 95       	icall
    548c:	89 2b       	or	r24, r25
    548e:	e1 f6       	brne	.-72     	; 0x5448 <fputc+0x10>
    5490:	d8 01       	movw	r26, r16
    5492:	16 96       	adiw	r26, 0x06	; 6
    5494:	8d 91       	ld	r24, X+
    5496:	9c 91       	ld	r25, X
    5498:	17 97       	sbiw	r26, 0x07	; 7
    549a:	01 96       	adiw	r24, 0x01	; 1
    549c:	16 96       	adiw	r26, 0x06	; 6
    549e:	8d 93       	st	X+, r24
    54a0:	9c 93       	st	X, r25
    54a2:	17 97       	sbiw	r26, 0x07	; 7
    54a4:	ce 01       	movw	r24, r28
    54a6:	df 91       	pop	r29
    54a8:	cf 91       	pop	r28
    54aa:	1f 91       	pop	r17
    54ac:	0f 91       	pop	r16
    54ae:	08 95       	ret

000054b0 <snprintf>:
    54b0:	0f 93       	push	r16
    54b2:	1f 93       	push	r17
    54b4:	cf 93       	push	r28
    54b6:	df 93       	push	r29
    54b8:	cd b7       	in	r28, 0x3d	; 61
    54ba:	de b7       	in	r29, 0x3e	; 62
    54bc:	2e 97       	sbiw	r28, 0x0e	; 14
    54be:	cd bf       	out	0x3d, r28	; 61
    54c0:	de bf       	out	0x3e, r29	; 62
    54c2:	0d 89       	ldd	r16, Y+21	; 0x15
    54c4:	1e 89       	ldd	r17, Y+22	; 0x16
    54c6:	8f 89       	ldd	r24, Y+23	; 0x17
    54c8:	98 8d       	ldd	r25, Y+24	; 0x18
    54ca:	26 e0       	ldi	r18, 0x06	; 6
    54cc:	2c 83       	std	Y+4, r18	; 0x04
    54ce:	09 83       	std	Y+1, r16	; 0x01
    54d0:	1a 83       	std	Y+2, r17	; 0x02
    54d2:	97 ff       	sbrs	r25, 7
    54d4:	02 c0       	rjmp	.+4      	; 0x54da <snprintf+0x2a>
    54d6:	80 e0       	ldi	r24, 0x00	; 0
    54d8:	90 e8       	ldi	r25, 0x80	; 128
    54da:	01 97       	sbiw	r24, 0x01	; 1
    54dc:	8d 83       	std	Y+5, r24	; 0x05
    54de:	9e 83       	std	Y+6, r25	; 0x06
    54e0:	ae 01       	movw	r20, r28
    54e2:	45 5e       	subi	r20, 0xE5	; 229
    54e4:	5f 4f       	sbci	r21, 0xFF	; 255
    54e6:	69 8d       	ldd	r22, Y+25	; 0x19
    54e8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    54ea:	ce 01       	movw	r24, r28
    54ec:	01 96       	adiw	r24, 0x01	; 1
    54ee:	0e 94 1f 22 	call	0x443e	; 0x443e <vfprintf>
    54f2:	4d 81       	ldd	r20, Y+5	; 0x05
    54f4:	5e 81       	ldd	r21, Y+6	; 0x06
    54f6:	57 fd       	sbrc	r21, 7
    54f8:	0a c0       	rjmp	.+20     	; 0x550e <snprintf+0x5e>
    54fa:	2f 81       	ldd	r18, Y+7	; 0x07
    54fc:	38 85       	ldd	r19, Y+8	; 0x08
    54fe:	42 17       	cp	r20, r18
    5500:	53 07       	cpc	r21, r19
    5502:	0c f4       	brge	.+2      	; 0x5506 <snprintf+0x56>
    5504:	9a 01       	movw	r18, r20
    5506:	f8 01       	movw	r30, r16
    5508:	e2 0f       	add	r30, r18
    550a:	f3 1f       	adc	r31, r19
    550c:	10 82       	st	Z, r1
    550e:	2e 96       	adiw	r28, 0x0e	; 14
    5510:	cd bf       	out	0x3d, r28	; 61
    5512:	de bf       	out	0x3e, r29	; 62
    5514:	df 91       	pop	r29
    5516:	cf 91       	pop	r28
    5518:	1f 91       	pop	r17
    551a:	0f 91       	pop	r16
    551c:	08 95       	ret

0000551e <__ultoa_invert>:
    551e:	fa 01       	movw	r30, r20
    5520:	aa 27       	eor	r26, r26
    5522:	28 30       	cpi	r18, 0x08	; 8
    5524:	51 f1       	breq	.+84     	; 0x557a <__ultoa_invert+0x5c>
    5526:	20 31       	cpi	r18, 0x10	; 16
    5528:	81 f1       	breq	.+96     	; 0x558a <__ultoa_invert+0x6c>
    552a:	e8 94       	clt
    552c:	6f 93       	push	r22
    552e:	6e 7f       	andi	r22, 0xFE	; 254
    5530:	6e 5f       	subi	r22, 0xFE	; 254
    5532:	7f 4f       	sbci	r23, 0xFF	; 255
    5534:	8f 4f       	sbci	r24, 0xFF	; 255
    5536:	9f 4f       	sbci	r25, 0xFF	; 255
    5538:	af 4f       	sbci	r26, 0xFF	; 255
    553a:	b1 e0       	ldi	r27, 0x01	; 1
    553c:	3e d0       	rcall	.+124    	; 0x55ba <__ultoa_invert+0x9c>
    553e:	b4 e0       	ldi	r27, 0x04	; 4
    5540:	3c d0       	rcall	.+120    	; 0x55ba <__ultoa_invert+0x9c>
    5542:	67 0f       	add	r22, r23
    5544:	78 1f       	adc	r23, r24
    5546:	89 1f       	adc	r24, r25
    5548:	9a 1f       	adc	r25, r26
    554a:	a1 1d       	adc	r26, r1
    554c:	68 0f       	add	r22, r24
    554e:	79 1f       	adc	r23, r25
    5550:	8a 1f       	adc	r24, r26
    5552:	91 1d       	adc	r25, r1
    5554:	a1 1d       	adc	r26, r1
    5556:	6a 0f       	add	r22, r26
    5558:	71 1d       	adc	r23, r1
    555a:	81 1d       	adc	r24, r1
    555c:	91 1d       	adc	r25, r1
    555e:	a1 1d       	adc	r26, r1
    5560:	20 d0       	rcall	.+64     	; 0x55a2 <__ultoa_invert+0x84>
    5562:	09 f4       	brne	.+2      	; 0x5566 <__ultoa_invert+0x48>
    5564:	68 94       	set
    5566:	3f 91       	pop	r19
    5568:	2a e0       	ldi	r18, 0x0A	; 10
    556a:	26 9f       	mul	r18, r22
    556c:	11 24       	eor	r1, r1
    556e:	30 19       	sub	r19, r0
    5570:	30 5d       	subi	r19, 0xD0	; 208
    5572:	31 93       	st	Z+, r19
    5574:	de f6       	brtc	.-74     	; 0x552c <__ultoa_invert+0xe>
    5576:	cf 01       	movw	r24, r30
    5578:	08 95       	ret
    557a:	46 2f       	mov	r20, r22
    557c:	47 70       	andi	r20, 0x07	; 7
    557e:	40 5d       	subi	r20, 0xD0	; 208
    5580:	41 93       	st	Z+, r20
    5582:	b3 e0       	ldi	r27, 0x03	; 3
    5584:	0f d0       	rcall	.+30     	; 0x55a4 <__ultoa_invert+0x86>
    5586:	c9 f7       	brne	.-14     	; 0x557a <__ultoa_invert+0x5c>
    5588:	f6 cf       	rjmp	.-20     	; 0x5576 <__ultoa_invert+0x58>
    558a:	46 2f       	mov	r20, r22
    558c:	4f 70       	andi	r20, 0x0F	; 15
    558e:	40 5d       	subi	r20, 0xD0	; 208
    5590:	4a 33       	cpi	r20, 0x3A	; 58
    5592:	18 f0       	brcs	.+6      	; 0x559a <__ultoa_invert+0x7c>
    5594:	49 5d       	subi	r20, 0xD9	; 217
    5596:	31 fd       	sbrc	r19, 1
    5598:	40 52       	subi	r20, 0x20	; 32
    559a:	41 93       	st	Z+, r20
    559c:	02 d0       	rcall	.+4      	; 0x55a2 <__ultoa_invert+0x84>
    559e:	a9 f7       	brne	.-22     	; 0x558a <__ultoa_invert+0x6c>
    55a0:	ea cf       	rjmp	.-44     	; 0x5576 <__ultoa_invert+0x58>
    55a2:	b4 e0       	ldi	r27, 0x04	; 4
    55a4:	a6 95       	lsr	r26
    55a6:	97 95       	ror	r25
    55a8:	87 95       	ror	r24
    55aa:	77 95       	ror	r23
    55ac:	67 95       	ror	r22
    55ae:	ba 95       	dec	r27
    55b0:	c9 f7       	brne	.-14     	; 0x55a4 <__ultoa_invert+0x86>
    55b2:	00 97       	sbiw	r24, 0x00	; 0
    55b4:	61 05       	cpc	r22, r1
    55b6:	71 05       	cpc	r23, r1
    55b8:	08 95       	ret
    55ba:	9b 01       	movw	r18, r22
    55bc:	ac 01       	movw	r20, r24
    55be:	0a 2e       	mov	r0, r26
    55c0:	06 94       	lsr	r0
    55c2:	57 95       	ror	r21
    55c4:	47 95       	ror	r20
    55c6:	37 95       	ror	r19
    55c8:	27 95       	ror	r18
    55ca:	ba 95       	dec	r27
    55cc:	c9 f7       	brne	.-14     	; 0x55c0 <__ultoa_invert+0xa2>
    55ce:	62 0f       	add	r22, r18
    55d0:	73 1f       	adc	r23, r19
    55d2:	84 1f       	adc	r24, r20
    55d4:	95 1f       	adc	r25, r21
    55d6:	a0 1d       	adc	r26, r0
    55d8:	08 95       	ret

000055da <__ctype_isfalse>:
    55da:	99 27       	eor	r25, r25
    55dc:	88 27       	eor	r24, r24

000055de <__ctype_istrue>:
    55de:	08 95       	ret

000055e0 <_exit>:
    55e0:	f8 94       	cli

000055e2 <__stop_program>:
    55e2:	ff cf       	rjmp	.-2      	; 0x55e2 <__stop_program>
