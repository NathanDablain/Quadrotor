
Flight_Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001e2  00804000  000054e0  00005574  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000054e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003e5  008041e2  008041e2  00005756  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00005756  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000057b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  000057f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006f78  00000000  00000000  00005984  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003b03  00000000  00000000  0000c8fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000272d  00000000  00000000  000103ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007ec  00000000  00000000  00012b2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0001c68c  00000000  00000000  00013318  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000306d  00000000  00000000  0002f9a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d0  00000000  00000000  00032a11  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00007d2e  00000000  00000000  00032be1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__ctors_end>
       4:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
       8:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
       c:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      10:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      14:	0c 94 72 0b 	jmp	0x16e4	; 0x16e4 <__vector_5>
      18:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      1c:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      20:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      24:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      28:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      2c:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__vector_11>
      30:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      34:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      38:	0c 94 9f 0b 	jmp	0x173e	; 0x173e <__vector_14>
      3c:	0c 94 c7 0b 	jmp	0x178e	; 0x178e <__vector_15>
      40:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      44:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      48:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      4c:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      50:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      54:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      58:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      5c:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      60:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      64:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      68:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      6c:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      70:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      74:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      78:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      7c:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      80:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      84:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      88:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      8c:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      90:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      94:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      98:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      9c:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      a0:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      a4:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      a8:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      ac:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      b0:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      b4:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      b8:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      bc:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      c0:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      c4:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      c8:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      cc:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      d0:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      d4:	0c 94 96 19 	jmp	0x332c	; 0x332c <__vector_53>
      d8:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      dc:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      e0:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      e4:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      e8:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      ec:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      f0:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      f4:	00 06       	cpc	r0, r16
      f6:	0f 06       	cpc	r0, r31
      f8:	0f 06       	cpc	r0, r31
      fa:	0f 06       	cpc	r0, r31
      fc:	0f 06       	cpc	r0, r31
      fe:	0f 06       	cpc	r0, r31
     100:	0a 06       	cpc	r0, r26
     102:	0f 06       	cpc	r0, r31
     104:	05 06       	cpc	r0, r21
     106:	fb 05       	cpc	r31, r11
     108:	ba 05       	cpc	r27, r10
     10a:	0f 06       	cpc	r0, r31
     10c:	8d 05       	cpc	r24, r13
     10e:	14 06       	cpc	r1, r20
     110:	92 05       	cpc	r25, r2
     112:	97 05       	cpc	r25, r7
     114:	9c 05       	cpc	r25, r12
     116:	a1 05       	cpc	r26, r1
     118:	a6 05       	cpc	r26, r6
     11a:	ab 05       	cpc	r26, r11
     11c:	b0 05       	cpc	r27, r0
     11e:	b5 05       	cpc	r27, r5
     120:	0f 06       	cpc	r0, r31
     122:	0f 06       	cpc	r0, r31
     124:	0f 06       	cpc	r0, r31
     126:	0f 06       	cpc	r0, r31
     128:	0f 06       	cpc	r0, r31
     12a:	0f 06       	cpc	r0, r31
     12c:	0f 06       	cpc	r0, r31
     12e:	e7 05       	cpc	r30, r7
     130:	0f 06       	cpc	r0, r31
     132:	ec 05       	cpc	r30, r12
     134:	f6 05       	cpc	r31, r6
     136:	d3 05       	cpc	r29, r3
     138:	f1 05       	cpc	r31, r1
     13a:	bf 05       	cpc	r27, r15
     13c:	ce 05       	cpc	r28, r14
     13e:	0f 06       	cpc	r0, r31
     140:	0f 06       	cpc	r0, r31
     142:	0f 06       	cpc	r0, r31
     144:	d8 05       	cpc	r29, r8
     146:	c9 05       	cpc	r28, r9
     148:	c4 05       	cpc	r28, r4
     14a:	dd 05       	cpc	r29, r13
     14c:	0f 06       	cpc	r0, r31
     14e:	0f 06       	cpc	r0, r31
     150:	e2 05       	cpc	r30, r2
     152:	41 06       	cpc	r4, r17
     154:	51 06       	cpc	r5, r17
     156:	61 06       	cpc	r6, r17
     158:	71 06       	cpc	r7, r17
     15a:	81 06       	cpc	r8, r17
     15c:	91 06       	cpc	r9, r17
     15e:	a1 06       	cpc	r10, r17
     160:	b1 06       	cpc	r11, r17
     162:	05 08       	sbc	r0, r5
     164:	15 08       	sbc	r1, r5
     166:	25 08       	sbc	r2, r5
     168:	36 08       	sbc	r3, r6
     16a:	46 08       	sbc	r4, r6
     16c:	56 08       	sbc	r5, r6
     16e:	66 08       	sbc	r6, r6
     170:	08 4a       	sbci	r16, 0xA8	; 168
     172:	d7 3b       	cpi	r29, 0xB7	; 183
     174:	3b ce       	rjmp	.-906    	; 0xfffffdec <__eeprom_end+0xff7efdec>
     176:	01 6e       	ori	r16, 0xE1	; 225
     178:	84 bc       	out	0x24, r8	; 36
     17a:	bf fd       	.word	0xfdbf	; ????
     17c:	c1 2f       	mov	r28, r17
     17e:	3d 6c       	ori	r19, 0xCD	; 205
     180:	74 31       	cpi	r23, 0x14	; 20
     182:	9a bd       	out	0x2a, r25	; 42
     184:	56 83       	std	Z+6, r21	; 0x06
     186:	3d da       	rcall	.-2950   	; 0xfffff602 <__eeprom_end+0xff7ef602>
     188:	3d 00       	.word	0x003d	; ????
     18a:	c7 7f       	andi	r28, 0xF7	; 247
     18c:	11 be       	out	0x31, r1	; 49
     18e:	d9 e4       	ldi	r29, 0x49	; 73
     190:	bb 4c       	sbci	r27, 0xCB	; 203
     192:	3e 91       	ld	r19, -X
     194:	6b aa       	std	Y+51, r6	; 0x33
     196:	aa be       	out	0x3a, r10	; 58
     198:	00 00       	nop
     19a:	00 80       	ld	r0, Z
     19c:	3f 05       	cpc	r19, r15
     19e:	a8 4c       	sbci	r26, 0xC8	; 200
     1a0:	cd b2       	in	r12, 0x1d	; 29
     1a2:	d4 4e       	sbci	r29, 0xE4	; 228
     1a4:	b9 38       	cpi	r27, 0x89	; 137
     1a6:	36 a9       	ldd	r19, Z+54	; 0x36
     1a8:	02 0c       	add	r0, r2
     1aa:	50 b9       	out	0x00, r21	; 0
     1ac:	91 86       	std	Z+9, r9	; 0x09
     1ae:	88 08       	sbc	r8, r8
     1b0:	3c a6       	std	Y+44, r3	; 0x2c
     1b2:	aa aa       	std	Y+50, r10	; 0x32
     1b4:	2a be       	out	0x3a, r2	; 58
     1b6:	00 00       	nop
     1b8:	00 80       	ld	r0, Z
     1ba:	3f 06       	cpc	r3, r31
     1bc:	64 ec       	ldi	r22, 0xC4	; 196
     1be:	1b 3c       	cpi	r17, 0xCB	; 203
     1c0:	04 bc       	out	0x24, r0	; 36
     1c2:	16 3e       	cpi	r17, 0xE6	; 230
     1c4:	3b e5       	ldi	r19, 0x5B	; 91
     1c6:	b9 3c       	cpi	r27, 0xC9	; 201
     1c8:	c9 3c       	cpi	r28, 0xC9	; 201
     1ca:	37 c2       	rjmp	.+1134   	; 0x63a <Write_SPI+0xdc>
     1cc:	9e 5a       	subi	r25, 0xAE	; 174
     1ce:	3d 66       	ori	r19, 0x6D	; 109
     1d0:	04 98       	cbi	0x00, 4	; 0
     1d2:	08 3e       	cpi	r16, 0xE8	; 232
     1d4:	ea 69       	ori	r30, 0x9A	; 154
     1d6:	aa aa       	std	Y+50, r10	; 0x32
     1d8:	3e 00       	.word	0x003e	; ????
     1da:	00 00       	nop
     1dc:	80 3f       	cpi	r24, 0xF0	; 240
     1de:	07 63       	ori	r16, 0x37	; 55
     1e0:	42 36       	cpi	r20, 0x62	; 98
     1e2:	b7 9b       	sbis	0x16, 7	; 22
     1e4:	d8 a7       	std	Y+40, r29	; 0x28
     1e6:	1a 39       	cpi	r17, 0x9A	; 154
     1e8:	68 56       	subi	r22, 0x68	; 104
     1ea:	18 ae       	std	Y+56, r1	; 0x38
     1ec:	ba ab       	std	Y+50, r27	; 0x32
     1ee:	55 8c       	ldd	r5, Z+29	; 0x1d
     1f0:	1d 3c       	cpi	r17, 0xCD	; 205
     1f2:	b7 cc       	rjmp	.-1682   	; 0xfffffb62 <__eeprom_end+0xff7efb62>
     1f4:	57 63       	ori	r21, 0x37	; 55
     1f6:	bd 6d       	ori	r27, 0xDD	; 221
     1f8:	ed fd       	.word	0xfded	; ????
     1fa:	75 3e       	cpi	r23, 0xE5	; 229
     1fc:	f6 17       	cp	r31, r22
     1fe:	72 31       	cpi	r23, 0x12	; 18
     200:	bf 00       	.word	0x00bf	; ????
     202:	00 00       	nop
     204:	80 3f       	cpi	r24, 0xF0	; 240
     206:	08 00       	.word	0x0008	; ????
     208:	00 00       	nop
     20a:	be 92       	st	-X, r11
     20c:	24 49       	sbci	r18, 0x94	; 148
     20e:	12 3e       	cpi	r17, 0xE2	; 226
     210:	ab aa       	std	Y+51, r10	; 0x33
     212:	aa 2a       	or	r10, r26
     214:	be cd       	rjmp	.-1156   	; 0xfffffd92 <__eeprom_end+0xff7efd92>
     216:	cc cc       	rjmp	.-1640   	; 0xfffffbb0 <__eeprom_end+0xff7efbb0>
     218:	4c 3e       	cpi	r20, 0xEC	; 236
     21a:	00 00       	nop
     21c:	00 80       	ld	r0, Z
     21e:	be ab       	std	Y+54, r27	; 0x36
     220:	aa aa       	std	Y+50, r10	; 0x32
     222:	aa 3e       	cpi	r26, 0xEA	; 234
     224:	00 00       	nop
     226:	00 00       	nop
     228:	bf 00       	.word	0x00bf	; ????
     22a:	00 00       	nop
     22c:	80 3f       	cpi	r24, 0xF0	; 240
     22e:	00 00       	nop
     230:	00 00       	nop
     232:	00 08       	sbc	r0, r0
     234:	41 78       	andi	r20, 0x81	; 129
     236:	d3 bb       	out	0x13, r29	; 19
     238:	43 87       	std	Z+11, r20	; 0x0b
     23a:	d1 13       	cpse	r29, r17
     23c:	3d 19       	sub	r19, r13
     23e:	0e 3c       	cpi	r16, 0xCE	; 206
     240:	c3 bd       	out	0x23, r28	; 35
     242:	42 82       	std	Z+2, r4	; 0x02
     244:	ad 2b       	or	r26, r29
     246:	3e 68       	ori	r19, 0x8E	; 142
     248:	ec 82       	std	Y+4, r14	; 0x04
     24a:	76 be       	out	0x36, r7	; 54
     24c:	d9 8f       	std	Y+25, r29	; 0x19
     24e:	e1 a9       	ldd	r30, Z+49	; 0x31
     250:	3e 4c       	sbci	r19, 0xCE	; 206
     252:	80 ef       	ldi	r24, 0xF0	; 240
     254:	ff be       	out	0x3f, r15	; 63
     256:	01 c4       	rjmp	.+2050   	; 0xa5a <Write_Character+0x152>
     258:	ff 7f       	andi	r31, 0xFF	; 255
     25a:	3f 00       	.word	0x003f	; ????
     25c:	00 00       	nop
	...

00000260 <__trampolines_end>:
     260:	6e 61       	ori	r22, 0x1E	; 30
     262:	6e 00       	.word	0x006e	; ????

00000264 <__c.2332>:
     264:	69 6e 66 00                                         inf.

00000268 <pstr_nan>:
     268:	4e 41 4e                                            NAN

0000026b <pstr_inity>:
     26b:	49 4e 49 54 59                                      INITY

00000270 <pstr_inf>:
     270:	49 4e 46                                            INF

00000273 <pwr_m10>:
     273:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     283:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

0000028b <pwr_p10>:
     28b:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     29b:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
     2ab:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
     2bb:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
     2cb:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
     2db:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
     2eb:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
     2fb:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     30b:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     31b:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     32b:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     33b:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     34b:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     35b:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     36b:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     37b:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     38b:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     39b:	3d 27 00                                            ='.

0000039e <__ctors_end>:
     39e:	11 24       	eor	r1, r1
     3a0:	1f be       	out	0x3f, r1	; 63
     3a2:	cf ef       	ldi	r28, 0xFF	; 255
     3a4:	cd bf       	out	0x3d, r28	; 61
     3a6:	df e7       	ldi	r29, 0x7F	; 127
     3a8:	de bf       	out	0x3e, r29	; 62

000003aa <__do_copy_data>:
     3aa:	11 e4       	ldi	r17, 0x41	; 65
     3ac:	a0 e0       	ldi	r26, 0x00	; 0
     3ae:	b0 e4       	ldi	r27, 0x40	; 64
     3b0:	e0 ee       	ldi	r30, 0xE0	; 224
     3b2:	f4 e5       	ldi	r31, 0x54	; 84
     3b4:	00 e0       	ldi	r16, 0x00	; 0
     3b6:	0b bf       	out	0x3b, r16	; 59
     3b8:	02 c0       	rjmp	.+4      	; 0x3be <__do_copy_data+0x14>
     3ba:	07 90       	elpm	r0, Z+
     3bc:	0d 92       	st	X+, r0
     3be:	a2 3e       	cpi	r26, 0xE2	; 226
     3c0:	b1 07       	cpc	r27, r17
     3c2:	d9 f7       	brne	.-10     	; 0x3ba <__do_copy_data+0x10>

000003c4 <__do_clear_bss>:
     3c4:	25 e4       	ldi	r18, 0x45	; 69
     3c6:	a2 ee       	ldi	r26, 0xE2	; 226
     3c8:	b1 e4       	ldi	r27, 0x41	; 65
     3ca:	01 c0       	rjmp	.+2      	; 0x3ce <.do_clear_bss_start>

000003cc <.do_clear_bss_loop>:
     3cc:	1d 92       	st	X+, r1

000003ce <.do_clear_bss_start>:
     3ce:	a7 3c       	cpi	r26, 0xC7	; 199
     3d0:	b2 07       	cpc	r27, r18
     3d2:	e1 f7       	brne	.-8      	; 0x3cc <.do_clear_bss_loop>
     3d4:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <main>
     3d8:	0c 94 6e 2a 	jmp	0x54dc	; 0x54dc <_exit>

000003dc <__bad_interrupt>:
     3dc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003e0 <Setup_SPI>:
inline unsigned char Write_Display_Double(unsigned char Address_Byte, unsigned char Data_Byte){
	unsigned char input_data[2] = {Address_Byte, Data_Byte};
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x00, input_data, 2);
	
	return (TWI_status == 4) ? 1 : 0;
}
     3e0:	e0 e0       	ldi	r30, 0x00	; 0
     3e2:	f4 e0       	ldi	r31, 0x04	; 4
     3e4:	80 81       	ld	r24, Z
     3e6:	80 6e       	ori	r24, 0xE0	; 224
     3e8:	80 83       	st	Z, r24
     3ea:	e0 e2       	ldi	r30, 0x20	; 32
     3ec:	f4 e0       	ldi	r31, 0x04	; 4
     3ee:	80 81       	ld	r24, Z
     3f0:	8c 60       	ori	r24, 0x0C	; 12
     3f2:	80 83       	st	Z, r24
     3f4:	e0 e4       	ldi	r30, 0x40	; 64
     3f6:	f4 e0       	ldi	r31, 0x04	; 4
     3f8:	80 81       	ld	r24, Z
     3fa:	85 60       	ori	r24, 0x05	; 5
     3fc:	80 83       	st	Z, r24
     3fe:	e4 e0       	ldi	r30, 0x04	; 4
     400:	f4 e0       	ldi	r31, 0x04	; 4
     402:	80 81       	ld	r24, Z
     404:	80 6e       	ori	r24, 0xE0	; 224
     406:	80 83       	st	Z, r24
     408:	e4 e2       	ldi	r30, 0x24	; 36
     40a:	f4 e0       	ldi	r31, 0x04	; 4
     40c:	80 81       	ld	r24, Z
     40e:	8c 60       	ori	r24, 0x0C	; 12
     410:	80 83       	st	Z, r24
     412:	e0 e6       	ldi	r30, 0x60	; 96
     414:	f9 e0       	ldi	r31, 0x09	; 9
     416:	80 81       	ld	r24, Z
     418:	81 62       	ori	r24, 0x21	; 33
     41a:	80 83       	st	Z, r24
     41c:	08 95       	ret

0000041e <Read_SPI>:
     41e:	af 92       	push	r10
     420:	bf 92       	push	r11
     422:	cf 92       	push	r12
     424:	df 92       	push	r13
     426:	ef 92       	push	r14
     428:	ff 92       	push	r15
     42a:	0f 93       	push	r16
     42c:	1f 93       	push	r17
     42e:	cf 93       	push	r28
     430:	df 93       	push	r29
     432:	18 2f       	mov	r17, r24
     434:	b6 2e       	mov	r11, r22
     436:	e9 01       	movw	r28, r18
     438:	81 34       	cpi	r24, 0x41	; 65
     43a:	71 f4       	brne	.+28     	; 0x458 <Read_SPI+0x3a>
     43c:	e4 e0       	ldi	r30, 0x04	; 4
     43e:	f4 e0       	ldi	r31, 0x04	; 4
     440:	20 81       	ld	r18, Z
     442:	81 e0       	ldi	r24, 0x01	; 1
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	02 c0       	rjmp	.+4      	; 0x44c <Read_SPI+0x2e>
     448:	88 0f       	add	r24, r24
     44a:	99 1f       	adc	r25, r25
     44c:	6a 95       	dec	r22
     44e:	e2 f7       	brpl	.-8      	; 0x448 <Read_SPI+0x2a>
     450:	80 95       	com	r24
     452:	82 23       	and	r24, r18
     454:	80 83       	st	Z, r24
     456:	10 c0       	rjmp	.+32     	; 0x478 <Read_SPI+0x5a>
     458:	82 34       	cpi	r24, 0x42	; 66
     45a:	09 f0       	breq	.+2      	; 0x45e <Read_SPI+0x40>
     45c:	70 c0       	rjmp	.+224    	; 0x53e <Read_SPI+0x120>
     45e:	e4 e2       	ldi	r30, 0x24	; 36
     460:	f4 e0       	ldi	r31, 0x04	; 4
     462:	20 81       	ld	r18, Z
     464:	81 e0       	ldi	r24, 0x01	; 1
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	02 c0       	rjmp	.+4      	; 0x46e <Read_SPI+0x50>
     46a:	88 0f       	add	r24, r24
     46c:	99 1f       	adc	r25, r25
     46e:	6a 95       	dec	r22
     470:	e2 f7       	brpl	.-8      	; 0x46a <Read_SPI+0x4c>
     472:	80 95       	com	r24
     474:	82 23       	and	r24, r18
     476:	80 83       	st	Z, r24
     478:	40 93 64 09 	sts	0x0964, r20	; 0x800964 <__TEXT_REGION_LENGTH__+0x7e0964>
     47c:	c1 2c       	mov	r12, r1
     47e:	d1 2c       	mov	r13, r1
     480:	76 01       	movw	r14, r12
     482:	12 c0       	rjmp	.+36     	; 0x4a8 <Read_SPI+0x8a>
     484:	8f ef       	ldi	r24, 0xFF	; 255
     486:	c8 1a       	sub	r12, r24
     488:	d8 0a       	sbc	r13, r24
     48a:	e8 0a       	sbc	r14, r24
     48c:	f8 0a       	sbc	r15, r24
     48e:	c7 01       	movw	r24, r14
     490:	b6 01       	movw	r22, r12
     492:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <__floatunsisf>
     496:	20 e0       	ldi	r18, 0x00	; 0
     498:	30 e5       	ldi	r19, 0x50	; 80
     49a:	43 ec       	ldi	r20, 0xC3	; 195
     49c:	57 e4       	ldi	r21, 0x47	; 71
     49e:	0e 94 36 1f 	call	0x3e6c	; 0x3e6c <__gesf2>
     4a2:	18 16       	cp	r1, r24
     4a4:	0c f4       	brge	.+2      	; 0x4a8 <Read_SPI+0x8a>
     4a6:	4d c0       	rjmp	.+154    	; 0x542 <Read_SPI+0x124>
     4a8:	80 91 63 09 	lds	r24, 0x0963	; 0x800963 <__TEXT_REGION_LENGTH__+0x7e0963>
     4ac:	88 23       	and	r24, r24
     4ae:	54 f7       	brge	.-44     	; 0x484 <Read_SPI+0x66>
     4b0:	e3 e6       	ldi	r30, 0x63	; 99
     4b2:	f9 e0       	ldi	r31, 0x09	; 9
     4b4:	80 81       	ld	r24, Z
     4b6:	8f 77       	andi	r24, 0x7F	; 127
     4b8:	80 83       	st	Z, r24
     4ba:	80 e0       	ldi	r24, 0x00	; 0
     4bc:	1d c0       	rjmp	.+58     	; 0x4f8 <Read_SPI+0xda>
     4be:	10 92 64 09 	sts	0x0964, r1	; 0x800964 <__TEXT_REGION_LENGTH__+0x7e0964>
     4c2:	11 c0       	rjmp	.+34     	; 0x4e6 <Read_SPI+0xc8>
     4c4:	8f ef       	ldi	r24, 0xFF	; 255
     4c6:	c8 1a       	sub	r12, r24
     4c8:	d8 0a       	sbc	r13, r24
     4ca:	e8 0a       	sbc	r14, r24
     4cc:	f8 0a       	sbc	r15, r24
     4ce:	c7 01       	movw	r24, r14
     4d0:	b6 01       	movw	r22, r12
     4d2:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <__floatunsisf>
     4d6:	20 e0       	ldi	r18, 0x00	; 0
     4d8:	30 e5       	ldi	r19, 0x50	; 80
     4da:	43 ec       	ldi	r20, 0xC3	; 195
     4dc:	57 e4       	ldi	r21, 0x47	; 71
     4de:	0e 94 36 1f 	call	0x3e6c	; 0x3e6c <__gesf2>
     4e2:	18 16       	cp	r1, r24
     4e4:	84 f1       	brlt	.+96     	; 0x546 <Read_SPI+0x128>
     4e6:	80 91 63 09 	lds	r24, 0x0963	; 0x800963 <__TEXT_REGION_LENGTH__+0x7e0963>
     4ea:	88 23       	and	r24, r24
     4ec:	5c f7       	brge	.-42     	; 0x4c4 <Read_SPI+0xa6>
     4ee:	80 91 64 09 	lds	r24, 0x0964	; 0x800964 <__TEXT_REGION_LENGTH__+0x7e0964>
     4f2:	88 83       	st	Y, r24
     4f4:	8a 2d       	mov	r24, r10
     4f6:	21 96       	adiw	r28, 0x01	; 1
     4f8:	aa 24       	eor	r10, r10
     4fa:	a3 94       	inc	r10
     4fc:	a8 0e       	add	r10, r24
     4fe:	80 17       	cp	r24, r16
     500:	f0 f2       	brcs	.-68     	; 0x4be <Read_SPI+0xa0>
     502:	11 34       	cpi	r17, 0x41	; 65
     504:	71 f4       	brne	.+28     	; 0x522 <Read_SPI+0x104>
     506:	e4 e0       	ldi	r30, 0x04	; 4
     508:	f4 e0       	ldi	r31, 0x04	; 4
     50a:	20 81       	ld	r18, Z
     50c:	81 e0       	ldi	r24, 0x01	; 1
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	02 c0       	rjmp	.+4      	; 0x516 <Read_SPI+0xf8>
     512:	88 0f       	add	r24, r24
     514:	99 1f       	adc	r25, r25
     516:	ba 94       	dec	r11
     518:	e2 f7       	brpl	.-8      	; 0x512 <Read_SPI+0xf4>
     51a:	82 2b       	or	r24, r18
     51c:	80 83       	st	Z, r24
     51e:	82 e0       	ldi	r24, 0x02	; 2
     520:	13 c0       	rjmp	.+38     	; 0x548 <Read_SPI+0x12a>
     522:	e4 e2       	ldi	r30, 0x24	; 36
     524:	f4 e0       	ldi	r31, 0x04	; 4
     526:	20 81       	ld	r18, Z
     528:	81 e0       	ldi	r24, 0x01	; 1
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	02 c0       	rjmp	.+4      	; 0x532 <Read_SPI+0x114>
     52e:	88 0f       	add	r24, r24
     530:	99 1f       	adc	r25, r25
     532:	ba 94       	dec	r11
     534:	e2 f7       	brpl	.-8      	; 0x52e <Read_SPI+0x110>
     536:	82 2b       	or	r24, r18
     538:	80 83       	st	Z, r24
     53a:	82 e0       	ldi	r24, 0x02	; 2
     53c:	05 c0       	rjmp	.+10     	; 0x548 <Read_SPI+0x12a>
     53e:	80 e0       	ldi	r24, 0x00	; 0
     540:	03 c0       	rjmp	.+6      	; 0x548 <Read_SPI+0x12a>
     542:	81 e0       	ldi	r24, 0x01	; 1
     544:	01 c0       	rjmp	.+2      	; 0x548 <Read_SPI+0x12a>
     546:	81 e0       	ldi	r24, 0x01	; 1
     548:	df 91       	pop	r29
     54a:	cf 91       	pop	r28
     54c:	1f 91       	pop	r17
     54e:	0f 91       	pop	r16
     550:	ff 90       	pop	r15
     552:	ef 90       	pop	r14
     554:	df 90       	pop	r13
     556:	cf 90       	pop	r12
     558:	bf 90       	pop	r11
     55a:	af 90       	pop	r10
     55c:	08 95       	ret

0000055e <Write_SPI>:
     55e:	cf 92       	push	r12
     560:	df 92       	push	r13
     562:	ef 92       	push	r14
     564:	ff 92       	push	r15
     566:	1f 93       	push	r17
     568:	cf 93       	push	r28
     56a:	df 93       	push	r29
     56c:	81 34       	cpi	r24, 0x41	; 65
     56e:	79 f4       	brne	.+30     	; 0x58e <Write_SPI+0x30>
     570:	a4 e0       	ldi	r26, 0x04	; 4
     572:	b4 e0       	ldi	r27, 0x04	; 4
     574:	9c 91       	ld	r25, X
     576:	e1 e0       	ldi	r30, 0x01	; 1
     578:	f0 e0       	ldi	r31, 0x00	; 0
     57a:	06 2e       	mov	r0, r22
     57c:	02 c0       	rjmp	.+4      	; 0x582 <Write_SPI+0x24>
     57e:	ee 0f       	add	r30, r30
     580:	ff 1f       	adc	r31, r31
     582:	0a 94       	dec	r0
     584:	e2 f7       	brpl	.-8      	; 0x57e <Write_SPI+0x20>
     586:	e0 95       	com	r30
     588:	e9 23       	and	r30, r25
     58a:	ec 93       	st	X, r30
     58c:	11 c0       	rjmp	.+34     	; 0x5b0 <Write_SPI+0x52>
     58e:	82 34       	cpi	r24, 0x42	; 66
     590:	09 f0       	breq	.+2      	; 0x594 <Write_SPI+0x36>
     592:	62 c0       	rjmp	.+196    	; 0x658 <Write_SPI+0xfa>
     594:	a4 e2       	ldi	r26, 0x24	; 36
     596:	b4 e0       	ldi	r27, 0x04	; 4
     598:	9c 91       	ld	r25, X
     59a:	e1 e0       	ldi	r30, 0x01	; 1
     59c:	f0 e0       	ldi	r31, 0x00	; 0
     59e:	06 2e       	mov	r0, r22
     5a0:	02 c0       	rjmp	.+4      	; 0x5a6 <Write_SPI+0x48>
     5a2:	ee 0f       	add	r30, r30
     5a4:	ff 1f       	adc	r31, r31
     5a6:	0a 94       	dec	r0
     5a8:	e2 f7       	brpl	.-8      	; 0x5a2 <Write_SPI+0x44>
     5aa:	e0 95       	com	r30
     5ac:	e9 23       	and	r30, r25
     5ae:	ec 93       	st	X, r30
     5b0:	12 2f       	mov	r17, r18
     5b2:	d6 2f       	mov	r29, r22
     5b4:	c8 2f       	mov	r28, r24
     5b6:	40 93 64 09 	sts	0x0964, r20	; 0x800964 <__TEXT_REGION_LENGTH__+0x7e0964>
     5ba:	c1 2c       	mov	r12, r1
     5bc:	d1 2c       	mov	r13, r1
     5be:	76 01       	movw	r14, r12
     5c0:	11 c0       	rjmp	.+34     	; 0x5e4 <Write_SPI+0x86>
     5c2:	8f ef       	ldi	r24, 0xFF	; 255
     5c4:	c8 1a       	sub	r12, r24
     5c6:	d8 0a       	sbc	r13, r24
     5c8:	e8 0a       	sbc	r14, r24
     5ca:	f8 0a       	sbc	r15, r24
     5cc:	c7 01       	movw	r24, r14
     5ce:	b6 01       	movw	r22, r12
     5d0:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <__floatunsisf>
     5d4:	20 e0       	ldi	r18, 0x00	; 0
     5d6:	30 e5       	ldi	r19, 0x50	; 80
     5d8:	43 ec       	ldi	r20, 0xC3	; 195
     5da:	57 e4       	ldi	r21, 0x47	; 71
     5dc:	0e 94 36 1f 	call	0x3e6c	; 0x3e6c <__gesf2>
     5e0:	18 16       	cp	r1, r24
     5e2:	e4 f1       	brlt	.+120    	; 0x65c <Write_SPI+0xfe>
     5e4:	90 91 63 09 	lds	r25, 0x0963	; 0x800963 <__TEXT_REGION_LENGTH__+0x7e0963>
     5e8:	99 23       	and	r25, r25
     5ea:	5c f7       	brge	.-42     	; 0x5c2 <Write_SPI+0x64>
     5ec:	10 93 64 09 	sts	0x0964, r17	; 0x800964 <__TEXT_REGION_LENGTH__+0x7e0964>
     5f0:	11 c0       	rjmp	.+34     	; 0x614 <Write_SPI+0xb6>
     5f2:	8f ef       	ldi	r24, 0xFF	; 255
     5f4:	c8 1a       	sub	r12, r24
     5f6:	d8 0a       	sbc	r13, r24
     5f8:	e8 0a       	sbc	r14, r24
     5fa:	f8 0a       	sbc	r15, r24
     5fc:	c7 01       	movw	r24, r14
     5fe:	b6 01       	movw	r22, r12
     600:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <__floatunsisf>
     604:	20 e0       	ldi	r18, 0x00	; 0
     606:	30 e5       	ldi	r19, 0x50	; 80
     608:	43 ec       	ldi	r20, 0xC3	; 195
     60a:	57 e4       	ldi	r21, 0x47	; 71
     60c:	0e 94 36 1f 	call	0x3e6c	; 0x3e6c <__gesf2>
     610:	18 16       	cp	r1, r24
     612:	34 f1       	brlt	.+76     	; 0x660 <Write_SPI+0x102>
     614:	90 91 63 09 	lds	r25, 0x0963	; 0x800963 <__TEXT_REGION_LENGTH__+0x7e0963>
     618:	99 23       	and	r25, r25
     61a:	5c f7       	brge	.-42     	; 0x5f2 <Write_SPI+0x94>
     61c:	c1 34       	cpi	r28, 0x41	; 65
     61e:	71 f4       	brne	.+28     	; 0x63c <Write_SPI+0xde>
     620:	e4 e0       	ldi	r30, 0x04	; 4
     622:	f4 e0       	ldi	r31, 0x04	; 4
     624:	20 81       	ld	r18, Z
     626:	81 e0       	ldi	r24, 0x01	; 1
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	02 c0       	rjmp	.+4      	; 0x630 <Write_SPI+0xd2>
     62c:	88 0f       	add	r24, r24
     62e:	99 1f       	adc	r25, r25
     630:	da 95       	dec	r29
     632:	e2 f7       	brpl	.-8      	; 0x62c <Write_SPI+0xce>
     634:	82 2b       	or	r24, r18
     636:	80 83       	st	Z, r24
     638:	82 e0       	ldi	r24, 0x02	; 2
     63a:	13 c0       	rjmp	.+38     	; 0x662 <Write_SPI+0x104>
     63c:	e4 e2       	ldi	r30, 0x24	; 36
     63e:	f4 e0       	ldi	r31, 0x04	; 4
     640:	20 81       	ld	r18, Z
     642:	81 e0       	ldi	r24, 0x01	; 1
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	02 c0       	rjmp	.+4      	; 0x64c <Write_SPI+0xee>
     648:	88 0f       	add	r24, r24
     64a:	99 1f       	adc	r25, r25
     64c:	da 95       	dec	r29
     64e:	e2 f7       	brpl	.-8      	; 0x648 <Write_SPI+0xea>
     650:	82 2b       	or	r24, r18
     652:	80 83       	st	Z, r24
     654:	82 e0       	ldi	r24, 0x02	; 2
     656:	05 c0       	rjmp	.+10     	; 0x662 <Write_SPI+0x104>
     658:	80 e0       	ldi	r24, 0x00	; 0
     65a:	03 c0       	rjmp	.+6      	; 0x662 <Write_SPI+0x104>
     65c:	81 e0       	ldi	r24, 0x01	; 1
     65e:	01 c0       	rjmp	.+2      	; 0x662 <Write_SPI+0x104>
     660:	81 e0       	ldi	r24, 0x01	; 1
     662:	df 91       	pop	r29
     664:	cf 91       	pop	r28
     666:	1f 91       	pop	r17
     668:	ff 90       	pop	r15
     66a:	ef 90       	pop	r14
     66c:	df 90       	pop	r13
     66e:	cf 90       	pop	r12
     670:	08 95       	ret

00000672 <Setup_TWI>:
     672:	e0 e0       	ldi	r30, 0x00	; 0
     674:	f9 e0       	ldi	r31, 0x09	; 9
     676:	80 81       	ld	r24, Z
     678:	8c 60       	ori	r24, 0x0C	; 12
     67a:	80 83       	st	Z, r24
     67c:	89 e1       	ldi	r24, 0x19	; 25
     67e:	80 93 06 09 	sts	0x0906, r24	; 0x800906 <__TEXT_REGION_LENGTH__+0x7e0906>
     682:	e3 e0       	ldi	r30, 0x03	; 3
     684:	f9 e0       	ldi	r31, 0x09	; 9
     686:	80 81       	ld	r24, Z
     688:	83 61       	ori	r24, 0x13	; 19
     68a:	80 83       	st	Z, r24
     68c:	e5 e0       	ldi	r30, 0x05	; 5
     68e:	f9 e0       	ldi	r31, 0x09	; 9
     690:	80 81       	ld	r24, Z
     692:	81 60       	ori	r24, 0x01	; 1
     694:	80 83       	st	Z, r24
     696:	e2 e1       	ldi	r30, 0x12	; 18
     698:	f4 e0       	ldi	r31, 0x04	; 4
     69a:	80 81       	ld	r24, Z
     69c:	88 60       	ori	r24, 0x08	; 8
     69e:	80 83       	st	Z, r24
     6a0:	e3 e1       	ldi	r30, 0x13	; 19
     6a2:	f4 e0       	ldi	r31, 0x04	; 4
     6a4:	80 81       	ld	r24, Z
     6a6:	88 60       	ori	r24, 0x08	; 8
     6a8:	80 83       	st	Z, r24
     6aa:	08 95       	ret

000006ac <Write_TWI>:
     6ac:	af 92       	push	r10
     6ae:	bf 92       	push	r11
     6b0:	cf 92       	push	r12
     6b2:	df 92       	push	r13
     6b4:	ef 92       	push	r14
     6b6:	ff 92       	push	r15
     6b8:	0f 93       	push	r16
     6ba:	1f 93       	push	r17
     6bc:	cf 93       	push	r28
     6be:	df 93       	push	r29
     6c0:	b6 2e       	mov	r11, r22
     6c2:	ea 01       	movw	r28, r20
     6c4:	12 2f       	mov	r17, r18
     6c6:	88 0f       	add	r24, r24
     6c8:	80 93 07 09 	sts	0x0907, r24	; 0x800907 <__TEXT_REGION_LENGTH__+0x7e0907>
     6cc:	c1 2c       	mov	r12, r1
     6ce:	d1 2c       	mov	r13, r1
     6d0:	76 01       	movw	r14, r12
     6d2:	12 c0       	rjmp	.+36     	; 0x6f8 <Write_TWI+0x4c>
     6d4:	8f ef       	ldi	r24, 0xFF	; 255
     6d6:	c8 1a       	sub	r12, r24
     6d8:	d8 0a       	sbc	r13, r24
     6da:	e8 0a       	sbc	r14, r24
     6dc:	f8 0a       	sbc	r15, r24
     6de:	c7 01       	movw	r24, r14
     6e0:	b6 01       	movw	r22, r12
     6e2:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <__floatunsisf>
     6e6:	20 e0       	ldi	r18, 0x00	; 0
     6e8:	34 e2       	ldi	r19, 0x24	; 36
     6ea:	44 e7       	ldi	r20, 0x74	; 116
     6ec:	59 e4       	ldi	r21, 0x49	; 73
     6ee:	0e 94 36 1f 	call	0x3e6c	; 0x3e6c <__gesf2>
     6f2:	18 16       	cp	r1, r24
     6f4:	0c f4       	brge	.+2      	; 0x6f8 <Write_TWI+0x4c>
     6f6:	54 c0       	rjmp	.+168    	; 0x7a0 <Write_TWI+0xf4>
     6f8:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
     6fc:	86 ff       	sbrs	r24, 6
     6fe:	ea cf       	rjmp	.-44     	; 0x6d4 <Write_TWI+0x28>
     700:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
     704:	84 fd       	sbrc	r24, 4
     706:	4e c0       	rjmp	.+156    	; 0x7a4 <Write_TWI+0xf8>
     708:	b0 92 08 09 	sts	0x0908, r11	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
     70c:	11 c0       	rjmp	.+34     	; 0x730 <Write_TWI+0x84>
     70e:	8f ef       	ldi	r24, 0xFF	; 255
     710:	c8 1a       	sub	r12, r24
     712:	d8 0a       	sbc	r13, r24
     714:	e8 0a       	sbc	r14, r24
     716:	f8 0a       	sbc	r15, r24
     718:	c7 01       	movw	r24, r14
     71a:	b6 01       	movw	r22, r12
     71c:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <__floatunsisf>
     720:	20 e0       	ldi	r18, 0x00	; 0
     722:	34 e2       	ldi	r19, 0x24	; 36
     724:	44 e7       	ldi	r20, 0x74	; 116
     726:	59 e4       	ldi	r21, 0x49	; 73
     728:	0e 94 36 1f 	call	0x3e6c	; 0x3e6c <__gesf2>
     72c:	18 16       	cp	r1, r24
     72e:	e4 f1       	brlt	.+120    	; 0x7a8 <Write_TWI+0xfc>
     730:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
     734:	86 ff       	sbrs	r24, 6
     736:	eb cf       	rjmp	.-42     	; 0x70e <Write_TWI+0x62>
     738:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
     73c:	84 fd       	sbrc	r24, 4
     73e:	36 c0       	rjmp	.+108    	; 0x7ac <Write_TWI+0x100>
     740:	80 e0       	ldi	r24, 0x00	; 0
     742:	23 c0       	rjmp	.+70     	; 0x78a <Write_TWI+0xde>
     744:	5e 01       	movw	r10, r28
     746:	8f ef       	ldi	r24, 0xFF	; 255
     748:	a8 1a       	sub	r10, r24
     74a:	b8 0a       	sbc	r11, r24
     74c:	88 81       	ld	r24, Y
     74e:	80 93 08 09 	sts	0x0908, r24	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
     752:	11 c0       	rjmp	.+34     	; 0x776 <Write_TWI+0xca>
     754:	8f ef       	ldi	r24, 0xFF	; 255
     756:	c8 1a       	sub	r12, r24
     758:	d8 0a       	sbc	r13, r24
     75a:	e8 0a       	sbc	r14, r24
     75c:	f8 0a       	sbc	r15, r24
     75e:	c7 01       	movw	r24, r14
     760:	b6 01       	movw	r22, r12
     762:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <__floatunsisf>
     766:	20 e0       	ldi	r18, 0x00	; 0
     768:	34 e2       	ldi	r19, 0x24	; 36
     76a:	44 e7       	ldi	r20, 0x74	; 116
     76c:	59 e4       	ldi	r21, 0x49	; 73
     76e:	0e 94 36 1f 	call	0x3e6c	; 0x3e6c <__gesf2>
     772:	18 16       	cp	r1, r24
     774:	ec f0       	brlt	.+58     	; 0x7b0 <Write_TWI+0x104>
     776:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
     77a:	86 ff       	sbrs	r24, 6
     77c:	eb cf       	rjmp	.-42     	; 0x754 <Write_TWI+0xa8>
     77e:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
     782:	80 2f       	mov	r24, r16
     784:	94 fd       	sbrc	r25, 4
     786:	16 c0       	rjmp	.+44     	; 0x7b4 <Write_TWI+0x108>
     788:	e5 01       	movw	r28, r10
     78a:	01 e0       	ldi	r16, 0x01	; 1
     78c:	08 0f       	add	r16, r24
     78e:	81 17       	cp	r24, r17
     790:	c8 f2       	brcs	.-78     	; 0x744 <Write_TWI+0x98>
     792:	e4 e0       	ldi	r30, 0x04	; 4
     794:	f9 e0       	ldi	r31, 0x09	; 9
     796:	80 81       	ld	r24, Z
     798:	83 60       	ori	r24, 0x03	; 3
     79a:	80 83       	st	Z, r24
     79c:	84 e0       	ldi	r24, 0x04	; 4
     79e:	0b c0       	rjmp	.+22     	; 0x7b6 <Write_TWI+0x10a>
     7a0:	83 e0       	ldi	r24, 0x03	; 3
     7a2:	09 c0       	rjmp	.+18     	; 0x7b6 <Write_TWI+0x10a>
     7a4:	80 e0       	ldi	r24, 0x00	; 0
     7a6:	07 c0       	rjmp	.+14     	; 0x7b6 <Write_TWI+0x10a>
     7a8:	83 e0       	ldi	r24, 0x03	; 3
     7aa:	05 c0       	rjmp	.+10     	; 0x7b6 <Write_TWI+0x10a>
     7ac:	81 e0       	ldi	r24, 0x01	; 1
     7ae:	03 c0       	rjmp	.+6      	; 0x7b6 <Write_TWI+0x10a>
     7b0:	83 e0       	ldi	r24, 0x03	; 3
     7b2:	01 c0       	rjmp	.+2      	; 0x7b6 <Write_TWI+0x10a>
     7b4:	82 e0       	ldi	r24, 0x02	; 2
     7b6:	df 91       	pop	r29
     7b8:	cf 91       	pop	r28
     7ba:	1f 91       	pop	r17
     7bc:	0f 91       	pop	r16
     7be:	ff 90       	pop	r15
     7c0:	ef 90       	pop	r14
     7c2:	df 90       	pop	r13
     7c4:	cf 90       	pop	r12
     7c6:	bf 90       	pop	r11
     7c8:	af 90       	pop	r10
     7ca:	08 95       	ret

000007cc <Setup_LoRa>:
     7cc:	0f 93       	push	r16
     7ce:	1f 93       	push	r17
     7d0:	cf 93       	push	r28
     7d2:	df 93       	push	r29
     7d4:	1f 92       	push	r1
     7d6:	cd b7       	in	r28, 0x3d	; 61
     7d8:	de b7       	in	r29, 0x3e	; 62
     7da:	19 82       	std	Y+1, r1	; 0x01
     7dc:	01 e0       	ldi	r16, 0x01	; 1
     7de:	9e 01       	movw	r18, r28
     7e0:	2f 5f       	subi	r18, 0xFF	; 255
     7e2:	3f 4f       	sbci	r19, 0xFF	; 255
     7e4:	42 e4       	ldi	r20, 0x42	; 66
     7e6:	65 e0       	ldi	r22, 0x05	; 5
     7e8:	81 e4       	ldi	r24, 0x41	; 65
     7ea:	0e 94 0f 02 	call	0x41e	; 0x41e <Read_SPI>
     7ee:	18 2f       	mov	r17, r24
     7f0:	12 70       	andi	r17, 0x02	; 2
     7f2:	20 e8       	ldi	r18, 0x80	; 128
     7f4:	41 e8       	ldi	r20, 0x81	; 129
     7f6:	65 e0       	ldi	r22, 0x05	; 5
     7f8:	81 e4       	ldi	r24, 0x41	; 65
     7fa:	0e 94 af 02 	call	0x55e	; 0x55e <Write_SPI>
     7fe:	18 23       	and	r17, r24
     800:	24 ee       	ldi	r18, 0xE4	; 228
     802:	46 e8       	ldi	r20, 0x86	; 134
     804:	65 e0       	ldi	r22, 0x05	; 5
     806:	81 e4       	ldi	r24, 0x41	; 65
     808:	0e 94 af 02 	call	0x55e	; 0x55e <Write_SPI>
     80c:	18 23       	and	r17, r24
     80e:	20 ec       	ldi	r18, 0xC0	; 192
     810:	47 e8       	ldi	r20, 0x87	; 135
     812:	65 e0       	ldi	r22, 0x05	; 5
     814:	81 e4       	ldi	r24, 0x41	; 65
     816:	0e 94 af 02 	call	0x55e	; 0x55e <Write_SPI>
     81a:	18 23       	and	r17, r24
     81c:	20 e0       	ldi	r18, 0x00	; 0
     81e:	48 e8       	ldi	r20, 0x88	; 136
     820:	65 e0       	ldi	r22, 0x05	; 5
     822:	81 e4       	ldi	r24, 0x41	; 65
     824:	0e 94 af 02 	call	0x55e	; 0x55e <Write_SPI>
     828:	18 23       	and	r17, r24
     82a:	25 e0       	ldi	r18, 0x05	; 5
     82c:	41 e8       	ldi	r20, 0x81	; 129
     82e:	65 e0       	ldi	r22, 0x05	; 5
     830:	81 e4       	ldi	r24, 0x41	; 65
     832:	0e 94 af 02 	call	0x55e	; 0x55e <Write_SPI>
     836:	18 23       	and	r17, r24
     838:	21 e1       	ldi	r18, 0x11	; 17
     83a:	49 e8       	ldi	r20, 0x89	; 137
     83c:	65 e0       	ldi	r22, 0x05	; 5
     83e:	81 e4       	ldi	r24, 0x41	; 65
     840:	0e 94 af 02 	call	0x55e	; 0x55e <Write_SPI>
     844:	18 23       	and	r17, r24
     846:	81 e0       	ldi	r24, 0x01	; 1
     848:	12 30       	cpi	r17, 0x02	; 2
     84a:	09 f0       	breq	.+2      	; 0x84e <Setup_LoRa+0x82>
     84c:	80 e0       	ldi	r24, 0x00	; 0
     84e:	0f 90       	pop	r0
     850:	df 91       	pop	r29
     852:	cf 91       	pop	r28
     854:	1f 91       	pop	r17
     856:	0f 91       	pop	r16
     858:	08 95       	ret

0000085a <Read_LoRa>:
     85a:	ef 92       	push	r14
     85c:	ff 92       	push	r15
     85e:	0f 93       	push	r16
     860:	1f 93       	push	r17
     862:	cf 93       	push	r28
     864:	df 93       	push	r29
     866:	cd b7       	in	r28, 0x3d	; 61
     868:	de b7       	in	r29, 0x3e	; 62
     86a:	25 97       	sbiw	r28, 0x05	; 5
     86c:	cd bf       	out	0x3d, r28	; 61
     86e:	de bf       	out	0x3e, r29	; 62
     870:	19 82       	std	Y+1, r1	; 0x01
     872:	01 e0       	ldi	r16, 0x01	; 1
     874:	9e 01       	movw	r18, r28
     876:	2f 5f       	subi	r18, 0xFF	; 255
     878:	3f 4f       	sbci	r19, 0xFF	; 255
     87a:	43 e1       	ldi	r20, 0x13	; 19
     87c:	65 e0       	ldi	r22, 0x05	; 5
     87e:	81 e4       	ldi	r24, 0x41	; 65
     880:	0e 94 0f 02 	call	0x41e	; 0x41e <Read_SPI>
     884:	19 81       	ldd	r17, Y+1	; 0x01
     886:	81 2f       	mov	r24, r17
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	0e 94 ac 25 	call	0x4b58	; 0x4b58 <malloc>
     88e:	7c 01       	movw	r14, r24
     890:	14 30       	cpi	r17, 0x04	; 4
     892:	60 f1       	brcs	.+88     	; 0x8ec <Read_LoRa+0x92>
     894:	1d 82       	std	Y+5, r1	; 0x05
     896:	9e 01       	movw	r18, r28
     898:	2b 5f       	subi	r18, 0xFB	; 251
     89a:	3f 4f       	sbci	r19, 0xFF	; 255
     89c:	40 e1       	ldi	r20, 0x10	; 16
     89e:	65 e0       	ldi	r22, 0x05	; 5
     8a0:	81 e4       	ldi	r24, 0x41	; 65
     8a2:	0e 94 0f 02 	call	0x41e	; 0x41e <Read_SPI>
     8a6:	2d 81       	ldd	r18, Y+5	; 0x05
     8a8:	4d e8       	ldi	r20, 0x8D	; 141
     8aa:	65 e0       	ldi	r22, 0x05	; 5
     8ac:	81 e4       	ldi	r24, 0x41	; 65
     8ae:	0e 94 af 02 	call	0x55e	; 0x55e <Write_SPI>
     8b2:	09 81       	ldd	r16, Y+1	; 0x01
     8b4:	97 01       	movw	r18, r14
     8b6:	40 e0       	ldi	r20, 0x00	; 0
     8b8:	65 e0       	ldi	r22, 0x05	; 5
     8ba:	81 e4       	ldi	r24, 0x41	; 65
     8bc:	0e 94 0f 02 	call	0x41e	; 0x41e <Read_SPI>
     8c0:	f7 01       	movw	r30, r14
     8c2:	80 81       	ld	r24, Z
     8c4:	85 33       	cpi	r24, 0x35	; 53
     8c6:	91 f4       	brne	.+36     	; 0x8ec <Read_LoRa+0x92>
     8c8:	81 81       	ldd	r24, Z+1	; 0x01
     8ca:	82 33       	cpi	r24, 0x32	; 50
     8cc:	79 f4       	brne	.+30     	; 0x8ec <Read_LoRa+0x92>
     8ce:	82 81       	ldd	r24, Z+2	; 0x02
     8d0:	8a 83       	std	Y+2, r24	; 0x02
     8d2:	83 81       	ldd	r24, Z+3	; 0x03
     8d4:	8b 83       	std	Y+3, r24	; 0x03
     8d6:	1c 82       	std	Y+4, r1	; 0x04
     8d8:	ce 01       	movw	r24, r28
     8da:	02 96       	adiw	r24, 0x02	; 2
     8dc:	0e 94 29 28 	call	0x5052	; 0x5052 <atoi>
     8e0:	18 2f       	mov	r17, r24
     8e2:	c7 01       	movw	r24, r14
     8e4:	0e 94 44 26 	call	0x4c88	; 0x4c88 <free>
     8e8:	81 2f       	mov	r24, r17
     8ea:	04 c0       	rjmp	.+8      	; 0x8f4 <Read_LoRa+0x9a>
     8ec:	c7 01       	movw	r24, r14
     8ee:	0e 94 44 26 	call	0x4c88	; 0x4c88 <free>
     8f2:	80 e0       	ldi	r24, 0x00	; 0
     8f4:	25 96       	adiw	r28, 0x05	; 5
     8f6:	cd bf       	out	0x3d, r28	; 61
     8f8:	de bf       	out	0x3e, r29	; 62
     8fa:	df 91       	pop	r29
     8fc:	cf 91       	pop	r28
     8fe:	1f 91       	pop	r17
     900:	0f 91       	pop	r16
     902:	ff 90       	pop	r15
     904:	ef 90       	pop	r14
     906:	08 95       	ret

00000908 <Write_Character>:

unsigned char Write_Character(char Character_to_write){
     908:	0f 93       	push	r16
     90a:	1f 93       	push	r17
     90c:	cf 93       	push	r28
     90e:	df 93       	push	r29
     910:	cd b7       	in	r28, 0x3d	; 61
     912:	de b7       	in	r29, 0x3e	; 62
     914:	cb 57       	subi	r28, 0x7B	; 123
     916:	d1 09       	sbc	r29, r1
     918:	cd bf       	out	0x3d, r28	; 61
     91a:	de bf       	out	0x3e, r29	; 62
	const unsigned char SSD_space[3] = {0x00, 0x00, 0x00};
     91c:	19 82       	std	Y+1, r1	; 0x01
     91e:	1a 82       	std	Y+2, r1	; 0x02
     920:	1b 82       	std	Y+3, r1	; 0x03
	const unsigned char SSD_dot[3] = {0x00, 0b01000000, 0x00};
     922:	1c 82       	std	Y+4, r1	; 0x04
     924:	40 e4       	ldi	r20, 0x40	; 64
     926:	4d 83       	std	Y+5, r20	; 0x05
     928:	1e 82       	std	Y+6, r1	; 0x06
	const unsigned char SSD_dash[3] = {0b00001000, 0b00001000, 0b00001000};
     92a:	58 e0       	ldi	r21, 0x08	; 8
     92c:	5f 83       	std	Y+7, r21	; 0x07
     92e:	58 87       	std	Y+8, r21	; 0x08
     930:	59 87       	std	Y+9, r21	; 0x09
	const unsigned char SSD_comma[3] = {0b00100000, 0b01100000, 0b00000000};
     932:	90 e2       	ldi	r25, 0x20	; 32
     934:	9a 87       	std	Y+10, r25	; 0x0a
     936:	90 e6       	ldi	r25, 0x60	; 96
     938:	9b 87       	std	Y+11, r25	; 0x0b
     93a:	1c 86       	std	Y+12, r1	; 0x0c
	const unsigned char SSD_asterisk[3] = {0b00000010, 0b00000111, 0b00000010};
     93c:	92 e0       	ldi	r25, 0x02	; 2
     93e:	9d 87       	std	Y+13, r25	; 0x0d
     940:	27 e0       	ldi	r18, 0x07	; 7
     942:	2e 87       	std	Y+14, r18	; 0x0e
     944:	9f 87       	std	Y+15, r25	; 0x0f
	const unsigned char SSD_dollar[5] = {0b01001111, 0b01001001, 0b011111111, 0b01001001, 0b01111001};
     946:	95 e0       	ldi	r25, 0x05	; 5
     948:	e6 e0       	ldi	r30, 0x06	; 6
     94a:	f0 e4       	ldi	r31, 0x40	; 64
     94c:	de 01       	movw	r26, r28
     94e:	50 96       	adiw	r26, 0x10	; 16
     950:	01 90       	ld	r0, Z+
     952:	0d 92       	st	X+, r0
     954:	9a 95       	dec	r25
     956:	e1 f7       	brne	.-8      	; 0x950 <Write_Character+0x48>
	const unsigned char SSD_0[4] = {0b00111110, 0b01000001, 0b01000001, 0b00111110};
     958:	6e e3       	ldi	r22, 0x3E	; 62
     95a:	6d 8b       	std	Y+21, r22	; 0x15
     95c:	31 e4       	ldi	r19, 0x41	; 65
     95e:	3e 8b       	std	Y+22, r19	; 0x16
     960:	3f 8b       	std	Y+23, r19	; 0x17
     962:	68 8f       	std	Y+24, r22	; 0x18
	const unsigned char SSD_1[3] = {0b01000010, 0b01111111, 0b01000000};
     964:	92 e4       	ldi	r25, 0x42	; 66
     966:	99 8f       	std	Y+25, r25	; 0x19
     968:	9f e7       	ldi	r25, 0x7F	; 127
     96a:	9a 8f       	std	Y+26, r25	; 0x1a
     96c:	4b 8f       	std	Y+27, r20	; 0x1b
	const unsigned char SSD_2[4] = {0b01111001, 0b01001001, 0b01001001, 0b01001111};
     96e:	79 e7       	ldi	r23, 0x79	; 121
     970:	7c 8f       	std	Y+28, r23	; 0x1c
     972:	29 e4       	ldi	r18, 0x49	; 73
     974:	2d 8f       	std	Y+29, r18	; 0x1d
     976:	2e 8f       	std	Y+30, r18	; 0x1e
     978:	1f e4       	ldi	r17, 0x4F	; 79
     97a:	1f 8f       	std	Y+31, r17	; 0x1f
	const unsigned char SSD_3[5] = {0b01000001, 0b01001001, 0b01001001, 0b01010101, 0b00110110};
     97c:	05 e0       	ldi	r16, 0x05	; 5
     97e:	eb e0       	ldi	r30, 0x0B	; 11
     980:	f0 e4       	ldi	r31, 0x40	; 64
     982:	de 01       	movw	r26, r28
     984:	90 96       	adiw	r26, 0x20	; 32
     986:	01 90       	ld	r0, Z+
     988:	0d 92       	st	X+, r0
     98a:	0a 95       	dec	r16
     98c:	e1 f7       	brne	.-8      	; 0x986 <Write_Character+0x7e>
	const unsigned char SSD_4[5] = {0b00010000, 0b00011000, 0b00010100, 0b00010010, 0b01111111};
     98e:	05 e0       	ldi	r16, 0x05	; 5
     990:	e0 e1       	ldi	r30, 0x10	; 16
     992:	f0 e4       	ldi	r31, 0x40	; 64
     994:	de 01       	movw	r26, r28
     996:	95 96       	adiw	r26, 0x25	; 37
     998:	01 90       	ld	r0, Z+
     99a:	0d 92       	st	X+, r0
     99c:	0a 95       	dec	r16
     99e:	e1 f7       	brne	.-8      	; 0x998 <Write_Character+0x90>
	const unsigned char SSD_5[4] = {0b01001111, 0b01001001, 0b01001001, 0b01111001};
     9a0:	1a a7       	std	Y+42, r17	; 0x2a
     9a2:	2b a7       	std	Y+43, r18	; 0x2b
     9a4:	2c a7       	std	Y+44, r18	; 0x2c
     9a6:	7d a7       	std	Y+45, r23	; 0x2d
	const unsigned char SSD_6[5] = {0b00011100, 0b00101010, 0b01001001, 0b00101001, 0b00010000};
     9a8:	75 e0       	ldi	r23, 0x05	; 5
     9aa:	e5 e1       	ldi	r30, 0x15	; 21
     9ac:	f0 e4       	ldi	r31, 0x40	; 64
     9ae:	de 01       	movw	r26, r28
     9b0:	9e 96       	adiw	r26, 0x2e	; 46
     9b2:	01 90       	ld	r0, Z+
     9b4:	0d 92       	st	X+, r0
     9b6:	7a 95       	dec	r23
     9b8:	e1 f7       	brne	.-8      	; 0x9b2 <Write_Character+0xaa>
	const unsigned char SSD_7[6] = {0b01000001, 0b00100001, 0b00010001, 0b00001001, 0b00000101, 0b00000011};
     9ba:	76 e0       	ldi	r23, 0x06	; 6
     9bc:	ea e1       	ldi	r30, 0x1A	; 26
     9be:	f0 e4       	ldi	r31, 0x40	; 64
     9c0:	de 01       	movw	r26, r28
     9c2:	d3 96       	adiw	r26, 0x33	; 51
     9c4:	01 90       	ld	r0, Z+
     9c6:	0d 92       	st	X+, r0
     9c8:	7a 95       	dec	r23
     9ca:	e1 f7       	brne	.-8      	; 0x9c4 <Write_Character+0xbc>
	const unsigned char SSD_8[5] = {0b00010100, 0b00101010, 0b01001001, 0b00101010, 0b00010100};
     9cc:	75 e0       	ldi	r23, 0x05	; 5
     9ce:	e0 e2       	ldi	r30, 0x20	; 32
     9d0:	f0 e4       	ldi	r31, 0x40	; 64
     9d2:	de 01       	movw	r26, r28
     9d4:	d9 96       	adiw	r26, 0x39	; 57
     9d6:	01 90       	ld	r0, Z+
     9d8:	0d 92       	st	X+, r0
     9da:	7a 95       	dec	r23
     9dc:	e1 f7       	brne	.-8      	; 0x9d6 <Write_Character+0xce>
	const unsigned char SSD_9[5] = {0b01000110, 0b00101010, 0b00011001, 0b00001010, 0b00000100};
     9de:	75 e0       	ldi	r23, 0x05	; 5
     9e0:	e5 e2       	ldi	r30, 0x25	; 37
     9e2:	f0 e4       	ldi	r31, 0x40	; 64
     9e4:	de 01       	movw	r26, r28
     9e6:	de 96       	adiw	r26, 0x3e	; 62
     9e8:	01 90       	ld	r0, Z+
     9ea:	0d 92       	st	X+, r0
     9ec:	7a 95       	dec	r23
     9ee:	e1 f7       	brne	.-8      	; 0x9e8 <Write_Character+0xe0>
	const unsigned char SSD_G[5] = {0b00011100, 0b00100010, 0b01010001, 0b01010001, 0b01110010};
     9f0:	75 e0       	ldi	r23, 0x05	; 5
     9f2:	ea e2       	ldi	r30, 0x2A	; 42
     9f4:	f0 e4       	ldi	r31, 0x40	; 64
     9f6:	de 01       	movw	r26, r28
     9f8:	ad 5b       	subi	r26, 0xBD	; 189
     9fa:	bf 4f       	sbci	r27, 0xFF	; 255
     9fc:	01 90       	ld	r0, Z+
     9fe:	0d 92       	st	X+, r0
     a00:	7a 95       	dec	r23
     a02:	e1 f7       	brne	.-8      	; 0x9fc <Write_Character+0xf4>
	const unsigned char SSD_N[7] = {0b01111111, 0b00000010, 0b00000100, 0b00001000, 0b00010000, 0b00100000, 0b01111111};
     a04:	77 e0       	ldi	r23, 0x07	; 7
     a06:	ef e2       	ldi	r30, 0x2F	; 47
     a08:	f0 e4       	ldi	r31, 0x40	; 64
     a0a:	de 01       	movw	r26, r28
     a0c:	a8 5b       	subi	r26, 0xB8	; 184
     a0e:	bf 4f       	sbci	r27, 0xFF	; 255
     a10:	01 90       	ld	r0, Z+
     a12:	0d 92       	st	X+, r0
     a14:	7a 95       	dec	r23
     a16:	e1 f7       	brne	.-8      	; 0xa10 <Write_Character+0x108>
	const unsigned char SSD_M[5] = {0b01111111, 0b00000010, 0b00000100, 0b00000010, 0b01111111};
     a18:	75 e0       	ldi	r23, 0x05	; 5
     a1a:	e6 e3       	ldi	r30, 0x36	; 54
     a1c:	f0 e4       	ldi	r31, 0x40	; 64
     a1e:	de 01       	movw	r26, r28
     a20:	a1 5b       	subi	r26, 0xB1	; 177
     a22:	bf 4f       	sbci	r27, 0xFF	; 255
     a24:	01 90       	ld	r0, Z+
     a26:	0d 92       	st	X+, r0
     a28:	7a 95       	dec	r23
     a2a:	e1 f7       	brne	.-8      	; 0xa24 <Write_Character+0x11c>
	const unsigned char SSD_h[4] = {0b01111111, 0b00001000, 0b00001000, 0b01111111};
     a2c:	65 96       	adiw	r28, 0x15	; 21
     a2e:	9f af       	std	Y+63, r25	; 0x3f
     a30:	65 97       	sbiw	r28, 0x15	; 21
     a32:	66 96       	adiw	r28, 0x16	; 22
     a34:	5f af       	std	Y+63, r21	; 0x3f
     a36:	66 97       	sbiw	r28, 0x16	; 22
     a38:	67 96       	adiw	r28, 0x17	; 23
     a3a:	5f af       	std	Y+63, r21	; 0x3f
     a3c:	67 97       	sbiw	r28, 0x17	; 23
     a3e:	68 96       	adiw	r28, 0x18	; 24
     a40:	9f af       	std	Y+63, r25	; 0x3f
     a42:	68 97       	sbiw	r28, 0x18	; 24
	const unsigned char SSD_E[4] = {0b01111111, 0b01001001, 0b01001001, 0b01001001};
     a44:	69 96       	adiw	r28, 0x19	; 25
     a46:	9f af       	std	Y+63, r25	; 0x3f
     a48:	69 97       	sbiw	r28, 0x19	; 25
     a4a:	6a 96       	adiw	r28, 0x1a	; 26
     a4c:	2f af       	std	Y+63, r18	; 0x3f
     a4e:	6a 97       	sbiw	r28, 0x1a	; 26
     a50:	6b 96       	adiw	r28, 0x1b	; 27
     a52:	2f af       	std	Y+63, r18	; 0x3f
     a54:	6b 97       	sbiw	r28, 0x1b	; 27
     a56:	6c 96       	adiw	r28, 0x1c	; 28
     a58:	2f af       	std	Y+63, r18	; 0x3f
     a5a:	6c 97       	sbiw	r28, 0x1c	; 28
	const unsigned char SSD_L[4] = {0b01111111, 0b01000000, 0b01000000, 0b01000000};
     a5c:	6d 96       	adiw	r28, 0x1d	; 29
     a5e:	9f af       	std	Y+63, r25	; 0x3f
     a60:	6d 97       	sbiw	r28, 0x1d	; 29
     a62:	6e 96       	adiw	r28, 0x1e	; 30
     a64:	4f af       	std	Y+63, r20	; 0x3f
     a66:	6e 97       	sbiw	r28, 0x1e	; 30
     a68:	6f 96       	adiw	r28, 0x1f	; 31
     a6a:	4f af       	std	Y+63, r20	; 0x3f
     a6c:	6f 97       	sbiw	r28, 0x1f	; 31
     a6e:	a0 96       	adiw	r28, 0x20	; 32
     a70:	4f af       	std	Y+63, r20	; 0x3f
     a72:	a0 97       	sbiw	r28, 0x20	; 32
	const unsigned char SSD_O[4] = {0b00111110, 0b01000001, 0b01000001, 0b00111110};
     a74:	a1 96       	adiw	r28, 0x21	; 33
     a76:	6f af       	std	Y+63, r22	; 0x3f
     a78:	a1 97       	sbiw	r28, 0x21	; 33
     a7a:	a2 96       	adiw	r28, 0x22	; 34
     a7c:	3f af       	std	Y+63, r19	; 0x3f
     a7e:	a2 97       	sbiw	r28, 0x22	; 34
     a80:	a3 96       	adiw	r28, 0x23	; 35
     a82:	3f af       	std	Y+63, r19	; 0x3f
     a84:	a3 97       	sbiw	r28, 0x23	; 35
     a86:	a4 96       	adiw	r28, 0x24	; 36
     a88:	6f af       	std	Y+63, r22	; 0x3f
     a8a:	a4 97       	sbiw	r28, 0x24	; 36
	const unsigned char SSD_R[5] = {0b01111111, 0b00001001, 0b00011001, 0b00100110, 0b01000000};
     a8c:	25 e0       	ldi	r18, 0x05	; 5
     a8e:	eb e3       	ldi	r30, 0x3B	; 59
     a90:	f0 e4       	ldi	r31, 0x40	; 64
     a92:	de 01       	movw	r26, r28
     a94:	ac 59       	subi	r26, 0x9C	; 156
     a96:	bf 4f       	sbci	r27, 0xFF	; 255
     a98:	01 90       	ld	r0, Z+
     a9a:	0d 92       	st	X+, r0
     a9c:	2a 95       	dec	r18
     a9e:	e1 f7       	brne	.-8      	; 0xa98 <Write_Character+0x190>
	const unsigned char SSD_A[7] = {0b01000000, 0b00010000, 0b00010100, 0b00000010, 0b00010100, 0b00010000, 0b01000000};
     aa0:	27 e0       	ldi	r18, 0x07	; 7
     aa2:	e0 e4       	ldi	r30, 0x40	; 64
     aa4:	f0 e4       	ldi	r31, 0x40	; 64
     aa6:	de 01       	movw	r26, r28
     aa8:	a7 59       	subi	r26, 0x97	; 151
     aaa:	bf 4f       	sbci	r27, 0xFF	; 255
     aac:	01 90       	ld	r0, Z+
     aae:	0d 92       	st	X+, r0
     ab0:	2a 95       	dec	r18
     ab2:	e1 f7       	brne	.-8      	; 0xaac <Write_Character+0x1a4>
	const unsigned char SSD_C[4] = {0b00011100, 0b00100010, 0b01000001, 0b00100010};
     ab4:	4c e1       	ldi	r20, 0x1C	; 28
     ab6:	e1 96       	adiw	r28, 0x31	; 49
     ab8:	4f af       	std	Y+63, r20	; 0x3f
     aba:	e1 97       	sbiw	r28, 0x31	; 49
     abc:	22 e2       	ldi	r18, 0x22	; 34
     abe:	e2 96       	adiw	r28, 0x32	; 50
     ac0:	2f af       	std	Y+63, r18	; 0x3f
     ac2:	e2 97       	sbiw	r28, 0x32	; 50
     ac4:	e3 96       	adiw	r28, 0x33	; 51
     ac6:	3f af       	std	Y+63, r19	; 0x3f
     ac8:	e3 97       	sbiw	r28, 0x33	; 51
     aca:	e4 96       	adiw	r28, 0x34	; 52
     acc:	2f af       	std	Y+63, r18	; 0x3f
     ace:	e4 97       	sbiw	r28, 0x34	; 52
	const unsigned char SSD_F[4] = {0b01111111, 0b00010001, 0b00010001, 0b00000001};
     ad0:	e5 96       	adiw	r28, 0x35	; 53
     ad2:	9f af       	std	Y+63, r25	; 0x3f
     ad4:	e5 97       	sbiw	r28, 0x35	; 53
     ad6:	51 e1       	ldi	r21, 0x11	; 17
     ad8:	e6 96       	adiw	r28, 0x36	; 54
     ada:	5f af       	std	Y+63, r21	; 0x3f
     adc:	e6 97       	sbiw	r28, 0x36	; 54
     ade:	e7 96       	adiw	r28, 0x37	; 55
     ae0:	5f af       	std	Y+63, r21	; 0x3f
     ae2:	e7 97       	sbiw	r28, 0x37	; 55
     ae4:	51 e0       	ldi	r21, 0x01	; 1
     ae6:	e8 96       	adiw	r28, 0x38	; 56
     ae8:	5f af       	std	Y+63, r21	; 0x3f
     aea:	e8 97       	sbiw	r28, 0x38	; 56
	const unsigned char SSD_D[4] = {0b01111111, 0b01000001, 0b00100010, 0b00011100};
     aec:	e9 96       	adiw	r28, 0x39	; 57
     aee:	9f af       	std	Y+63, r25	; 0x3f
     af0:	e9 97       	sbiw	r28, 0x39	; 57
     af2:	ea 96       	adiw	r28, 0x3a	; 58
     af4:	3f af       	std	Y+63, r19	; 0x3f
     af6:	ea 97       	sbiw	r28, 0x3a	; 58
     af8:	eb 96       	adiw	r28, 0x3b	; 59
     afa:	2f af       	std	Y+63, r18	; 0x3f
     afc:	eb 97       	sbiw	r28, 0x3b	; 59
     afe:	ec 96       	adiw	r28, 0x3c	; 60
     b00:	4f af       	std	Y+63, r20	; 0x3f
     b02:	ec 97       	sbiw	r28, 0x3c	; 60
	
	const unsigned char *output;
	unsigned char output_size;
	switch (Character_to_write){
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	fc 01       	movw	r30, r24
     b08:	b4 97       	sbiw	r30, 0x24	; 36
     b0a:	ef 32       	cpi	r30, 0x2F	; 47
     b0c:	f1 05       	cpc	r31, r1
     b0e:	08 f0       	brcs	.+2      	; 0xb12 <Write_Character+0x20a>
     b10:	86 c0       	rjmp	.+268    	; 0xc1e <Write_Character+0x316>
     b12:	e6 58       	subi	r30, 0x86	; 134
     b14:	ff 4f       	sbci	r31, 0xFF	; 255
     b16:	0c 94 4d 25 	jmp	0x4a9a	; 0x4a9a <__tablejump2__>
		case '0':
		output = SSD_0;
		output_size = sizeof(SSD_0);
     b1a:	24 e0       	ldi	r18, 0x04	; 4
	
	const unsigned char *output;
	unsigned char output_size;
	switch (Character_to_write){
		case '0':
		output = SSD_0;
     b1c:	ae 01       	movw	r20, r28
     b1e:	4b 5e       	subi	r20, 0xEB	; 235
     b20:	5f 4f       	sbci	r21, 0xFF	; 255
     b22:	86 c0       	rjmp	.+268    	; 0xc30 <Write_Character+0x328>
		output = SSD_1;
		output_size = sizeof(SSD_1);
		break;
		case '2':
		output = SSD_2;
		output_size = sizeof(SSD_2);
     b24:	24 e0       	ldi	r18, 0x04	; 4
		case '1':
		output = SSD_1;
		output_size = sizeof(SSD_1);
		break;
		case '2':
		output = SSD_2;
     b26:	ae 01       	movw	r20, r28
     b28:	44 5e       	subi	r20, 0xE4	; 228
     b2a:	5f 4f       	sbci	r21, 0xFF	; 255
		output_size = sizeof(SSD_2);
		break;
     b2c:	81 c0       	rjmp	.+258    	; 0xc30 <Write_Character+0x328>
		case '3':
		output = SSD_3;
		output_size = sizeof(SSD_3);
     b2e:	25 e0       	ldi	r18, 0x05	; 5
		case '2':
		output = SSD_2;
		output_size = sizeof(SSD_2);
		break;
		case '3':
		output = SSD_3;
     b30:	ae 01       	movw	r20, r28
     b32:	40 5e       	subi	r20, 0xE0	; 224
     b34:	5f 4f       	sbci	r21, 0xFF	; 255
		output_size = sizeof(SSD_3);
		break;
     b36:	7c c0       	rjmp	.+248    	; 0xc30 <Write_Character+0x328>
		case '4':
		output = SSD_4;
		output_size = sizeof(SSD_4);
     b38:	25 e0       	ldi	r18, 0x05	; 5
		case '3':
		output = SSD_3;
		output_size = sizeof(SSD_3);
		break;
		case '4':
		output = SSD_4;
     b3a:	ae 01       	movw	r20, r28
     b3c:	4b 5d       	subi	r20, 0xDB	; 219
     b3e:	5f 4f       	sbci	r21, 0xFF	; 255
		output_size = sizeof(SSD_4);
		break;
     b40:	77 c0       	rjmp	.+238    	; 0xc30 <Write_Character+0x328>
		case '5':
		output = SSD_5;
		output_size = sizeof(SSD_5);
     b42:	24 e0       	ldi	r18, 0x04	; 4
		case '4':
		output = SSD_4;
		output_size = sizeof(SSD_4);
		break;
		case '5':
		output = SSD_5;
     b44:	ae 01       	movw	r20, r28
     b46:	46 5d       	subi	r20, 0xD6	; 214
     b48:	5f 4f       	sbci	r21, 0xFF	; 255
		output_size = sizeof(SSD_5);
		break;
     b4a:	72 c0       	rjmp	.+228    	; 0xc30 <Write_Character+0x328>
		case '6':
		output = SSD_6;
		output_size = sizeof(SSD_6);
     b4c:	25 e0       	ldi	r18, 0x05	; 5
		case '5':
		output = SSD_5;
		output_size = sizeof(SSD_5);
		break;
		case '6':
		output = SSD_6;
     b4e:	ae 01       	movw	r20, r28
     b50:	42 5d       	subi	r20, 0xD2	; 210
     b52:	5f 4f       	sbci	r21, 0xFF	; 255
		output_size = sizeof(SSD_6);
		break;
     b54:	6d c0       	rjmp	.+218    	; 0xc30 <Write_Character+0x328>
		case '7':
		output = SSD_7;
		output_size = sizeof(SSD_7);
     b56:	26 e0       	ldi	r18, 0x06	; 6
		case '6':
		output = SSD_6;
		output_size = sizeof(SSD_6);
		break;
		case '7':
		output = SSD_7;
     b58:	ae 01       	movw	r20, r28
     b5a:	4d 5c       	subi	r20, 0xCD	; 205
     b5c:	5f 4f       	sbci	r21, 0xFF	; 255
		output_size = sizeof(SSD_7);
		break;
     b5e:	68 c0       	rjmp	.+208    	; 0xc30 <Write_Character+0x328>
		case '8':
		output = SSD_8;
		output_size = sizeof(SSD_8);
     b60:	25 e0       	ldi	r18, 0x05	; 5
		case '7':
		output = SSD_7;
		output_size = sizeof(SSD_7);
		break;
		case '8':
		output = SSD_8;
     b62:	ae 01       	movw	r20, r28
     b64:	47 5c       	subi	r20, 0xC7	; 199
     b66:	5f 4f       	sbci	r21, 0xFF	; 255
		output_size = sizeof(SSD_8);
		break;
     b68:	63 c0       	rjmp	.+198    	; 0xc30 <Write_Character+0x328>
		case '9':
		output = SSD_9;
		output_size = sizeof(SSD_9);
     b6a:	25 e0       	ldi	r18, 0x05	; 5
		case '8':
		output = SSD_8;
		output_size = sizeof(SSD_8);
		break;
		case '9':
		output = SSD_9;
     b6c:	ae 01       	movw	r20, r28
     b6e:	42 5c       	subi	r20, 0xC2	; 194
     b70:	5f 4f       	sbci	r21, 0xFF	; 255
		output_size = sizeof(SSD_9);
		break;
     b72:	5e c0       	rjmp	.+188    	; 0xc30 <Write_Character+0x328>
		case '.':
		output = SSD_dot;
		output_size = sizeof(SSD_dot);
     b74:	23 e0       	ldi	r18, 0x03	; 3
		case '9':
		output = SSD_9;
		output_size = sizeof(SSD_9);
		break;
		case '.':
		output = SSD_dot;
     b76:	ae 01       	movw	r20, r28
     b78:	4c 5f       	subi	r20, 0xFC	; 252
     b7a:	5f 4f       	sbci	r21, 0xFF	; 255
		output_size = sizeof(SSD_dot);
		break;
     b7c:	59 c0       	rjmp	.+178    	; 0xc30 <Write_Character+0x328>
		case 'G':
		output = SSD_G;
		output_size = sizeof(SSD_G);
     b7e:	25 e0       	ldi	r18, 0x05	; 5
		case '.':
		output = SSD_dot;
		output_size = sizeof(SSD_dot);
		break;
		case 'G':
		output = SSD_G;
     b80:	ae 01       	movw	r20, r28
     b82:	4d 5b       	subi	r20, 0xBD	; 189
     b84:	5f 4f       	sbci	r21, 0xFF	; 255
		output_size = sizeof(SSD_G);
		break;
     b86:	54 c0       	rjmp	.+168    	; 0xc30 <Write_Character+0x328>
		case 'N':
		output = SSD_N;
		output_size = sizeof(SSD_N);
     b88:	27 e0       	ldi	r18, 0x07	; 7
		case 'G':
		output = SSD_G;
		output_size = sizeof(SSD_G);
		break;
		case 'N':
		output = SSD_N;
     b8a:	ae 01       	movw	r20, r28
     b8c:	48 5b       	subi	r20, 0xB8	; 184
     b8e:	5f 4f       	sbci	r21, 0xFF	; 255
		output_size = sizeof(SSD_N);
		break;
     b90:	4f c0       	rjmp	.+158    	; 0xc30 <Write_Character+0x328>
		case 'M':
		output = SSD_M;
		output_size = sizeof(SSD_M);
     b92:	25 e0       	ldi	r18, 0x05	; 5
		case 'N':
		output = SSD_N;
		output_size = sizeof(SSD_N);
		break;
		case 'M':
		output = SSD_M;
     b94:	ae 01       	movw	r20, r28
     b96:	41 5b       	subi	r20, 0xB1	; 177
     b98:	5f 4f       	sbci	r21, 0xFF	; 255
		output_size = sizeof(SSD_M);
		break;
     b9a:	4a c0       	rjmp	.+148    	; 0xc30 <Write_Character+0x328>
		case 'H':
		output = SSD_h;
		output_size = sizeof(SSD_h);
     b9c:	24 e0       	ldi	r18, 0x04	; 4
		case 'M':
		output = SSD_M;
		output_size = sizeof(SSD_M);
		break;
		case 'H':
		output = SSD_h;
     b9e:	ae 01       	movw	r20, r28
     ba0:	4c 5a       	subi	r20, 0xAC	; 172
     ba2:	5f 4f       	sbci	r21, 0xFF	; 255
		output_size = sizeof(SSD_h);
		break;
     ba4:	45 c0       	rjmp	.+138    	; 0xc30 <Write_Character+0x328>
		case 'E':
		output = SSD_E;
		output_size = sizeof(SSD_E);
     ba6:	24 e0       	ldi	r18, 0x04	; 4
		case 'H':
		output = SSD_h;
		output_size = sizeof(SSD_h);
		break;
		case 'E':
		output = SSD_E;
     ba8:	ae 01       	movw	r20, r28
     baa:	48 5a       	subi	r20, 0xA8	; 168
     bac:	5f 4f       	sbci	r21, 0xFF	; 255
		output_size = sizeof(SSD_E);
		break;
     bae:	40 c0       	rjmp	.+128    	; 0xc30 <Write_Character+0x328>
		case 'L':
		output = SSD_L;
		output_size = sizeof(SSD_L);
     bb0:	24 e0       	ldi	r18, 0x04	; 4
		case 'E':
		output = SSD_E;
		output_size = sizeof(SSD_E);
		break;
		case 'L':
		output = SSD_L;
     bb2:	ae 01       	movw	r20, r28
     bb4:	44 5a       	subi	r20, 0xA4	; 164
     bb6:	5f 4f       	sbci	r21, 0xFF	; 255
		output_size = sizeof(SSD_L);
		break;
     bb8:	3b c0       	rjmp	.+118    	; 0xc30 <Write_Character+0x328>
		case 'O':
		output = SSD_O;
		output_size = sizeof(SSD_O);
     bba:	24 e0       	ldi	r18, 0x04	; 4
		case 'L':
		output = SSD_L;
		output_size = sizeof(SSD_L);
		break;
		case 'O':
		output = SSD_O;
     bbc:	ae 01       	movw	r20, r28
     bbe:	40 5a       	subi	r20, 0xA0	; 160
     bc0:	5f 4f       	sbci	r21, 0xFF	; 255
		output_size = sizeof(SSD_O);
		break;
     bc2:	36 c0       	rjmp	.+108    	; 0xc30 <Write_Character+0x328>
		case 'R':
		output = SSD_R;
		output_size = sizeof(SSD_R);
     bc4:	25 e0       	ldi	r18, 0x05	; 5
		case 'O':
		output = SSD_O;
		output_size = sizeof(SSD_O);
		break;
		case 'R':
		output = SSD_R;
     bc6:	ae 01       	movw	r20, r28
     bc8:	4c 59       	subi	r20, 0x9C	; 156
     bca:	5f 4f       	sbci	r21, 0xFF	; 255
		output_size = sizeof(SSD_R);
		break;
     bcc:	31 c0       	rjmp	.+98     	; 0xc30 <Write_Character+0x328>
		case 'A':
		output = SSD_A;
		output_size = sizeof(SSD_A);
     bce:	27 e0       	ldi	r18, 0x07	; 7
		case 'R':
		output = SSD_R;
		output_size = sizeof(SSD_R);
		break;
		case 'A':
		output = SSD_A;
     bd0:	ae 01       	movw	r20, r28
     bd2:	47 59       	subi	r20, 0x97	; 151
     bd4:	5f 4f       	sbci	r21, 0xFF	; 255
		output_size = sizeof(SSD_A);
		break;
     bd6:	2c c0       	rjmp	.+88     	; 0xc30 <Write_Character+0x328>
		case 'C':
		output = SSD_C;
		output_size = sizeof(SSD_C);
     bd8:	24 e0       	ldi	r18, 0x04	; 4
		case 'A':
		output = SSD_A;
		output_size = sizeof(SSD_A);
		break;
		case 'C':
		output = SSD_C;
     bda:	ae 01       	movw	r20, r28
     bdc:	40 59       	subi	r20, 0x90	; 144
     bde:	5f 4f       	sbci	r21, 0xFF	; 255
		output_size = sizeof(SSD_C);
		break;
     be0:	27 c0       	rjmp	.+78     	; 0xc30 <Write_Character+0x328>
		case 'F':
		output = SSD_F;
		output_size = sizeof(SSD_F);
     be2:	24 e0       	ldi	r18, 0x04	; 4
		case 'C':
		output = SSD_C;
		output_size = sizeof(SSD_C);
		break;
		case 'F':
		output = SSD_F;
     be4:	ae 01       	movw	r20, r28
     be6:	4c 58       	subi	r20, 0x8C	; 140
     be8:	5f 4f       	sbci	r21, 0xFF	; 255
		output_size = sizeof(SSD_F);
		break;
     bea:	22 c0       	rjmp	.+68     	; 0xc30 <Write_Character+0x328>
		case 'D':
		output = SSD_D;
		output_size = sizeof(SSD_D);
     bec:	24 e0       	ldi	r18, 0x04	; 4
		case 'F':
		output = SSD_F;
		output_size = sizeof(SSD_F);
		break;
		case 'D':
		output = SSD_D;
     bee:	ae 01       	movw	r20, r28
     bf0:	48 58       	subi	r20, 0x88	; 136
     bf2:	5f 4f       	sbci	r21, 0xFF	; 255
		output_size = sizeof(SSD_D);
		break;
     bf4:	1d c0       	rjmp	.+58     	; 0xc30 <Write_Character+0x328>
		case '-':
		output = SSD_dash;
		output_size = sizeof(SSD_dash);
     bf6:	23 e0       	ldi	r18, 0x03	; 3
		case 'D':
		output = SSD_D;
		output_size = sizeof(SSD_D);
		break;
		case '-':
		output = SSD_dash;
     bf8:	ae 01       	movw	r20, r28
     bfa:	49 5f       	subi	r20, 0xF9	; 249
     bfc:	5f 4f       	sbci	r21, 0xFF	; 255
		output_size = sizeof(SSD_dash);
		break;
     bfe:	18 c0       	rjmp	.+48     	; 0xc30 <Write_Character+0x328>
		case '$':
		output = SSD_dollar;
		output_size = sizeof(SSD_dollar);
     c00:	25 e0       	ldi	r18, 0x05	; 5
		case '-':
		output = SSD_dash;
		output_size = sizeof(SSD_dash);
		break;
		case '$':
		output = SSD_dollar;
     c02:	ae 01       	movw	r20, r28
     c04:	40 5f       	subi	r20, 0xF0	; 240
     c06:	5f 4f       	sbci	r21, 0xFF	; 255
		output_size = sizeof(SSD_dollar);
		break;
     c08:	13 c0       	rjmp	.+38     	; 0xc30 <Write_Character+0x328>
		case ',':
		output = SSD_comma;
		output_size = sizeof(SSD_comma);
     c0a:	23 e0       	ldi	r18, 0x03	; 3
		case '$':
		output = SSD_dollar;
		output_size = sizeof(SSD_dollar);
		break;
		case ',':
		output = SSD_comma;
     c0c:	ae 01       	movw	r20, r28
     c0e:	46 5f       	subi	r20, 0xF6	; 246
     c10:	5f 4f       	sbci	r21, 0xFF	; 255
		output_size = sizeof(SSD_comma);
		break;
     c12:	0e c0       	rjmp	.+28     	; 0xc30 <Write_Character+0x328>
		case '*':
		output = SSD_asterisk;
		output_size = sizeof(SSD_asterisk);
     c14:	23 e0       	ldi	r18, 0x03	; 3
		case ',':
		output = SSD_comma;
		output_size = sizeof(SSD_comma);
		break;
		case '*':
		output = SSD_asterisk;
     c16:	ae 01       	movw	r20, r28
     c18:	43 5f       	subi	r20, 0xF3	; 243
     c1a:	5f 4f       	sbci	r21, 0xFF	; 255
		output_size = sizeof(SSD_asterisk);
		break;
     c1c:	09 c0       	rjmp	.+18     	; 0xc30 <Write_Character+0x328>
		default:
		output = SSD_space;
		output_size = sizeof(SSD_space);
     c1e:	23 e0       	ldi	r18, 0x03	; 3
		case '*':
		output = SSD_asterisk;
		output_size = sizeof(SSD_asterisk);
		break;
		default:
		output = SSD_space;
     c20:	ae 01       	movw	r20, r28
     c22:	4f 5f       	subi	r20, 0xFF	; 255
     c24:	5f 4f       	sbci	r21, 0xFF	; 255
		output_size = sizeof(SSD_space);
		break;
     c26:	04 c0       	rjmp	.+8      	; 0xc30 <Write_Character+0x328>
		output = SSD_0;
		output_size = sizeof(SSD_0);
		break;
		case '1':
		output = SSD_1;
		output_size = sizeof(SSD_1);
     c28:	23 e0       	ldi	r18, 0x03	; 3
		case '0':
		output = SSD_0;
		output_size = sizeof(SSD_0);
		break;
		case '1':
		output = SSD_1;
     c2a:	ae 01       	movw	r20, r28
     c2c:	47 5e       	subi	r20, 0xE7	; 231
     c2e:	5f 4f       	sbci	r21, 0xFF	; 255
		default:
		output = SSD_space;
		output_size = sizeof(SSD_space);
		break;
	}
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x40, (unsigned char *)output, output_size);
     c30:	60 e4       	ldi	r22, 0x40	; 64
     c32:	8c e3       	ldi	r24, 0x3C	; 60
     c34:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
     c38:	91 e0       	ldi	r25, 0x01	; 1
     c3a:	84 30       	cpi	r24, 0x04	; 4
     c3c:	09 f0       	breq	.+2      	; 0xc40 <Write_Character+0x338>
     c3e:	90 e0       	ldi	r25, 0x00	; 0
}
     c40:	89 2f       	mov	r24, r25
     c42:	c5 58       	subi	r28, 0x85	; 133
     c44:	df 4f       	sbci	r29, 0xFF	; 255
     c46:	cd bf       	out	0x3d, r28	; 61
     c48:	de bf       	out	0x3e, r29	; 62
     c4a:	df 91       	pop	r29
     c4c:	cf 91       	pop	r28
     c4e:	1f 91       	pop	r17
     c50:	0f 91       	pop	r16
     c52:	08 95       	ret

00000c54 <Clear_Display>:

unsigned char Clear_Display(){
     c54:	ff 92       	push	r15
     c56:	0f 93       	push	r16
     c58:	1f 93       	push	r17
     c5a:	cf 93       	push	r28
     c5c:	df 93       	push	r29
     c5e:	cd b7       	in	r28, 0x3d	; 61
     c60:	de b7       	in	r29, 0x3e	; 62
     c62:	6e 97       	sbiw	r28, 0x1e	; 30
     c64:	cd bf       	out	0x3d, r28	; 61
     c66:	de bf       	out	0x3e, r29	; 62
	unsigned char page = 0;
	unsigned char Clear_Status = 1;
     c68:	01 e0       	ldi	r16, 0x01	; 1
	
	return (TWI_status == 4) ? 1 : 0;
}

unsigned char Clear_Display(){
	unsigned char page = 0;
     c6a:	f1 2c       	mov	r15, r1
	unsigned char Clear_Status = 1;
	
	while(1){
		switch (page){
     c6c:	8f 2d       	mov	r24, r15
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	88 30       	cpi	r24, 0x08	; 8
     c72:	91 05       	cpc	r25, r1
     c74:	08 f0       	brcs	.+2      	; 0xc78 <Clear_Display+0x24>
     c76:	84 c0       	rjmp	.+264    	; 0xd80 <Clear_Display+0x12c>
     c78:	fc 01       	movw	r30, r24
     c7a:	e7 55       	subi	r30, 0x57	; 87
     c7c:	ff 4f       	sbci	r31, 0xFF	; 255
     c7e:	0c 94 4d 25 	jmp	0x4a9a	; 0x4a9a <__tablejump2__>
     c82:	80 eb       	ldi	r24, 0xB0	; 176
     c84:	8e 8f       	std	Y+30, r24	; 0x1e
	
	return Setup_status;
}

inline unsigned char Write_Display(unsigned char Data_Byte){
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x80, &Data_Byte, 1);
     c86:	21 e0       	ldi	r18, 0x01	; 1
     c88:	ae 01       	movw	r20, r28
     c8a:	42 5e       	subi	r20, 0xE2	; 226
     c8c:	5f 4f       	sbci	r21, 0xFF	; 255
     c8e:	60 e8       	ldi	r22, 0x80	; 128
     c90:	8c e3       	ldi	r24, 0x3C	; 60
     c92:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
     c96:	91 e0       	ldi	r25, 0x01	; 1
     c98:	84 30       	cpi	r24, 0x04	; 4
     c9a:	09 f0       	breq	.+2      	; 0xc9e <Clear_Display+0x4a>
     c9c:	90 e0       	ldi	r25, 0x00	; 0
	unsigned char Clear_Status = 1;
	
	while(1){
		switch (page){
			case 0:
			Clear_Status &= Write_Display(SSD_PAGE0);
     c9e:	09 23       	and	r16, r25
			break;
     ca0:	6f c0       	rjmp	.+222    	; 0xd80 <Clear_Display+0x12c>
     ca2:	81 eb       	ldi	r24, 0xB1	; 177
     ca4:	8d 8f       	std	Y+29, r24	; 0x1d
	
	return Setup_status;
}

inline unsigned char Write_Display(unsigned char Data_Byte){
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x80, &Data_Byte, 1);
     ca6:	21 e0       	ldi	r18, 0x01	; 1
     ca8:	ae 01       	movw	r20, r28
     caa:	43 5e       	subi	r20, 0xE3	; 227
     cac:	5f 4f       	sbci	r21, 0xFF	; 255
     cae:	60 e8       	ldi	r22, 0x80	; 128
     cb0:	8c e3       	ldi	r24, 0x3C	; 60
     cb2:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
     cb6:	91 e0       	ldi	r25, 0x01	; 1
     cb8:	84 30       	cpi	r24, 0x04	; 4
     cba:	09 f0       	breq	.+2      	; 0xcbe <Clear_Display+0x6a>
     cbc:	90 e0       	ldi	r25, 0x00	; 0
		switch (page){
			case 0:
			Clear_Status &= Write_Display(SSD_PAGE0);
			break;
			case 1:
			Clear_Status &= Write_Display(SSD_PAGE1);
     cbe:	09 23       	and	r16, r25
			break;
     cc0:	5f c0       	rjmp	.+190    	; 0xd80 <Clear_Display+0x12c>
     cc2:	82 eb       	ldi	r24, 0xB2	; 178
     cc4:	8c 8f       	std	Y+28, r24	; 0x1c
	
	return Setup_status;
}

inline unsigned char Write_Display(unsigned char Data_Byte){
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x80, &Data_Byte, 1);
     cc6:	21 e0       	ldi	r18, 0x01	; 1
     cc8:	ae 01       	movw	r20, r28
     cca:	44 5e       	subi	r20, 0xE4	; 228
     ccc:	5f 4f       	sbci	r21, 0xFF	; 255
     cce:	60 e8       	ldi	r22, 0x80	; 128
     cd0:	8c e3       	ldi	r24, 0x3C	; 60
     cd2:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
     cd6:	91 e0       	ldi	r25, 0x01	; 1
     cd8:	84 30       	cpi	r24, 0x04	; 4
     cda:	09 f0       	breq	.+2      	; 0xcde <Clear_Display+0x8a>
     cdc:	90 e0       	ldi	r25, 0x00	; 0
			break;
			case 1:
			Clear_Status &= Write_Display(SSD_PAGE1);
			break;
			case 2:
			Clear_Status &= Write_Display(SSD_PAGE2);
     cde:	09 23       	and	r16, r25
			break;
     ce0:	4f c0       	rjmp	.+158    	; 0xd80 <Clear_Display+0x12c>
     ce2:	83 eb       	ldi	r24, 0xB3	; 179
     ce4:	8b 8f       	std	Y+27, r24	; 0x1b
	
	return Setup_status;
}

inline unsigned char Write_Display(unsigned char Data_Byte){
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x80, &Data_Byte, 1);
     ce6:	21 e0       	ldi	r18, 0x01	; 1
     ce8:	ae 01       	movw	r20, r28
     cea:	45 5e       	subi	r20, 0xE5	; 229
     cec:	5f 4f       	sbci	r21, 0xFF	; 255
     cee:	60 e8       	ldi	r22, 0x80	; 128
     cf0:	8c e3       	ldi	r24, 0x3C	; 60
     cf2:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
     cf6:	91 e0       	ldi	r25, 0x01	; 1
     cf8:	84 30       	cpi	r24, 0x04	; 4
     cfa:	09 f0       	breq	.+2      	; 0xcfe <Clear_Display+0xaa>
     cfc:	90 e0       	ldi	r25, 0x00	; 0
			break;
			case 2:
			Clear_Status &= Write_Display(SSD_PAGE2);
			break;
			case 3:
			Clear_Status &= Write_Display(SSD_PAGE3);
     cfe:	09 23       	and	r16, r25
			break;
     d00:	3f c0       	rjmp	.+126    	; 0xd80 <Clear_Display+0x12c>
     d02:	84 eb       	ldi	r24, 0xB4	; 180
     d04:	8a 8f       	std	Y+26, r24	; 0x1a
	
	return Setup_status;
}

inline unsigned char Write_Display(unsigned char Data_Byte){
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x80, &Data_Byte, 1);
     d06:	21 e0       	ldi	r18, 0x01	; 1
     d08:	ae 01       	movw	r20, r28
     d0a:	46 5e       	subi	r20, 0xE6	; 230
     d0c:	5f 4f       	sbci	r21, 0xFF	; 255
     d0e:	60 e8       	ldi	r22, 0x80	; 128
     d10:	8c e3       	ldi	r24, 0x3C	; 60
     d12:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
     d16:	91 e0       	ldi	r25, 0x01	; 1
     d18:	84 30       	cpi	r24, 0x04	; 4
     d1a:	09 f0       	breq	.+2      	; 0xd1e <Clear_Display+0xca>
     d1c:	90 e0       	ldi	r25, 0x00	; 0
			break;
			case 3:
			Clear_Status &= Write_Display(SSD_PAGE3);
			break;
			case 4:
			Clear_Status &= Write_Display(SSD_PAGE4);
     d1e:	09 23       	and	r16, r25
			break;
     d20:	2f c0       	rjmp	.+94     	; 0xd80 <Clear_Display+0x12c>
     d22:	85 eb       	ldi	r24, 0xB5	; 181
     d24:	89 8f       	std	Y+25, r24	; 0x19
	
	return Setup_status;
}

inline unsigned char Write_Display(unsigned char Data_Byte){
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x80, &Data_Byte, 1);
     d26:	21 e0       	ldi	r18, 0x01	; 1
     d28:	ae 01       	movw	r20, r28
     d2a:	47 5e       	subi	r20, 0xE7	; 231
     d2c:	5f 4f       	sbci	r21, 0xFF	; 255
     d2e:	60 e8       	ldi	r22, 0x80	; 128
     d30:	8c e3       	ldi	r24, 0x3C	; 60
     d32:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
     d36:	91 e0       	ldi	r25, 0x01	; 1
     d38:	84 30       	cpi	r24, 0x04	; 4
     d3a:	09 f0       	breq	.+2      	; 0xd3e <Clear_Display+0xea>
     d3c:	90 e0       	ldi	r25, 0x00	; 0
			break;
			case 4:
			Clear_Status &= Write_Display(SSD_PAGE4);
			break;
			case 5:
			Clear_Status &= Write_Display(SSD_PAGE5);
     d3e:	09 23       	and	r16, r25
			break;
     d40:	1f c0       	rjmp	.+62     	; 0xd80 <Clear_Display+0x12c>
     d42:	86 eb       	ldi	r24, 0xB6	; 182
     d44:	88 8f       	std	Y+24, r24	; 0x18
	
	return Setup_status;
}

inline unsigned char Write_Display(unsigned char Data_Byte){
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x80, &Data_Byte, 1);
     d46:	21 e0       	ldi	r18, 0x01	; 1
     d48:	ae 01       	movw	r20, r28
     d4a:	48 5e       	subi	r20, 0xE8	; 232
     d4c:	5f 4f       	sbci	r21, 0xFF	; 255
     d4e:	60 e8       	ldi	r22, 0x80	; 128
     d50:	8c e3       	ldi	r24, 0x3C	; 60
     d52:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
     d56:	91 e0       	ldi	r25, 0x01	; 1
     d58:	84 30       	cpi	r24, 0x04	; 4
     d5a:	09 f0       	breq	.+2      	; 0xd5e <Clear_Display+0x10a>
     d5c:	90 e0       	ldi	r25, 0x00	; 0
			break;
			case 5:
			Clear_Status &= Write_Display(SSD_PAGE5);
			break;
			case 6:
			Clear_Status &= Write_Display(SSD_PAGE6);
     d5e:	09 23       	and	r16, r25
			break;
     d60:	0f c0       	rjmp	.+30     	; 0xd80 <Clear_Display+0x12c>
     d62:	87 eb       	ldi	r24, 0xB7	; 183
     d64:	8f 8b       	std	Y+23, r24	; 0x17
	
	return Setup_status;
}

inline unsigned char Write_Display(unsigned char Data_Byte){
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x80, &Data_Byte, 1);
     d66:	21 e0       	ldi	r18, 0x01	; 1
     d68:	ae 01       	movw	r20, r28
     d6a:	49 5e       	subi	r20, 0xE9	; 233
     d6c:	5f 4f       	sbci	r21, 0xFF	; 255
     d6e:	60 e8       	ldi	r22, 0x80	; 128
     d70:	8c e3       	ldi	r24, 0x3C	; 60
     d72:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
     d76:	91 e0       	ldi	r25, 0x01	; 1
     d78:	84 30       	cpi	r24, 0x04	; 4
     d7a:	09 f0       	breq	.+2      	; 0xd7e <Clear_Display+0x12a>
     d7c:	90 e0       	ldi	r25, 0x00	; 0
			break;
			case 6:
			Clear_Status &= Write_Display(SSD_PAGE6);
			break;
			case 7:
			Clear_Status &= Write_Display(SSD_PAGE7);
     d7e:	09 23       	and	r16, r25
			break;
			default:
			break;
		}
		page++;
     d80:	f3 94       	inc	r15
		if (page > 8){break;}
     d82:	88 e0       	ldi	r24, 0x08	; 8
     d84:	8f 15       	cp	r24, r15
     d86:	80 f1       	brcs	.+96     	; 0xde8 <Clear_Display+0x194>
     d88:	1d 8a       	std	Y+21, r1	; 0x15
	
	return Setup_status;
}

inline unsigned char Write_Display(unsigned char Data_Byte){
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x80, &Data_Byte, 1);
     d8a:	21 e0       	ldi	r18, 0x01	; 1
     d8c:	ae 01       	movw	r20, r28
     d8e:	4b 5e       	subi	r20, 0xEB	; 235
     d90:	5f 4f       	sbci	r21, 0xFF	; 255
     d92:	60 e8       	ldi	r22, 0x80	; 128
     d94:	8c e3       	ldi	r24, 0x3C	; 60
     d96:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
     d9a:	91 e0       	ldi	r25, 0x01	; 1
     d9c:	84 30       	cpi	r24, 0x04	; 4
     d9e:	09 f0       	breq	.+2      	; 0xda2 <Clear_Display+0x14e>
     da0:	90 e0       	ldi	r25, 0x00	; 0
			break;
		}
		page++;
		if (page > 8){break;}
		else{
			Clear_Status &= Write_Display(0x00);
     da2:	09 23       	and	r16, r25
     da4:	80 e1       	ldi	r24, 0x10	; 16
     da6:	8e 8b       	std	Y+22, r24	; 0x16
	
	return Setup_status;
}

inline unsigned char Write_Display(unsigned char Data_Byte){
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x80, &Data_Byte, 1);
     da8:	21 e0       	ldi	r18, 0x01	; 1
     daa:	ae 01       	movw	r20, r28
     dac:	4a 5e       	subi	r20, 0xEA	; 234
     dae:	5f 4f       	sbci	r21, 0xFF	; 255
     db0:	60 e8       	ldi	r22, 0x80	; 128
     db2:	8c e3       	ldi	r24, 0x3C	; 60
     db4:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
     db8:	91 e0       	ldi	r25, 0x01	; 1
     dba:	84 30       	cpi	r24, 0x04	; 4
     dbc:	09 f0       	breq	.+2      	; 0xdc0 <Clear_Display+0x16c>
     dbe:	90 e0       	ldi	r25, 0x00	; 0
		}
		page++;
		if (page > 8){break;}
		else{
			Clear_Status &= Write_Display(0x00);
			Clear_Status &= Write_Display(0x10);
     dc0:	09 23       	and	r16, r25
			for (unsigned char j = 0;j<7;j++){
     dc2:	10 e0       	ldi	r17, 0x00	; 0
     dc4:	0e c0       	rjmp	.+28     	; 0xde2 <Clear_Display+0x18e>
				unsigned char input_data[20] = {0};
     dc6:	ae 01       	movw	r20, r28
     dc8:	4f 5f       	subi	r20, 0xFF	; 255
     dca:	5f 4f       	sbci	r21, 0xFF	; 255
     dcc:	84 e1       	ldi	r24, 0x14	; 20
     dce:	fa 01       	movw	r30, r20
     dd0:	11 92       	st	Z+, r1
     dd2:	8a 95       	dec	r24
     dd4:	e9 f7       	brne	.-6      	; 0xdd0 <Clear_Display+0x17c>
				(void)Write_TWI(SSD_ADR, 0x40, input_data, 20);
     dd6:	24 e1       	ldi	r18, 0x14	; 20
     dd8:	60 e4       	ldi	r22, 0x40	; 64
     dda:	8c e3       	ldi	r24, 0x3C	; 60
     ddc:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
		page++;
		if (page > 8){break;}
		else{
			Clear_Status &= Write_Display(0x00);
			Clear_Status &= Write_Display(0x10);
			for (unsigned char j = 0;j<7;j++){
     de0:	1f 5f       	subi	r17, 0xFF	; 255
     de2:	17 30       	cpi	r17, 0x07	; 7
     de4:	80 f3       	brcs	.-32     	; 0xdc6 <Clear_Display+0x172>
     de6:	42 cf       	rjmp	.-380    	; 0xc6c <Clear_Display+0x18>
				(void)Write_TWI(SSD_ADR, 0x40, input_data, 20);
			}
		}
	}
	return Clear_Status;
}
     de8:	80 2f       	mov	r24, r16
     dea:	6e 96       	adiw	r28, 0x1e	; 30
     dec:	cd bf       	out	0x3d, r28	; 61
     dee:	de bf       	out	0x3e, r29	; 62
     df0:	df 91       	pop	r29
     df2:	cf 91       	pop	r28
     df4:	1f 91       	pop	r17
     df6:	0f 91       	pop	r16
     df8:	ff 90       	pop	r15
     dfa:	08 95       	ret

00000dfc <Setup_SSD>:
	free(buffer);
	return 0;
}

// SOLOMON SYSTECH DRIVER (SSD) 1306 CODE
unsigned char Setup_SSD(){
     dfc:	1f 93       	push	r17
     dfe:	cf 93       	push	r28
     e00:	df 93       	push	r29
     e02:	cd b7       	in	r28, 0x3d	; 61
     e04:	de b7       	in	r29, 0x3e	; 62
     e06:	27 97       	sbiw	r28, 0x07	; 7
     e08:	cd bf       	out	0x3d, r28	; 61
     e0a:	de bf       	out	0x3e, r29	; 62
	
	return (TWI_status == 4) ? 1 : 0;
}

inline unsigned char Write_Display_Double(unsigned char Address_Byte, unsigned char Data_Byte){
	unsigned char input_data[2] = {Address_Byte, Data_Byte};
     e0c:	88 ea       	ldi	r24, 0xA8	; 168
     e0e:	89 83       	std	Y+1, r24	; 0x01
     e10:	8f e3       	ldi	r24, 0x3F	; 63
     e12:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x00, input_data, 2);
     e14:	22 e0       	ldi	r18, 0x02	; 2
     e16:	ae 01       	movw	r20, r28
     e18:	4f 5f       	subi	r20, 0xFF	; 255
     e1a:	5f 4f       	sbci	r21, 0xFF	; 255
     e1c:	60 e0       	ldi	r22, 0x00	; 0
     e1e:	8c e3       	ldi	r24, 0x3C	; 60
     e20:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
     e24:	11 e0       	ldi	r17, 0x01	; 1
     e26:	84 30       	cpi	r24, 0x04	; 4
     e28:	09 f0       	breq	.+2      	; 0xe2c <Setup_SSD+0x30>
     e2a:	10 e0       	ldi	r17, 0x00	; 0
	
	return (TWI_status == 4) ? 1 : 0;
}

inline unsigned char Write_Display_Double(unsigned char Address_Byte, unsigned char Data_Byte){
	unsigned char input_data[2] = {Address_Byte, Data_Byte};
     e2c:	83 ed       	ldi	r24, 0xD3	; 211
     e2e:	89 83       	std	Y+1, r24	; 0x01
     e30:	1a 82       	std	Y+2, r1	; 0x02
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x00, input_data, 2);
     e32:	22 e0       	ldi	r18, 0x02	; 2
     e34:	ae 01       	movw	r20, r28
     e36:	4f 5f       	subi	r20, 0xFF	; 255
     e38:	5f 4f       	sbci	r21, 0xFF	; 255
     e3a:	60 e0       	ldi	r22, 0x00	; 0
     e3c:	8c e3       	ldi	r24, 0x3C	; 60
     e3e:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
     e42:	91 e0       	ldi	r25, 0x01	; 1
     e44:	84 30       	cpi	r24, 0x04	; 4
     e46:	09 f0       	breq	.+2      	; 0xe4a <Setup_SSD+0x4e>
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	19 23       	and	r17, r25
     e4c:	80 e4       	ldi	r24, 0x40	; 64
     e4e:	8b 83       	std	Y+3, r24	; 0x03
	
	return Setup_status;
}

inline unsigned char Write_Display(unsigned char Data_Byte){
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x80, &Data_Byte, 1);
     e50:	21 e0       	ldi	r18, 0x01	; 1
     e52:	ae 01       	movw	r20, r28
     e54:	4d 5f       	subi	r20, 0xFD	; 253
     e56:	5f 4f       	sbci	r21, 0xFF	; 255
     e58:	60 e8       	ldi	r22, 0x80	; 128
     e5a:	8c e3       	ldi	r24, 0x3C	; 60
     e5c:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
     e60:	91 e0       	ldi	r25, 0x01	; 1
     e62:	84 30       	cpi	r24, 0x04	; 4
     e64:	09 f0       	breq	.+2      	; 0xe68 <Setup_SSD+0x6c>
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	19 23       	and	r17, r25
     e6a:	80 ea       	ldi	r24, 0xA0	; 160
     e6c:	8c 83       	std	Y+4, r24	; 0x04
	
	return Setup_status;
}

inline unsigned char Write_Display(unsigned char Data_Byte){
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x80, &Data_Byte, 1);
     e6e:	21 e0       	ldi	r18, 0x01	; 1
     e70:	ae 01       	movw	r20, r28
     e72:	4c 5f       	subi	r20, 0xFC	; 252
     e74:	5f 4f       	sbci	r21, 0xFF	; 255
     e76:	60 e8       	ldi	r22, 0x80	; 128
     e78:	8c e3       	ldi	r24, 0x3C	; 60
     e7a:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
     e7e:	91 e0       	ldi	r25, 0x01	; 1
     e80:	84 30       	cpi	r24, 0x04	; 4
     e82:	09 f0       	breq	.+2      	; 0xe86 <Setup_SSD+0x8a>
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	19 23       	and	r17, r25
     e88:	80 ec       	ldi	r24, 0xC0	; 192
     e8a:	8d 83       	std	Y+5, r24	; 0x05
	
	return Setup_status;
}

inline unsigned char Write_Display(unsigned char Data_Byte){
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x80, &Data_Byte, 1);
     e8c:	21 e0       	ldi	r18, 0x01	; 1
     e8e:	ae 01       	movw	r20, r28
     e90:	4b 5f       	subi	r20, 0xFB	; 251
     e92:	5f 4f       	sbci	r21, 0xFF	; 255
     e94:	60 e8       	ldi	r22, 0x80	; 128
     e96:	8c e3       	ldi	r24, 0x3C	; 60
     e98:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
     e9c:	91 e0       	ldi	r25, 0x01	; 1
     e9e:	84 30       	cpi	r24, 0x04	; 4
     ea0:	09 f0       	breq	.+2      	; 0xea4 <Setup_SSD+0xa8>
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	19 23       	and	r17, r25
}

inline unsigned char Write_Display_Double(unsigned char Address_Byte, unsigned char Data_Byte){
	unsigned char input_data[2] = {Address_Byte, Data_Byte};
     ea6:	8a ed       	ldi	r24, 0xDA	; 218
     ea8:	89 83       	std	Y+1, r24	; 0x01
     eaa:	82 e0       	ldi	r24, 0x02	; 2
     eac:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x00, input_data, 2);
     eae:	22 e0       	ldi	r18, 0x02	; 2
     eb0:	ae 01       	movw	r20, r28
     eb2:	4f 5f       	subi	r20, 0xFF	; 255
     eb4:	5f 4f       	sbci	r21, 0xFF	; 255
     eb6:	60 e0       	ldi	r22, 0x00	; 0
     eb8:	8c e3       	ldi	r24, 0x3C	; 60
     eba:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
     ebe:	91 e0       	ldi	r25, 0x01	; 1
     ec0:	84 30       	cpi	r24, 0x04	; 4
     ec2:	09 f0       	breq	.+2      	; 0xec6 <Setup_SSD+0xca>
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	19 23       	and	r17, r25
	
	return (TWI_status == 4) ? 1 : 0;
}

inline unsigned char Write_Display_Double(unsigned char Address_Byte, unsigned char Data_Byte){
	unsigned char input_data[2] = {Address_Byte, Data_Byte};
     ec8:	81 e8       	ldi	r24, 0x81	; 129
     eca:	89 83       	std	Y+1, r24	; 0x01
     ecc:	8f e7       	ldi	r24, 0x7F	; 127
     ece:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x00, input_data, 2);
     ed0:	22 e0       	ldi	r18, 0x02	; 2
     ed2:	ae 01       	movw	r20, r28
     ed4:	4f 5f       	subi	r20, 0xFF	; 255
     ed6:	5f 4f       	sbci	r21, 0xFF	; 255
     ed8:	60 e0       	ldi	r22, 0x00	; 0
     eda:	8c e3       	ldi	r24, 0x3C	; 60
     edc:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
     ee0:	91 e0       	ldi	r25, 0x01	; 1
     ee2:	84 30       	cpi	r24, 0x04	; 4
     ee4:	09 f0       	breq	.+2      	; 0xee8 <Setup_SSD+0xec>
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	19 23       	and	r17, r25
     eea:	84 ea       	ldi	r24, 0xA4	; 164
     eec:	8e 83       	std	Y+6, r24	; 0x06
	
	return Setup_status;
}

inline unsigned char Write_Display(unsigned char Data_Byte){
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x80, &Data_Byte, 1);
     eee:	21 e0       	ldi	r18, 0x01	; 1
     ef0:	ae 01       	movw	r20, r28
     ef2:	4a 5f       	subi	r20, 0xFA	; 250
     ef4:	5f 4f       	sbci	r21, 0xFF	; 255
     ef6:	60 e8       	ldi	r22, 0x80	; 128
     ef8:	8c e3       	ldi	r24, 0x3C	; 60
     efa:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
     efe:	91 e0       	ldi	r25, 0x01	; 1
     f00:	84 30       	cpi	r24, 0x04	; 4
     f02:	09 f0       	breq	.+2      	; 0xf06 <Setup_SSD+0x10a>
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	19 23       	and	r17, r25
     f08:	86 ea       	ldi	r24, 0xA6	; 166
     f0a:	8f 83       	std	Y+7, r24	; 0x07
	
	return Setup_status;
}

inline unsigned char Write_Display(unsigned char Data_Byte){
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x80, &Data_Byte, 1);
     f0c:	21 e0       	ldi	r18, 0x01	; 1
     f0e:	ae 01       	movw	r20, r28
     f10:	49 5f       	subi	r20, 0xF9	; 249
     f12:	5f 4f       	sbci	r21, 0xFF	; 255
     f14:	60 e8       	ldi	r22, 0x80	; 128
     f16:	8c e3       	ldi	r24, 0x3C	; 60
     f18:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
     f1c:	91 e0       	ldi	r25, 0x01	; 1
     f1e:	84 30       	cpi	r24, 0x04	; 4
     f20:	09 f0       	breq	.+2      	; 0xf24 <Setup_SSD+0x128>
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	19 23       	and	r17, r25
}

inline unsigned char Write_Display_Double(unsigned char Address_Byte, unsigned char Data_Byte){
	unsigned char input_data[2] = {Address_Byte, Data_Byte};
     f26:	85 ed       	ldi	r24, 0xD5	; 213
     f28:	89 83       	std	Y+1, r24	; 0x01
     f2a:	80 e8       	ldi	r24, 0x80	; 128
     f2c:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x00, input_data, 2);
     f2e:	22 e0       	ldi	r18, 0x02	; 2
     f30:	ae 01       	movw	r20, r28
     f32:	4f 5f       	subi	r20, 0xFF	; 255
     f34:	5f 4f       	sbci	r21, 0xFF	; 255
     f36:	60 e0       	ldi	r22, 0x00	; 0
     f38:	8c e3       	ldi	r24, 0x3C	; 60
     f3a:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
     f3e:	91 e0       	ldi	r25, 0x01	; 1
     f40:	84 30       	cpi	r24, 0x04	; 4
     f42:	09 f0       	breq	.+2      	; 0xf46 <Setup_SSD+0x14a>
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	19 23       	and	r17, r25
	
	return (TWI_status == 4) ? 1 : 0;
}

inline unsigned char Write_Display_Double(unsigned char Address_Byte, unsigned char Data_Byte){
	unsigned char input_data[2] = {Address_Byte, Data_Byte};
     f48:	8d e8       	ldi	r24, 0x8D	; 141
     f4a:	89 83       	std	Y+1, r24	; 0x01
     f4c:	84 e1       	ldi	r24, 0x14	; 20
     f4e:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x00, input_data, 2);
     f50:	22 e0       	ldi	r18, 0x02	; 2
     f52:	ae 01       	movw	r20, r28
     f54:	4f 5f       	subi	r20, 0xFF	; 255
     f56:	5f 4f       	sbci	r21, 0xFF	; 255
     f58:	60 e0       	ldi	r22, 0x00	; 0
     f5a:	8c e3       	ldi	r24, 0x3C	; 60
     f5c:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
     f60:	91 e0       	ldi	r25, 0x01	; 1
     f62:	84 30       	cpi	r24, 0x04	; 4
     f64:	09 f0       	breq	.+2      	; 0xf68 <Setup_SSD+0x16c>
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	19 23       	and	r17, r25
     f6a:	8f ea       	ldi	r24, 0xAF	; 175
     f6c:	89 83       	std	Y+1, r24	; 0x01
	
	return Setup_status;
}

inline unsigned char Write_Display(unsigned char Data_Byte){
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x80, &Data_Byte, 1);
     f6e:	21 e0       	ldi	r18, 0x01	; 1
     f70:	ae 01       	movw	r20, r28
     f72:	4f 5f       	subi	r20, 0xFF	; 255
     f74:	5f 4f       	sbci	r21, 0xFF	; 255
     f76:	60 e8       	ldi	r22, 0x80	; 128
     f78:	8c e3       	ldi	r24, 0x3C	; 60
     f7a:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
     f7e:	91 e0       	ldi	r25, 0x01	; 1
     f80:	84 30       	cpi	r24, 0x04	; 4
     f82:	09 f0       	breq	.+2      	; 0xf86 <Setup_SSD+0x18a>
     f84:	90 e0       	ldi	r25, 0x00	; 0
	// 10. Set Oscillator Frequency -> 0xD5, 0x80
	Setup_status &= Write_Display_Double(SSD_OSC_FREQUENCY, 0x80);
	// 11. Enable charge pump regulator -> 0x8D, 0x14
	Setup_status &= Write_Display_Double(SSD_CHARGE_PUMP, 0x14);
	// 12. Display On -> 0xAF
	Setup_status &= Write_Display(SSD_DISPLAY_ON);
     f86:	19 23       	and	r17, r25

	Setup_status &= Clear_Display();
     f88:	0e 94 2a 06 	call	0xc54	; 0xc54 <Clear_Display>
	
	return Setup_status;
}
     f8c:	81 23       	and	r24, r17
     f8e:	27 96       	adiw	r28, 0x07	; 7
     f90:	cd bf       	out	0x3d, r28	; 61
     f92:	de bf       	out	0x3e, r29	; 62
     f94:	df 91       	pop	r29
     f96:	cf 91       	pop	r28
     f98:	1f 91       	pop	r17
     f9a:	08 95       	ret

00000f9c <Print_Page>:
		}
	}
	return Clear_Status;
}

unsigned char Print_Page(unsigned char page, char *to_print, unsigned char length_to_print){
     f9c:	df 92       	push	r13
     f9e:	ef 92       	push	r14
     fa0:	ff 92       	push	r15
     fa2:	0f 93       	push	r16
     fa4:	1f 93       	push	r17
     fa6:	cf 93       	push	r28
     fa8:	df 93       	push	r29
     faa:	cd b7       	in	r28, 0x3d	; 61
     fac:	de b7       	in	r29, 0x3e	; 62
     fae:	2a 97       	sbiw	r28, 0x0a	; 10
     fb0:	cd bf       	out	0x3d, r28	; 61
     fb2:	de bf       	out	0x3e, r29	; 62
     fb4:	08 2f       	mov	r16, r24
     fb6:	7b 01       	movw	r14, r22
     fb8:	d4 2e       	mov	r13, r20
     fba:	19 86       	std	Y+9, r1	; 0x09
	
	return Setup_status;
}

inline unsigned char Write_Display(unsigned char Data_Byte){
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x80, &Data_Byte, 1);
     fbc:	21 e0       	ldi	r18, 0x01	; 1
     fbe:	ae 01       	movw	r20, r28
     fc0:	47 5f       	subi	r20, 0xF7	; 247
     fc2:	5f 4f       	sbci	r21, 0xFF	; 255
     fc4:	60 e8       	ldi	r22, 0x80	; 128
     fc6:	8c e3       	ldi	r24, 0x3C	; 60
     fc8:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
     fcc:	11 e0       	ldi	r17, 0x01	; 1
     fce:	84 30       	cpi	r24, 0x04	; 4
     fd0:	09 f0       	breq	.+2      	; 0xfd4 <Print_Page+0x38>
     fd2:	10 e0       	ldi	r17, 0x00	; 0
     fd4:	80 e1       	ldi	r24, 0x10	; 16
     fd6:	8a 87       	std	Y+10, r24	; 0x0a
	
	return Setup_status;
}

inline unsigned char Write_Display(unsigned char Data_Byte){
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x80, &Data_Byte, 1);
     fd8:	21 e0       	ldi	r18, 0x01	; 1
     fda:	ae 01       	movw	r20, r28
     fdc:	46 5f       	subi	r20, 0xF6	; 246
     fde:	5f 4f       	sbci	r21, 0xFF	; 255
     fe0:	60 e8       	ldi	r22, 0x80	; 128
     fe2:	8c e3       	ldi	r24, 0x3C	; 60
     fe4:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
     fe8:	91 e0       	ldi	r25, 0x01	; 1
     fea:	84 30       	cpi	r24, 0x04	; 4
     fec:	09 f0       	breq	.+2      	; 0xff0 <Print_Page+0x54>
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	19 23       	and	r17, r25
unsigned char Print_Page(unsigned char page, char *to_print, unsigned char length_to_print){
	unsigned char counter = 0;
	unsigned char Print_status = 1;
	Print_status &= Write_Display(0x00);
	Print_status &= Write_Display(0x10);
	switch (page){
     ff2:	80 2f       	mov	r24, r16
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	fc 01       	movw	r30, r24
     ff8:	31 97       	sbiw	r30, 0x01	; 1
     ffa:	e7 30       	cpi	r30, 0x07	; 7
     ffc:	f1 05       	cpc	r31, r1
     ffe:	08 f0       	brcs	.+2      	; 0x1002 <Print_Page+0x66>
    1000:	75 c0       	rjmp	.+234    	; 0x10ec <Print_Page+0x150>
    1002:	ef 54       	subi	r30, 0x4F	; 79
    1004:	ff 4f       	sbci	r31, 0xFF	; 255
    1006:	0c 94 4d 25 	jmp	0x4a9a	; 0x4a9a <__tablejump2__>
    100a:	81 eb       	ldi	r24, 0xB1	; 177
    100c:	88 87       	std	Y+8, r24	; 0x08
	
	return Setup_status;
}

inline unsigned char Write_Display(unsigned char Data_Byte){
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x80, &Data_Byte, 1);
    100e:	21 e0       	ldi	r18, 0x01	; 1
    1010:	ae 01       	movw	r20, r28
    1012:	48 5f       	subi	r20, 0xF8	; 248
    1014:	5f 4f       	sbci	r21, 0xFF	; 255
    1016:	60 e8       	ldi	r22, 0x80	; 128
    1018:	8c e3       	ldi	r24, 0x3C	; 60
    101a:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
    101e:	91 e0       	ldi	r25, 0x01	; 1
    1020:	84 30       	cpi	r24, 0x04	; 4
    1022:	09 f0       	breq	.+2      	; 0x1026 <Print_Page+0x8a>
    1024:	90 e0       	ldi	r25, 0x00	; 0
	unsigned char Print_status = 1;
	Print_status &= Write_Display(0x00);
	Print_status &= Write_Display(0x10);
	switch (page){
		case 1:
		Print_status &= Write_Display(SSD_PAGE1);
    1026:	19 23       	and	r17, r25
		break;
    1028:	1f c0       	rjmp	.+62     	; 0x1068 <Print_Page+0xcc>
    102a:	82 eb       	ldi	r24, 0xB2	; 178
    102c:	8f 83       	std	Y+7, r24	; 0x07
	
	return Setup_status;
}

inline unsigned char Write_Display(unsigned char Data_Byte){
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x80, &Data_Byte, 1);
    102e:	21 e0       	ldi	r18, 0x01	; 1
    1030:	ae 01       	movw	r20, r28
    1032:	49 5f       	subi	r20, 0xF9	; 249
    1034:	5f 4f       	sbci	r21, 0xFF	; 255
    1036:	60 e8       	ldi	r22, 0x80	; 128
    1038:	8c e3       	ldi	r24, 0x3C	; 60
    103a:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
    103e:	91 e0       	ldi	r25, 0x01	; 1
    1040:	84 30       	cpi	r24, 0x04	; 4
    1042:	09 f0       	breq	.+2      	; 0x1046 <Print_Page+0xaa>
    1044:	90 e0       	ldi	r25, 0x00	; 0
	switch (page){
		case 1:
		Print_status &= Write_Display(SSD_PAGE1);
		break;
		case 2:
		Print_status &= Write_Display(SSD_PAGE2);
    1046:	19 23       	and	r17, r25
		break;
    1048:	0f c0       	rjmp	.+30     	; 0x1068 <Print_Page+0xcc>
    104a:	83 eb       	ldi	r24, 0xB3	; 179
    104c:	8e 83       	std	Y+6, r24	; 0x06
	
	return Setup_status;
}

inline unsigned char Write_Display(unsigned char Data_Byte){
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x80, &Data_Byte, 1);
    104e:	21 e0       	ldi	r18, 0x01	; 1
    1050:	ae 01       	movw	r20, r28
    1052:	4a 5f       	subi	r20, 0xFA	; 250
    1054:	5f 4f       	sbci	r21, 0xFF	; 255
    1056:	60 e8       	ldi	r22, 0x80	; 128
    1058:	8c e3       	ldi	r24, 0x3C	; 60
    105a:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
    105e:	91 e0       	ldi	r25, 0x01	; 1
    1060:	84 30       	cpi	r24, 0x04	; 4
    1062:	09 f0       	breq	.+2      	; 0x1066 <Print_Page+0xca>
    1064:	90 e0       	ldi	r25, 0x00	; 0
		break;
		case 2:
		Print_status &= Write_Display(SSD_PAGE2);
		break;
		case 3:
		Print_status &= Write_Display(SSD_PAGE3);
    1066:	19 23       	and	r17, r25
		}
	}
	return Clear_Status;
}

unsigned char Print_Page(unsigned char page, char *to_print, unsigned char length_to_print){
    1068:	00 e0       	ldi	r16, 0x00	; 0
    106a:	5c c0       	rjmp	.+184    	; 0x1124 <Print_Page+0x188>
    106c:	84 eb       	ldi	r24, 0xB4	; 180
    106e:	8d 83       	std	Y+5, r24	; 0x05
	
	return Setup_status;
}

inline unsigned char Write_Display(unsigned char Data_Byte){
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x80, &Data_Byte, 1);
    1070:	21 e0       	ldi	r18, 0x01	; 1
    1072:	ae 01       	movw	r20, r28
    1074:	4b 5f       	subi	r20, 0xFB	; 251
    1076:	5f 4f       	sbci	r21, 0xFF	; 255
    1078:	60 e8       	ldi	r22, 0x80	; 128
    107a:	8c e3       	ldi	r24, 0x3C	; 60
    107c:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
    1080:	91 e0       	ldi	r25, 0x01	; 1
    1082:	84 30       	cpi	r24, 0x04	; 4
    1084:	09 f0       	breq	.+2      	; 0x1088 <Print_Page+0xec>
    1086:	90 e0       	ldi	r25, 0x00	; 0
		break;
		case 3:
		Print_status &= Write_Display(SSD_PAGE3);
		break;
		case 4:
		Print_status &= Write_Display(SSD_PAGE4);
    1088:	19 23       	and	r17, r25
		break;
    108a:	ee cf       	rjmp	.-36     	; 0x1068 <Print_Page+0xcc>
    108c:	85 eb       	ldi	r24, 0xB5	; 181
    108e:	8c 83       	std	Y+4, r24	; 0x04
	
	return Setup_status;
}

inline unsigned char Write_Display(unsigned char Data_Byte){
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x80, &Data_Byte, 1);
    1090:	21 e0       	ldi	r18, 0x01	; 1
    1092:	ae 01       	movw	r20, r28
    1094:	4c 5f       	subi	r20, 0xFC	; 252
    1096:	5f 4f       	sbci	r21, 0xFF	; 255
    1098:	60 e8       	ldi	r22, 0x80	; 128
    109a:	8c e3       	ldi	r24, 0x3C	; 60
    109c:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
    10a0:	91 e0       	ldi	r25, 0x01	; 1
    10a2:	84 30       	cpi	r24, 0x04	; 4
    10a4:	09 f0       	breq	.+2      	; 0x10a8 <Print_Page+0x10c>
    10a6:	90 e0       	ldi	r25, 0x00	; 0
		break;
		case 4:
		Print_status &= Write_Display(SSD_PAGE4);
		break;
		case 5:
		Print_status &= Write_Display(SSD_PAGE5);
    10a8:	19 23       	and	r17, r25
		break;
    10aa:	de cf       	rjmp	.-68     	; 0x1068 <Print_Page+0xcc>
    10ac:	86 eb       	ldi	r24, 0xB6	; 182
    10ae:	8b 83       	std	Y+3, r24	; 0x03
	
	return Setup_status;
}

inline unsigned char Write_Display(unsigned char Data_Byte){
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x80, &Data_Byte, 1);
    10b0:	21 e0       	ldi	r18, 0x01	; 1
    10b2:	ae 01       	movw	r20, r28
    10b4:	4d 5f       	subi	r20, 0xFD	; 253
    10b6:	5f 4f       	sbci	r21, 0xFF	; 255
    10b8:	60 e8       	ldi	r22, 0x80	; 128
    10ba:	8c e3       	ldi	r24, 0x3C	; 60
    10bc:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
    10c0:	91 e0       	ldi	r25, 0x01	; 1
    10c2:	84 30       	cpi	r24, 0x04	; 4
    10c4:	09 f0       	breq	.+2      	; 0x10c8 <Print_Page+0x12c>
    10c6:	90 e0       	ldi	r25, 0x00	; 0
		break;
		case 5:
		Print_status &= Write_Display(SSD_PAGE5);
		break;
		case 6:
		Print_status &= Write_Display(SSD_PAGE6);
    10c8:	19 23       	and	r17, r25
		break;
    10ca:	ce cf       	rjmp	.-100    	; 0x1068 <Print_Page+0xcc>
    10cc:	87 eb       	ldi	r24, 0xB7	; 183
    10ce:	8a 83       	std	Y+2, r24	; 0x02
	
	return Setup_status;
}

inline unsigned char Write_Display(unsigned char Data_Byte){
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x80, &Data_Byte, 1);
    10d0:	21 e0       	ldi	r18, 0x01	; 1
    10d2:	ae 01       	movw	r20, r28
    10d4:	4e 5f       	subi	r20, 0xFE	; 254
    10d6:	5f 4f       	sbci	r21, 0xFF	; 255
    10d8:	60 e8       	ldi	r22, 0x80	; 128
    10da:	8c e3       	ldi	r24, 0x3C	; 60
    10dc:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
    10e0:	91 e0       	ldi	r25, 0x01	; 1
    10e2:	84 30       	cpi	r24, 0x04	; 4
    10e4:	09 f0       	breq	.+2      	; 0x10e8 <Print_Page+0x14c>
    10e6:	90 e0       	ldi	r25, 0x00	; 0
		break;
		case 6:
		Print_status &= Write_Display(SSD_PAGE6);
		break;
		case 7:
		Print_status &= Write_Display(SSD_PAGE7);
    10e8:	19 23       	and	r17, r25
		break;
    10ea:	be cf       	rjmp	.-132    	; 0x1068 <Print_Page+0xcc>
    10ec:	80 eb       	ldi	r24, 0xB0	; 176
    10ee:	89 83       	std	Y+1, r24	; 0x01
	
	return Setup_status;
}

inline unsigned char Write_Display(unsigned char Data_Byte){
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x80, &Data_Byte, 1);
    10f0:	21 e0       	ldi	r18, 0x01	; 1
    10f2:	ae 01       	movw	r20, r28
    10f4:	4f 5f       	subi	r20, 0xFF	; 255
    10f6:	5f 4f       	sbci	r21, 0xFF	; 255
    10f8:	60 e8       	ldi	r22, 0x80	; 128
    10fa:	8c e3       	ldi	r24, 0x3C	; 60
    10fc:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
    1100:	91 e0       	ldi	r25, 0x01	; 1
    1102:	84 30       	cpi	r24, 0x04	; 4
    1104:	09 f0       	breq	.+2      	; 0x1108 <Print_Page+0x16c>
    1106:	90 e0       	ldi	r25, 0x00	; 0
		break;
		case 7:
		Print_status &= Write_Display(SSD_PAGE7);
		break;
		default:
		Print_status &= Write_Display(SSD_PAGE0);
    1108:	19 23       	and	r17, r25
		break;
    110a:	ae cf       	rjmp	.-164    	; 0x1068 <Print_Page+0xcc>
	}
	while(counter <= length_to_print){
		Print_status &= Write_Character(to_print[counter]);
    110c:	f7 01       	movw	r30, r14
    110e:	e0 0f       	add	r30, r16
    1110:	f1 1d       	adc	r31, r1
    1112:	80 81       	ld	r24, Z
    1114:	0e 94 84 04 	call	0x908	; 0x908 <Write_Character>
    1118:	18 23       	and	r17, r24
		Print_status &= Write_Character(' ');
    111a:	80 e2       	ldi	r24, 0x20	; 32
    111c:	0e 94 84 04 	call	0x908	; 0x908 <Write_Character>
    1120:	18 23       	and	r17, r24
		counter++;
    1122:	0f 5f       	subi	r16, 0xFF	; 255
		break;
		default:
		Print_status &= Write_Display(SSD_PAGE0);
		break;
	}
	while(counter <= length_to_print){
    1124:	d0 16       	cp	r13, r16
    1126:	90 f7       	brcc	.-28     	; 0x110c <Print_Page+0x170>
		Print_status &= Write_Character(to_print[counter]);
		Print_status &= Write_Character(' ');
		counter++;
	}
	return Print_status;
    1128:	81 2f       	mov	r24, r17
    112a:	2a 96       	adiw	r28, 0x0a	; 10
    112c:	cd bf       	out	0x3d, r28	; 61
    112e:	de bf       	out	0x3e, r29	; 62
    1130:	df 91       	pop	r29
    1132:	cf 91       	pop	r28
    1134:	1f 91       	pop	r17
    1136:	0f 91       	pop	r16
    1138:	ff 90       	pop	r15
    113a:	ef 90       	pop	r14
    113c:	df 90       	pop	r13
    113e:	08 95       	ret

00001140 <Run_Motors>:
// Outputs - Desired throttle command on each of 4 BLDC motors 

// ESC Interface - PPM (OneShot) control
// Inputs - Desired motor throttles (0-100)
// Outputs - 100 Hz, 1-2us waveform to ESC 
void Run_Motors(unsigned char Throttle_Commands[4]){
    1140:	0f 93       	push	r16
    1142:	1f 93       	push	r17
    1144:	cf 93       	push	r28
    1146:	df 93       	push	r29
    1148:	cd b7       	in	r28, 0x3d	; 61
    114a:	de b7       	in	r29, 0x3e	; 62
    114c:	28 97       	sbiw	r28, 0x08	; 8
    114e:	cd bf       	out	0x3d, r28	; 61
    1150:	de bf       	out	0x3e, r29	; 62
    1152:	8c 01       	movw	r16, r24
	// We want to map 0:100 to 3000:6000 (1000:2000 us)
	static unsigned int motor_lookup[101] = {0};
	if (!(motor_lookup[0])){ // Build the lookup table if it hasn't been built yet, enable pins for output
    1154:	80 91 e2 41 	lds	r24, 0x41E2	; 0x8041e2 <__data_end>
    1158:	90 91 e3 41 	lds	r25, 0x41E3	; 0x8041e3 <__data_end+0x1>
    115c:	89 2b       	or	r24, r25
    115e:	a1 f0       	breq	.+40     	; 0x1188 <Run_Motors+0x48>
    1160:	1b c0       	rjmp	.+54     	; 0x1198 <Run_Motors+0x58>
		for (unsigned char i=0;i<101;i++){
			motor_lookup[i] = 30*i + 3000;
    1162:	29 2f       	mov	r18, r25
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	6e e1       	ldi	r22, 0x1E	; 30
    1168:	62 9f       	mul	r22, r18
    116a:	a0 01       	movw	r20, r0
    116c:	63 9f       	mul	r22, r19
    116e:	50 0d       	add	r21, r0
    1170:	11 24       	eor	r1, r1
    1172:	48 54       	subi	r20, 0x48	; 72
    1174:	54 4f       	sbci	r21, 0xF4	; 244
    1176:	22 0f       	add	r18, r18
    1178:	33 1f       	adc	r19, r19
    117a:	f9 01       	movw	r30, r18
    117c:	ee 51       	subi	r30, 0x1E	; 30
    117e:	fe 4b       	sbci	r31, 0xBE	; 190
    1180:	40 83       	st	Z, r20
    1182:	51 83       	std	Z+1, r21	; 0x01
// Outputs - 100 Hz, 1-2us waveform to ESC 
void Run_Motors(unsigned char Throttle_Commands[4]){
	// We want to map 0:100 to 3000:6000 (1000:2000 us)
	static unsigned int motor_lookup[101] = {0};
	if (!(motor_lookup[0])){ // Build the lookup table if it hasn't been built yet, enable pins for output
		for (unsigned char i=0;i<101;i++){
    1184:	9f 5f       	subi	r25, 0xFF	; 255
    1186:	01 c0       	rjmp	.+2      	; 0x118a <Run_Motors+0x4a>
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	95 36       	cpi	r25, 0x65	; 101
    118c:	50 f3       	brcs	.-44     	; 0x1162 <Run_Motors+0x22>
			motor_lookup[i] = 30*i + 3000;
		}
		PORTD_DIR |= PIN0_bm;
    118e:	e0 e6       	ldi	r30, 0x60	; 96
    1190:	f4 e0       	ldi	r31, 0x04	; 4
    1192:	80 81       	ld	r24, Z
    1194:	81 60       	ori	r24, 0x01	; 1
    1196:	80 83       	st	Z, r24
	}
	unsigned int mapped_throttle_commands[4] = {0};
    1198:	de 01       	movw	r26, r28
    119a:	11 96       	adiw	r26, 0x01	; 1
    119c:	88 e0       	ldi	r24, 0x08	; 8
    119e:	fd 01       	movw	r30, r26
    11a0:	11 92       	st	Z+, r1
    11a2:	8a 95       	dec	r24
    11a4:	e9 f7       	brne	.-6      	; 0x11a0 <Run_Motors+0x60>
	for (unsigned char i=0;i<4;i++){
    11a6:	20 e0       	ldi	r18, 0x00	; 0
    11a8:	1f c0       	rjmp	.+62     	; 0x11e8 <Run_Motors+0xa8>
		Throttle_Commands[i] = (Throttle_Commands[i]>100)?100:Throttle_Commands[i];
    11aa:	c8 01       	movw	r24, r16
    11ac:	82 0f       	add	r24, r18
    11ae:	91 1d       	adc	r25, r1
    11b0:	dc 01       	movw	r26, r24
    11b2:	ec 91       	ld	r30, X
    11b4:	e5 36       	cpi	r30, 0x65	; 101
    11b6:	08 f0       	brcs	.+2      	; 0x11ba <Run_Motors+0x7a>
    11b8:	e4 e6       	ldi	r30, 0x64	; 100
    11ba:	dc 01       	movw	r26, r24
    11bc:	ec 93       	st	X, r30
		mapped_throttle_commands[i] = motor_lookup[Throttle_Commands[i]];
    11be:	82 2f       	mov	r24, r18
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	ee 0f       	add	r30, r30
    11c6:	ff 1f       	adc	r31, r31
    11c8:	ee 51       	subi	r30, 0x1E	; 30
    11ca:	fe 4b       	sbci	r31, 0xBE	; 190
    11cc:	40 81       	ld	r20, Z
    11ce:	51 81       	ldd	r21, Z+1	; 0x01
    11d0:	fc 01       	movw	r30, r24
    11d2:	ee 0f       	add	r30, r30
    11d4:	ff 1f       	adc	r31, r31
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	8c 0f       	add	r24, r28
    11dc:	9d 1f       	adc	r25, r29
    11de:	e8 0f       	add	r30, r24
    11e0:	f9 1f       	adc	r31, r25
    11e2:	40 83       	st	Z, r20
    11e4:	51 83       	std	Z+1, r21	; 0x01
			motor_lookup[i] = 30*i + 3000;
		}
		PORTD_DIR |= PIN0_bm;
	}
	unsigned int mapped_throttle_commands[4] = {0};
	for (unsigned char i=0;i<4;i++){
    11e6:	2f 5f       	subi	r18, 0xFF	; 255
    11e8:	24 30       	cpi	r18, 0x04	; 4
    11ea:	f8 f2       	brcs	.-66     	; 0x11aa <Run_Motors+0x6a>
		Throttle_Commands[i] = (Throttle_Commands[i]>100)?100:Throttle_Commands[i];
		mapped_throttle_commands[i] = motor_lookup[Throttle_Commands[i]];
	}
	// Set motor throttles
	TCA0_SINGLE_CMP0 = mapped_throttle_commands[0]; // Motor 1, back
    11ec:	89 81       	ldd	r24, Y+1	; 0x01
    11ee:	9a 81       	ldd	r25, Y+2	; 0x02
    11f0:	80 93 28 0a 	sts	0x0A28, r24	; 0x800a28 <__TEXT_REGION_LENGTH__+0x7e0a28>
    11f4:	90 93 29 0a 	sts	0x0A29, r25	; 0x800a29 <__TEXT_REGION_LENGTH__+0x7e0a29>
	//TCA0_SPLIT_LCMP1 = mapped_throttle_commands[1]; // Motor 2, left
	//TCA0_SPLIT_LCMP2 = mapped_throttle_commands[2]; // Motor 3, front
	//TCA0_SPLIT_HCMP0 = mapped_throttle_commands[3]; // Motor 4, right
	// Reset timer count
	TCA0_SINGLE_CNT = 0;
    11f8:	10 92 20 0a 	sts	0x0A20, r1	; 0x800a20 <__TEXT_REGION_LENGTH__+0x7e0a20>
    11fc:	10 92 21 0a 	sts	0x0A21, r1	; 0x800a21 <__TEXT_REGION_LENGTH__+0x7e0a21>
	// Set pins high
	PORTD_OUT |= PIN0_bm;
    1200:	e4 e6       	ldi	r30, 0x64	; 100
    1202:	f4 e0       	ldi	r31, 0x04	; 4
    1204:	80 81       	ld	r24, Z
    1206:	81 60       	ori	r24, 0x01	; 1
    1208:	80 83       	st	Z, r24
	// Start Timer
	TCA0_SINGLE_CTRLA |= TCA_SINGLE_ENABLE_bm;
    120a:	e0 e0       	ldi	r30, 0x00	; 0
    120c:	fa e0       	ldi	r31, 0x0A	; 10
    120e:	80 81       	ld	r24, Z
    1210:	81 60       	ori	r24, 0x01	; 1
    1212:	80 83       	st	Z, r24
}
    1214:	28 96       	adiw	r28, 0x08	; 8
    1216:	cd bf       	out	0x3d, r28	; 61
    1218:	de bf       	out	0x3e, r29	; 62
    121a:	df 91       	pop	r29
    121c:	cf 91       	pop	r28
    121e:	1f 91       	pop	r17
    1220:	0f 91       	pop	r16
    1222:	08 95       	ret

00001224 <__vector_11>:

ISR(TCA0_CMP0_vect){
    1224:	1f 92       	push	r1
    1226:	0f 92       	push	r0
    1228:	0f b6       	in	r0, 0x3f	; 63
    122a:	0f 92       	push	r0
    122c:	11 24       	eor	r1, r1
    122e:	0b b6       	in	r0, 0x3b	; 59
    1230:	0f 92       	push	r0
    1232:	8f 93       	push	r24
    1234:	ef 93       	push	r30
    1236:	ff 93       	push	r31
	// Set pin low
	PORTD_OUT &= ~PIN0_bm;
    1238:	e4 e6       	ldi	r30, 0x64	; 100
    123a:	f4 e0       	ldi	r31, 0x04	; 4
    123c:	80 81       	ld	r24, Z
    123e:	8e 7f       	andi	r24, 0xFE	; 254
    1240:	80 83       	st	Z, r24
	// Clear int flag
	TCA0_SINGLE_INTFLAGS |= TCA_SINGLE_CMP0_bm;
    1242:	eb e0       	ldi	r30, 0x0B	; 11
    1244:	fa e0       	ldi	r31, 0x0A	; 10
    1246:	80 81       	ld	r24, Z
    1248:	80 61       	ori	r24, 0x10	; 16
    124a:	80 83       	st	Z, r24
	// Disable timer
	TCA0_SINGLE_CTRLA &= ~TCA_SINGLE_ENABLE_bm;
    124c:	e0 e0       	ldi	r30, 0x00	; 0
    124e:	fa e0       	ldi	r31, 0x0A	; 10
    1250:	80 81       	ld	r24, Z
    1252:	8e 7f       	andi	r24, 0xFE	; 254
    1254:	80 83       	st	Z, r24
    1256:	ff 91       	pop	r31
    1258:	ef 91       	pop	r30
    125a:	8f 91       	pop	r24
    125c:	0f 90       	pop	r0
    125e:	0b be       	out	0x3b, r0	; 59
    1260:	0f 90       	pop	r0
    1262:	0f be       	out	0x3f, r0	; 63
    1264:	0f 90       	pop	r0
    1266:	1f 90       	pop	r1
    1268:	18 95       	reti

0000126a <Run>:
	Setup_Timers();
	sei();
	return Setup_Bitmask;
}

void Run(unsigned char Setup_Bitmask){
    126a:	6f 92       	push	r6
    126c:	7f 92       	push	r7
    126e:	8f 92       	push	r8
    1270:	9f 92       	push	r9
    1272:	af 92       	push	r10
    1274:	bf 92       	push	r11
    1276:	cf 92       	push	r12
    1278:	df 92       	push	r13
    127a:	ef 92       	push	r14
    127c:	ff 92       	push	r15
    127e:	0f 93       	push	r16
    1280:	1f 93       	push	r17
    1282:	cf 93       	push	r28
    1284:	df 93       	push	r29
    1286:	cd b7       	in	r28, 0x3d	; 61
    1288:	de b7       	in	r29, 0x3e	; 62
    128a:	a3 97       	sbiw	r28, 0x23	; 35
    128c:	cd bf       	out	0x3d, r28	; 61
    128e:	de bf       	out	0x3e, r29	; 62
    1290:	18 2f       	mov	r17, r24
	static unsigned char Navigation_Bitmask = 0;
	// This section handles all sensor timing and reading, will populate a bit mask of the sensor statuses for guidance and control functions
	// [7]		[6]		[5]		[4]		[3]		[2]		[1]		[0]
	//				           LoRa	    MAG		IMU		BAR		GPS

	if (g_GPS_Read_Flag){
    1292:	80 91 bf 44 	lds	r24, 0x44BF	; 0x8044bf <g_GPS_Read_Flag>
    1296:	88 23       	and	r24, r24
    1298:	91 f0       	breq	.+36     	; 0x12be <Run+0x54>
		g_GPS_Read_Flag = 0;
    129a:	10 92 bf 44 	sts	0x44BF, r1	; 0x8044bf <g_GPS_Read_Flag>
		unsigned char GPS_status = Read_GPS(&Drone);
    129e:	8d e0       	ldi	r24, 0x0D	; 13
    12a0:	93 e4       	ldi	r25, 0x43	; 67
    12a2:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <Read_GPS>
		Navigation_Bitmask = SET_BIT(Navigation_Bitmask, NAV_GPS_bp, GPS_status);
    12a6:	81 11       	cpse	r24, r1
    12a8:	05 c0       	rjmp	.+10     	; 0x12b4 <Run+0x4a>
    12aa:	80 95       	com	r24
    12ac:	90 91 0c 43 	lds	r25, 0x430C	; 0x80430c <Navigation_Bitmask.4866>
    12b0:	89 23       	and	r24, r25
    12b2:	03 c0       	rjmp	.+6      	; 0x12ba <Run+0x50>
    12b4:	90 91 0c 43 	lds	r25, 0x430C	; 0x80430c <Navigation_Bitmask.4866>
    12b8:	89 2b       	or	r24, r25
    12ba:	80 93 0c 43 	sts	0x430C, r24	; 0x80430c <Navigation_Bitmask.4866>
	}
	
	if (g_BAR_Read_Flag >= 3){
    12be:	80 91 71 43 	lds	r24, 0x4371	; 0x804371 <g_BAR_Read_Flag>
    12c2:	83 30       	cpi	r24, 0x03	; 3
    12c4:	b0 f0       	brcs	.+44     	; 0x12f2 <Run+0x88>
		g_BAR_Read_Flag = 0;
    12c6:	10 92 71 43 	sts	0x4371, r1	; 0x804371 <g_BAR_Read_Flag>
		unsigned char BAR_status = Read_Bar(&Drone);
    12ca:	8d e0       	ldi	r24, 0x0D	; 13
    12cc:	93 e4       	ldi	r25, 0x43	; 67
    12ce:	0e 94 2f 0c 	call	0x185e	; 0x185e <Read_Bar>
		Navigation_Bitmask = SET_BIT(Navigation_Bitmask, NAV_BAR_bp, BAR_status);
    12d2:	81 11       	cpse	r24, r1
    12d4:	06 c0       	rjmp	.+12     	; 0x12e2 <Run+0x78>
    12d6:	88 0f       	add	r24, r24
    12d8:	80 95       	com	r24
    12da:	90 91 0c 43 	lds	r25, 0x430C	; 0x80430c <Navigation_Bitmask.4866>
    12de:	89 23       	and	r24, r25
    12e0:	06 c0       	rjmp	.+12     	; 0x12ee <Run+0x84>
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	88 0f       	add	r24, r24
    12e6:	99 1f       	adc	r25, r25
    12e8:	90 91 0c 43 	lds	r25, 0x430C	; 0x80430c <Navigation_Bitmask.4866>
    12ec:	89 2b       	or	r24, r25
    12ee:	80 93 0c 43 	sts	0x430C, r24	; 0x80430c <Navigation_Bitmask.4866>
	}
	
	if (g_MAG_Read_Flag >= 2){
    12f2:	80 91 72 43 	lds	r24, 0x4372	; 0x804372 <g_MAG_Read_Flag>
    12f6:	82 30       	cpi	r24, 0x02	; 2
    12f8:	e0 f0       	brcs	.+56     	; 0x1332 <Run+0xc8>
		g_MAG_Read_Flag = 0;
    12fa:	10 92 72 43 	sts	0x4372, r1	; 0x804372 <g_MAG_Read_Flag>
		unsigned char MAG_status = Read_Mag(&Drone);
    12fe:	8d e0       	ldi	r24, 0x0D	; 13
    1300:	93 e4       	ldi	r25, 0x43	; 67
    1302:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <Read_Mag>
		Navigation_Bitmask = SET_BIT(Navigation_Bitmask, NAV_MAG_bp, MAG_status);
    1306:	81 11       	cpse	r24, r1
    1308:	08 c0       	rjmp	.+16     	; 0x131a <Run+0xb0>
    130a:	88 0f       	add	r24, r24
    130c:	88 0f       	add	r24, r24
    130e:	88 0f       	add	r24, r24
    1310:	80 95       	com	r24
    1312:	90 91 0c 43 	lds	r25, 0x430C	; 0x80430c <Navigation_Bitmask.4866>
    1316:	89 23       	and	r24, r25
    1318:	0a c0       	rjmp	.+20     	; 0x132e <Run+0xc4>
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	88 0f       	add	r24, r24
    131e:	99 1f       	adc	r25, r25
    1320:	88 0f       	add	r24, r24
    1322:	99 1f       	adc	r25, r25
    1324:	88 0f       	add	r24, r24
    1326:	99 1f       	adc	r25, r25
    1328:	90 91 0c 43 	lds	r25, 0x430C	; 0x80430c <Navigation_Bitmask.4866>
    132c:	89 2b       	or	r24, r25
    132e:	80 93 0c 43 	sts	0x430C, r24	; 0x80430c <Navigation_Bitmask.4866>
	}
	
	if (g_IMU_Read_Flag){
    1332:	80 91 6e 43 	lds	r24, 0x436E	; 0x80436e <g_IMU_Read_Flag>
    1336:	88 23       	and	r24, r24
    1338:	c9 f0       	breq	.+50     	; 0x136c <Run+0x102>
		g_IMU_Read_Flag = 0;
    133a:	10 92 6e 43 	sts	0x436E, r1	; 0x80436e <g_IMU_Read_Flag>
		unsigned char IMU_status = Read_IMU(&Drone);
    133e:	8d e0       	ldi	r24, 0x0D	; 13
    1340:	93 e4       	ldi	r25, 0x43	; 67
    1342:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <Read_IMU>
		Navigation_Bitmask = SET_BIT(Navigation_Bitmask, NAV_IMU_bp, IMU_status);
    1346:	81 11       	cpse	r24, r1
    1348:	07 c0       	rjmp	.+14     	; 0x1358 <Run+0xee>
    134a:	88 0f       	add	r24, r24
    134c:	88 0f       	add	r24, r24
    134e:	80 95       	com	r24
    1350:	90 91 0c 43 	lds	r25, 0x430C	; 0x80430c <Navigation_Bitmask.4866>
    1354:	89 23       	and	r24, r25
    1356:	08 c0       	rjmp	.+16     	; 0x1368 <Run+0xfe>
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	88 0f       	add	r24, r24
    135c:	99 1f       	adc	r25, r25
    135e:	88 0f       	add	r24, r24
    1360:	99 1f       	adc	r25, r25
    1362:	90 91 0c 43 	lds	r25, 0x430C	; 0x80430c <Navigation_Bitmask.4866>
    1366:	89 2b       	or	r24, r25
    1368:	80 93 0c 43 	sts	0x430C, r24	; 0x80430c <Navigation_Bitmask.4866>
	}
	
	if (g_Attitude_Observer_Run_Flag >= 8){
    136c:	80 91 70 43 	lds	r24, 0x4370	; 0x804370 <g_Attitude_Observer_Run_Flag>
    1370:	88 30       	cpi	r24, 0x08	; 8
    1372:	30 f0       	brcs	.+12     	; 0x1380 <Run+0x116>
		g_Attitude_Observer_Run_Flag = 0;
    1374:	10 92 70 43 	sts	0x4370, r1	; 0x804370 <g_Attitude_Observer_Run_Flag>
		Observer(&Drone);
    1378:	8d e0       	ldi	r24, 0x0D	; 13
    137a:	93 e4       	ldi	r25, 0x43	; 67
    137c:	0e 94 c2 19 	call	0x3384	; 0x3384 <Observer>
	}
	
	if (g_LoRa_Flag){
    1380:	80 91 6d 43 	lds	r24, 0x436D	; 0x80436d <g_LoRa_Flag>
    1384:	88 23       	and	r24, r24
    1386:	29 f1       	breq	.+74     	; 0x13d2 <Run+0x168>
		g_LoRa_Flag = 0;
    1388:	10 92 6d 43 	sts	0x436D, r1	; 0x80436d <g_LoRa_Flag>
		motor_throttles[0] = Read_LoRa(&Reference);
    138c:	80 eb       	ldi	r24, 0xB0	; 176
    138e:	92 e4       	ldi	r25, 0x42	; 66
    1390:	0e 94 2d 04 	call	0x85a	; 0x85a <Read_LoRa>
    1394:	80 93 ac 42 	sts	0x42AC, r24	; 0x8042ac <motor_throttles.4865>
		char buffer[5] = {0};
    1398:	95 e0       	ldi	r25, 0x05	; 5
    139a:	9e 01       	movw	r18, r28
    139c:	2f 5f       	subi	r18, 0xFF	; 255
    139e:	3f 4f       	sbci	r19, 0xFF	; 255
    13a0:	79 01       	movw	r14, r18
    13a2:	f9 01       	movw	r30, r18
    13a4:	29 2f       	mov	r18, r25
    13a6:	11 92       	st	Z+, r1
    13a8:	2a 95       	dec	r18
    13aa:	e9 f7       	brne	.-6      	; 0x13a6 <Run+0x13c>
		unsigned char length_to_print = snprintf(buffer, sizeof(buffer), "%d", motor_throttles[0]);
    13ac:	1f 92       	push	r1
    13ae:	8f 93       	push	r24
    13b0:	26 ed       	ldi	r18, 0xD6	; 214
    13b2:	31 e4       	ldi	r19, 0x41	; 65
    13b4:	3f 93       	push	r19
    13b6:	2f 93       	push	r18
    13b8:	1f 92       	push	r1
    13ba:	9f 93       	push	r25
    13bc:	ff 92       	push	r15
    13be:	ef 92       	push	r14
    13c0:	0e 94 d6 29 	call	0x53ac	; 0x53ac <snprintf>
		Print_Page(3, buffer, length_to_print);
    13c4:	48 2f       	mov	r20, r24
    13c6:	b7 01       	movw	r22, r14
    13c8:	83 e0       	ldi	r24, 0x03	; 3
    13ca:	0e 94 ce 07 	call	0xf9c	; 0xf9c <Print_Page>
    13ce:	cd bf       	out	0x3d, r28	; 61
    13d0:	de bf       	out	0x3e, r29	; 62
		//Navigation_Bitmask = SET_BIT(Navigation_Bitmask, NAV_LORA_bp, LoRa_status);
	}
	
	if ((g_Print_Flag >= 50)&&(Setup_Bitmask & (1<<SU_SSD_bp))){
    13d2:	80 91 6f 43 	lds	r24, 0x436F	; 0x80436f <g_Print_Flag>
    13d6:	82 33       	cpi	r24, 0x32	; 50
    13d8:	08 f4       	brcc	.+2      	; 0x13dc <Run+0x172>
    13da:	72 c0       	rjmp	.+228    	; 0x14c0 <Run+0x256>
    13dc:	15 ff       	sbrs	r17, 5
    13de:	70 c0       	rjmp	.+224    	; 0x14c0 <Run+0x256>
		g_Print_Flag = 0;
    13e0:	10 92 6f 43 	sts	0x436F, r1	; 0x80436f <g_Print_Flag>
		char buffer0[10] = {0};
    13e4:	0f 2e       	mov	r0, r31
    13e6:	fa e0       	ldi	r31, 0x0A	; 10
    13e8:	7f 2e       	mov	r7, r31
    13ea:	f0 2d       	mov	r31, r0
    13ec:	5e 01       	movw	r10, r28
    13ee:	9a e1       	ldi	r25, 0x1A	; 26
    13f0:	a9 0e       	add	r10, r25
    13f2:	b1 1c       	adc	r11, r1
    13f4:	f5 01       	movw	r30, r10
    13f6:	27 2d       	mov	r18, r7
    13f8:	11 92       	st	Z+, r1
    13fa:	2a 95       	dec	r18
    13fc:	e9 f7       	brne	.-6      	; 0x13f8 <Run+0x18e>
		char buffer1[10] = {0};
    13fe:	6e 01       	movw	r12, r28
    1400:	30 e1       	ldi	r19, 0x10	; 16
    1402:	c3 0e       	add	r12, r19
    1404:	d1 1c       	adc	r13, r1
    1406:	f6 01       	movw	r30, r12
    1408:	27 2d       	mov	r18, r7
    140a:	11 92       	st	Z+, r1
    140c:	2a 95       	dec	r18
    140e:	e9 f7       	brne	.-6      	; 0x140a <Run+0x1a0>
		char buffer2[15] = {0};
    1410:	0f 2e       	mov	r0, r31
    1412:	ff e0       	ldi	r31, 0x0F	; 15
    1414:	6f 2e       	mov	r6, r31
    1416:	f0 2d       	mov	r31, r0
    1418:	ce 01       	movw	r24, r28
    141a:	01 96       	adiw	r24, 0x01	; 1
    141c:	4c 01       	movw	r8, r24
    141e:	fc 01       	movw	r30, r24
    1420:	26 2d       	mov	r18, r6
    1422:	11 92       	st	Z+, r1
    1424:	2a 95       	dec	r18
    1426:	e9 f7       	brne	.-6      	; 0x1422 <Run+0x1b8>
		unsigned char length_to_print = snprintf(buffer0, sizeof(buffer0), "%3.2f", Drone.Euler[0]);
    1428:	0d e0       	ldi	r16, 0x0D	; 13
    142a:	13 e4       	ldi	r17, 0x43	; 67
    142c:	f8 01       	movw	r30, r16
    142e:	84 a1       	ldd	r24, Z+36	; 0x24
    1430:	95 a1       	ldd	r25, Z+37	; 0x25
    1432:	26 a1       	ldd	r18, Z+38	; 0x26
    1434:	37 a1       	ldd	r19, Z+39	; 0x27
    1436:	3f 93       	push	r19
    1438:	2f 93       	push	r18
    143a:	9f 93       	push	r25
    143c:	8f 93       	push	r24
    143e:	0f 2e       	mov	r0, r31
    1440:	f9 ed       	ldi	r31, 0xD9	; 217
    1442:	ef 2e       	mov	r14, r31
    1444:	f1 e4       	ldi	r31, 0x41	; 65
    1446:	ff 2e       	mov	r15, r31
    1448:	f0 2d       	mov	r31, r0
    144a:	ff 92       	push	r15
    144c:	ef 92       	push	r14
    144e:	1f 92       	push	r1
    1450:	7f 92       	push	r7
    1452:	bf 92       	push	r11
    1454:	af 92       	push	r10
    1456:	0e 94 d6 29 	call	0x53ac	; 0x53ac <snprintf>
		Print_Page(0, buffer0, length_to_print);
    145a:	48 2f       	mov	r20, r24
    145c:	b5 01       	movw	r22, r10
    145e:	80 e0       	ldi	r24, 0x00	; 0
    1460:	0e 94 ce 07 	call	0xf9c	; 0xf9c <Print_Page>
		length_to_print = snprintf(buffer1, sizeof(buffer1), "%3.2f", Drone.Euler[1]);
    1464:	f8 01       	movw	r30, r16
    1466:	80 a5       	ldd	r24, Z+40	; 0x28
    1468:	91 a5       	ldd	r25, Z+41	; 0x29
    146a:	22 a5       	ldd	r18, Z+42	; 0x2a
    146c:	33 a5       	ldd	r19, Z+43	; 0x2b
    146e:	3f 93       	push	r19
    1470:	2f 93       	push	r18
    1472:	9f 93       	push	r25
    1474:	8f 93       	push	r24
    1476:	ff 92       	push	r15
    1478:	ef 92       	push	r14
    147a:	1f 92       	push	r1
    147c:	7f 92       	push	r7
    147e:	df 92       	push	r13
    1480:	cf 92       	push	r12
    1482:	0e 94 d6 29 	call	0x53ac	; 0x53ac <snprintf>
		Print_Page(1, buffer1, length_to_print);
    1486:	48 2f       	mov	r20, r24
    1488:	b6 01       	movw	r22, r12
    148a:	81 e0       	ldi	r24, 0x01	; 1
    148c:	0e 94 ce 07 	call	0xf9c	; 0xf9c <Print_Page>
		length_to_print = snprintf(buffer2, sizeof(buffer2), "%3.2f", Drone.Euler[2]);
    1490:	f8 01       	movw	r30, r16
    1492:	84 a5       	ldd	r24, Z+44	; 0x2c
    1494:	95 a5       	ldd	r25, Z+45	; 0x2d
    1496:	26 a5       	ldd	r18, Z+46	; 0x2e
    1498:	37 a5       	ldd	r19, Z+47	; 0x2f
    149a:	3f 93       	push	r19
    149c:	2f 93       	push	r18
    149e:	9f 93       	push	r25
    14a0:	8f 93       	push	r24
    14a2:	ff 92       	push	r15
    14a4:	ef 92       	push	r14
    14a6:	1f 92       	push	r1
    14a8:	6f 92       	push	r6
    14aa:	9f 92       	push	r9
    14ac:	8f 92       	push	r8
    14ae:	0e 94 d6 29 	call	0x53ac	; 0x53ac <snprintf>
		Print_Page(2, buffer2, length_to_print);
    14b2:	48 2f       	mov	r20, r24
    14b4:	b4 01       	movw	r22, r8
    14b6:	82 e0       	ldi	r24, 0x02	; 2
    14b8:	0e 94 ce 07 	call	0xf9c	; 0xf9c <Print_Page>
    14bc:	cd bf       	out	0x3d, r28	; 61
    14be:	de bf       	out	0x3e, r29	; 62
		
	}
	
	// CONTROL //
	//if (Navigation_Bitmask & NAV_SENSORS_bm){
		if (g_Motor_Run_Flag >= 2){
    14c0:	80 91 73 43 	lds	r24, 0x4373	; 0x804373 <g_Motor_Run_Flag>
    14c4:	82 30       	cpi	r24, 0x02	; 2
    14c6:	30 f0       	brcs	.+12     	; 0x14d4 <Run+0x26a>
			g_Motor_Run_Flag = 0;
    14c8:	10 92 73 43 	sts	0x4373, r1	; 0x804373 <g_Motor_Run_Flag>
			Run_Motors(motor_throttles);
    14cc:	8c ea       	ldi	r24, 0xAC	; 172
    14ce:	92 e4       	ldi	r25, 0x42	; 66
    14d0:	0e 94 a0 08 	call	0x1140	; 0x1140 <Run_Motors>
		}
	//}
}
    14d4:	a3 96       	adiw	r28, 0x23	; 35
    14d6:	cd bf       	out	0x3d, r28	; 61
    14d8:	de bf       	out	0x3e, r29	; 62
    14da:	df 91       	pop	r29
    14dc:	cf 91       	pop	r28
    14de:	1f 91       	pop	r17
    14e0:	0f 91       	pop	r16
    14e2:	ff 90       	pop	r15
    14e4:	ef 90       	pop	r14
    14e6:	df 90       	pop	r13
    14e8:	cf 90       	pop	r12
    14ea:	bf 90       	pop	r11
    14ec:	af 90       	pop	r10
    14ee:	9f 90       	pop	r9
    14f0:	8f 90       	pop	r8
    14f2:	7f 90       	pop	r7
    14f4:	6f 90       	pop	r6
    14f6:	08 95       	ret

000014f8 <Delay>:

void Delay(unsigned long long length){
    14f8:	5f 92       	push	r5
    14fa:	6f 92       	push	r6
    14fc:	7f 92       	push	r7
    14fe:	8f 92       	push	r8
    1500:	9f 92       	push	r9
    1502:	af 92       	push	r10
    1504:	bf 92       	push	r11
    1506:	cf 92       	push	r12
    1508:	df 92       	push	r13
    150a:	ef 92       	push	r14
    150c:	ff 92       	push	r15
    150e:	0f 93       	push	r16
    1510:	1f 93       	push	r17
    1512:	cf 93       	push	r28
    1514:	df 93       	push	r29
    1516:	cd b7       	in	r28, 0x3d	; 61
    1518:	de b7       	in	r29, 0x3e	; 62
    151a:	28 97       	sbiw	r28, 0x08	; 8
    151c:	cd bf       	out	0x3d, r28	; 61
    151e:	de bf       	out	0x3e, r29	; 62
    1520:	52 2e       	mov	r5, r18
    1522:	63 2e       	mov	r6, r19
    1524:	74 2e       	mov	r7, r20
    1526:	85 2e       	mov	r8, r21
    1528:	96 2e       	mov	r9, r22
    152a:	b7 2f       	mov	r27, r23
    152c:	f8 2f       	mov	r31, r24
    152e:	e9 2f       	mov	r30, r25
	volatile unsigned long long i = 0;
    1530:	19 82       	std	Y+1, r1	; 0x01
    1532:	1a 82       	std	Y+2, r1	; 0x02
    1534:	1b 82       	std	Y+3, r1	; 0x03
    1536:	1c 82       	std	Y+4, r1	; 0x04
    1538:	1d 82       	std	Y+5, r1	; 0x05
    153a:	1e 82       	std	Y+6, r1	; 0x06
    153c:	1f 82       	std	Y+7, r1	; 0x07
    153e:	18 86       	std	Y+8, r1	; 0x08
	while (++i<length);
    1540:	29 81       	ldd	r18, Y+1	; 0x01
    1542:	3a 81       	ldd	r19, Y+2	; 0x02
    1544:	4b 81       	ldd	r20, Y+3	; 0x03
    1546:	5c 81       	ldd	r21, Y+4	; 0x04
    1548:	6d 81       	ldd	r22, Y+5	; 0x05
    154a:	7e 81       	ldd	r23, Y+6	; 0x06
    154c:	8f 81       	ldd	r24, Y+7	; 0x07
    154e:	98 85       	ldd	r25, Y+8	; 0x08
    1550:	a1 e0       	ldi	r26, 0x01	; 1
    1552:	0e 94 88 25 	call	0x4b10	; 0x4b10 <__adddi3_s8>
    1556:	29 83       	std	Y+1, r18	; 0x01
    1558:	3a 83       	std	Y+2, r19	; 0x02
    155a:	4b 83       	std	Y+3, r20	; 0x03
    155c:	5c 83       	std	Y+4, r21	; 0x04
    155e:	6d 83       	std	Y+5, r22	; 0x05
    1560:	7e 83       	std	Y+6, r23	; 0x06
    1562:	8f 83       	std	Y+7, r24	; 0x07
    1564:	98 87       	std	Y+8, r25	; 0x08
    1566:	a5 2c       	mov	r10, r5
    1568:	b6 2c       	mov	r11, r6
    156a:	c7 2c       	mov	r12, r7
    156c:	d8 2c       	mov	r13, r8
    156e:	e9 2c       	mov	r14, r9
    1570:	fb 2e       	mov	r15, r27
    1572:	0f 2f       	mov	r16, r31
    1574:	1e 2f       	mov	r17, r30
    1576:	0e 94 94 25 	call	0x4b28	; 0x4b28 <__cmpdi2>
    157a:	10 f3       	brcs	.-60     	; 0x1540 <Delay+0x48>
}
    157c:	28 96       	adiw	r28, 0x08	; 8
    157e:	cd bf       	out	0x3d, r28	; 61
    1580:	de bf       	out	0x3e, r29	; 62
    1582:	df 91       	pop	r29
    1584:	cf 91       	pop	r28
    1586:	1f 91       	pop	r17
    1588:	0f 91       	pop	r16
    158a:	ff 90       	pop	r15
    158c:	ef 90       	pop	r14
    158e:	df 90       	pop	r13
    1590:	cf 90       	pop	r12
    1592:	bf 90       	pop	r11
    1594:	af 90       	pop	r10
    1596:	9f 90       	pop	r9
    1598:	8f 90       	pop	r8
    159a:	7f 90       	pop	r7
    159c:	6f 90       	pop	r6
    159e:	5f 90       	pop	r5
    15a0:	08 95       	ret

000015a2 <Setup>:
	return 0;
}

// Function Definitions

unsigned char Setup(){
    15a2:	ff 92       	push	r15
    15a4:	0f 93       	push	r16
    15a6:	1f 93       	push	r17
    15a8:	cf 93       	push	r28
    15aa:	df 93       	push	r29
	if (RSTCTRL_RSTFR & RSTCTRL_PORF_bm){Delay(100000);} // Necessary to stabilize IC's on a cold start
    15ac:	80 91 40 00 	lds	r24, 0x0040	; 0x800040 <__TEXT_REGION_LENGTH__+0x7e0040>
    15b0:	80 ff       	sbrs	r24, 0
    15b2:	0a c0       	rjmp	.+20     	; 0x15c8 <Setup+0x26>
    15b4:	20 ea       	ldi	r18, 0xA0	; 160
    15b6:	36 e8       	ldi	r19, 0x86	; 134
    15b8:	41 e0       	ldi	r20, 0x01	; 1
    15ba:	50 e0       	ldi	r21, 0x00	; 0
    15bc:	60 e0       	ldi	r22, 0x00	; 0
    15be:	70 e0       	ldi	r23, 0x00	; 0
    15c0:	80 e0       	ldi	r24, 0x00	; 0
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <Delay>
	unsigned char Setup_Bitmask = 0;
	// [7]		[6]		[5]		[4]		[3]		[2]		[1]		[0]
	//					SSD	   LoRa	    MAG		IMU		BAR		GPS
	
	_PROTECTED_WRITE (CLKCTRL_OSCHFCTRLA, CLKCTRL_FRQSEL_24M_gc); // Sets CPU clock to 24 MHz
    15c8:	94 e2       	ldi	r25, 0x24	; 36
    15ca:	88 ed       	ldi	r24, 0xD8	; 216
    15cc:	84 bf       	out	0x34, r24	; 52
    15ce:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
	while(!(CLKCTRL_MCLKSTATUS & CLKCTRL_OSCHFS_bm)); // Wait for clock to stabilize
    15d2:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
    15d6:	81 ff       	sbrs	r24, 1
    15d8:	fc cf       	rjmp	.-8      	; 0x15d2 <Setup+0x30>
	unsigned char GPS_setup_status = Setup_GPS();
    15da:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <Setup_GPS>
    15de:	08 2f       	mov	r16, r24
	Setup_SPI();
    15e0:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <Setup_SPI>
	Setup_TWI();
    15e4:	0e 94 39 03 	call	0x672	; 0x672 <Setup_TWI>
	unsigned char LoRa_setup_status = Setup_LoRa();
    15e8:	0e 94 e6 03 	call	0x7cc	; 0x7cc <Setup_LoRa>
    15ec:	f8 2e       	mov	r15, r24
	unsigned char MAG_setup_status = Setup_Mag();
    15ee:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <Setup_Mag>
    15f2:	c8 2f       	mov	r28, r24
	unsigned char IMU_setup_status = Setup_IMU();
    15f4:	0e 94 bf 0c 	call	0x197e	; 0x197e <Setup_IMU>
    15f8:	d8 2f       	mov	r29, r24
	unsigned char BAR_setup_status = Setup_Bar();
    15fa:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <Setup_Bar>
    15fe:	18 2f       	mov	r17, r24
	unsigned char SSD_setup_status = Setup_SSD();
    1600:	0e 94 fe 06 	call	0xdfc	; 0xdfc <Setup_SSD>
	Setup_Bitmask |= (GPS_setup_status<<NAV_GPS_bp) | (BAR_setup_status<<NAV_BAR_bp) | (IMU_setup_status<<NAV_IMU_bp) | (MAG_setup_status<<NAV_MAG_bp)
    1604:	61 2f       	mov	r22, r17
    1606:	70 e0       	ldi	r23, 0x00	; 0
    1608:	66 0f       	add	r22, r22
    160a:	77 1f       	adc	r23, r23
    160c:	4d 2f       	mov	r20, r29
    160e:	50 e0       	ldi	r21, 0x00	; 0
    1610:	44 0f       	add	r20, r20
    1612:	55 1f       	adc	r21, r21
    1614:	44 0f       	add	r20, r20
    1616:	55 1f       	adc	r21, r21
    1618:	2c 2f       	mov	r18, r28
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	22 0f       	add	r18, r18
    161e:	33 1f       	adc	r19, r19
    1620:	22 0f       	add	r18, r18
    1622:	33 1f       	adc	r19, r19
    1624:	22 0f       	add	r18, r18
    1626:	33 1f       	adc	r19, r19
					 | (LoRa_setup_status<<NAV_LORA_bp) | (SSD_setup_status<<SU_SSD_bp);
    1628:	90 e1       	ldi	r25, 0x10	; 16
    162a:	f9 9e       	mul	r15, r25
    162c:	f0 01       	movw	r30, r0
    162e:	11 24       	eor	r1, r1
    1630:	a0 e2       	ldi	r26, 0x20	; 32
    1632:	8a 9f       	mul	r24, r26
    1634:	c0 01       	movw	r24, r0
    1636:	11 24       	eor	r1, r1
	unsigned char LoRa_setup_status = Setup_LoRa();
	unsigned char MAG_setup_status = Setup_Mag();
	unsigned char IMU_setup_status = Setup_IMU();
	unsigned char BAR_setup_status = Setup_Bar();
	unsigned char SSD_setup_status = Setup_SSD();
	Setup_Bitmask |= (GPS_setup_status<<NAV_GPS_bp) | (BAR_setup_status<<NAV_BAR_bp) | (IMU_setup_status<<NAV_IMU_bp) | (MAG_setup_status<<NAV_MAG_bp)
    1638:	60 2b       	or	r22, r16
    163a:	46 2b       	or	r20, r22
    163c:	24 2b       	or	r18, r20
    163e:	2e 2b       	or	r18, r30
    1640:	28 2b       	or	r18, r24
#include "LoRa.h"
#include "Motors.h"

inline void Setup_Timers(){
	// Setup Real Time Clock for keeping track of total run time
	RTC_CTRLA |= RTC_CORREN_bm | RTC_RTCEN_bm;
    1642:	e0 e4       	ldi	r30, 0x40	; 64
    1644:	f1 e0       	ldi	r31, 0x01	; 1
    1646:	80 81       	ld	r24, Z
    1648:	85 60       	ori	r24, 0x05	; 5
    164a:	80 83       	st	Z, r24
	RTC_INTCTRL |= RTC_CMP_bm;
    164c:	e2 e4       	ldi	r30, 0x42	; 66
    164e:	f1 e0       	ldi	r31, 0x01	; 1
    1650:	80 81       	ld	r24, Z
    1652:	82 60       	ori	r24, 0x02	; 2
    1654:	80 83       	st	Z, r24
	RTC_CMP = 32768;
    1656:	80 e0       	ldi	r24, 0x00	; 0
    1658:	90 e8       	ldi	r25, 0x80	; 128
    165a:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x7e014c>
    165e:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x7e014d>
	// Setup Timer/Counter A for waveform generation
	// Generates a waveform every 10 ms, is used by
	//  -> Motors
	TCA0_SINGLE_CTRLA |= TCA_SINGLE_CLKSEL_DIV8_gc;
    1662:	e0 e0       	ldi	r30, 0x00	; 0
    1664:	fa e0       	ldi	r31, 0x0A	; 10
    1666:	80 81       	ld	r24, Z
    1668:	86 60       	ori	r24, 0x06	; 6
    166a:	80 83       	st	Z, r24
	TCA0_SINGLE_INTCTRL |= TCA_SINGLE_CMP0_bm;
    166c:	ea e0       	ldi	r30, 0x0A	; 10
    166e:	fa e0       	ldi	r31, 0x0A	; 10
    1670:	80 81       	ld	r24, Z
    1672:	80 61       	ori	r24, 0x10	; 16
    1674:	80 83       	st	Z, r24
	//  -> Motors running at 100 Hz
	//	-> Magnetometer running at 100 Hz
	//  -> Barometer running at 75 Hz
	//	-> Attitude observer running at 25 Hz
	//	-> Print statements, variable frequency
	TCB0_CTRLA |= TCB_ENABLE_bm | TCB_CLKSEL_DIV2_gc; // Enables timer, uses main clock with a prescaler of two
    1676:	e0 e0       	ldi	r30, 0x00	; 0
    1678:	fb e0       	ldi	r31, 0x0B	; 11
    167a:	80 81       	ld	r24, Z
    167c:	83 60       	ori	r24, 0x03	; 3
    167e:	80 83       	st	Z, r24
	TCB0_INTCTRL |= TCB_CAPT_bm; // Enables interrupt on capture
    1680:	e5 e0       	ldi	r30, 0x05	; 5
    1682:	fb e0       	ldi	r31, 0x0B	; 11
    1684:	80 81       	ld	r24, Z
    1686:	81 60       	ori	r24, 0x01	; 1
    1688:	80 83       	st	Z, r24
	TCB0_CCMP = 60000; // Value at which timer generates interrupt and resets
    168a:	80 e6       	ldi	r24, 0x60	; 96
    168c:	9a ee       	ldi	r25, 0xEA	; 234
    168e:	80 93 0c 0b 	sts	0x0B0C, r24	; 0x800b0c <__TEXT_REGION_LENGTH__+0x7e0b0c>
    1692:	90 93 0d 0b 	sts	0x0B0D, r25	; 0x800b0d <__TEXT_REGION_LENGTH__+0x7e0b0d>
	// Generates an interrupt every 4.807 ms, is used by:
	//	-> IMU running at 208 Hz
	TCB1_CTRLA |= TCB_ENABLE_bm | TCB_CLKSEL_DIV2_gc;
    1696:	e0 e1       	ldi	r30, 0x10	; 16
    1698:	fb e0       	ldi	r31, 0x0B	; 11
    169a:	80 81       	ld	r24, Z
    169c:	83 60       	ori	r24, 0x03	; 3
    169e:	80 83       	st	Z, r24
	TCB1_INTCTRL |= TCB_CAPT_bm;
    16a0:	e5 e1       	ldi	r30, 0x15	; 21
    16a2:	fb e0       	ldi	r31, 0x0B	; 11
    16a4:	80 81       	ld	r24, Z
    16a6:	81 60       	ori	r24, 0x01	; 1
    16a8:	80 83       	st	Z, r24
	TCB1_CCMP = 57693;
    16aa:	8d e5       	ldi	r24, 0x5D	; 93
    16ac:	91 ee       	ldi	r25, 0xE1	; 225
    16ae:	80 93 1c 0b 	sts	0x0B1C, r24	; 0x800b1c <__TEXT_REGION_LENGTH__+0x7e0b1c>
    16b2:	90 93 1d 0b 	sts	0x0B1D, r25	; 0x800b1d <__TEXT_REGION_LENGTH__+0x7e0b1d>
					 | (LoRa_setup_status<<NAV_LORA_bp) | (SSD_setup_status<<SU_SSD_bp);
	Setup_Timers();
	sei();
    16b6:	78 94       	sei
	return Setup_Bitmask;
}
    16b8:	82 2f       	mov	r24, r18
    16ba:	df 91       	pop	r29
    16bc:	cf 91       	pop	r28
    16be:	1f 91       	pop	r17
    16c0:	0f 91       	pop	r16
    16c2:	ff 90       	pop	r15
    16c4:	08 95       	ret

000016c6 <main>:
static volatile unsigned char g_Print_Flag = 0;
static volatile unsigned char g_IMU_Read_Flag = 0;
static volatile unsigned char g_LoRa_Flag = 0;
volatile unsigned long g_seconds = 0;

int main(){
    16c6:	cf 93       	push	r28
	unsigned char Setup_Bitmask = Setup();
    16c8:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <Setup>
    16cc:	c8 2f       	mov	r28, r24
	if ((Setup_Bitmask & NAV_SENSORS_bm) == NAV_SENSORS_bm){
    16ce:	8f 71       	andi	r24, 0x1F	; 31
    16d0:	8f 31       	cpi	r24, 0x1F	; 31
    16d2:	21 f4       	brne	.+8      	; 0x16dc <main+0x16>
		while(1){
			Run(Setup_Bitmask);
    16d4:	8c 2f       	mov	r24, r28
    16d6:	0e 94 35 09 	call	0x126a	; 0x126a <Run>
    16da:	fc cf       	rjmp	.-8      	; 0x16d4 <main+0xe>
		}
	}
	
	return 0;
}
    16dc:	80 e0       	ldi	r24, 0x00	; 0
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	cf 91       	pop	r28
    16e2:	08 95       	ret

000016e4 <__vector_5>:
void Delay(unsigned long long length){
	volatile unsigned long long i = 0;
	while (++i<length);
}

ISR(RTC_CNT_vect){
    16e4:	1f 92       	push	r1
    16e6:	0f 92       	push	r0
    16e8:	0f b6       	in	r0, 0x3f	; 63
    16ea:	0f 92       	push	r0
    16ec:	11 24       	eor	r1, r1
    16ee:	8f 93       	push	r24
    16f0:	9f 93       	push	r25
    16f2:	af 93       	push	r26
    16f4:	bf 93       	push	r27
	++g_seconds;
    16f6:	80 91 69 43 	lds	r24, 0x4369	; 0x804369 <g_seconds>
    16fa:	90 91 6a 43 	lds	r25, 0x436A	; 0x80436a <g_seconds+0x1>
    16fe:	a0 91 6b 43 	lds	r26, 0x436B	; 0x80436b <g_seconds+0x2>
    1702:	b0 91 6c 43 	lds	r27, 0x436C	; 0x80436c <g_seconds+0x3>
    1706:	01 96       	adiw	r24, 0x01	; 1
    1708:	a1 1d       	adc	r26, r1
    170a:	b1 1d       	adc	r27, r1
    170c:	80 93 69 43 	sts	0x4369, r24	; 0x804369 <g_seconds>
    1710:	90 93 6a 43 	sts	0x436A, r25	; 0x80436a <g_seconds+0x1>
    1714:	a0 93 6b 43 	sts	0x436B, r26	; 0x80436b <g_seconds+0x2>
    1718:	b0 93 6c 43 	sts	0x436C, r27	; 0x80436c <g_seconds+0x3>
	++g_LoRa_Flag;
    171c:	80 91 6d 43 	lds	r24, 0x436D	; 0x80436d <g_LoRa_Flag>
    1720:	8f 5f       	subi	r24, 0xFF	; 255
    1722:	80 93 6d 43 	sts	0x436D, r24	; 0x80436d <g_LoRa_Flag>
	RTC_INTFLAGS = RTC_CMP_bm;
    1726:	82 e0       	ldi	r24, 0x02	; 2
    1728:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x7e0143>
}
    172c:	bf 91       	pop	r27
    172e:	af 91       	pop	r26
    1730:	9f 91       	pop	r25
    1732:	8f 91       	pop	r24
    1734:	0f 90       	pop	r0
    1736:	0f be       	out	0x3f, r0	; 63
    1738:	0f 90       	pop	r0
    173a:	1f 90       	pop	r1
    173c:	18 95       	reti

0000173e <__vector_14>:

ISR(TCB0_INT_vect){
    173e:	1f 92       	push	r1
    1740:	0f 92       	push	r0
    1742:	0f b6       	in	r0, 0x3f	; 63
    1744:	0f 92       	push	r0
    1746:	11 24       	eor	r1, r1
    1748:	8f 93       	push	r24
	++g_Motor_Run_Flag;
    174a:	80 91 73 43 	lds	r24, 0x4373	; 0x804373 <g_Motor_Run_Flag>
    174e:	8f 5f       	subi	r24, 0xFF	; 255
    1750:	80 93 73 43 	sts	0x4373, r24	; 0x804373 <g_Motor_Run_Flag>
	++g_Print_Flag;
    1754:	80 91 6f 43 	lds	r24, 0x436F	; 0x80436f <g_Print_Flag>
    1758:	8f 5f       	subi	r24, 0xFF	; 255
    175a:	80 93 6f 43 	sts	0x436F, r24	; 0x80436f <g_Print_Flag>
	++g_BAR_Read_Flag;
    175e:	80 91 71 43 	lds	r24, 0x4371	; 0x804371 <g_BAR_Read_Flag>
    1762:	8f 5f       	subi	r24, 0xFF	; 255
    1764:	80 93 71 43 	sts	0x4371, r24	; 0x804371 <g_BAR_Read_Flag>
	++g_Attitude_Observer_Run_Flag;
    1768:	80 91 70 43 	lds	r24, 0x4370	; 0x804370 <g_Attitude_Observer_Run_Flag>
    176c:	8f 5f       	subi	r24, 0xFF	; 255
    176e:	80 93 70 43 	sts	0x4370, r24	; 0x804370 <g_Attitude_Observer_Run_Flag>
	++g_MAG_Read_Flag;
    1772:	80 91 72 43 	lds	r24, 0x4372	; 0x804372 <g_MAG_Read_Flag>
    1776:	8f 5f       	subi	r24, 0xFF	; 255
    1778:	80 93 72 43 	sts	0x4372, r24	; 0x804372 <g_MAG_Read_Flag>
	TCB0_INTFLAGS = TCB_CAPT_bm;
    177c:	81 e0       	ldi	r24, 0x01	; 1
    177e:	80 93 06 0b 	sts	0x0B06, r24	; 0x800b06 <__TEXT_REGION_LENGTH__+0x7e0b06>
}
    1782:	8f 91       	pop	r24
    1784:	0f 90       	pop	r0
    1786:	0f be       	out	0x3f, r0	; 63
    1788:	0f 90       	pop	r0
    178a:	1f 90       	pop	r1
    178c:	18 95       	reti

0000178e <__vector_15>:

ISR(TCB1_INT_vect){
    178e:	1f 92       	push	r1
    1790:	0f 92       	push	r0
    1792:	0f b6       	in	r0, 0x3f	; 63
    1794:	0f 92       	push	r0
    1796:	11 24       	eor	r1, r1
    1798:	8f 93       	push	r24
	++g_IMU_Read_Flag;
    179a:	80 91 6e 43 	lds	r24, 0x436E	; 0x80436e <g_IMU_Read_Flag>
    179e:	8f 5f       	subi	r24, 0xFF	; 255
    17a0:	80 93 6e 43 	sts	0x436E, r24	; 0x80436e <g_IMU_Read_Flag>
	TCB1_INTFLAGS = TCB_CAPT_bm;
    17a4:	81 e0       	ldi	r24, 0x01	; 1
    17a6:	80 93 16 0b 	sts	0x0B16, r24	; 0x800b16 <__TEXT_REGION_LENGTH__+0x7e0b16>
    17aa:	8f 91       	pop	r24
    17ac:	0f 90       	pop	r0
    17ae:	0f be       	out	0x3f, r0	; 63
    17b0:	0f 90       	pop	r0
    17b2:	1f 90       	pop	r1
    17b4:	18 95       	reti

000017b6 <Setup_Bar>:
#include "main.h"
// BAROMETER CODE
// Bar -> 0 is a write, 1 is a read

unsigned char Setup_Bar(){
    17b6:	0f 93       	push	r16
    17b8:	1f 93       	push	r17
    17ba:	cf 93       	push	r28
    17bc:	df 93       	push	r29
    17be:	1f 92       	push	r1
    17c0:	cd b7       	in	r28, 0x3d	; 61
    17c2:	de b7       	in	r29, 0x3e	; 62
	unsigned char BAR_ID = 0;
    17c4:	19 82       	std	Y+1, r1	; 0x01
	unsigned char BAR_status = 2;
	
	BAR_status &= Read_SPI(PORT_BAR,CS_BAR,(BAR_WHO_AM_I|0x80),&BAR_ID,1);
    17c6:	01 e0       	ldi	r16, 0x01	; 1
    17c8:	9e 01       	movw	r18, r28
    17ca:	2f 5f       	subi	r18, 0xFF	; 255
    17cc:	3f 4f       	sbci	r19, 0xFF	; 255
    17ce:	4f e8       	ldi	r20, 0x8F	; 143
    17d0:	67 e0       	ldi	r22, 0x07	; 7
    17d2:	81 e4       	ldi	r24, 0x41	; 65
    17d4:	0e 94 0f 02 	call	0x41e	; 0x41e <Read_SPI>
    17d8:	18 2f       	mov	r17, r24
    17da:	12 70       	andi	r17, 0x02	; 2
	BAR_status &= Write_SPI(PORT_BAR,CS_BAR,BAR_IF_CTRL,0b00000111); // Disables unused interfaces
    17dc:	27 e0       	ldi	r18, 0x07	; 7
    17de:	4e e0       	ldi	r20, 0x0E	; 14
    17e0:	67 e0       	ldi	r22, 0x07	; 7
    17e2:	81 e4       	ldi	r24, 0x41	; 65
    17e4:	0e 94 af 02 	call	0x55e	; 0x55e <Write_SPI>
    17e8:	18 23       	and	r17, r24
	BAR_status &= Write_SPI(PORT_BAR,CS_BAR,BAR_CTRL_REG1,0b01011100); // Sets ODR to 75Hz, enables LPF
    17ea:	2c e5       	ldi	r18, 0x5C	; 92
    17ec:	40 e1       	ldi	r20, 0x10	; 16
    17ee:	67 e0       	ldi	r22, 0x07	; 7
    17f0:	81 e4       	ldi	r24, 0x41	; 65
    17f2:	0e 94 af 02 	call	0x55e	; 0x55e <Write_SPI>
    17f6:	18 23       	and	r17, r24
	BAR_status &= Write_SPI(PORT_BAR,CS_BAR,BAR_CTRL_REG2,0b00010010); // Enables low noise mode, maximum ODR for this mode is 75 Hz
    17f8:	22 e1       	ldi	r18, 0x12	; 18
    17fa:	41 e1       	ldi	r20, 0x11	; 17
    17fc:	67 e0       	ldi	r22, 0x07	; 7
    17fe:	81 e4       	ldi	r24, 0x41	; 65
    1800:	0e 94 af 02 	call	0x55e	; 0x55e <Write_SPI>
    1804:	81 23       	and	r24, r17
	
	if (BAR_status != 2){return 0;}
    1806:	82 30       	cpi	r24, 0x02	; 2
    1808:	11 f0       	breq	.+4      	; 0x180e <Setup_Bar+0x58>
    180a:	80 e0       	ldi	r24, 0x00	; 0
    180c:	01 c0       	rjmp	.+2      	; 0x1810 <Setup_Bar+0x5a>
	return 1;
    180e:	81 e0       	ldi	r24, 0x01	; 1
}
    1810:	0f 90       	pop	r0
    1812:	df 91       	pop	r29
    1814:	cf 91       	pop	r28
    1816:	1f 91       	pop	r17
    1818:	0f 91       	pop	r16
    181a:	08 95       	ret

0000181c <Height_Bar>:

float Height_Bar(unsigned long pressure_LSB){
	const float c1 = BAR_TB/BAR_LB;
	const float c2 = (-BAR_R*BAR_LB)/(BAR_G*BAR_M);
	
	float pressure_Pa = ((float)pressure_LSB)*BAR_SENS;
    181c:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <__floatunsisf>
    1820:	2a e0       	ldi	r18, 0x0A	; 10
    1822:	37 ed       	ldi	r19, 0xD7	; 215
    1824:	43 e2       	ldi	r20, 0x23	; 35
    1826:	52 e4       	ldi	r21, 0x42	; 66
    1828:	0e 94 76 1d 	call	0x3aec	; 0x3aec <__divsf3>
	float height = c1*(pow(pressure_Pa/BAR_PB,c2)-1.0);
    182c:	20 e8       	ldi	r18, 0x80	; 128
    182e:	36 ee       	ldi	r19, 0xE6	; 230
    1830:	45 ec       	ldi	r20, 0xC5	; 197
    1832:	57 e4       	ldi	r21, 0x47	; 71
    1834:	0e 94 76 1d 	call	0x3aec	; 0x3aec <__divsf3>
    1838:	2f e1       	ldi	r18, 0x1F	; 31
    183a:	35 ed       	ldi	r19, 0xD5	; 213
    183c:	42 e4       	ldi	r20, 0x42	; 66
    183e:	5e e3       	ldi	r21, 0x3E	; 62
    1840:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <pow>
    1844:	20 e0       	ldi	r18, 0x00	; 0
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	40 e8       	ldi	r20, 0x80	; 128
    184a:	5f e3       	ldi	r21, 0x3F	; 63
    184c:	0e 94 8d 1c 	call	0x391a	; 0x391a <__subsf3>
    1850:	24 ec       	ldi	r18, 0xC4	; 196
    1852:	3a e2       	ldi	r19, 0x2A	; 42
    1854:	4d e2       	ldi	r20, 0x2D	; 45
    1856:	57 ec       	ldi	r21, 0xC7	; 199
    1858:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__mulsf3>
	return height;
}
    185c:	08 95       	ret

0000185e <Read_Bar>:
	
	if (BAR_status != 2){return 0;}
	return 1;
}

unsigned char Read_Bar(States *Drone){
    185e:	ef 92       	push	r14
    1860:	ff 92       	push	r15
    1862:	0f 93       	push	r16
    1864:	1f 93       	push	r17
    1866:	cf 93       	push	r28
    1868:	df 93       	push	r29
    186a:	cd b7       	in	r28, 0x3d	; 61
    186c:	de b7       	in	r29, 0x3e	; 62
    186e:	27 97       	sbiw	r28, 0x07	; 7
    1870:	cd bf       	out	0x3d, r28	; 61
    1872:	de bf       	out	0x3e, r29	; 62
    1874:	7c 01       	movw	r14, r24
	static unsigned long pressure_window[BAR_WINDOW_SIZE];
	static unsigned char window_counter = 0;
	unsigned char Read_status = 0;
	unsigned char Data[3] = {0};
    1876:	19 82       	std	Y+1, r1	; 0x01
    1878:	1a 82       	std	Y+2, r1	; 0x02
    187a:	1b 82       	std	Y+3, r1	; 0x03
	Read_status = Read_SPI(PORT_BAR, CS_BAR, (BAR_DATA_START|0x80), Data, sizeof(Data));
    187c:	03 e0       	ldi	r16, 0x03	; 3
    187e:	9e 01       	movw	r18, r28
    1880:	2f 5f       	subi	r18, 0xFF	; 255
    1882:	3f 4f       	sbci	r19, 0xFF	; 255
    1884:	48 ea       	ldi	r20, 0xA8	; 168
    1886:	67 e0       	ldi	r22, 0x07	; 7
    1888:	81 e4       	ldi	r24, 0x41	; 65
    188a:	0e 94 0f 02 	call	0x41e	; 0x41e <Read_SPI>
	
	if (Read_status != 2){return 0;}
    188e:	82 30       	cpi	r24, 0x02	; 2
    1890:	09 f0       	breq	.+2      	; 0x1894 <Read_Bar+0x36>
    1892:	68 c0       	rjmp	.+208    	; 0x1964 <Read_Bar+0x106>
	
	unsigned long pressure_LSB = (((unsigned long)Data[2])<<16);
    1894:	8b 81       	ldd	r24, Y+3	; 0x03
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	a0 e0       	ldi	r26, 0x00	; 0
    189a:	b0 e0       	ldi	r27, 0x00	; 0
    189c:	dc 01       	movw	r26, r24
    189e:	99 27       	eor	r25, r25
    18a0:	88 27       	eor	r24, r24
	pressure_LSB += (((unsigned int)Data[1])<<8);
    18a2:	2a 81       	ldd	r18, Y+2	; 0x02
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	32 2f       	mov	r19, r18
    18a8:	22 27       	eor	r18, r18
    18aa:	82 0f       	add	r24, r18
    18ac:	93 1f       	adc	r25, r19
    18ae:	a1 1d       	adc	r26, r1
    18b0:	b1 1d       	adc	r27, r1
	pressure_LSB += Data[0];
    18b2:	29 81       	ldd	r18, Y+1	; 0x01
    18b4:	82 0f       	add	r24, r18
    18b6:	91 1d       	adc	r25, r1
    18b8:	a1 1d       	adc	r26, r1
    18ba:	b1 1d       	adc	r27, r1
	
	pressure_window[window_counter++] = pressure_LSB;
    18bc:	e0 91 be 44 	lds	r30, 0x44BE	; 0x8044be <window_counter.4844>
    18c0:	21 e0       	ldi	r18, 0x01	; 1
    18c2:	2e 0f       	add	r18, r30
    18c4:	20 93 be 44 	sts	0x44BE, r18	; 0x8044be <window_counter.4844>
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	ee 0f       	add	r30, r30
    18cc:	ff 1f       	adc	r31, r31
    18ce:	ee 0f       	add	r30, r30
    18d0:	ff 1f       	adc	r31, r31
    18d2:	e2 58       	subi	r30, 0x82	; 130
    18d4:	fb 4b       	sbci	r31, 0xBB	; 187
    18d6:	80 83       	st	Z, r24
    18d8:	91 83       	std	Z+1, r25	; 0x01
    18da:	a2 83       	std	Z+2, r26	; 0x02
    18dc:	b3 83       	std	Z+3, r27	; 0x03
	
	if (window_counter >= BAR_WINDOW_SIZE){
    18de:	20 31       	cpi	r18, 0x10	; 16
    18e0:	08 f4       	brcc	.+2      	; 0x18e4 <Read_Bar+0x86>
    18e2:	42 c0       	rjmp	.+132    	; 0x1968 <Read_Bar+0x10a>
		volatile unsigned long pressure_oversampled = 0;
    18e4:	1c 82       	std	Y+4, r1	; 0x04
    18e6:	1d 82       	std	Y+5, r1	; 0x05
    18e8:	1e 82       	std	Y+6, r1	; 0x06
    18ea:	1f 82       	std	Y+7, r1	; 0x07
		for (unsigned char i=0;i<BAR_WINDOW_SIZE;i++){
    18ec:	80 e0       	ldi	r24, 0x00	; 0
    18ee:	19 c0       	rjmp	.+50     	; 0x1922 <Read_Bar+0xc4>
			pressure_oversampled += pressure_window[i];
    18f0:	e8 2f       	mov	r30, r24
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	ee 0f       	add	r30, r30
    18f6:	ff 1f       	adc	r31, r31
    18f8:	ee 0f       	add	r30, r30
    18fa:	ff 1f       	adc	r31, r31
    18fc:	e2 58       	subi	r30, 0x82	; 130
    18fe:	fb 4b       	sbci	r31, 0xBB	; 187
    1900:	00 81       	ld	r16, Z
    1902:	11 81       	ldd	r17, Z+1	; 0x01
    1904:	22 81       	ldd	r18, Z+2	; 0x02
    1906:	33 81       	ldd	r19, Z+3	; 0x03
    1908:	4c 81       	ldd	r20, Y+4	; 0x04
    190a:	5d 81       	ldd	r21, Y+5	; 0x05
    190c:	6e 81       	ldd	r22, Y+6	; 0x06
    190e:	7f 81       	ldd	r23, Y+7	; 0x07
    1910:	40 0f       	add	r20, r16
    1912:	51 1f       	adc	r21, r17
    1914:	62 1f       	adc	r22, r18
    1916:	73 1f       	adc	r23, r19
    1918:	4c 83       	std	Y+4, r20	; 0x04
    191a:	5d 83       	std	Y+5, r21	; 0x05
    191c:	6e 83       	std	Y+6, r22	; 0x06
    191e:	7f 83       	std	Y+7, r23	; 0x07
	
	pressure_window[window_counter++] = pressure_LSB;
	
	if (window_counter >= BAR_WINDOW_SIZE){
		volatile unsigned long pressure_oversampled = 0;
		for (unsigned char i=0;i<BAR_WINDOW_SIZE;i++){
    1920:	8f 5f       	subi	r24, 0xFF	; 255
    1922:	80 31       	cpi	r24, 0x10	; 16
    1924:	28 f3       	brcs	.-54     	; 0x18f0 <Read_Bar+0x92>
			pressure_oversampled += pressure_window[i];
		}
		pressure_oversampled >>= 4;
    1926:	8c 81       	ldd	r24, Y+4	; 0x04
    1928:	9d 81       	ldd	r25, Y+5	; 0x05
    192a:	ae 81       	ldd	r26, Y+6	; 0x06
    192c:	bf 81       	ldd	r27, Y+7	; 0x07
    192e:	68 94       	set
    1930:	13 f8       	bld	r1, 3
    1932:	b6 95       	lsr	r27
    1934:	a7 95       	ror	r26
    1936:	97 95       	ror	r25
    1938:	87 95       	ror	r24
    193a:	16 94       	lsr	r1
    193c:	d1 f7       	brne	.-12     	; 0x1932 <Read_Bar+0xd4>
    193e:	8c 83       	std	Y+4, r24	; 0x04
    1940:	9d 83       	std	Y+5, r25	; 0x05
    1942:	ae 83       	std	Y+6, r26	; 0x06
    1944:	bf 83       	std	Y+7, r27	; 0x07
		Drone->pressure_altitude = Height_Bar(pressure_oversampled);
    1946:	6c 81       	ldd	r22, Y+4	; 0x04
    1948:	7d 81       	ldd	r23, Y+5	; 0x05
    194a:	8e 81       	ldd	r24, Y+6	; 0x06
    194c:	9f 81       	ldd	r25, Y+7	; 0x07
    194e:	0e 94 0e 0c 	call	0x181c	; 0x181c <Height_Bar>
    1952:	f7 01       	movw	r30, r14
    1954:	60 ab       	std	Z+48, r22	; 0x30
    1956:	71 ab       	std	Z+49, r23	; 0x31
    1958:	82 ab       	std	Z+50, r24	; 0x32
    195a:	93 ab       	std	Z+51, r25	; 0x33
		window_counter = 0;
    195c:	10 92 be 44 	sts	0x44BE, r1	; 0x8044be <window_counter.4844>
	}
	
	return 1;
    1960:	81 e0       	ldi	r24, 0x01	; 1
    1962:	03 c0       	rjmp	.+6      	; 0x196a <Read_Bar+0x10c>
	static unsigned char window_counter = 0;
	unsigned char Read_status = 0;
	unsigned char Data[3] = {0};
	Read_status = Read_SPI(PORT_BAR, CS_BAR, (BAR_DATA_START|0x80), Data, sizeof(Data));
	
	if (Read_status != 2){return 0;}
    1964:	80 e0       	ldi	r24, 0x00	; 0
    1966:	01 c0       	rjmp	.+2      	; 0x196a <Read_Bar+0x10c>
		pressure_oversampled >>= 4;
		Drone->pressure_altitude = Height_Bar(pressure_oversampled);
		window_counter = 0;
	}
	
	return 1;
    1968:	81 e0       	ldi	r24, 0x01	; 1
}
    196a:	27 96       	adiw	r28, 0x07	; 7
    196c:	cd bf       	out	0x3d, r28	; 61
    196e:	de bf       	out	0x3e, r29	; 62
    1970:	df 91       	pop	r29
    1972:	cf 91       	pop	r28
    1974:	1f 91       	pop	r17
    1976:	0f 91       	pop	r16
    1978:	ff 90       	pop	r15
    197a:	ef 90       	pop	r14
    197c:	08 95       	ret

0000197e <Setup_IMU>:
	float height = c1*(pow(pressure_Pa/BAR_PB,c2)-1.0);
	return height;
}
// IMU CODE
// IMU -> 0 is a write, 1 is a read
unsigned char Setup_IMU(){
    197e:	0f 93       	push	r16
    1980:	1f 93       	push	r17
    1982:	cf 93       	push	r28
    1984:	df 93       	push	r29
    1986:	1f 92       	push	r1
    1988:	cd b7       	in	r28, 0x3d	; 61
    198a:	de b7       	in	r29, 0x3e	; 62
	// Configure IMU
	unsigned char IMU_status = 2;
	unsigned char IMU_ID = 0;
    198c:	19 82       	std	Y+1, r1	; 0x01
	
	IMU_status &= Read_SPI(PORT_IMU, CS_IMU, (IMU_WHO_AM_I|0x80), &IMU_ID, 1);
    198e:	01 e0       	ldi	r16, 0x01	; 1
    1990:	9e 01       	movw	r18, r28
    1992:	2f 5f       	subi	r18, 0xFF	; 255
    1994:	3f 4f       	sbci	r19, 0xFF	; 255
    1996:	4f e8       	ldi	r20, 0x8F	; 143
    1998:	66 e0       	ldi	r22, 0x06	; 6
    199a:	81 e4       	ldi	r24, 0x41	; 65
    199c:	0e 94 0f 02 	call	0x41e	; 0x41e <Read_SPI>
    19a0:	18 2f       	mov	r17, r24
    19a2:	12 70       	andi	r17, 0x02	; 2
	IMU_status &= Write_SPI(PORT_IMU, CS_IMU, IMU_CTRL1_XL, 0b01010000); // Sets Accelerometer ODR to 208 Hz, range to +-2g
    19a4:	20 e5       	ldi	r18, 0x50	; 80
    19a6:	40 e1       	ldi	r20, 0x10	; 16
    19a8:	66 e0       	ldi	r22, 0x06	; 6
    19aa:	81 e4       	ldi	r24, 0x41	; 65
    19ac:	0e 94 af 02 	call	0x55e	; 0x55e <Write_SPI>
    19b0:	18 23       	and	r17, r24
	IMU_status &= Write_SPI(PORT_IMU, CS_IMU, IMU_CTRL2_G, 0b01010100); // Sets Gyro ODR to 208 Hz, range to +-500dps
    19b2:	24 e5       	ldi	r18, 0x54	; 84
    19b4:	41 e1       	ldi	r20, 0x11	; 17
    19b6:	66 e0       	ldi	r22, 0x06	; 6
    19b8:	81 e4       	ldi	r24, 0x41	; 65
    19ba:	0e 94 af 02 	call	0x55e	; 0x55e <Write_SPI>
    19be:	18 23       	and	r17, r24
	IMU_status &= Write_SPI(PORT_IMU, CS_IMU, IMU_CTRL8_XL, 0b11001000); // Sets Accelerometer LPF to ODR/9, low noise
    19c0:	28 ec       	ldi	r18, 0xC8	; 200
    19c2:	47 e1       	ldi	r20, 0x17	; 23
    19c4:	66 e0       	ldi	r22, 0x06	; 6
    19c6:	81 e4       	ldi	r24, 0x41	; 65
    19c8:	0e 94 af 02 	call	0x55e	; 0x55e <Write_SPI>
    19cc:	81 23       	and	r24, r17
	
	if(IMU_status != 2){return 0;}
    19ce:	82 30       	cpi	r24, 0x02	; 2
    19d0:	11 f0       	breq	.+4      	; 0x19d6 <Setup_IMU+0x58>
    19d2:	80 e0       	ldi	r24, 0x00	; 0
    19d4:	01 c0       	rjmp	.+2      	; 0x19d8 <Setup_IMU+0x5a>
	return 1;
    19d6:	81 e0       	ldi	r24, 0x01	; 1
}
    19d8:	0f 90       	pop	r0
    19da:	df 91       	pop	r29
    19dc:	cf 91       	pop	r28
    19de:	1f 91       	pop	r17
    19e0:	0f 91       	pop	r16
    19e2:	08 95       	ret

000019e4 <Read_IMU>:

unsigned char Read_IMU(States *Drone){
    19e4:	8f 92       	push	r8
    19e6:	9f 92       	push	r9
    19e8:	af 92       	push	r10
    19ea:	bf 92       	push	r11
    19ec:	ef 92       	push	r14
    19ee:	ff 92       	push	r15
    19f0:	0f 93       	push	r16
    19f2:	1f 93       	push	r17
    19f4:	cf 93       	push	r28
    19f6:	df 93       	push	r29
    19f8:	cd b7       	in	r28, 0x3d	; 61
    19fa:	de b7       	in	r29, 0x3e	; 62
    19fc:	aa 97       	sbiw	r28, 0x2a	; 42
    19fe:	cd bf       	out	0x3d, r28	; 61
    1a00:	de bf       	out	0x3e, r29	; 62
    1a02:	7c 01       	movw	r14, r24
	static signed int w_xyz_window[3][IMU_WINDOW_SIZE];
	static signed int w_bias[3] = {0};
	static unsigned char window_counter = 0;
	unsigned char Read_status = 0;
	
	unsigned char Data[12] = {0};
    1a04:	9e 01       	movw	r18, r28
    1a06:	2f 5f       	subi	r18, 0xFF	; 255
    1a08:	3f 4f       	sbci	r19, 0xFF	; 255
    1a0a:	8c e0       	ldi	r24, 0x0C	; 12
    1a0c:	d9 01       	movw	r26, r18
    1a0e:	1d 92       	st	X+, r1
    1a10:	8a 95       	dec	r24
    1a12:	e9 f7       	brne	.-6      	; 0x1a0e <Read_IMU+0x2a>
	Read_status = Read_SPI(PORT_IMU, CS_IMU, (IMU_DATA_START|0x80), Data, sizeof(Data));
    1a14:	0c e0       	ldi	r16, 0x0C	; 12
    1a16:	42 ea       	ldi	r20, 0xA2	; 162
    1a18:	66 e0       	ldi	r22, 0x06	; 6
    1a1a:	81 e4       	ldi	r24, 0x41	; 65
    1a1c:	0e 94 0f 02 	call	0x41e	; 0x41e <Read_SPI>
	if (Read_status != 2){return 0;}
    1a20:	82 30       	cpi	r24, 0x02	; 2
    1a22:	09 f0       	breq	.+2      	; 0x1a26 <Read_IMU+0x42>
    1a24:	aa c1       	rjmp	.+852    	; 0x1d7a <Read_IMU+0x396>
    1a26:	60 e0       	ldi	r22, 0x00	; 0
    1a28:	43 c0       	rjmp	.+134    	; 0x1ab0 <Read_IMU+0xcc>
	
	for (unsigned char i=0;i<3;i++){
		a_xyz_window[i][window_counter] = (((signed int)Data[2*i+7])<<8) + Data[2*i+6];
    1a2a:	70 91 7d 44 	lds	r23, 0x447D	; 0x80447d <window_counter.4870>
    1a2e:	86 2f       	mov	r24, r22
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	ac 01       	movw	r20, r24
    1a34:	44 0f       	add	r20, r20
    1a36:	55 1f       	adc	r21, r21
    1a38:	fa 01       	movw	r30, r20
    1a3a:	37 96       	adiw	r30, 0x07	; 7
    1a3c:	21 e0       	ldi	r18, 0x01	; 1
    1a3e:	30 e0       	ldi	r19, 0x00	; 0
    1a40:	2c 0f       	add	r18, r28
    1a42:	3d 1f       	adc	r19, r29
    1a44:	e2 0f       	add	r30, r18
    1a46:	f3 1f       	adc	r31, r19
    1a48:	20 81       	ld	r18, Z
    1a4a:	30 e0       	ldi	r19, 0x00	; 0
    1a4c:	32 2f       	mov	r19, r18
    1a4e:	22 27       	eor	r18, r18
    1a50:	fc 01       	movw	r30, r24
    1a52:	33 96       	adiw	r30, 0x03	; 3
    1a54:	ee 0f       	add	r30, r30
    1a56:	ff 1f       	adc	r31, r31
    1a58:	a1 e0       	ldi	r26, 0x01	; 1
    1a5a:	b0 e0       	ldi	r27, 0x00	; 0
    1a5c:	ac 0f       	add	r26, r28
    1a5e:	bd 1f       	adc	r27, r29
    1a60:	ea 0f       	add	r30, r26
    1a62:	fb 1f       	adc	r31, r27
    1a64:	e0 81       	ld	r30, Z
    1a66:	2e 0f       	add	r18, r30
    1a68:	31 1d       	adc	r19, r1
    1a6a:	88 0f       	add	r24, r24
    1a6c:	99 1f       	adc	r25, r25
    1a6e:	88 0f       	add	r24, r24
    1a70:	99 1f       	adc	r25, r25
    1a72:	88 0f       	add	r24, r24
    1a74:	99 1f       	adc	r25, r25
    1a76:	87 0f       	add	r24, r23
    1a78:	91 1d       	adc	r25, r1
    1a7a:	88 0f       	add	r24, r24
    1a7c:	99 1f       	adc	r25, r25
    1a7e:	fc 01       	movw	r30, r24
    1a80:	e3 5b       	subi	r30, 0xB3	; 179
    1a82:	fb 4b       	sbci	r31, 0xBB	; 187
    1a84:	20 83       	st	Z, r18
    1a86:	31 83       	std	Z+1, r19	; 0x01
		w_xyz_window[i][window_counter] = (((signed int)Data[2*i+1])<<8) + Data[2*i];
    1a88:	fa 01       	movw	r30, r20
    1a8a:	31 96       	adiw	r30, 0x01	; 1
    1a8c:	ea 0f       	add	r30, r26
    1a8e:	fb 1f       	adc	r31, r27
    1a90:	20 81       	ld	r18, Z
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	32 2f       	mov	r19, r18
    1a96:	22 27       	eor	r18, r18
    1a98:	fd 01       	movw	r30, r26
    1a9a:	e4 0f       	add	r30, r20
    1a9c:	f5 1f       	adc	r31, r21
    1a9e:	40 81       	ld	r20, Z
    1aa0:	24 0f       	add	r18, r20
    1aa2:	31 1d       	adc	r19, r1
    1aa4:	fc 01       	movw	r30, r24
    1aa6:	e3 5e       	subi	r30, 0xE3	; 227
    1aa8:	fb 4b       	sbci	r31, 0xBB	; 187
    1aaa:	20 83       	st	Z, r18
    1aac:	31 83       	std	Z+1, r19	; 0x01
	
	unsigned char Data[12] = {0};
	Read_status = Read_SPI(PORT_IMU, CS_IMU, (IMU_DATA_START|0x80), Data, sizeof(Data));
	if (Read_status != 2){return 0;}
	
	for (unsigned char i=0;i<3;i++){
    1aae:	6f 5f       	subi	r22, 0xFF	; 255
    1ab0:	63 30       	cpi	r22, 0x03	; 3
    1ab2:	08 f4       	brcc	.+2      	; 0x1ab6 <Read_IMU+0xd2>
    1ab4:	ba cf       	rjmp	.-140    	; 0x1a2a <Read_IMU+0x46>
		a_xyz_window[i][window_counter] = (((signed int)Data[2*i+7])<<8) + Data[2*i+6];
		w_xyz_window[i][window_counter] = (((signed int)Data[2*i+1])<<8) + Data[2*i];
	}
	window_counter++;
    1ab6:	80 91 7d 44 	lds	r24, 0x447D	; 0x80447d <window_counter.4870>
    1aba:	8f 5f       	subi	r24, 0xFF	; 255
    1abc:	80 93 7d 44 	sts	0x447D, r24	; 0x80447d <window_counter.4870>
	
	if (window_counter >= IMU_WINDOW_SIZE){
    1ac0:	88 30       	cpi	r24, 0x08	; 8
    1ac2:	08 f4       	brcc	.+2      	; 0x1ac6 <Read_IMU+0xe2>
    1ac4:	5c c1       	rjmp	.+696    	; 0x1d7e <Read_IMU+0x39a>
		window_counter = 0;
    1ac6:	10 92 7d 44 	sts	0x447D, r1	; 0x80447d <window_counter.4870>
		volatile signed long a_xyz_FIR[3] = {0};
    1aca:	8c e0       	ldi	r24, 0x0C	; 12
    1acc:	fe 01       	movw	r30, r28
    1ace:	79 96       	adiw	r30, 0x19	; 25
    1ad0:	df 01       	movw	r26, r30
    1ad2:	28 2f       	mov	r18, r24
    1ad4:	1d 92       	st	X+, r1
    1ad6:	2a 95       	dec	r18
    1ad8:	e9 f7       	brne	.-6      	; 0x1ad4 <Read_IMU+0xf0>
		volatile signed long w_xyz_FIR[3] = {0};
    1ada:	3c 97       	sbiw	r30, 0x0c	; 12
    1adc:	df 01       	movw	r26, r30
    1ade:	1d 92       	st	X+, r1
    1ae0:	8a 95       	dec	r24
    1ae2:	e9 f7       	brne	.-6      	; 0x1ade <Read_IMU+0xfa>
		for (unsigned char i=0;i<3;i++){
    1ae4:	30 e0       	ldi	r19, 0x00	; 0
    1ae6:	74 c0       	rjmp	.+232    	; 0x1bd0 <Read_IMU+0x1ec>
			for (unsigned char j=0;j<IMU_WINDOW_SIZE;j++){
				a_xyz_FIR[i] += a_xyz_window[i][j];
    1ae8:	83 2f       	mov	r24, r19
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	fc 01       	movw	r30, r24
    1aee:	ee 0f       	add	r30, r30
    1af0:	ff 1f       	adc	r31, r31
    1af2:	ee 0f       	add	r30, r30
    1af4:	ff 1f       	adc	r31, r31
    1af6:	41 e0       	ldi	r20, 0x01	; 1
    1af8:	50 e0       	ldi	r21, 0x00	; 0
    1afa:	4c 0f       	add	r20, r28
    1afc:	5d 1f       	adc	r21, r29
    1afe:	e4 0f       	add	r30, r20
    1b00:	f5 1f       	adc	r31, r21
    1b02:	80 8c       	ldd	r8, Z+24	; 0x18
    1b04:	91 8c       	ldd	r9, Z+25	; 0x19
    1b06:	a2 8c       	ldd	r10, Z+26	; 0x1a
    1b08:	b3 8c       	ldd	r11, Z+27	; 0x1b
    1b0a:	88 0f       	add	r24, r24
    1b0c:	99 1f       	adc	r25, r25
    1b0e:	88 0f       	add	r24, r24
    1b10:	99 1f       	adc	r25, r25
    1b12:	88 0f       	add	r24, r24
    1b14:	99 1f       	adc	r25, r25
    1b16:	82 0f       	add	r24, r18
    1b18:	91 1d       	adc	r25, r1
    1b1a:	88 0f       	add	r24, r24
    1b1c:	99 1f       	adc	r25, r25
    1b1e:	dc 01       	movw	r26, r24
    1b20:	a3 5b       	subi	r26, 0xB3	; 179
    1b22:	bb 4b       	sbci	r27, 0xBB	; 187
    1b24:	4d 91       	ld	r20, X+
    1b26:	5c 91       	ld	r21, X
    1b28:	05 2e       	mov	r0, r21
    1b2a:	00 0c       	add	r0, r0
    1b2c:	66 0b       	sbc	r22, r22
    1b2e:	77 0b       	sbc	r23, r23
    1b30:	48 0d       	add	r20, r8
    1b32:	59 1d       	adc	r21, r9
    1b34:	6a 1d       	adc	r22, r10
    1b36:	7b 1d       	adc	r23, r11
    1b38:	40 8f       	std	Z+24, r20	; 0x18
    1b3a:	51 8f       	std	Z+25, r21	; 0x19
    1b3c:	62 8f       	std	Z+26, r22	; 0x1a
    1b3e:	73 8f       	std	Z+27, r23	; 0x1b
				w_xyz_FIR[i] += w_xyz_window[i][j];
    1b40:	44 85       	ldd	r20, Z+12	; 0x0c
    1b42:	55 85       	ldd	r21, Z+13	; 0x0d
    1b44:	66 85       	ldd	r22, Z+14	; 0x0e
    1b46:	77 85       	ldd	r23, Z+15	; 0x0f
    1b48:	dc 01       	movw	r26, r24
    1b4a:	a3 5e       	subi	r26, 0xE3	; 227
    1b4c:	bb 4b       	sbci	r27, 0xBB	; 187
    1b4e:	8d 91       	ld	r24, X+
    1b50:	9c 91       	ld	r25, X
    1b52:	09 2e       	mov	r0, r25
    1b54:	00 0c       	add	r0, r0
    1b56:	aa 0b       	sbc	r26, r26
    1b58:	bb 0b       	sbc	r27, r27
    1b5a:	84 0f       	add	r24, r20
    1b5c:	95 1f       	adc	r25, r21
    1b5e:	a6 1f       	adc	r26, r22
    1b60:	b7 1f       	adc	r27, r23
    1b62:	84 87       	std	Z+12, r24	; 0x0c
    1b64:	95 87       	std	Z+13, r25	; 0x0d
    1b66:	a6 87       	std	Z+14, r26	; 0x0e
    1b68:	b7 87       	std	Z+15, r27	; 0x0f
	if (window_counter >= IMU_WINDOW_SIZE){
		window_counter = 0;
		volatile signed long a_xyz_FIR[3] = {0};
		volatile signed long w_xyz_FIR[3] = {0};
		for (unsigned char i=0;i<3;i++){
			for (unsigned char j=0;j<IMU_WINDOW_SIZE;j++){
    1b6a:	2f 5f       	subi	r18, 0xFF	; 255
    1b6c:	01 c0       	rjmp	.+2      	; 0x1b70 <Read_IMU+0x18c>
    1b6e:	20 e0       	ldi	r18, 0x00	; 0
    1b70:	28 30       	cpi	r18, 0x08	; 8
    1b72:	08 f4       	brcc	.+2      	; 0x1b76 <Read_IMU+0x192>
    1b74:	b9 cf       	rjmp	.-142    	; 0x1ae8 <Read_IMU+0x104>
				a_xyz_FIR[i] += a_xyz_window[i][j];
				w_xyz_FIR[i] += w_xyz_window[i][j];
			}
			a_xyz_FIR[i] >>= 3;
    1b76:	e3 2f       	mov	r30, r19
    1b78:	f0 e0       	ldi	r31, 0x00	; 0
    1b7a:	ee 0f       	add	r30, r30
    1b7c:	ff 1f       	adc	r31, r31
    1b7e:	ee 0f       	add	r30, r30
    1b80:	ff 1f       	adc	r31, r31
    1b82:	81 e0       	ldi	r24, 0x01	; 1
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	8c 0f       	add	r24, r28
    1b88:	9d 1f       	adc	r25, r29
    1b8a:	e8 0f       	add	r30, r24
    1b8c:	f9 1f       	adc	r31, r25
    1b8e:	80 8d       	ldd	r24, Z+24	; 0x18
    1b90:	91 8d       	ldd	r25, Z+25	; 0x19
    1b92:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1b94:	b3 8d       	ldd	r27, Z+27	; 0x1b
    1b96:	68 94       	set
    1b98:	12 f8       	bld	r1, 2
    1b9a:	b5 95       	asr	r27
    1b9c:	a7 95       	ror	r26
    1b9e:	97 95       	ror	r25
    1ba0:	87 95       	ror	r24
    1ba2:	16 94       	lsr	r1
    1ba4:	d1 f7       	brne	.-12     	; 0x1b9a <Read_IMU+0x1b6>
    1ba6:	80 8f       	std	Z+24, r24	; 0x18
    1ba8:	91 8f       	std	Z+25, r25	; 0x19
    1baa:	a2 8f       	std	Z+26, r26	; 0x1a
    1bac:	b3 8f       	std	Z+27, r27	; 0x1b
			w_xyz_FIR[i] >>= 3;
    1bae:	84 85       	ldd	r24, Z+12	; 0x0c
    1bb0:	95 85       	ldd	r25, Z+13	; 0x0d
    1bb2:	a6 85       	ldd	r26, Z+14	; 0x0e
    1bb4:	b7 85       	ldd	r27, Z+15	; 0x0f
    1bb6:	68 94       	set
    1bb8:	12 f8       	bld	r1, 2
    1bba:	b5 95       	asr	r27
    1bbc:	a7 95       	ror	r26
    1bbe:	97 95       	ror	r25
    1bc0:	87 95       	ror	r24
    1bc2:	16 94       	lsr	r1
    1bc4:	d1 f7       	brne	.-12     	; 0x1bba <Read_IMU+0x1d6>
    1bc6:	84 87       	std	Z+12, r24	; 0x0c
    1bc8:	95 87       	std	Z+13, r25	; 0x0d
    1bca:	a6 87       	std	Z+14, r26	; 0x0e
    1bcc:	b7 87       	std	Z+15, r27	; 0x0f
	
	if (window_counter >= IMU_WINDOW_SIZE){
		window_counter = 0;
		volatile signed long a_xyz_FIR[3] = {0};
		volatile signed long w_xyz_FIR[3] = {0};
		for (unsigned char i=0;i<3;i++){
    1bce:	3f 5f       	subi	r19, 0xFF	; 255
    1bd0:	33 30       	cpi	r19, 0x03	; 3
    1bd2:	68 f2       	brcs	.-102    	; 0x1b6e <Read_IMU+0x18a>
			}
			a_xyz_FIR[i] >>= 3;
			w_xyz_FIR[i] >>= 3;
		}
		// Flip positive directions on Gyro x and z axis and Accelerometer y axis to align with Forward-Right-Down coordinate system (aligns with NED when not rotated)
		if (g_seconds < 1){
    1bd4:	80 91 69 43 	lds	r24, 0x4369	; 0x804369 <g_seconds>
    1bd8:	90 91 6a 43 	lds	r25, 0x436A	; 0x80436a <g_seconds+0x1>
    1bdc:	a0 91 6b 43 	lds	r26, 0x436B	; 0x80436b <g_seconds+0x2>
    1be0:	b0 91 6c 43 	lds	r27, 0x436C	; 0x80436c <g_seconds+0x3>
    1be4:	89 2b       	or	r24, r25
    1be6:	8a 2b       	or	r24, r26
    1be8:	8b 2b       	or	r24, r27
    1bea:	d1 f4       	brne	.+52     	; 0x1c20 <Read_IMU+0x23c>
			w_bias[0] = -w_xyz_FIR[0];
    1bec:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bee:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bf0:	af 85       	ldd	r26, Y+15	; 0x0f
    1bf2:	b8 89       	ldd	r27, Y+16	; 0x10
    1bf4:	e7 e1       	ldi	r30, 0x17	; 23
    1bf6:	f4 e4       	ldi	r31, 0x44	; 68
    1bf8:	91 95       	neg	r25
    1bfa:	81 95       	neg	r24
    1bfc:	91 09       	sbc	r25, r1
    1bfe:	80 83       	st	Z, r24
    1c00:	91 83       	std	Z+1, r25	; 0x01
			w_bias[1] = w_xyz_FIR[1];
    1c02:	89 89       	ldd	r24, Y+17	; 0x11
    1c04:	9a 89       	ldd	r25, Y+18	; 0x12
    1c06:	ab 89       	ldd	r26, Y+19	; 0x13
    1c08:	bc 89       	ldd	r27, Y+20	; 0x14
    1c0a:	82 83       	std	Z+2, r24	; 0x02
    1c0c:	93 83       	std	Z+3, r25	; 0x03
			w_bias[2] = -w_xyz_FIR[2];
    1c0e:	8d 89       	ldd	r24, Y+21	; 0x15
    1c10:	9e 89       	ldd	r25, Y+22	; 0x16
    1c12:	af 89       	ldd	r26, Y+23	; 0x17
    1c14:	b8 8d       	ldd	r27, Y+24	; 0x18
    1c16:	91 95       	neg	r25
    1c18:	81 95       	neg	r24
    1c1a:	91 09       	sbc	r25, r1
    1c1c:	84 83       	std	Z+4, r24	; 0x04
    1c1e:	95 83       	std	Z+5, r25	; 0x05
		}
		signed int w_diff[3] = {-w_xyz_FIR[0]-w_bias[0], w_xyz_FIR[1]-w_bias[1], -w_xyz_FIR[2]-w_bias[2]};
    1c20:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c22:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c24:	af 85       	ldd	r26, Y+15	; 0x0f
    1c26:	b8 89       	ldd	r27, Y+16	; 0x10
    1c28:	e7 e1       	ldi	r30, 0x17	; 23
    1c2a:	f4 e4       	ldi	r31, 0x44	; 68
    1c2c:	20 81       	ld	r18, Z
    1c2e:	31 81       	ldd	r19, Z+1	; 0x01
    1c30:	91 95       	neg	r25
    1c32:	81 95       	neg	r24
    1c34:	91 09       	sbc	r25, r1
    1c36:	82 1b       	sub	r24, r18
    1c38:	93 0b       	sbc	r25, r19
    1c3a:	8d a3       	std	Y+37, r24	; 0x25
    1c3c:	9e a3       	std	Y+38, r25	; 0x26
    1c3e:	89 89       	ldd	r24, Y+17	; 0x11
    1c40:	9a 89       	ldd	r25, Y+18	; 0x12
    1c42:	ab 89       	ldd	r26, Y+19	; 0x13
    1c44:	bc 89       	ldd	r27, Y+20	; 0x14
    1c46:	22 81       	ldd	r18, Z+2	; 0x02
    1c48:	33 81       	ldd	r19, Z+3	; 0x03
    1c4a:	82 1b       	sub	r24, r18
    1c4c:	93 0b       	sbc	r25, r19
    1c4e:	8f a3       	std	Y+39, r24	; 0x27
    1c50:	98 a7       	std	Y+40, r25	; 0x28
    1c52:	8d 89       	ldd	r24, Y+21	; 0x15
    1c54:	9e 89       	ldd	r25, Y+22	; 0x16
    1c56:	af 89       	ldd	r26, Y+23	; 0x17
    1c58:	b8 8d       	ldd	r27, Y+24	; 0x18
    1c5a:	24 81       	ldd	r18, Z+4	; 0x04
    1c5c:	35 81       	ldd	r19, Z+5	; 0x05
    1c5e:	91 95       	neg	r25
    1c60:	81 95       	neg	r24
    1c62:	91 09       	sbc	r25, r1
    1c64:	82 1b       	sub	r24, r18
    1c66:	93 0b       	sbc	r25, r19
    1c68:	89 a7       	std	Y+41, r24	; 0x29
    1c6a:	9a a7       	std	Y+42, r25	; 0x2a
		for (unsigned char i=0;i<3;i++){
    1c6c:	10 e0       	ldi	r17, 0x00	; 0
    1c6e:	37 c0       	rjmp	.+110    	; 0x1cde <Read_IMU+0x2fa>
			Drone->w[i] = ((float)w_diff[i])*GYRO_SENS*D2R;
    1c70:	a1 2e       	mov	r10, r17
    1c72:	b1 2c       	mov	r11, r1
    1c74:	f5 01       	movw	r30, r10
    1c76:	ee 0f       	add	r30, r30
    1c78:	ff 1f       	adc	r31, r31
    1c7a:	a1 e0       	ldi	r26, 0x01	; 1
    1c7c:	b0 e0       	ldi	r27, 0x00	; 0
    1c7e:	ac 0f       	add	r26, r28
    1c80:	bd 1f       	adc	r27, r29
    1c82:	ea 0f       	add	r30, r26
    1c84:	fb 1f       	adc	r31, r27
    1c86:	64 a1       	ldd	r22, Z+36	; 0x24
    1c88:	75 a1       	ldd	r23, Z+37	; 0x25
    1c8a:	07 2e       	mov	r0, r23
    1c8c:	00 0c       	add	r0, r0
    1c8e:	88 0b       	sbc	r24, r24
    1c90:	99 0b       	sbc	r25, r25
    1c92:	0e 94 20 1e 	call	0x3c40	; 0x3c40 <__floatsisf>
    1c96:	20 e0       	ldi	r18, 0x00	; 0
    1c98:	30 e0       	ldi	r19, 0x00	; 0
    1c9a:	4a ef       	ldi	r20, 0xFA	; 250
    1c9c:	53 e4       	ldi	r21, 0x43	; 67
    1c9e:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__mulsf3>
    1ca2:	20 e0       	ldi	r18, 0x00	; 0
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	40 e0       	ldi	r20, 0x00	; 0
    1ca8:	58 e3       	ldi	r21, 0x38	; 56
    1caa:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__mulsf3>
    1cae:	2b ed       	ldi	r18, 0xDB	; 219
    1cb0:	3f e0       	ldi	r19, 0x0F	; 15
    1cb2:	49 e4       	ldi	r20, 0x49	; 73
    1cb4:	50 e4       	ldi	r21, 0x40	; 64
    1cb6:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__mulsf3>
    1cba:	20 e0       	ldi	r18, 0x00	; 0
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	44 e3       	ldi	r20, 0x34	; 52
    1cc0:	53 e4       	ldi	r21, 0x43	; 67
    1cc2:	0e 94 76 1d 	call	0x3aec	; 0x3aec <__divsf3>
    1cc6:	aa 0c       	add	r10, r10
    1cc8:	bb 1c       	adc	r11, r11
    1cca:	aa 0c       	add	r10, r10
    1ccc:	bb 1c       	adc	r11, r11
    1cce:	f7 01       	movw	r30, r14
    1cd0:	ea 0d       	add	r30, r10
    1cd2:	fb 1d       	adc	r31, r11
    1cd4:	60 83       	st	Z, r22
    1cd6:	71 83       	std	Z+1, r23	; 0x01
    1cd8:	82 83       	std	Z+2, r24	; 0x02
    1cda:	93 83       	std	Z+3, r25	; 0x03
			w_bias[0] = -w_xyz_FIR[0];
			w_bias[1] = w_xyz_FIR[1];
			w_bias[2] = -w_xyz_FIR[2];
		}
		signed int w_diff[3] = {-w_xyz_FIR[0]-w_bias[0], w_xyz_FIR[1]-w_bias[1], -w_xyz_FIR[2]-w_bias[2]};
		for (unsigned char i=0;i<3;i++){
    1cdc:	1f 5f       	subi	r17, 0xFF	; 255
    1cde:	13 30       	cpi	r17, 0x03	; 3
    1ce0:	38 f2       	brcs	.-114    	; 0x1c70 <Read_IMU+0x28c>
			Drone->w[i] = ((float)w_diff[i])*GYRO_SENS*D2R;
		}
		Drone->g_vec[0] = ((float)a_xyz_FIR[0])*ACCEL_SENS;
    1ce2:	69 8d       	ldd	r22, Y+25	; 0x19
    1ce4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ce6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ce8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cea:	0e 94 20 1e 	call	0x3c40	; 0x3c40 <__floatsisf>
    1cee:	9b 01       	movw	r18, r22
    1cf0:	ac 01       	movw	r20, r24
    1cf2:	0e 94 8e 1c 	call	0x391c	; 0x391c <__addsf3>
    1cf6:	20 e0       	ldi	r18, 0x00	; 0
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
    1cfa:	40 e0       	ldi	r20, 0x00	; 0
    1cfc:	58 e3       	ldi	r21, 0x38	; 56
    1cfe:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__mulsf3>
    1d02:	f7 01       	movw	r30, r14
    1d04:	64 87       	std	Z+12, r22	; 0x0c
    1d06:	75 87       	std	Z+13, r23	; 0x0d
    1d08:	86 87       	std	Z+14, r24	; 0x0e
    1d0a:	97 87       	std	Z+15, r25	; 0x0f
		Drone->g_vec[1] = ((float)-a_xyz_FIR[1])*ACCEL_SENS;
    1d0c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d0e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d10:	af 8d       	ldd	r26, Y+31	; 0x1f
    1d12:	b8 a1       	ldd	r27, Y+32	; 0x20
    1d14:	9c 01       	movw	r18, r24
    1d16:	ad 01       	movw	r20, r26
    1d18:	66 27       	eor	r22, r22
    1d1a:	77 27       	eor	r23, r23
    1d1c:	cb 01       	movw	r24, r22
    1d1e:	62 1b       	sub	r22, r18
    1d20:	73 0b       	sbc	r23, r19
    1d22:	84 0b       	sbc	r24, r20
    1d24:	95 0b       	sbc	r25, r21
    1d26:	0e 94 20 1e 	call	0x3c40	; 0x3c40 <__floatsisf>
    1d2a:	9b 01       	movw	r18, r22
    1d2c:	ac 01       	movw	r20, r24
    1d2e:	0e 94 8e 1c 	call	0x391c	; 0x391c <__addsf3>
    1d32:	20 e0       	ldi	r18, 0x00	; 0
    1d34:	30 e0       	ldi	r19, 0x00	; 0
    1d36:	40 e0       	ldi	r20, 0x00	; 0
    1d38:	58 e3       	ldi	r21, 0x38	; 56
    1d3a:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__mulsf3>
    1d3e:	d7 01       	movw	r26, r14
    1d40:	50 96       	adiw	r26, 0x10	; 16
    1d42:	6d 93       	st	X+, r22
    1d44:	7d 93       	st	X+, r23
    1d46:	8d 93       	st	X+, r24
    1d48:	9c 93       	st	X, r25
    1d4a:	53 97       	sbiw	r26, 0x13	; 19
		Drone->g_vec[2] = ((float)a_xyz_FIR[2])*ACCEL_SENS;
    1d4c:	69 a1       	ldd	r22, Y+33	; 0x21
    1d4e:	7a a1       	ldd	r23, Y+34	; 0x22
    1d50:	8b a1       	ldd	r24, Y+35	; 0x23
    1d52:	9c a1       	ldd	r25, Y+36	; 0x24
    1d54:	0e 94 20 1e 	call	0x3c40	; 0x3c40 <__floatsisf>
    1d58:	9b 01       	movw	r18, r22
    1d5a:	ac 01       	movw	r20, r24
    1d5c:	0e 94 8e 1c 	call	0x391c	; 0x391c <__addsf3>
    1d60:	20 e0       	ldi	r18, 0x00	; 0
    1d62:	30 e0       	ldi	r19, 0x00	; 0
    1d64:	40 e0       	ldi	r20, 0x00	; 0
    1d66:	58 e3       	ldi	r21, 0x38	; 56
    1d68:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__mulsf3>
    1d6c:	f7 01       	movw	r30, r14
    1d6e:	64 8b       	std	Z+20, r22	; 0x14
    1d70:	75 8b       	std	Z+21, r23	; 0x15
    1d72:	86 8b       	std	Z+22, r24	; 0x16
    1d74:	97 8b       	std	Z+23, r25	; 0x17
	}
	
	return 1;
    1d76:	81 e0       	ldi	r24, 0x01	; 1
    1d78:	03 c0       	rjmp	.+6      	; 0x1d80 <Read_IMU+0x39c>
	static unsigned char window_counter = 0;
	unsigned char Read_status = 0;
	
	unsigned char Data[12] = {0};
	Read_status = Read_SPI(PORT_IMU, CS_IMU, (IMU_DATA_START|0x80), Data, sizeof(Data));
	if (Read_status != 2){return 0;}
    1d7a:	80 e0       	ldi	r24, 0x00	; 0
    1d7c:	01 c0       	rjmp	.+2      	; 0x1d80 <Read_IMU+0x39c>
		Drone->g_vec[0] = ((float)a_xyz_FIR[0])*ACCEL_SENS;
		Drone->g_vec[1] = ((float)-a_xyz_FIR[1])*ACCEL_SENS;
		Drone->g_vec[2] = ((float)a_xyz_FIR[2])*ACCEL_SENS;
	}
	
	return 1;
    1d7e:	81 e0       	ldi	r24, 0x01	; 1
}
    1d80:	aa 96       	adiw	r28, 0x2a	; 42
    1d82:	cd bf       	out	0x3d, r28	; 61
    1d84:	de bf       	out	0x3e, r29	; 62
    1d86:	df 91       	pop	r29
    1d88:	cf 91       	pop	r28
    1d8a:	1f 91       	pop	r17
    1d8c:	0f 91       	pop	r16
    1d8e:	ff 90       	pop	r15
    1d90:	ef 90       	pop	r14
    1d92:	bf 90       	pop	r11
    1d94:	af 90       	pop	r10
    1d96:	9f 90       	pop	r9
    1d98:	8f 90       	pop	r8
    1d9a:	08 95       	ret

00001d9c <Setup_Mag>:

// MAGNETOMETER CODE
// Mag -> 0 is a write, 1 is a read
unsigned char  Setup_Mag(){
    1d9c:	0f 93       	push	r16
    1d9e:	1f 93       	push	r17
    1da0:	cf 93       	push	r28
    1da2:	df 93       	push	r29
    1da4:	1f 92       	push	r1
    1da6:	cd b7       	in	r28, 0x3d	; 61
    1da8:	de b7       	in	r29, 0x3e	; 62
	unsigned char MAG_status = 2;
	unsigned char Mag_ID = 0;
    1daa:	19 82       	std	Y+1, r1	; 0x01
	
	MAG_status &= Write_SPI(PORT_MAG, CS_MAG, MAG_CFG_REG_C, 0b00110100); // Enables 4 wire SPI, disables I2C
    1dac:	24 e3       	ldi	r18, 0x34	; 52
    1dae:	42 e6       	ldi	r20, 0x62	; 98
    1db0:	63 e0       	ldi	r22, 0x03	; 3
    1db2:	82 e4       	ldi	r24, 0x42	; 66
    1db4:	0e 94 af 02 	call	0x55e	; 0x55e <Write_SPI>
    1db8:	18 2f       	mov	r17, r24
    1dba:	12 70       	andi	r17, 0x02	; 2
	MAG_status &= Read_SPI(PORT_MAG, CS_MAG, (MAG_WHO_AM_I|0x80), &Mag_ID, 1);
    1dbc:	01 e0       	ldi	r16, 0x01	; 1
    1dbe:	9e 01       	movw	r18, r28
    1dc0:	2f 5f       	subi	r18, 0xFF	; 255
    1dc2:	3f 4f       	sbci	r19, 0xFF	; 255
    1dc4:	4f ec       	ldi	r20, 0xCF	; 207
    1dc6:	63 e0       	ldi	r22, 0x03	; 3
    1dc8:	82 e4       	ldi	r24, 0x42	; 66
    1dca:	0e 94 0f 02 	call	0x41e	; 0x41e <Read_SPI>
    1dce:	18 23       	and	r17, r24
	MAG_status &= Write_SPI(PORT_MAG, CS_MAG, MAG_CFG_REG_A, 0b10001100); // Sets continuous mode, 100 Hz ODR, temp compensation enabled
    1dd0:	2c e8       	ldi	r18, 0x8C	; 140
    1dd2:	40 e6       	ldi	r20, 0x60	; 96
    1dd4:	63 e0       	ldi	r22, 0x03	; 3
    1dd6:	82 e4       	ldi	r24, 0x42	; 66
    1dd8:	0e 94 af 02 	call	0x55e	; 0x55e <Write_SPI>
    1ddc:	18 23       	and	r17, r24
	MAG_status &= Write_SPI(PORT_MAG, CS_MAG, MAG_CFG_REG_B, 0b00000001); // Enables LPF
    1dde:	21 e0       	ldi	r18, 0x01	; 1
    1de0:	41 e6       	ldi	r20, 0x61	; 97
    1de2:	63 e0       	ldi	r22, 0x03	; 3
    1de4:	82 e4       	ldi	r24, 0x42	; 66
    1de6:	0e 94 af 02 	call	0x55e	; 0x55e <Write_SPI>
    1dea:	81 23       	and	r24, r17
	
	if (MAG_status != 2){return 0;}
    1dec:	82 30       	cpi	r24, 0x02	; 2
    1dee:	11 f0       	breq	.+4      	; 0x1df4 <Setup_Mag+0x58>
    1df0:	80 e0       	ldi	r24, 0x00	; 0
    1df2:	01 c0       	rjmp	.+2      	; 0x1df6 <Setup_Mag+0x5a>
	return 1;
    1df4:	81 e0       	ldi	r24, 0x01	; 1
}
    1df6:	0f 90       	pop	r0
    1df8:	df 91       	pop	r29
    1dfa:	cf 91       	pop	r28
    1dfc:	1f 91       	pop	r17
    1dfe:	0f 91       	pop	r16
    1e00:	08 95       	ret

00001e02 <Read_Mag>:

unsigned char Read_Mag(States *Drone){
    1e02:	4f 92       	push	r4
    1e04:	5f 92       	push	r5
    1e06:	6f 92       	push	r6
    1e08:	7f 92       	push	r7
    1e0a:	8f 92       	push	r8
    1e0c:	9f 92       	push	r9
    1e0e:	af 92       	push	r10
    1e10:	bf 92       	push	r11
    1e12:	ef 92       	push	r14
    1e14:	ff 92       	push	r15
    1e16:	0f 93       	push	r16
    1e18:	1f 93       	push	r17
    1e1a:	cf 93       	push	r28
    1e1c:	df 93       	push	r29
    1e1e:	cd b7       	in	r28, 0x3d	; 61
    1e20:	de b7       	in	r29, 0x3e	; 62
    1e22:	62 97       	sbiw	r28, 0x12	; 18
    1e24:	cd bf       	out	0x3d, r28	; 61
    1e26:	de bf       	out	0x3e, r29	; 62
    1e28:	7c 01       	movw	r14, r24
	static signed int m_min[3] = {0};
	static signed int hard_iron[3] = {0};
	static unsigned char window_counter = 0;
	unsigned char Read_status = 0;
	
	unsigned char Data[6] = {0};
    1e2a:	9e 01       	movw	r18, r28
    1e2c:	2f 5f       	subi	r18, 0xFF	; 255
    1e2e:	3f 4f       	sbci	r19, 0xFF	; 255
    1e30:	86 e0       	ldi	r24, 0x06	; 6
    1e32:	d9 01       	movw	r26, r18
    1e34:	1d 92       	st	X+, r1
    1e36:	8a 95       	dec	r24
    1e38:	e9 f7       	brne	.-6      	; 0x1e34 <Read_Mag+0x32>
	Read_status = Read_SPI(PORT_MAG, CS_MAG, (MAG_DATA_START|0x80), Data, 6);
    1e3a:	06 e0       	ldi	r16, 0x06	; 6
    1e3c:	48 ee       	ldi	r20, 0xE8	; 232
    1e3e:	63 e0       	ldi	r22, 0x03	; 3
    1e40:	82 e4       	ldi	r24, 0x42	; 66
    1e42:	0e 94 0f 02 	call	0x41e	; 0x41e <Read_SPI>
	if (Read_status != 2){return 0;}
    1e46:	82 30       	cpi	r24, 0x02	; 2
    1e48:	09 f0       	breq	.+2      	; 0x1e4c <Read_Mag+0x4a>
    1e4a:	f2 c1       	rjmp	.+996    	; 0x2230 <Read_Mag+0x42e>
    1e4c:	60 e0       	ldi	r22, 0x00	; 0
    1e4e:	2c c0       	rjmp	.+88     	; 0x1ea8 <Read_Mag+0xa6>
	
	for (unsigned char i=0;i<3;i++){
		m_xyz_window[i][window_counter] = (((signed int)Data[2*i+1])<<8) + Data[2*i];
    1e50:	70 91 16 44 	lds	r23, 0x4416	; 0x804416 <window_counter.4903>
    1e54:	86 2f       	mov	r24, r22
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	ac 01       	movw	r20, r24
    1e5a:	44 0f       	add	r20, r20
    1e5c:	55 1f       	adc	r21, r21
    1e5e:	fa 01       	movw	r30, r20
    1e60:	31 96       	adiw	r30, 0x01	; 1
    1e62:	21 e0       	ldi	r18, 0x01	; 1
    1e64:	30 e0       	ldi	r19, 0x00	; 0
    1e66:	2c 0f       	add	r18, r28
    1e68:	3d 1f       	adc	r19, r29
    1e6a:	e2 0f       	add	r30, r18
    1e6c:	f3 1f       	adc	r31, r19
    1e6e:	20 81       	ld	r18, Z
    1e70:	30 e0       	ldi	r19, 0x00	; 0
    1e72:	32 2f       	mov	r19, r18
    1e74:	22 27       	eor	r18, r18
    1e76:	e1 e0       	ldi	r30, 0x01	; 1
    1e78:	f0 e0       	ldi	r31, 0x00	; 0
    1e7a:	ec 0f       	add	r30, r28
    1e7c:	fd 1f       	adc	r31, r29
    1e7e:	e4 0f       	add	r30, r20
    1e80:	f5 1f       	adc	r31, r21
    1e82:	40 81       	ld	r20, Z
    1e84:	24 0f       	add	r18, r20
    1e86:	31 1d       	adc	r19, r1
    1e88:	fc 01       	movw	r30, r24
    1e8a:	e2 95       	swap	r30
    1e8c:	f2 95       	swap	r31
    1e8e:	f0 7f       	andi	r31, 0xF0	; 240
    1e90:	fe 27       	eor	r31, r30
    1e92:	e0 7f       	andi	r30, 0xF0	; 240
    1e94:	fe 27       	eor	r31, r30
    1e96:	e7 0f       	add	r30, r23
    1e98:	f1 1d       	adc	r31, r1
    1e9a:	ee 0f       	add	r30, r30
    1e9c:	ff 1f       	adc	r31, r31
    1e9e:	ea 54       	subi	r30, 0x4A	; 74
    1ea0:	fc 4b       	sbci	r31, 0xBC	; 188
    1ea2:	20 83       	st	Z, r18
    1ea4:	31 83       	std	Z+1, r19	; 0x01
	
	unsigned char Data[6] = {0};
	Read_status = Read_SPI(PORT_MAG, CS_MAG, (MAG_DATA_START|0x80), Data, 6);
	if (Read_status != 2){return 0;}
	
	for (unsigned char i=0;i<3;i++){
    1ea6:	6f 5f       	subi	r22, 0xFF	; 255
    1ea8:	63 30       	cpi	r22, 0x03	; 3
    1eaa:	90 f2       	brcs	.-92     	; 0x1e50 <Read_Mag+0x4e>
		m_xyz_window[i][window_counter] = (((signed int)Data[2*i+1])<<8) + Data[2*i];
	}
	window_counter++;
    1eac:	80 91 16 44 	lds	r24, 0x4416	; 0x804416 <window_counter.4903>
    1eb0:	8f 5f       	subi	r24, 0xFF	; 255
    1eb2:	80 93 16 44 	sts	0x4416, r24	; 0x804416 <window_counter.4903>
	if (window_counter >= MAG_WINDOW_SIZE){
    1eb6:	80 31       	cpi	r24, 0x10	; 16
    1eb8:	08 f4       	brcc	.+2      	; 0x1ebc <Read_Mag+0xba>
    1eba:	bc c1       	rjmp	.+888    	; 0x2234 <Read_Mag+0x432>
		window_counter = 0;
    1ebc:	10 92 16 44 	sts	0x4416, r1	; 0x804416 <window_counter.4903>
		volatile signed long m_xyz_FIP[3] = {0};
    1ec0:	fe 01       	movw	r30, r28
    1ec2:	37 96       	adiw	r30, 0x07	; 7
    1ec4:	8c e0       	ldi	r24, 0x0C	; 12
    1ec6:	df 01       	movw	r26, r30
    1ec8:	1d 92       	st	X+, r1
    1eca:	8a 95       	dec	r24
    1ecc:	e9 f7       	brne	.-6      	; 0x1ec8 <Read_Mag+0xc6>
		for (unsigned char i=0;i<3;i++){
    1ece:	30 e0       	ldi	r19, 0x00	; 0
    1ed0:	19 c1       	rjmp	.+562    	; 0x2104 <Read_Mag+0x302>
			for (unsigned char j=0;j<MAG_WINDOW_SIZE;j++){
				m_xyz_FIP[i] += m_xyz_window[i][j];
    1ed2:	83 2f       	mov	r24, r19
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	dc 01       	movw	r26, r24
    1ed8:	aa 0f       	add	r26, r26
    1eda:	bb 1f       	adc	r27, r27
    1edc:	aa 0f       	add	r26, r26
    1ede:	bb 1f       	adc	r27, r27
    1ee0:	e1 e0       	ldi	r30, 0x01	; 1
    1ee2:	f0 e0       	ldi	r31, 0x00	; 0
    1ee4:	ec 0f       	add	r30, r28
    1ee6:	fd 1f       	adc	r31, r29
    1ee8:	ae 0f       	add	r26, r30
    1eea:	bf 1f       	adc	r27, r31
    1eec:	16 96       	adiw	r26, 0x06	; 6
    1eee:	8d 90       	ld	r8, X+
    1ef0:	9d 90       	ld	r9, X+
    1ef2:	ad 90       	ld	r10, X+
    1ef4:	bc 90       	ld	r11, X
    1ef6:	19 97       	sbiw	r26, 0x09	; 9
    1ef8:	fc 01       	movw	r30, r24
    1efa:	e2 95       	swap	r30
    1efc:	f2 95       	swap	r31
    1efe:	f0 7f       	andi	r31, 0xF0	; 240
    1f00:	fe 27       	eor	r31, r30
    1f02:	e0 7f       	andi	r30, 0xF0	; 240
    1f04:	fe 27       	eor	r31, r30
    1f06:	e2 0f       	add	r30, r18
    1f08:	f1 1d       	adc	r31, r1
    1f0a:	ee 0f       	add	r30, r30
    1f0c:	ff 1f       	adc	r31, r31
    1f0e:	ea 54       	subi	r30, 0x4A	; 74
    1f10:	fc 4b       	sbci	r31, 0xBC	; 188
    1f12:	40 81       	ld	r20, Z
    1f14:	51 81       	ldd	r21, Z+1	; 0x01
    1f16:	05 2e       	mov	r0, r21
    1f18:	00 0c       	add	r0, r0
    1f1a:	66 0b       	sbc	r22, r22
    1f1c:	77 0b       	sbc	r23, r23
    1f1e:	48 0d       	add	r20, r8
    1f20:	59 1d       	adc	r21, r9
    1f22:	6a 1d       	adc	r22, r10
    1f24:	7b 1d       	adc	r23, r11
    1f26:	16 96       	adiw	r26, 0x06	; 6
    1f28:	4d 93       	st	X+, r20
    1f2a:	5d 93       	st	X+, r21
    1f2c:	6d 93       	st	X+, r22
    1f2e:	7c 93       	st	X, r23
    1f30:	19 97       	sbiw	r26, 0x09	; 9
	window_counter++;
	if (window_counter >= MAG_WINDOW_SIZE){
		window_counter = 0;
		volatile signed long m_xyz_FIP[3] = {0};
		for (unsigned char i=0;i<3;i++){
			for (unsigned char j=0;j<MAG_WINDOW_SIZE;j++){
    1f32:	2f 5f       	subi	r18, 0xFF	; 255
    1f34:	01 c0       	rjmp	.+2      	; 0x1f38 <Read_Mag+0x136>
    1f36:	20 e0       	ldi	r18, 0x00	; 0
    1f38:	20 31       	cpi	r18, 0x10	; 16
    1f3a:	58 f2       	brcs	.-106    	; 0x1ed2 <Read_Mag+0xd0>
				m_xyz_FIP[i] += m_xyz_window[i][j];
			}
			m_xyz_FIP[i] >>= 4;
    1f3c:	83 2f       	mov	r24, r19
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	fc 01       	movw	r30, r24
    1f42:	ee 0f       	add	r30, r30
    1f44:	ff 1f       	adc	r31, r31
    1f46:	ee 0f       	add	r30, r30
    1f48:	ff 1f       	adc	r31, r31
    1f4a:	41 e0       	ldi	r20, 0x01	; 1
    1f4c:	50 e0       	ldi	r21, 0x00	; 0
    1f4e:	4c 0f       	add	r20, r28
    1f50:	5d 1f       	adc	r21, r29
    1f52:	e4 0f       	add	r30, r20
    1f54:	f5 1f       	adc	r31, r21
    1f56:	46 81       	ldd	r20, Z+6	; 0x06
    1f58:	57 81       	ldd	r21, Z+7	; 0x07
    1f5a:	60 85       	ldd	r22, Z+8	; 0x08
    1f5c:	71 85       	ldd	r23, Z+9	; 0x09
    1f5e:	68 94       	set
    1f60:	13 f8       	bld	r1, 3
    1f62:	75 95       	asr	r23
    1f64:	67 95       	ror	r22
    1f66:	57 95       	ror	r21
    1f68:	47 95       	ror	r20
    1f6a:	16 94       	lsr	r1
    1f6c:	d1 f7       	brne	.-12     	; 0x1f62 <Read_Mag+0x160>
    1f6e:	46 83       	std	Z+6, r20	; 0x06
    1f70:	57 83       	std	Z+7, r21	; 0x07
    1f72:	60 87       	std	Z+8, r22	; 0x08
    1f74:	71 87       	std	Z+9, r23	; 0x09
			if (m_xyz_FIP[i] > m_max[i]){
    1f76:	46 80       	ldd	r4, Z+6	; 0x06
    1f78:	57 80       	ldd	r5, Z+7	; 0x07
    1f7a:	60 84       	ldd	r6, Z+8	; 0x08
    1f7c:	71 84       	ldd	r7, Z+9	; 0x09
    1f7e:	fc 01       	movw	r30, r24
    1f80:	ee 0f       	add	r30, r30
    1f82:	ff 1f       	adc	r31, r31
    1f84:	e0 55       	subi	r30, 0x50	; 80
    1f86:	fc 4b       	sbci	r31, 0xBC	; 188
    1f88:	40 81       	ld	r20, Z
    1f8a:	51 81       	ldd	r21, Z+1	; 0x01
    1f8c:	4a 01       	movw	r8, r20
    1f8e:	05 2e       	mov	r0, r21
    1f90:	00 0c       	add	r0, r0
    1f92:	aa 08       	sbc	r10, r10
    1f94:	bb 08       	sbc	r11, r11
    1f96:	84 14       	cp	r8, r4
    1f98:	95 04       	cpc	r9, r5
    1f9a:	a6 04       	cpc	r10, r6
    1f9c:	b7 04       	cpc	r11, r7
    1f9e:	0c f0       	brlt	.+2      	; 0x1fa2 <Read_Mag+0x1a0>
    1fa0:	4e c0       	rjmp	.+156    	; 0x203e <Read_Mag+0x23c>
				m_max[i] = m_xyz_FIP[i];
    1fa2:	fc 01       	movw	r30, r24
    1fa4:	ee 0f       	add	r30, r30
    1fa6:	ff 1f       	adc	r31, r31
    1fa8:	ee 0f       	add	r30, r30
    1faa:	ff 1f       	adc	r31, r31
    1fac:	61 e0       	ldi	r22, 0x01	; 1
    1fae:	70 e0       	ldi	r23, 0x00	; 0
    1fb0:	6c 0f       	add	r22, r28
    1fb2:	7d 1f       	adc	r23, r29
    1fb4:	e6 0f       	add	r30, r22
    1fb6:	f7 1f       	adc	r31, r23
    1fb8:	46 81       	ldd	r20, Z+6	; 0x06
    1fba:	57 81       	ldd	r21, Z+7	; 0x07
    1fbc:	60 85       	ldd	r22, Z+8	; 0x08
    1fbe:	71 85       	ldd	r23, Z+9	; 0x09
    1fc0:	fc 01       	movw	r30, r24
    1fc2:	ee 0f       	add	r30, r30
    1fc4:	ff 1f       	adc	r31, r31
    1fc6:	e0 55       	subi	r30, 0x50	; 80
    1fc8:	fc 4b       	sbci	r31, 0xBC	; 188
    1fca:	40 83       	st	Z, r20
    1fcc:	51 83       	std	Z+1, r21	; 0x01
				if (abs(m_max[i])<abs(m_min[i])){
    1fce:	da 01       	movw	r26, r20
    1fd0:	55 23       	and	r21, r21
    1fd2:	24 f4       	brge	.+8      	; 0x1fdc <Read_Mag+0x1da>
    1fd4:	aa 27       	eor	r26, r26
    1fd6:	bb 27       	eor	r27, r27
    1fd8:	a4 1b       	sub	r26, r20
    1fda:	b5 0b       	sbc	r27, r21
    1fdc:	fc 01       	movw	r30, r24
    1fde:	ee 0f       	add	r30, r30
    1fe0:	ff 1f       	adc	r31, r31
    1fe2:	e6 55       	subi	r30, 0x56	; 86
    1fe4:	fc 4b       	sbci	r31, 0xBC	; 188
    1fe6:	01 90       	ld	r0, Z+
    1fe8:	f0 81       	ld	r31, Z
    1fea:	e0 2d       	mov	r30, r0
    1fec:	5f 01       	movw	r10, r30
    1fee:	ff 23       	and	r31, r31
    1ff0:	24 f4       	brge	.+8      	; 0x1ffa <Read_Mag+0x1f8>
    1ff2:	aa 24       	eor	r10, r10
    1ff4:	bb 24       	eor	r11, r11
    1ff6:	ae 1a       	sub	r10, r30
    1ff8:	bf 0a       	sbc	r11, r31
    1ffa:	aa 15       	cp	r26, r10
    1ffc:	bb 05       	cpc	r27, r11
    1ffe:	54 f4       	brge	.+20     	; 0x2014 <Read_Mag+0x212>
					hard_iron[i] = m_min[i]-m_max[i];
    2000:	e4 1b       	sub	r30, r20
    2002:	f5 0b       	sbc	r31, r21
    2004:	dc 01       	movw	r26, r24
    2006:	aa 0f       	add	r26, r26
    2008:	bb 1f       	adc	r27, r27
    200a:	ac 55       	subi	r26, 0x5C	; 92
    200c:	bc 4b       	sbci	r27, 0xBC	; 188
    200e:	ed 93       	st	X+, r30
    2010:	fc 93       	st	X, r31
    2012:	09 c0       	rjmp	.+18     	; 0x2026 <Read_Mag+0x224>
				}
				else{
					hard_iron[i] = m_max[i]-m_min[i];
    2014:	4e 1b       	sub	r20, r30
    2016:	5f 0b       	sbc	r21, r31
    2018:	fc 01       	movw	r30, r24
    201a:	ee 0f       	add	r30, r30
    201c:	ff 1f       	adc	r31, r31
    201e:	ec 55       	subi	r30, 0x5C	; 92
    2020:	fc 4b       	sbci	r31, 0xBC	; 188
    2022:	40 83       	st	Z, r20
    2024:	51 83       	std	Z+1, r21	; 0x01
				}
				hard_iron[i] >>= 1;
    2026:	88 0f       	add	r24, r24
    2028:	99 1f       	adc	r25, r25
    202a:	fc 01       	movw	r30, r24
    202c:	ec 55       	subi	r30, 0x5C	; 92
    202e:	fc 4b       	sbci	r31, 0xBC	; 188
    2030:	80 81       	ld	r24, Z
    2032:	91 81       	ldd	r25, Z+1	; 0x01
    2034:	95 95       	asr	r25
    2036:	87 95       	ror	r24
    2038:	80 83       	st	Z, r24
    203a:	91 83       	std	Z+1, r25	; 0x01
    203c:	62 c0       	rjmp	.+196    	; 0x2102 <Read_Mag+0x300>
			}
			else if (m_xyz_FIP[i] < m_min[i]){
    203e:	fc 01       	movw	r30, r24
    2040:	ee 0f       	add	r30, r30
    2042:	ff 1f       	adc	r31, r31
    2044:	ee 0f       	add	r30, r30
    2046:	ff 1f       	adc	r31, r31
    2048:	a1 e0       	ldi	r26, 0x01	; 1
    204a:	b0 e0       	ldi	r27, 0x00	; 0
    204c:	ac 0f       	add	r26, r28
    204e:	bd 1f       	adc	r27, r29
    2050:	ea 0f       	add	r30, r26
    2052:	fb 1f       	adc	r31, r27
    2054:	46 80       	ldd	r4, Z+6	; 0x06
    2056:	57 80       	ldd	r5, Z+7	; 0x07
    2058:	60 84       	ldd	r6, Z+8	; 0x08
    205a:	71 84       	ldd	r7, Z+9	; 0x09
    205c:	fc 01       	movw	r30, r24
    205e:	ee 0f       	add	r30, r30
    2060:	ff 1f       	adc	r31, r31
    2062:	e6 55       	subi	r30, 0x56	; 86
    2064:	fc 4b       	sbci	r31, 0xBC	; 188
    2066:	80 80       	ld	r8, Z
    2068:	91 80       	ldd	r9, Z+1	; 0x01
    206a:	09 2c       	mov	r0, r9
    206c:	00 0c       	add	r0, r0
    206e:	aa 08       	sbc	r10, r10
    2070:	bb 08       	sbc	r11, r11
    2072:	48 14       	cp	r4, r8
    2074:	59 04       	cpc	r5, r9
    2076:	6a 04       	cpc	r6, r10
    2078:	7b 04       	cpc	r7, r11
    207a:	0c f0       	brlt	.+2      	; 0x207e <Read_Mag+0x27c>
    207c:	42 c0       	rjmp	.+132    	; 0x2102 <Read_Mag+0x300>
				m_min[i] = m_xyz_FIP[i];
    207e:	fc 01       	movw	r30, r24
    2080:	ee 0f       	add	r30, r30
    2082:	ff 1f       	adc	r31, r31
    2084:	ee 0f       	add	r30, r30
    2086:	ff 1f       	adc	r31, r31
    2088:	ea 0f       	add	r30, r26
    208a:	fb 1f       	adc	r31, r27
    208c:	86 80       	ldd	r8, Z+6	; 0x06
    208e:	97 80       	ldd	r9, Z+7	; 0x07
    2090:	a0 84       	ldd	r10, Z+8	; 0x08
    2092:	b1 84       	ldd	r11, Z+9	; 0x09
    2094:	f4 01       	movw	r30, r8
    2096:	dc 01       	movw	r26, r24
    2098:	aa 0f       	add	r26, r26
    209a:	bb 1f       	adc	r27, r27
    209c:	a6 55       	subi	r26, 0x56	; 86
    209e:	bc 4b       	sbci	r27, 0xBC	; 188
    20a0:	8d 92       	st	X+, r8
    20a2:	9c 92       	st	X, r9
				if (abs(m_max[i])<abs(m_min[i])){
    20a4:	ba 01       	movw	r22, r20
    20a6:	55 23       	and	r21, r21
    20a8:	24 f4       	brge	.+8      	; 0x20b2 <Read_Mag+0x2b0>
    20aa:	66 27       	eor	r22, r22
    20ac:	77 27       	eor	r23, r23
    20ae:	64 1b       	sub	r22, r20
    20b0:	75 0b       	sbc	r23, r21
    20b2:	d4 01       	movw	r26, r8
    20b4:	ff 23       	and	r31, r31
    20b6:	24 f4       	brge	.+8      	; 0x20c0 <Read_Mag+0x2be>
    20b8:	aa 27       	eor	r26, r26
    20ba:	bb 27       	eor	r27, r27
    20bc:	a8 19       	sub	r26, r8
    20be:	b9 09       	sbc	r27, r9
    20c0:	6a 17       	cp	r22, r26
    20c2:	7b 07       	cpc	r23, r27
    20c4:	54 f4       	brge	.+20     	; 0x20da <Read_Mag+0x2d8>
					hard_iron[i] = m_min[i]-m_max[i];
    20c6:	84 1a       	sub	r8, r20
    20c8:	95 0a       	sbc	r9, r21
    20ca:	fc 01       	movw	r30, r24
    20cc:	ee 0f       	add	r30, r30
    20ce:	ff 1f       	adc	r31, r31
    20d0:	ec 55       	subi	r30, 0x5C	; 92
    20d2:	fc 4b       	sbci	r31, 0xBC	; 188
    20d4:	80 82       	st	Z, r8
    20d6:	91 82       	std	Z+1, r9	; 0x01
    20d8:	09 c0       	rjmp	.+18     	; 0x20ec <Read_Mag+0x2ea>
				}
				else{
					hard_iron[i] = m_max[i]-m_min[i];
    20da:	48 19       	sub	r20, r8
    20dc:	59 09       	sbc	r21, r9
    20de:	fc 01       	movw	r30, r24
    20e0:	ee 0f       	add	r30, r30
    20e2:	ff 1f       	adc	r31, r31
    20e4:	ec 55       	subi	r30, 0x5C	; 92
    20e6:	fc 4b       	sbci	r31, 0xBC	; 188
    20e8:	40 83       	st	Z, r20
    20ea:	51 83       	std	Z+1, r21	; 0x01
				}
				hard_iron[i] >>= 1;
    20ec:	88 0f       	add	r24, r24
    20ee:	99 1f       	adc	r25, r25
    20f0:	fc 01       	movw	r30, r24
    20f2:	ec 55       	subi	r30, 0x5C	; 92
    20f4:	fc 4b       	sbci	r31, 0xBC	; 188
    20f6:	80 81       	ld	r24, Z
    20f8:	91 81       	ldd	r25, Z+1	; 0x01
    20fa:	95 95       	asr	r25
    20fc:	87 95       	ror	r24
    20fe:	80 83       	st	Z, r24
    2100:	91 83       	std	Z+1, r25	; 0x01
	}
	window_counter++;
	if (window_counter >= MAG_WINDOW_SIZE){
		window_counter = 0;
		volatile signed long m_xyz_FIP[3] = {0};
		for (unsigned char i=0;i<3;i++){
    2102:	3f 5f       	subi	r19, 0xFF	; 255
    2104:	33 30       	cpi	r19, 0x03	; 3
    2106:	08 f4       	brcc	.+2      	; 0x210a <Read_Mag+0x308>
    2108:	16 cf       	rjmp	.-468    	; 0x1f36 <Read_Mag+0x134>
					hard_iron[i] = m_max[i]-m_min[i];
				}
				hard_iron[i] >>= 1;
			}
		}
		if (g_seconds > 2){
    210a:	80 91 69 43 	lds	r24, 0x4369	; 0x804369 <g_seconds>
    210e:	90 91 6a 43 	lds	r25, 0x436A	; 0x80436a <g_seconds+0x1>
    2112:	a0 91 6b 43 	lds	r26, 0x436B	; 0x80436b <g_seconds+0x2>
    2116:	b0 91 6c 43 	lds	r27, 0x436C	; 0x80436c <g_seconds+0x3>
    211a:	03 97       	sbiw	r24, 0x03	; 3
    211c:	a1 05       	cpc	r26, r1
    211e:	b1 05       	cpc	r27, r1
    2120:	08 f4       	brcc	.+2      	; 0x2124 <Read_Mag+0x322>
    2122:	8a c0       	rjmp	.+276    	; 0x2238 <Read_Mag+0x436>
			Drone->m_vec[0] = ((float)(m_xyz_FIP[1] - hard_iron[1]))/(hard_iron[1]*2.0);
    2124:	8b 85       	ldd	r24, Y+11	; 0x0b
    2126:	9c 85       	ldd	r25, Y+12	; 0x0c
    2128:	ad 85       	ldd	r26, Y+13	; 0x0d
    212a:	be 85       	ldd	r27, Y+14	; 0x0e
    212c:	04 ea       	ldi	r16, 0xA4	; 164
    212e:	13 e4       	ldi	r17, 0x43	; 67
    2130:	f8 01       	movw	r30, r16
    2132:	82 80       	ldd	r8, Z+2	; 0x02
    2134:	93 80       	ldd	r9, Z+3	; 0x03
    2136:	09 2c       	mov	r0, r9
    2138:	00 0c       	add	r0, r0
    213a:	aa 08       	sbc	r10, r10
    213c:	bb 08       	sbc	r11, r11
    213e:	bc 01       	movw	r22, r24
    2140:	cd 01       	movw	r24, r26
    2142:	68 19       	sub	r22, r8
    2144:	79 09       	sbc	r23, r9
    2146:	8a 09       	sbc	r24, r10
    2148:	9b 09       	sbc	r25, r11
    214a:	0e 94 20 1e 	call	0x3c40	; 0x3c40 <__floatsisf>
    214e:	2b 01       	movw	r4, r22
    2150:	3c 01       	movw	r6, r24
    2152:	c5 01       	movw	r24, r10
    2154:	b4 01       	movw	r22, r8
    2156:	0e 94 20 1e 	call	0x3c40	; 0x3c40 <__floatsisf>
    215a:	9b 01       	movw	r18, r22
    215c:	ac 01       	movw	r20, r24
    215e:	0e 94 8e 1c 	call	0x391c	; 0x391c <__addsf3>
    2162:	9b 01       	movw	r18, r22
    2164:	ac 01       	movw	r20, r24
    2166:	c3 01       	movw	r24, r6
    2168:	b2 01       	movw	r22, r4
    216a:	0e 94 76 1d 	call	0x3aec	; 0x3aec <__divsf3>
    216e:	d7 01       	movw	r26, r14
    2170:	58 96       	adiw	r26, 0x18	; 24
    2172:	6d 93       	st	X+, r22
    2174:	7d 93       	st	X+, r23
    2176:	8d 93       	st	X+, r24
    2178:	9c 93       	st	X, r25
    217a:	5b 97       	sbiw	r26, 0x1b	; 27
			Drone->m_vec[1] = -((float)(m_xyz_FIP[0]- hard_iron[0]))/(hard_iron[0]*2.0);
    217c:	8f 81       	ldd	r24, Y+7	; 0x07
    217e:	98 85       	ldd	r25, Y+8	; 0x08
    2180:	a9 85       	ldd	r26, Y+9	; 0x09
    2182:	ba 85       	ldd	r27, Y+10	; 0x0a
    2184:	f8 01       	movw	r30, r16
    2186:	80 80       	ld	r8, Z
    2188:	91 80       	ldd	r9, Z+1	; 0x01
    218a:	09 2c       	mov	r0, r9
    218c:	00 0c       	add	r0, r0
    218e:	aa 08       	sbc	r10, r10
    2190:	bb 08       	sbc	r11, r11
    2192:	bc 01       	movw	r22, r24
    2194:	cd 01       	movw	r24, r26
    2196:	68 19       	sub	r22, r8
    2198:	79 09       	sbc	r23, r9
    219a:	8a 09       	sbc	r24, r10
    219c:	9b 09       	sbc	r25, r11
    219e:	0e 94 20 1e 	call	0x3c40	; 0x3c40 <__floatsisf>
    21a2:	2b 01       	movw	r4, r22
    21a4:	3c 01       	movw	r6, r24
    21a6:	77 fa       	bst	r7, 7
    21a8:	70 94       	com	r7
    21aa:	77 f8       	bld	r7, 7
    21ac:	70 94       	com	r7
    21ae:	c5 01       	movw	r24, r10
    21b0:	b4 01       	movw	r22, r8
    21b2:	0e 94 20 1e 	call	0x3c40	; 0x3c40 <__floatsisf>
    21b6:	9b 01       	movw	r18, r22
    21b8:	ac 01       	movw	r20, r24
    21ba:	0e 94 8e 1c 	call	0x391c	; 0x391c <__addsf3>
    21be:	9b 01       	movw	r18, r22
    21c0:	ac 01       	movw	r20, r24
    21c2:	c3 01       	movw	r24, r6
    21c4:	b2 01       	movw	r22, r4
    21c6:	0e 94 76 1d 	call	0x3aec	; 0x3aec <__divsf3>
    21ca:	d7 01       	movw	r26, r14
    21cc:	5c 96       	adiw	r26, 0x1c	; 28
    21ce:	6d 93       	st	X+, r22
    21d0:	7d 93       	st	X+, r23
    21d2:	8d 93       	st	X+, r24
    21d4:	9c 93       	st	X, r25
    21d6:	5f 97       	sbiw	r26, 0x1f	; 31
			Drone->m_vec[2] = ((float)(m_xyz_FIP[2] - hard_iron[2]))/(hard_iron[2]*2.0);
    21d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    21da:	98 89       	ldd	r25, Y+16	; 0x10
    21dc:	a9 89       	ldd	r26, Y+17	; 0x11
    21de:	ba 89       	ldd	r27, Y+18	; 0x12
    21e0:	f8 01       	movw	r30, r16
    21e2:	84 80       	ldd	r8, Z+4	; 0x04
    21e4:	95 80       	ldd	r9, Z+5	; 0x05
    21e6:	09 2c       	mov	r0, r9
    21e8:	00 0c       	add	r0, r0
    21ea:	aa 08       	sbc	r10, r10
    21ec:	bb 08       	sbc	r11, r11
    21ee:	bc 01       	movw	r22, r24
    21f0:	cd 01       	movw	r24, r26
    21f2:	68 19       	sub	r22, r8
    21f4:	79 09       	sbc	r23, r9
    21f6:	8a 09       	sbc	r24, r10
    21f8:	9b 09       	sbc	r25, r11
    21fa:	0e 94 20 1e 	call	0x3c40	; 0x3c40 <__floatsisf>
    21fe:	2b 01       	movw	r4, r22
    2200:	3c 01       	movw	r6, r24
    2202:	c5 01       	movw	r24, r10
    2204:	b4 01       	movw	r22, r8
    2206:	0e 94 20 1e 	call	0x3c40	; 0x3c40 <__floatsisf>
    220a:	9b 01       	movw	r18, r22
    220c:	ac 01       	movw	r20, r24
    220e:	0e 94 8e 1c 	call	0x391c	; 0x391c <__addsf3>
    2212:	9b 01       	movw	r18, r22
    2214:	ac 01       	movw	r20, r24
    2216:	c3 01       	movw	r24, r6
    2218:	b2 01       	movw	r22, r4
    221a:	0e 94 76 1d 	call	0x3aec	; 0x3aec <__divsf3>
    221e:	d7 01       	movw	r26, r14
    2220:	90 96       	adiw	r26, 0x20	; 32
    2222:	6d 93       	st	X+, r22
    2224:	7d 93       	st	X+, r23
    2226:	8d 93       	st	X+, r24
    2228:	9c 93       	st	X, r25
    222a:	93 97       	sbiw	r26, 0x23	; 35
		}
	}
	
	return 1;
    222c:	81 e0       	ldi	r24, 0x01	; 1
    222e:	05 c0       	rjmp	.+10     	; 0x223a <Read_Mag+0x438>
	static unsigned char window_counter = 0;
	unsigned char Read_status = 0;
	
	unsigned char Data[6] = {0};
	Read_status = Read_SPI(PORT_MAG, CS_MAG, (MAG_DATA_START|0x80), Data, 6);
	if (Read_status != 2){return 0;}
    2230:	80 e0       	ldi	r24, 0x00	; 0
    2232:	03 c0       	rjmp	.+6      	; 0x223a <Read_Mag+0x438>
			Drone->m_vec[1] = -((float)(m_xyz_FIP[0]- hard_iron[0]))/(hard_iron[0]*2.0);
			Drone->m_vec[2] = ((float)(m_xyz_FIP[2] - hard_iron[2]))/(hard_iron[2]*2.0);
		}
	}
	
	return 1;
    2234:	81 e0       	ldi	r24, 0x01	; 1
    2236:	01 c0       	rjmp	.+2      	; 0x223a <Read_Mag+0x438>
    2238:	81 e0       	ldi	r24, 0x01	; 1
}
    223a:	62 96       	adiw	r28, 0x12	; 18
    223c:	cd bf       	out	0x3d, r28	; 61
    223e:	de bf       	out	0x3e, r29	; 62
    2240:	df 91       	pop	r29
    2242:	cf 91       	pop	r28
    2244:	1f 91       	pop	r17
    2246:	0f 91       	pop	r16
    2248:	ff 90       	pop	r15
    224a:	ef 90       	pop	r14
    224c:	bf 90       	pop	r11
    224e:	af 90       	pop	r10
    2250:	9f 90       	pop	r9
    2252:	8f 90       	pop	r8
    2254:	7f 90       	pop	r7
    2256:	6f 90       	pop	r6
    2258:	5f 90       	pop	r5
    225a:	4f 90       	pop	r4
    225c:	08 95       	ret

0000225e <LLA_to_NED>:
		}
	}
	return 0;
}

unsigned char LLA_to_NED(signed long Latitude, signed long Longitude, float Height, float Position_NED[3]){
    225e:	4f 92       	push	r4
    2260:	5f 92       	push	r5
    2262:	6f 92       	push	r6
    2264:	7f 92       	push	r7
    2266:	8f 92       	push	r8
    2268:	9f 92       	push	r9
    226a:	af 92       	push	r10
    226c:	bf 92       	push	r11
    226e:	cf 92       	push	r12
    2270:	df 92       	push	r13
    2272:	ef 92       	push	r14
    2274:	ff 92       	push	r15
    2276:	0f 93       	push	r16
    2278:	1f 93       	push	r17
    227a:	cf 93       	push	r28
    227c:	df 93       	push	r29
    227e:	cd b7       	in	r28, 0x3d	; 61
    2280:	de b7       	in	r29, 0x3e	; 62
    2282:	68 97       	sbiw	r28, 0x18	; 24
    2284:	cd bf       	out	0x3d, r28	; 61
    2286:	de bf       	out	0x3e, r29	; 62
    2288:	29 01       	movw	r4, r18
    228a:	3a 01       	movw	r6, r20
    228c:	ed 86       	std	Y+13, r14	; 0x0d
    228e:	fe 86       	std	Y+14, r15	; 0x0e
    2290:	0f 87       	std	Y+15, r16	; 0x0f
    2292:	18 8b       	std	Y+16, r17	; 0x10
    2294:	86 01       	movw	r16, r12
	const float c2 = 1.0-c1;
	static float Reference_Position_ecef[3] = {0};
	float Position_ecef[3];
	static unsigned char reference_flag = 0;
	
	float Latitude_rad = (((float)Latitude)/6000000)*D2R;
    2296:	0e 94 20 1e 	call	0x3c40	; 0x3c40 <__floatsisf>
    229a:	20 e0       	ldi	r18, 0x00	; 0
    229c:	3b e1       	ldi	r19, 0x1B	; 27
    229e:	47 eb       	ldi	r20, 0xB7	; 183
    22a0:	5a e4       	ldi	r21, 0x4A	; 74
    22a2:	0e 94 76 1d 	call	0x3aec	; 0x3aec <__divsf3>
    22a6:	2b ed       	ldi	r18, 0xDB	; 219
    22a8:	3f e0       	ldi	r19, 0x0F	; 15
    22aa:	49 e4       	ldi	r20, 0x49	; 73
    22ac:	50 e4       	ldi	r21, 0x40	; 64
    22ae:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__mulsf3>
    22b2:	20 e0       	ldi	r18, 0x00	; 0
    22b4:	30 e0       	ldi	r19, 0x00	; 0
    22b6:	44 e3       	ldi	r20, 0x34	; 52
    22b8:	53 e4       	ldi	r21, 0x43	; 67
    22ba:	0e 94 76 1d 	call	0x3aec	; 0x3aec <__divsf3>
    22be:	4b 01       	movw	r8, r22
    22c0:	5c 01       	movw	r10, r24
	float Longitude_rad = (((float)Longitude)/6000000)*D2R;
    22c2:	c3 01       	movw	r24, r6
    22c4:	b2 01       	movw	r22, r4
    22c6:	0e 94 20 1e 	call	0x3c40	; 0x3c40 <__floatsisf>
    22ca:	20 e0       	ldi	r18, 0x00	; 0
    22cc:	3b e1       	ldi	r19, 0x1B	; 27
    22ce:	47 eb       	ldi	r20, 0xB7	; 183
    22d0:	5a e4       	ldi	r21, 0x4A	; 74
    22d2:	0e 94 76 1d 	call	0x3aec	; 0x3aec <__divsf3>
    22d6:	2b ed       	ldi	r18, 0xDB	; 219
    22d8:	3f e0       	ldi	r19, 0x0F	; 15
    22da:	49 e4       	ldi	r20, 0x49	; 73
    22dc:	50 e4       	ldi	r21, 0x40	; 64
    22de:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__mulsf3>
    22e2:	20 e0       	ldi	r18, 0x00	; 0
    22e4:	30 e0       	ldi	r19, 0x00	; 0
    22e6:	44 e3       	ldi	r20, 0x34	; 52
    22e8:	53 e4       	ldi	r21, 0x43	; 67
    22ea:	0e 94 76 1d 	call	0x3aec	; 0x3aec <__divsf3>
    22ee:	6b 01       	movw	r12, r22
    22f0:	7c 01       	movw	r14, r24
	float N_phi = a/sqrt(1.0 - (pow(e,2)*pow(sinf(Latitude_rad),2))); // Prime vertical radius (m)
    22f2:	c5 01       	movw	r24, r10
    22f4:	b4 01       	movw	r22, r8
    22f6:	0e 94 00 20 	call	0x4000	; 0x4000 <sin>
    22fa:	6d 83       	std	Y+5, r22	; 0x05
    22fc:	7e 83       	std	Y+6, r23	; 0x06
    22fe:	8f 83       	std	Y+7, r24	; 0x07
    2300:	98 87       	std	Y+8, r25	; 0x08
    2302:	20 e0       	ldi	r18, 0x00	; 0
    2304:	30 e0       	ldi	r19, 0x00	; 0
    2306:	40 e0       	ldi	r20, 0x00	; 0
    2308:	50 e4       	ldi	r21, 0x40	; 64
    230a:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <pow>
    230e:	28 e1       	ldi	r18, 0x18	; 24
    2310:	36 ef       	ldi	r19, 0xF6	; 246
    2312:	4b e3       	ldi	r20, 0x3B	; 59
    2314:	58 e3       	ldi	r21, 0x38	; 56
    2316:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__mulsf3>
    231a:	2b 01       	movw	r4, r22
    231c:	3c 01       	movw	r6, r24
    231e:	a3 01       	movw	r20, r6
    2320:	92 01       	movw	r18, r4
    2322:	60 e0       	ldi	r22, 0x00	; 0
    2324:	70 e0       	ldi	r23, 0x00	; 0
    2326:	80 e8       	ldi	r24, 0x80	; 128
    2328:	9f e3       	ldi	r25, 0x3F	; 63
    232a:	0e 94 8d 1c 	call	0x391a	; 0x391a <__subsf3>
    232e:	0e 94 0e 20 	call	0x401c	; 0x401c <sqrt>
    2332:	9b 01       	movw	r18, r22
    2334:	ac 01       	movw	r20, r24
    2336:	62 e3       	ldi	r22, 0x32	; 50
    2338:	75 ea       	ldi	r23, 0xA5	; 165
    233a:	82 ec       	ldi	r24, 0xC2	; 194
    233c:	9a e4       	ldi	r25, 0x4A	; 74
    233e:	0e 94 76 1d 	call	0x3aec	; 0x3aec <__divsf3>
    2342:	69 83       	std	Y+1, r22	; 0x01
    2344:	7a 83       	std	Y+2, r23	; 0x02
    2346:	8b 83       	std	Y+3, r24	; 0x03
    2348:	9c 83       	std	Y+4, r25	; 0x04
	
	Position_ecef[0] = (N_phi + Height)*cosf(Latitude_rad)*cosf(Longitude_rad);
    234a:	2d 85       	ldd	r18, Y+13	; 0x0d
    234c:	3e 85       	ldd	r19, Y+14	; 0x0e
    234e:	4f 85       	ldd	r20, Y+15	; 0x0f
    2350:	58 89       	ldd	r21, Y+16	; 0x10
    2352:	0e 94 8e 1c 	call	0x391c	; 0x391c <__addsf3>
    2356:	2b 01       	movw	r4, r22
    2358:	3c 01       	movw	r6, r24
    235a:	c5 01       	movw	r24, r10
    235c:	b4 01       	movw	r22, r8
    235e:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <cos>
    2362:	6d 8b       	std	Y+21, r22	; 0x15
    2364:	7e 8b       	std	Y+22, r23	; 0x16
    2366:	8f 8b       	std	Y+23, r24	; 0x17
    2368:	98 8f       	std	Y+24, r25	; 0x18
    236a:	9b 01       	movw	r18, r22
    236c:	ac 01       	movw	r20, r24
    236e:	c3 01       	movw	r24, r6
    2370:	b2 01       	movw	r22, r4
    2372:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__mulsf3>
    2376:	4b 01       	movw	r8, r22
    2378:	5c 01       	movw	r10, r24
    237a:	c7 01       	movw	r24, r14
    237c:	b6 01       	movw	r22, r12
    237e:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <cos>
    2382:	69 8b       	std	Y+17, r22	; 0x11
    2384:	7a 8b       	std	Y+18, r23	; 0x12
    2386:	8b 8b       	std	Y+19, r24	; 0x13
    2388:	9c 8b       	std	Y+20, r25	; 0x14
    238a:	9b 01       	movw	r18, r22
    238c:	ac 01       	movw	r20, r24
    238e:	c5 01       	movw	r24, r10
    2390:	b4 01       	movw	r22, r8
    2392:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__mulsf3>
    2396:	69 87       	std	Y+9, r22	; 0x09
    2398:	7a 87       	std	Y+10, r23	; 0x0a
    239a:	8b 87       	std	Y+11, r24	; 0x0b
    239c:	9c 87       	std	Y+12, r25	; 0x0c
	Position_ecef[1] = (N_phi + Height)*cosf(Latitude_rad)*sinf(Longitude_rad);
    239e:	c7 01       	movw	r24, r14
    23a0:	b6 01       	movw	r22, r12
    23a2:	0e 94 00 20 	call	0x4000	; 0x4000 <sin>
    23a6:	2b 01       	movw	r4, r22
    23a8:	3c 01       	movw	r6, r24
    23aa:	9b 01       	movw	r18, r22
    23ac:	ac 01       	movw	r20, r24
    23ae:	c5 01       	movw	r24, r10
    23b0:	b4 01       	movw	r22, r8
    23b2:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__mulsf3>
    23b6:	6b 01       	movw	r12, r22
    23b8:	7c 01       	movw	r14, r24
	Position_ecef[2] = (((1.0-pow(e,2))*N_phi) + Height)*sinf(Latitude_rad);
    23ba:	20 e1       	ldi	r18, 0x10	; 16
    23bc:	3d ef       	ldi	r19, 0xFD	; 253
    23be:	4f e7       	ldi	r20, 0x7F	; 127
    23c0:	5f e3       	ldi	r21, 0x3F	; 63
    23c2:	69 81       	ldd	r22, Y+1	; 0x01
    23c4:	7a 81       	ldd	r23, Y+2	; 0x02
    23c6:	8b 81       	ldd	r24, Y+3	; 0x03
    23c8:	9c 81       	ldd	r25, Y+4	; 0x04
    23ca:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__mulsf3>
    23ce:	9b 01       	movw	r18, r22
    23d0:	ac 01       	movw	r20, r24
    23d2:	6d 85       	ldd	r22, Y+13	; 0x0d
    23d4:	7e 85       	ldd	r23, Y+14	; 0x0e
    23d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    23d8:	98 89       	ldd	r25, Y+16	; 0x10
    23da:	0e 94 8e 1c 	call	0x391c	; 0x391c <__addsf3>
    23de:	9b 01       	movw	r18, r22
    23e0:	ac 01       	movw	r20, r24
    23e2:	6d 81       	ldd	r22, Y+5	; 0x05
    23e4:	7e 81       	ldd	r23, Y+6	; 0x06
    23e6:	8f 81       	ldd	r24, Y+7	; 0x07
    23e8:	98 85       	ldd	r25, Y+8	; 0x08
    23ea:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__mulsf3>
    23ee:	4b 01       	movw	r8, r22
    23f0:	5c 01       	movw	r10, r24
	
	if (!reference_flag){
    23f2:	80 91 80 43 	lds	r24, 0x4380	; 0x804380 <reference_flag.5013>
    23f6:	81 11       	cpse	r24, r1
    23f8:	17 c0       	rjmp	.+46     	; 0x2428 <LLA_to_NED+0x1ca>
		++reference_flag;
    23fa:	91 e0       	ldi	r25, 0x01	; 1
    23fc:	98 0f       	add	r25, r24
    23fe:	90 93 80 43 	sts	0x4380, r25	; 0x804380 <reference_flag.5013>
		Reference_Position_ecef[0] = Position_ecef[0];
    2402:	e4 e7       	ldi	r30, 0x74	; 116
    2404:	f3 e4       	ldi	r31, 0x43	; 67
    2406:	29 85       	ldd	r18, Y+9	; 0x09
    2408:	3a 85       	ldd	r19, Y+10	; 0x0a
    240a:	4b 85       	ldd	r20, Y+11	; 0x0b
    240c:	5c 85       	ldd	r21, Y+12	; 0x0c
    240e:	20 83       	st	Z, r18
    2410:	31 83       	std	Z+1, r19	; 0x01
    2412:	42 83       	std	Z+2, r20	; 0x02
    2414:	53 83       	std	Z+3, r21	; 0x03
		Reference_Position_ecef[1] = Position_ecef[1];
    2416:	c4 82       	std	Z+4, r12	; 0x04
    2418:	d5 82       	std	Z+5, r13	; 0x05
    241a:	e6 82       	std	Z+6, r14	; 0x06
    241c:	f7 82       	std	Z+7, r15	; 0x07
		Reference_Position_ecef[2] = Position_ecef[2];
    241e:	80 86       	std	Z+8, r8	; 0x08
    2420:	91 86       	std	Z+9, r9	; 0x09
    2422:	a2 86       	std	Z+10, r10	; 0x0a
    2424:	b3 86       	std	Z+11, r11	; 0x0b
		return 0;
    2426:	d1 c0       	rjmp	.+418    	; 0x25ca <LLA_to_NED+0x36c>
	}
	
	// Once a reference ECEF position is established, use that to find the local NED position
	float dx_ecef[3];
	dx_ecef[0] = Position_ecef[0] - Reference_Position_ecef[0];
    2428:	e4 e7       	ldi	r30, 0x74	; 116
    242a:	f3 e4       	ldi	r31, 0x43	; 67
    242c:	20 81       	ld	r18, Z
    242e:	31 81       	ldd	r19, Z+1	; 0x01
    2430:	42 81       	ldd	r20, Z+2	; 0x02
    2432:	53 81       	ldd	r21, Z+3	; 0x03
    2434:	69 85       	ldd	r22, Y+9	; 0x09
    2436:	7a 85       	ldd	r23, Y+10	; 0x0a
    2438:	8b 85       	ldd	r24, Y+11	; 0x0b
    243a:	9c 85       	ldd	r25, Y+12	; 0x0c
    243c:	0e 94 8d 1c 	call	0x391a	; 0x391a <__subsf3>
    2440:	69 83       	std	Y+1, r22	; 0x01
    2442:	7a 83       	std	Y+2, r23	; 0x02
    2444:	8b 83       	std	Y+3, r24	; 0x03
    2446:	9c 83       	std	Y+4, r25	; 0x04
	dx_ecef[1] = Position_ecef[1] - Reference_Position_ecef[1];
    2448:	20 91 78 43 	lds	r18, 0x4378	; 0x804378 <Reference_Position_ecef.5011+0x4>
    244c:	30 91 79 43 	lds	r19, 0x4379	; 0x804379 <Reference_Position_ecef.5011+0x5>
    2450:	40 91 7a 43 	lds	r20, 0x437A	; 0x80437a <Reference_Position_ecef.5011+0x6>
    2454:	50 91 7b 43 	lds	r21, 0x437B	; 0x80437b <Reference_Position_ecef.5011+0x7>
    2458:	c7 01       	movw	r24, r14
    245a:	b6 01       	movw	r22, r12
    245c:	0e 94 8d 1c 	call	0x391a	; 0x391a <__subsf3>
    2460:	69 87       	std	Y+9, r22	; 0x09
    2462:	7a 87       	std	Y+10, r23	; 0x0a
    2464:	8b 87       	std	Y+11, r24	; 0x0b
    2466:	9c 87       	std	Y+12, r25	; 0x0c
	dx_ecef[2] = Position_ecef[2] - Reference_Position_ecef[2];
    2468:	20 91 7c 43 	lds	r18, 0x437C	; 0x80437c <Reference_Position_ecef.5011+0x8>
    246c:	30 91 7d 43 	lds	r19, 0x437D	; 0x80437d <Reference_Position_ecef.5011+0x9>
    2470:	40 91 7e 43 	lds	r20, 0x437E	; 0x80437e <Reference_Position_ecef.5011+0xa>
    2474:	50 91 7f 43 	lds	r21, 0x437F	; 0x80437f <Reference_Position_ecef.5011+0xb>
    2478:	c5 01       	movw	r24, r10
    247a:	b4 01       	movw	r22, r8
    247c:	0e 94 8d 1c 	call	0x391a	; 0x391a <__subsf3>
    2480:	4b 01       	movw	r8, r22
    2482:	5c 01       	movw	r10, r24
	
	float P_North= -sinf(Latitude_rad)*cosf(Longitude_rad)*dx_ecef[0] - sinf(Latitude_rad)*sinf(Longitude_rad)*dx_ecef[1] + cosf(Latitude_rad)*dx_ecef[2];
    2484:	2d 81       	ldd	r18, Y+5	; 0x05
    2486:	3e 81       	ldd	r19, Y+6	; 0x06
    2488:	4f 81       	ldd	r20, Y+7	; 0x07
    248a:	58 85       	ldd	r21, Y+8	; 0x08
    248c:	50 58       	subi	r21, 0x80	; 128
    248e:	69 89       	ldd	r22, Y+17	; 0x11
    2490:	7a 89       	ldd	r23, Y+18	; 0x12
    2492:	8b 89       	ldd	r24, Y+19	; 0x13
    2494:	9c 89       	ldd	r25, Y+20	; 0x14
    2496:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__mulsf3>
    249a:	9b 01       	movw	r18, r22
    249c:	ac 01       	movw	r20, r24
    249e:	69 81       	ldd	r22, Y+1	; 0x01
    24a0:	7a 81       	ldd	r23, Y+2	; 0x02
    24a2:	8b 81       	ldd	r24, Y+3	; 0x03
    24a4:	9c 81       	ldd	r25, Y+4	; 0x04
    24a6:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__mulsf3>
    24aa:	6b 01       	movw	r12, r22
    24ac:	7c 01       	movw	r14, r24
    24ae:	a3 01       	movw	r20, r6
    24b0:	92 01       	movw	r18, r4
    24b2:	6d 81       	ldd	r22, Y+5	; 0x05
    24b4:	7e 81       	ldd	r23, Y+6	; 0x06
    24b6:	8f 81       	ldd	r24, Y+7	; 0x07
    24b8:	98 85       	ldd	r25, Y+8	; 0x08
    24ba:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__mulsf3>
    24be:	9b 01       	movw	r18, r22
    24c0:	ac 01       	movw	r20, r24
    24c2:	69 85       	ldd	r22, Y+9	; 0x09
    24c4:	7a 85       	ldd	r23, Y+10	; 0x0a
    24c6:	8b 85       	ldd	r24, Y+11	; 0x0b
    24c8:	9c 85       	ldd	r25, Y+12	; 0x0c
    24ca:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__mulsf3>
    24ce:	9b 01       	movw	r18, r22
    24d0:	ac 01       	movw	r20, r24
    24d2:	c7 01       	movw	r24, r14
    24d4:	b6 01       	movw	r22, r12
    24d6:	0e 94 8d 1c 	call	0x391a	; 0x391a <__subsf3>
    24da:	6b 01       	movw	r12, r22
    24dc:	7c 01       	movw	r14, r24
    24de:	a5 01       	movw	r20, r10
    24e0:	94 01       	movw	r18, r8
    24e2:	6d 89       	ldd	r22, Y+21	; 0x15
    24e4:	7e 89       	ldd	r23, Y+22	; 0x16
    24e6:	8f 89       	ldd	r24, Y+23	; 0x17
    24e8:	98 8d       	ldd	r25, Y+24	; 0x18
    24ea:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__mulsf3>
    24ee:	9b 01       	movw	r18, r22
    24f0:	ac 01       	movw	r20, r24
    24f2:	c7 01       	movw	r24, r14
    24f4:	b6 01       	movw	r22, r12
    24f6:	0e 94 8e 1c 	call	0x391c	; 0x391c <__addsf3>
    24fa:	6b 01       	movw	r12, r22
    24fc:	7c 01       	movw	r14, r24
	float P_East = -sinf(Longitude_rad)*dx_ecef[0] + cosf(Longitude_rad)*dx_ecef[1];
    24fe:	a3 01       	movw	r20, r6
    2500:	92 01       	movw	r18, r4
    2502:	50 58       	subi	r21, 0x80	; 128
    2504:	69 81       	ldd	r22, Y+1	; 0x01
    2506:	7a 81       	ldd	r23, Y+2	; 0x02
    2508:	8b 81       	ldd	r24, Y+3	; 0x03
    250a:	9c 81       	ldd	r25, Y+4	; 0x04
    250c:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__mulsf3>
    2510:	4b 01       	movw	r8, r22
    2512:	5c 01       	movw	r10, r24
    2514:	29 85       	ldd	r18, Y+9	; 0x09
    2516:	3a 85       	ldd	r19, Y+10	; 0x0a
    2518:	4b 85       	ldd	r20, Y+11	; 0x0b
    251a:	5c 85       	ldd	r21, Y+12	; 0x0c
    251c:	69 89       	ldd	r22, Y+17	; 0x11
    251e:	7a 89       	ldd	r23, Y+18	; 0x12
    2520:	8b 89       	ldd	r24, Y+19	; 0x13
    2522:	9c 89       	ldd	r25, Y+20	; 0x14
    2524:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__mulsf3>
    2528:	9b 01       	movw	r18, r22
    252a:	ac 01       	movw	r20, r24
    252c:	c5 01       	movw	r24, r10
    252e:	b4 01       	movw	r22, r8
    2530:	0e 94 8e 1c 	call	0x391c	; 0x391c <__addsf3>
    2534:	4b 01       	movw	r8, r22
    2536:	5c 01       	movw	r10, r24
	Position_NED[0] = Position_NED[0]*c1 + P_North*c2;
    2538:	f8 01       	movw	r30, r16
    253a:	60 81       	ld	r22, Z
    253c:	71 81       	ldd	r23, Z+1	; 0x01
    253e:	82 81       	ldd	r24, Z+2	; 0x02
    2540:	93 81       	ldd	r25, Z+3	; 0x03
    2542:	26 e6       	ldi	r18, 0x66	; 102
    2544:	36 e6       	ldi	r19, 0x66	; 102
    2546:	46 e6       	ldi	r20, 0x66	; 102
    2548:	5f e3       	ldi	r21, 0x3F	; 63
    254a:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__mulsf3>
    254e:	2b 01       	movw	r4, r22
    2550:	3c 01       	movw	r6, r24
    2552:	20 ed       	ldi	r18, 0xD0	; 208
    2554:	3c ec       	ldi	r19, 0xCC	; 204
    2556:	4c ec       	ldi	r20, 0xCC	; 204
    2558:	5d e3       	ldi	r21, 0x3D	; 61
    255a:	c7 01       	movw	r24, r14
    255c:	b6 01       	movw	r22, r12
    255e:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__mulsf3>
    2562:	9b 01       	movw	r18, r22
    2564:	ac 01       	movw	r20, r24
    2566:	c3 01       	movw	r24, r6
    2568:	b2 01       	movw	r22, r4
    256a:	0e 94 8e 1c 	call	0x391c	; 0x391c <__addsf3>
    256e:	f8 01       	movw	r30, r16
    2570:	60 83       	st	Z, r22
    2572:	71 83       	std	Z+1, r23	; 0x01
    2574:	82 83       	std	Z+2, r24	; 0x02
    2576:	93 83       	std	Z+3, r25	; 0x03
	Position_NED[1] = Position_NED[1]*c1 + P_East*c2;
    2578:	64 81       	ldd	r22, Z+4	; 0x04
    257a:	75 81       	ldd	r23, Z+5	; 0x05
    257c:	86 81       	ldd	r24, Z+6	; 0x06
    257e:	97 81       	ldd	r25, Z+7	; 0x07
    2580:	26 e6       	ldi	r18, 0x66	; 102
    2582:	36 e6       	ldi	r19, 0x66	; 102
    2584:	46 e6       	ldi	r20, 0x66	; 102
    2586:	5f e3       	ldi	r21, 0x3F	; 63
    2588:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__mulsf3>
    258c:	6b 01       	movw	r12, r22
    258e:	7c 01       	movw	r14, r24
    2590:	20 ed       	ldi	r18, 0xD0	; 208
    2592:	3c ec       	ldi	r19, 0xCC	; 204
    2594:	4c ec       	ldi	r20, 0xCC	; 204
    2596:	5d e3       	ldi	r21, 0x3D	; 61
    2598:	c5 01       	movw	r24, r10
    259a:	b4 01       	movw	r22, r8
    259c:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__mulsf3>
    25a0:	9b 01       	movw	r18, r22
    25a2:	ac 01       	movw	r20, r24
    25a4:	c7 01       	movw	r24, r14
    25a6:	b6 01       	movw	r22, r12
    25a8:	0e 94 8e 1c 	call	0x391c	; 0x391c <__addsf3>
    25ac:	f8 01       	movw	r30, r16
    25ae:	64 83       	std	Z+4, r22	; 0x04
    25b0:	75 83       	std	Z+5, r23	; 0x05
    25b2:	86 83       	std	Z+6, r24	; 0x06
    25b4:	97 83       	std	Z+7, r25	; 0x07
	Position_NED[2] = -Height;
    25b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    25b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    25ba:	af 85       	ldd	r26, Y+15	; 0x0f
    25bc:	b8 89       	ldd	r27, Y+16	; 0x10
    25be:	b0 58       	subi	r27, 0x80	; 128
    25c0:	80 87       	std	Z+8, r24	; 0x08
    25c2:	91 87       	std	Z+9, r25	; 0x09
    25c4:	a2 87       	std	Z+10, r26	; 0x0a
    25c6:	b3 87       	std	Z+11, r27	; 0x0b
	
	return 1;
    25c8:	81 e0       	ldi	r24, 0x01	; 1
}
    25ca:	68 96       	adiw	r28, 0x18	; 24
    25cc:	cd bf       	out	0x3d, r28	; 61
    25ce:	de bf       	out	0x3e, r29	; 62
    25d0:	df 91       	pop	r29
    25d2:	cf 91       	pop	r28
    25d4:	1f 91       	pop	r17
    25d6:	0f 91       	pop	r16
    25d8:	ff 90       	pop	r15
    25da:	ef 90       	pop	r14
    25dc:	df 90       	pop	r13
    25de:	cf 90       	pop	r12
    25e0:	bf 90       	pop	r11
    25e2:	af 90       	pop	r10
    25e4:	9f 90       	pop	r9
    25e6:	8f 90       	pop	r8
    25e8:	7f 90       	pop	r7
    25ea:	6f 90       	pop	r6
    25ec:	5f 90       	pop	r5
    25ee:	4f 90       	pop	r4
    25f0:	08 95       	ret

000025f2 <Read_GPS>:
	USART_Transmit(Enable_GAL_8Hz, sizeof(Enable_GAL_8Hz));

	return (USART3_RXDATAH & USART_FERR_bm) ? 0 : 1;
}

unsigned char Read_GPS(States *Drone){
    25f2:	2f 92       	push	r2
    25f4:	3f 92       	push	r3
    25f6:	4f 92       	push	r4
    25f8:	5f 92       	push	r5
    25fa:	6f 92       	push	r6
    25fc:	7f 92       	push	r7
    25fe:	8f 92       	push	r8
    2600:	9f 92       	push	r9
    2602:	af 92       	push	r10
    2604:	bf 92       	push	r11
    2606:	cf 92       	push	r12
    2608:	df 92       	push	r13
    260a:	ef 92       	push	r14
    260c:	ff 92       	push	r15
    260e:	0f 93       	push	r16
    2610:	1f 93       	push	r17
    2612:	cf 93       	push	r28
    2614:	df 93       	push	r29
    2616:	cd b7       	in	r28, 0x3d	; 61
    2618:	de b7       	in	r29, 0x3e	; 62
    261a:	cc 58       	subi	r28, 0x8C	; 140
    261c:	d1 09       	sbc	r29, r1
    261e:	cd bf       	out	0x3d, r28	; 61
    2620:	de bf       	out	0x3e, r29	; 62
    2622:	4c 01       	movw	r8, r24
	
	unsigned char i = 0;
	unsigned char j = 0;
	signed char start_index = -1;
	signed char end_index = -1;
	signed char comma_indices[13] = {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
    2624:	8d e0       	ldi	r24, 0x0D	; 13
    2626:	e7 e4       	ldi	r30, 0x47	; 71
    2628:	f0 e4       	ldi	r31, 0x40	; 64
    262a:	de 01       	movw	r26, r28
    262c:	11 96       	adiw	r26, 0x01	; 1
    262e:	01 90       	ld	r0, Z+
    2630:	0d 92       	st	X+, r0
    2632:	8a 95       	dec	r24
    2634:	e1 f7       	brne	.-8      	; 0x262e <Read_GPS+0x3c>
	char GPS_Data[100] = {0};
    2636:	fe 01       	movw	r30, r28
    2638:	3e 96       	adiw	r30, 0x0e	; 14
    263a:	84 e6       	ldi	r24, 0x64	; 100
    263c:	df 01       	movw	r26, r30
    263e:	1d 92       	st	X+, r1
    2640:	8a 95       	dec	r24
    2642:	e9 f7       	brne	.-6      	; 0x263e <Read_GPS+0x4c>
	char Check_Sum[2] = {0};
    2644:	71 2c       	mov	r7, r1
    2646:	61 2c       	mov	r6, r1
	static char GPS_Position_Mode;
	static unsigned char window_counter = 0;
	
	unsigned char i = 0;
	unsigned char j = 0;
	signed char start_index = -1;
    2648:	9f ef       	ldi	r25, 0xFF	; 255
    static char GPS_Position_Status;
	static char GPS_Position_Mode;
	static unsigned char window_counter = 0;
	
	unsigned char i = 0;
	unsigned char j = 0;
    264a:	40 e0       	ldi	r20, 0x00	; 0
	static signed long Longitude_window[GPS_WINDOW_SIZE] = {0};
    static char GPS_Position_Status;
	static char GPS_Position_Mode;
	static unsigned char window_counter = 0;
	
	unsigned char i = 0;
    264c:	e0 e0       	ldi	r30, 0x00	; 0
    264e:	39 2f       	mov	r19, r25
	signed char end_index = -1;
	signed char comma_indices[13] = {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
	char GPS_Data[100] = {0};
	char Check_Sum[2] = {0};
	
	while(i != g_GPS_Data_Index){
    2650:	3e c0       	rjmp	.+124    	; 0x26ce <Read_GPS+0xdc>
		if (g_GPS_Data[i] == 36){start_index = i;}
    2652:	8e 2f       	mov	r24, r30
    2654:	90 e0       	ldi	r25, 0x00	; 0
    2656:	dc 01       	movw	r26, r24
    2658:	af 53       	subi	r26, 0x3F	; 63
    265a:	bb 4b       	sbci	r27, 0xBB	; 187
    265c:	2c 91       	ld	r18, X
    265e:	24 32       	cpi	r18, 0x24	; 36
    2660:	11 f4       	brne	.+4      	; 0x2666 <Read_GPS+0x74>
    2662:	3e 2f       	mov	r19, r30
    2664:	26 c0       	rjmp	.+76     	; 0x26b2 <Read_GPS+0xc0>
		else if ((g_GPS_Data[i] == 42)&&(start_index != -1)){
    2666:	dc 01       	movw	r26, r24
    2668:	af 53       	subi	r26, 0x3F	; 63
    266a:	bb 4b       	sbci	r27, 0xBB	; 187
    266c:	2c 91       	ld	r18, X
    266e:	2a 32       	cpi	r18, 0x2A	; 42
    2670:	81 f4       	brne	.+32     	; 0x2692 <Read_GPS+0xa0>
    2672:	3f 3f       	cpi	r19, 0xFF	; 255
    2674:	71 f0       	breq	.+28     	; 0x2692 <Read_GPS+0xa0>
    2676:	93 2f       	mov	r25, r19
			end_index = i;
    2678:	6e 2f       	mov	r22, r30
			Check_Sum[0] = g_GPS_Data[++i];
    267a:	a1 e0       	ldi	r26, 0x01	; 1
    267c:	ae 0f       	add	r26, r30
    267e:	b0 e0       	ldi	r27, 0x00	; 0
    2680:	af 53       	subi	r26, 0x3F	; 63
    2682:	bb 4b       	sbci	r27, 0xBB	; 187
    2684:	7c 90       	ld	r7, X
			Check_Sum[1] = g_GPS_Data[++i];
    2686:	ee 5f       	subi	r30, 0xFE	; 254
    2688:	f0 e0       	ldi	r31, 0x00	; 0
    268a:	ef 53       	subi	r30, 0x3F	; 63
    268c:	fb 4b       	sbci	r31, 0xBB	; 187
    268e:	60 80       	ld	r6, Z
			break;
    2690:	24 c0       	rjmp	.+72     	; 0x26da <Read_GPS+0xe8>
		}
		else if ((g_GPS_Data[i] == 44)&&(start_index != -1)){comma_indices[j++] = i;}
    2692:	dc 01       	movw	r26, r24
    2694:	af 53       	subi	r26, 0x3F	; 63
    2696:	bb 4b       	sbci	r27, 0xBB	; 187
    2698:	2c 91       	ld	r18, X
    269a:	2c 32       	cpi	r18, 0x2C	; 44
    269c:	51 f4       	brne	.+20     	; 0x26b2 <Read_GPS+0xc0>
    269e:	3f 3f       	cpi	r19, 0xFF	; 255
    26a0:	41 f0       	breq	.+16     	; 0x26b2 <Read_GPS+0xc0>
    26a2:	a1 e0       	ldi	r26, 0x01	; 1
    26a4:	b0 e0       	ldi	r27, 0x00	; 0
    26a6:	ac 0f       	add	r26, r28
    26a8:	bd 1f       	adc	r27, r29
    26aa:	a4 0f       	add	r26, r20
    26ac:	b1 1d       	adc	r27, r1
    26ae:	ec 93       	st	X, r30
    26b0:	4f 5f       	subi	r20, 0xFF	; 255
		if (start_index != -1){GPS_Data[i] = g_GPS_Data[i];}
    26b2:	3f 3f       	cpi	r19, 0xFF	; 255
    26b4:	59 f0       	breq	.+22     	; 0x26cc <Read_GPS+0xda>
    26b6:	dc 01       	movw	r26, r24
    26b8:	af 53       	subi	r26, 0x3F	; 63
    26ba:	bb 4b       	sbci	r27, 0xBB	; 187
    26bc:	2c 91       	ld	r18, X
    26be:	ae e0       	ldi	r26, 0x0E	; 14
    26c0:	b0 e0       	ldi	r27, 0x00	; 0
    26c2:	ac 0f       	add	r26, r28
    26c4:	bd 1f       	adc	r27, r29
    26c6:	a8 0f       	add	r26, r24
    26c8:	b9 1f       	adc	r27, r25
    26ca:	2c 93       	st	X, r18
		i++;
    26cc:	ef 5f       	subi	r30, 0xFF	; 255
	signed char end_index = -1;
	signed char comma_indices[13] = {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
	char GPS_Data[100] = {0};
	char Check_Sum[2] = {0};
	
	while(i != g_GPS_Data_Index){
    26ce:	80 91 c0 44 	lds	r24, 0x44C0	; 0x8044c0 <g_GPS_Data_Index>
    26d2:	e8 13       	cpse	r30, r24
    26d4:	be cf       	rjmp	.-132    	; 0x2652 <Read_GPS+0x60>
    26d6:	93 2f       	mov	r25, r19
	static unsigned char window_counter = 0;
	
	unsigned char i = 0;
	unsigned char j = 0;
	signed char start_index = -1;
	signed char end_index = -1;
    26d8:	6f ef       	ldi	r22, 0xFF	; 255
		}
		else if ((g_GPS_Data[i] == 44)&&(start_index != -1)){comma_indices[j++] = i;}
		if (start_index != -1){GPS_Data[i] = g_GPS_Data[i];}
		i++;
	}
	g_GPS_Data_Index = 0;
    26da:	10 92 c0 44 	sts	0x44C0, r1	; 0x8044c0 <g_GPS_Data_Index>
	if ((start_index == -1)||(end_index == -1)){return 0;}
    26de:	9f 3f       	cpi	r25, 0xFF	; 255
    26e0:	09 f4       	brne	.+2      	; 0x26e4 <Read_GPS+0xf2>
    26e2:	16 c4       	rjmp	.+2092   	; 0x2f10 <Read_GPS+0x91e>
    26e4:	6f 3f       	cpi	r22, 0xFF	; 255
    26e6:	09 f4       	brne	.+2      	; 0x26ea <Read_GPS+0xf8>
    26e8:	15 c4       	rjmp	.+2090   	; 0x2f14 <Read_GPS+0x922>
	
	signed char checksum = GPS_Data[start_index+1];
    26ea:	e9 2f       	mov	r30, r25
    26ec:	09 2e       	mov	r0, r25
    26ee:	00 0c       	add	r0, r0
    26f0:	ff 0b       	sbc	r31, r31
    26f2:	31 96       	adiw	r30, 0x01	; 1
    26f4:	2e e0       	ldi	r18, 0x0E	; 14
    26f6:	30 e0       	ldi	r19, 0x00	; 0
    26f8:	2c 0f       	add	r18, r28
    26fa:	3d 1f       	adc	r19, r29
    26fc:	e2 0f       	add	r30, r18
    26fe:	f3 1f       	adc	r31, r19
    2700:	80 81       	ld	r24, Z
	for (unsigned char k=start_index+2;k<=end_index;k++){
    2702:	9e 5f       	subi	r25, 0xFE	; 254
    2704:	09 c0       	rjmp	.+18     	; 0x2718 <Read_GPS+0x126>
		checksum ^= GPS_Data[k];
    2706:	ee e0       	ldi	r30, 0x0E	; 14
    2708:	f0 e0       	ldi	r31, 0x00	; 0
    270a:	ec 0f       	add	r30, r28
    270c:	fd 1f       	adc	r31, r29
    270e:	e2 0f       	add	r30, r18
    2710:	f3 1f       	adc	r31, r19
    2712:	20 81       	ld	r18, Z
    2714:	82 27       	eor	r24, r18
	}
	g_GPS_Data_Index = 0;
	if ((start_index == -1)||(end_index == -1)){return 0;}
	
	signed char checksum = GPS_Data[start_index+1];
	for (unsigned char k=start_index+2;k<=end_index;k++){
    2716:	9f 5f       	subi	r25, 0xFF	; 255
    2718:	29 2f       	mov	r18, r25
    271a:	30 e0       	ldi	r19, 0x00	; 0
    271c:	46 2f       	mov	r20, r22
    271e:	06 2e       	mov	r0, r22
    2720:	00 0c       	add	r0, r0
    2722:	55 0b       	sbc	r21, r21
    2724:	42 17       	cp	r20, r18
    2726:	53 07       	cpc	r21, r19
    2728:	74 f7       	brge	.-36     	; 0x2706 <Read_GPS+0x114>
		checksum ^= GPS_Data[k];
	}
	char checksum_hex[3] = {0};
    272a:	fe 01       	movw	r30, r28
    272c:	ee 58       	subi	r30, 0x8E	; 142
    272e:	ff 4f       	sbci	r31, 0xFF	; 255
    2730:	10 82       	st	Z, r1
    2732:	11 82       	std	Z+1, r1	; 0x01
    2734:	12 82       	std	Z+2, r1	; 0x02
	unsigned char converted_length = snprintf(checksum_hex, sizeof(checksum_hex), "%X", checksum);
    2736:	28 2f       	mov	r18, r24
    2738:	08 2e       	mov	r0, r24
    273a:	00 0c       	add	r0, r0
    273c:	33 0b       	sbc	r19, r19
    273e:	3f 93       	push	r19
    2740:	8f 93       	push	r24
    2742:	8f ed       	ldi	r24, 0xDF	; 223
    2744:	91 e4       	ldi	r25, 0x41	; 65
    2746:	9f 93       	push	r25
    2748:	8f 93       	push	r24
    274a:	1f 92       	push	r1
    274c:	83 e0       	ldi	r24, 0x03	; 3
    274e:	8f 93       	push	r24
    2750:	ff 93       	push	r31
    2752:	ef 93       	push	r30
    2754:	0e 94 d6 29 	call	0x53ac	; 0x53ac <snprintf>
	if (converted_length == 1){ // Won't add the 0 in automatically if the number is less than 8
    2758:	cd bf       	out	0x3d, r28	; 61
    275a:	de bf       	out	0x3e, r29	; 62
    275c:	81 30       	cpi	r24, 0x01	; 1
    275e:	51 f4       	brne	.+20     	; 0x2774 <Read_GPS+0x182>
		checksum_hex[1] = checksum_hex[0];
    2760:	e3 96       	adiw	r28, 0x33	; 51
    2762:	8f ad       	ldd	r24, Y+63	; 0x3f
    2764:	e3 97       	sbiw	r28, 0x33	; 51
    2766:	e4 96       	adiw	r28, 0x34	; 52
    2768:	8f af       	std	Y+63, r24	; 0x3f
    276a:	e4 97       	sbiw	r28, 0x34	; 52
		checksum_hex[0] = 48;
    276c:	80 e3       	ldi	r24, 0x30	; 48
    276e:	e3 96       	adiw	r28, 0x33	; 51
    2770:	8f af       	std	Y+63, r24	; 0x3f
    2772:	e3 97       	sbiw	r28, 0x33	; 51
	}
	
	if ((checksum_hex[0] == Check_Sum[0])&&(checksum_hex[1] == Check_Sum[1])){
    2774:	e3 96       	adiw	r28, 0x33	; 51
    2776:	8f ad       	ldd	r24, Y+63	; 0x3f
    2778:	e3 97       	sbiw	r28, 0x33	; 51
    277a:	87 11       	cpse	r24, r7
    277c:	cd c3       	rjmp	.+1946   	; 0x2f18 <Read_GPS+0x926>
    277e:	e4 96       	adiw	r28, 0x34	; 52
    2780:	8f ad       	ldd	r24, Y+63	; 0x3f
    2782:	e4 97       	sbiw	r28, 0x34	; 52
    2784:	86 11       	cpse	r24, r6
    2786:	ca c3       	rjmp	.+1940   	; 0x2f1c <Read_GPS+0x92a>
		// If the checksum signifies that the message is valid, then we go through parsing it
		// NMEA RMC information comes in the following order:
		// -> Name, time, status, latitude, NS, longitude, EW, speed, course over ground, date,
		// magnetic variation, magnetic variation EW, position mode, navigation status
		if (comma_indices[2] - comma_indices[1] - 1){
    2788:	2b 81       	ldd	r18, Y+3	; 0x03
    278a:	02 2e       	mov	r0, r18
    278c:	00 0c       	add	r0, r0
    278e:	33 0b       	sbc	r19, r19
    2790:	8a 81       	ldd	r24, Y+2	; 0x02
    2792:	08 2e       	mov	r0, r24
    2794:	00 0c       	add	r0, r0
    2796:	99 0b       	sbc	r25, r25
    2798:	a9 01       	movw	r20, r18
    279a:	48 1b       	sub	r20, r24
    279c:	59 0b       	sbc	r21, r25
    279e:	41 30       	cpi	r20, 0x01	; 1
    27a0:	51 05       	cpc	r21, r1
    27a2:	51 f0       	breq	.+20     	; 0x27b8 <Read_GPS+0x1c6>
			GPS_Position_Status = GPS_Data[comma_indices[1]+1];
    27a4:	01 96       	adiw	r24, 0x01	; 1
    27a6:	ee e0       	ldi	r30, 0x0E	; 14
    27a8:	f0 e0       	ldi	r31, 0x00	; 0
    27aa:	ec 0f       	add	r30, r28
    27ac:	fd 1f       	adc	r31, r29
    27ae:	e8 0f       	add	r30, r24
    27b0:	f9 1f       	adc	r31, r25
    27b2:	80 81       	ld	r24, Z
    27b4:	80 93 a3 43 	sts	0x43A3, r24	; 0x8043a3 <GPS_Position_Status.4953>
		}
		if (comma_indices[12] - comma_indices[11] - 1){
    27b8:	4d 85       	ldd	r20, Y+13	; 0x0d
    27ba:	8c 85       	ldd	r24, Y+12	; 0x0c
    27bc:	08 2e       	mov	r0, r24
    27be:	00 0c       	add	r0, r0
    27c0:	99 0b       	sbc	r25, r25
    27c2:	04 2e       	mov	r0, r20
    27c4:	00 0c       	add	r0, r0
    27c6:	55 0b       	sbc	r21, r21
    27c8:	48 1b       	sub	r20, r24
    27ca:	59 0b       	sbc	r21, r25
    27cc:	41 30       	cpi	r20, 0x01	; 1
    27ce:	51 05       	cpc	r21, r1
    27d0:	51 f0       	breq	.+20     	; 0x27e6 <Read_GPS+0x1f4>
			GPS_Position_Mode = GPS_Data[comma_indices[11]+1];
    27d2:	01 96       	adiw	r24, 0x01	; 1
    27d4:	ee e0       	ldi	r30, 0x0E	; 14
    27d6:	f0 e0       	ldi	r31, 0x00	; 0
    27d8:	ec 0f       	add	r30, r28
    27da:	fd 1f       	adc	r31, r29
    27dc:	e8 0f       	add	r30, r24
    27de:	f9 1f       	adc	r31, r25
    27e0:	80 81       	ld	r24, Z
    27e2:	80 93 a2 43 	sts	0x43A2, r24	; 0x8043a2 <GPS_Position_Mode.4954>
		}
		if ((GPS_Position_Status == 'A')&&(GPS_Position_Mode == 'A')){
    27e6:	80 91 a3 43 	lds	r24, 0x43A3	; 0x8043a3 <GPS_Position_Status.4953>
    27ea:	81 34       	cpi	r24, 0x41	; 65
    27ec:	09 f0       	breq	.+2      	; 0x27f0 <Read_GPS+0x1fe>
    27ee:	98 c3       	rjmp	.+1840   	; 0x2f20 <Read_GPS+0x92e>
    27f0:	80 91 a2 43 	lds	r24, 0x43A2	; 0x8043a2 <GPS_Position_Mode.4954>
    27f4:	81 34       	cpi	r24, 0x41	; 65
    27f6:	09 f0       	breq	.+2      	; 0x27fa <Read_GPS+0x208>
    27f8:	95 c3       	rjmp	.+1834   	; 0x2f24 <Read_GPS+0x932>
			if (comma_indices[3]-comma_indices[2] - 1){
    27fa:	6c 80       	ldd	r6, Y+4	; 0x04
    27fc:	06 2c       	mov	r0, r6
    27fe:	00 0c       	add	r0, r0
    2800:	77 08       	sbc	r7, r7
    2802:	c3 01       	movw	r24, r6
    2804:	82 1b       	sub	r24, r18
    2806:	93 0b       	sbc	r25, r19
    2808:	01 97       	sbiw	r24, 0x01	; 1
    280a:	09 f4       	brne	.+2      	; 0x280e <Read_GPS+0x21c>
    280c:	96 c0       	rjmp	.+300    	; 0x293a <Read_GPS+0x348>
				char Latitude_degrees[] = {GPS_Data[comma_indices[2]+1], GPS_Data[comma_indices[2]+2], '\0'};
    280e:	f9 01       	movw	r30, r18
    2810:	31 96       	adiw	r30, 0x01	; 1
    2812:	6e e0       	ldi	r22, 0x0E	; 14
    2814:	70 e0       	ldi	r23, 0x00	; 0
    2816:	6c 0f       	add	r22, r28
    2818:	7d 1f       	adc	r23, r29
    281a:	e6 0f       	add	r30, r22
    281c:	f7 1f       	adc	r31, r23
    281e:	80 81       	ld	r24, Z
    2820:	c1 58       	subi	r28, 0x81	; 129
    2822:	df 4f       	sbci	r29, 0xFF	; 255
    2824:	88 83       	st	Y, r24
    2826:	cf 57       	subi	r28, 0x7F	; 127
    2828:	d0 40       	sbci	r29, 0x00	; 0
    282a:	f9 01       	movw	r30, r18
    282c:	32 96       	adiw	r30, 0x02	; 2
    282e:	e6 0f       	add	r30, r22
    2830:	f7 1f       	adc	r31, r23
    2832:	80 81       	ld	r24, Z
    2834:	c0 58       	subi	r28, 0x80	; 128
    2836:	df 4f       	sbci	r29, 0xFF	; 255
    2838:	88 83       	st	Y, r24
    283a:	c0 58       	subi	r28, 0x80	; 128
    283c:	d0 40       	sbci	r29, 0x00	; 0
    283e:	cf 57       	subi	r28, 0x7F	; 127
    2840:	df 4f       	sbci	r29, 0xFF	; 255
    2842:	18 82       	st	Y, r1
    2844:	c1 58       	subi	r28, 0x81	; 129
    2846:	d0 40       	sbci	r29, 0x00	; 0
				char Latitude_minutes_integer[] = {GPS_Data[comma_indices[2]+3], GPS_Data[comma_indices[2]+4], '\0'};
    2848:	f9 01       	movw	r30, r18
    284a:	33 96       	adiw	r30, 0x03	; 3
    284c:	e6 0f       	add	r30, r22
    284e:	f7 1f       	adc	r31, r23
    2850:	80 81       	ld	r24, Z
    2852:	ec 96       	adiw	r28, 0x3c	; 60
    2854:	8f af       	std	Y+63, r24	; 0x3f
    2856:	ec 97       	sbiw	r28, 0x3c	; 60
    2858:	f9 01       	movw	r30, r18
    285a:	34 96       	adiw	r30, 0x04	; 4
    285c:	e6 0f       	add	r30, r22
    285e:	f7 1f       	adc	r31, r23
    2860:	80 81       	ld	r24, Z
    2862:	ed 96       	adiw	r28, 0x3d	; 61
    2864:	8f af       	std	Y+63, r24	; 0x3f
    2866:	ed 97       	sbiw	r28, 0x3d	; 61
    2868:	ee 96       	adiw	r28, 0x3e	; 62
    286a:	1f ae       	std	Y+63, r1	; 0x3f
    286c:	ee 97       	sbiw	r28, 0x3e	; 62
				char Latitude_minutes_decimal[] = {GPS_Data[comma_indices[2]+6], GPS_Data[comma_indices[2]+7], GPS_Data[comma_indices[2]+8], GPS_Data[comma_indices[2]+9], GPS_Data[comma_indices[2]+10], '\0'};
    286e:	f9 01       	movw	r30, r18
    2870:	36 96       	adiw	r30, 0x06	; 6
    2872:	e6 0f       	add	r30, r22
    2874:	f7 1f       	adc	r31, r23
    2876:	80 81       	ld	r24, Z
    2878:	e6 96       	adiw	r28, 0x36	; 54
    287a:	8f af       	std	Y+63, r24	; 0x3f
    287c:	e6 97       	sbiw	r28, 0x36	; 54
    287e:	f9 01       	movw	r30, r18
    2880:	37 96       	adiw	r30, 0x07	; 7
    2882:	e6 0f       	add	r30, r22
    2884:	f7 1f       	adc	r31, r23
    2886:	80 81       	ld	r24, Z
    2888:	e7 96       	adiw	r28, 0x37	; 55
    288a:	8f af       	std	Y+63, r24	; 0x3f
    288c:	e7 97       	sbiw	r28, 0x37	; 55
    288e:	f9 01       	movw	r30, r18
    2890:	38 96       	adiw	r30, 0x08	; 8
    2892:	e6 0f       	add	r30, r22
    2894:	f7 1f       	adc	r31, r23
    2896:	80 81       	ld	r24, Z
    2898:	e8 96       	adiw	r28, 0x38	; 56
    289a:	8f af       	std	Y+63, r24	; 0x3f
    289c:	e8 97       	sbiw	r28, 0x38	; 56
    289e:	f9 01       	movw	r30, r18
    28a0:	39 96       	adiw	r30, 0x09	; 9
    28a2:	e6 0f       	add	r30, r22
    28a4:	f7 1f       	adc	r31, r23
    28a6:	80 81       	ld	r24, Z
    28a8:	e9 96       	adiw	r28, 0x39	; 57
    28aa:	8f af       	std	Y+63, r24	; 0x3f
    28ac:	e9 97       	sbiw	r28, 0x39	; 57
    28ae:	26 5f       	subi	r18, 0xF6	; 246
    28b0:	3f 4f       	sbci	r19, 0xFF	; 255
    28b2:	fb 01       	movw	r30, r22
    28b4:	e2 0f       	add	r30, r18
    28b6:	f3 1f       	adc	r31, r19
    28b8:	80 81       	ld	r24, Z
    28ba:	ea 96       	adiw	r28, 0x3a	; 58
    28bc:	8f af       	std	Y+63, r24	; 0x3f
    28be:	ea 97       	sbiw	r28, 0x3a	; 58
    28c0:	eb 96       	adiw	r28, 0x3b	; 59
    28c2:	1f ae       	std	Y+63, r1	; 0x3f
    28c4:	eb 97       	sbiw	r28, 0x3b	; 59
				Latitude_window[window_counter] = ((atol(Latitude_degrees)*60)+atol(Latitude_minutes_integer))*100000 + atol(Latitude_minutes_decimal);
    28c6:	e0 91 a1 43 	lds	r30, 0x43A1	; 0x8043a1 <window_counter.4955>
    28ca:	4e 2e       	mov	r4, r30
    28cc:	51 2c       	mov	r5, r1
    28ce:	ce 01       	movw	r24, r28
    28d0:	81 58       	subi	r24, 0x81	; 129
    28d2:	9f 4f       	sbci	r25, 0xFF	; 255
    28d4:	0e 94 47 28 	call	0x508e	; 0x508e <atol>
    28d8:	9b 01       	movw	r18, r22
    28da:	ac 01       	movw	r20, r24
    28dc:	ac e3       	ldi	r26, 0x3C	; 60
    28de:	b0 e0       	ldi	r27, 0x00	; 0
    28e0:	0e 94 56 25 	call	0x4aac	; 0x4aac <__muluhisi3>
    28e4:	6b 01       	movw	r12, r22
    28e6:	7c 01       	movw	r14, r24
    28e8:	ce 01       	movw	r24, r28
    28ea:	85 58       	subi	r24, 0x85	; 133
    28ec:	9f 4f       	sbci	r25, 0xFF	; 255
    28ee:	0e 94 47 28 	call	0x508e	; 0x508e <atol>
    28f2:	a7 01       	movw	r20, r14
    28f4:	96 01       	movw	r18, r12
    28f6:	26 0f       	add	r18, r22
    28f8:	37 1f       	adc	r19, r23
    28fa:	48 1f       	adc	r20, r24
    28fc:	59 1f       	adc	r21, r25
    28fe:	60 ea       	ldi	r22, 0xA0	; 160
    2900:	76 e8       	ldi	r23, 0x86	; 134
    2902:	81 e0       	ldi	r24, 0x01	; 1
    2904:	90 e0       	ldi	r25, 0x00	; 0
    2906:	0e 94 3d 25 	call	0x4a7a	; 0x4a7a <__mulsi3>
    290a:	6b 01       	movw	r12, r22
    290c:	7c 01       	movw	r14, r24
    290e:	ce 01       	movw	r24, r28
    2910:	8b 58       	subi	r24, 0x8B	; 139
    2912:	9f 4f       	sbci	r25, 0xFF	; 255
    2914:	0e 94 47 28 	call	0x508e	; 0x508e <atol>
    2918:	dc 01       	movw	r26, r24
    291a:	cb 01       	movw	r24, r22
    291c:	8c 0d       	add	r24, r12
    291e:	9d 1d       	adc	r25, r13
    2920:	ae 1d       	adc	r26, r14
    2922:	bf 1d       	adc	r27, r15
    2924:	f2 01       	movw	r30, r4
    2926:	ee 0f       	add	r30, r30
    2928:	ff 1f       	adc	r31, r31
    292a:	ee 0f       	add	r30, r30
    292c:	ff 1f       	adc	r31, r31
    292e:	ef 56       	subi	r30, 0x6F	; 111
    2930:	fc 4b       	sbci	r31, 0xBC	; 188
    2932:	80 83       	st	Z, r24
    2934:	91 83       	std	Z+1, r25	; 0x01
    2936:	a2 83       	std	Z+2, r26	; 0x02
    2938:	b3 83       	std	Z+3, r27	; 0x03
			}
			if (comma_indices[4] - comma_indices[3] - 1){
    293a:	ed 81       	ldd	r30, Y+5	; 0x05
    293c:	0e 2e       	mov	r0, r30
    293e:	00 0c       	add	r0, r0
    2940:	ff 0b       	sbc	r31, r31
    2942:	cf 01       	movw	r24, r30
    2944:	86 19       	sub	r24, r6
    2946:	97 09       	sbc	r25, r7
    2948:	01 97       	sbiw	r24, 0x01	; 1
    294a:	91 f1       	breq	.+100    	; 0x29b0 <Read_GPS+0x3be>
				Latitude_window[window_counter] *= (GPS_Data[comma_indices[3]+1] == 'N') ? 1 : -1;
    294c:	80 91 a1 43 	lds	r24, 0x43A1	; 0x8043a1 <window_counter.4955>
    2950:	08 2f       	mov	r16, r24
    2952:	10 e0       	ldi	r17, 0x00	; 0
    2954:	d8 01       	movw	r26, r16
    2956:	aa 0f       	add	r26, r26
    2958:	bb 1f       	adc	r27, r27
    295a:	aa 0f       	add	r26, r26
    295c:	bb 1f       	adc	r27, r27
    295e:	af 56       	subi	r26, 0x6F	; 111
    2960:	bc 4b       	sbci	r27, 0xBC	; 188
    2962:	6d 91       	ld	r22, X+
    2964:	7d 91       	ld	r23, X+
    2966:	8d 91       	ld	r24, X+
    2968:	9c 91       	ld	r25, X
    296a:	d3 01       	movw	r26, r6
    296c:	11 96       	adiw	r26, 0x01	; 1
    296e:	2e e0       	ldi	r18, 0x0E	; 14
    2970:	30 e0       	ldi	r19, 0x00	; 0
    2972:	2c 0f       	add	r18, r28
    2974:	3d 1f       	adc	r19, r29
    2976:	a2 0f       	add	r26, r18
    2978:	b3 1f       	adc	r27, r19
    297a:	2c 91       	ld	r18, X
    297c:	2e 34       	cpi	r18, 0x4E	; 78
    297e:	29 f4       	brne	.+10     	; 0x298a <Read_GPS+0x398>
    2980:	21 e0       	ldi	r18, 0x01	; 1
    2982:	30 e0       	ldi	r19, 0x00	; 0
    2984:	40 e0       	ldi	r20, 0x00	; 0
    2986:	50 e0       	ldi	r21, 0x00	; 0
    2988:	03 c0       	rjmp	.+6      	; 0x2990 <Read_GPS+0x39e>
    298a:	2f ef       	ldi	r18, 0xFF	; 255
    298c:	3f ef       	ldi	r19, 0xFF	; 255
    298e:	a9 01       	movw	r20, r18
    2990:	d8 01       	movw	r26, r16
    2992:	aa 0f       	add	r26, r26
    2994:	bb 1f       	adc	r27, r27
    2996:	aa 0f       	add	r26, r26
    2998:	bb 1f       	adc	r27, r27
    299a:	8d 01       	movw	r16, r26
    299c:	0f 56       	subi	r16, 0x6F	; 111
    299e:	1c 4b       	sbci	r17, 0xBC	; 188
    29a0:	0e 94 3d 25 	call	0x4a7a	; 0x4a7a <__mulsi3>
    29a4:	d8 01       	movw	r26, r16
    29a6:	6d 93       	st	X+, r22
    29a8:	7d 93       	st	X+, r23
    29aa:	8d 93       	st	X+, r24
    29ac:	9c 93       	st	X, r25
    29ae:	13 97       	sbiw	r26, 0x03	; 3
			}
			if (comma_indices[5]-comma_indices[4] - 1){
    29b0:	6e 80       	ldd	r6, Y+6	; 0x06
    29b2:	06 2c       	mov	r0, r6
    29b4:	00 0c       	add	r0, r0
    29b6:	77 08       	sbc	r7, r7
    29b8:	c3 01       	movw	r24, r6
    29ba:	8e 1b       	sub	r24, r30
    29bc:	9f 0b       	sbc	r25, r31
    29be:	01 97       	sbiw	r24, 0x01	; 1
    29c0:	09 f4       	brne	.+2      	; 0x29c4 <Read_GPS+0x3d2>
    29c2:	9c c0       	rjmp	.+312    	; 0x2afc <Read_GPS+0x50a>
				char Longitude_degrees[] = {GPS_Data[comma_indices[4]+1], GPS_Data[comma_indices[4]+2], GPS_Data[comma_indices[4]+3], '\0'};
    29c4:	df 01       	movw	r26, r30
    29c6:	11 96       	adiw	r26, 0x01	; 1
    29c8:	2e e0       	ldi	r18, 0x0E	; 14
    29ca:	30 e0       	ldi	r19, 0x00	; 0
    29cc:	2c 0f       	add	r18, r28
    29ce:	3d 1f       	adc	r19, r29
    29d0:	a2 0f       	add	r26, r18
    29d2:	b3 1f       	adc	r27, r19
    29d4:	8c 91       	ld	r24, X
    29d6:	ec 96       	adiw	r28, 0x3c	; 60
    29d8:	8f af       	std	Y+63, r24	; 0x3f
    29da:	ec 97       	sbiw	r28, 0x3c	; 60
    29dc:	df 01       	movw	r26, r30
    29de:	12 96       	adiw	r26, 0x02	; 2
    29e0:	a2 0f       	add	r26, r18
    29e2:	b3 1f       	adc	r27, r19
    29e4:	8c 91       	ld	r24, X
    29e6:	ed 96       	adiw	r28, 0x3d	; 61
    29e8:	8f af       	std	Y+63, r24	; 0x3f
    29ea:	ed 97       	sbiw	r28, 0x3d	; 61
    29ec:	df 01       	movw	r26, r30
    29ee:	13 96       	adiw	r26, 0x03	; 3
    29f0:	a2 0f       	add	r26, r18
    29f2:	b3 1f       	adc	r27, r19
    29f4:	8c 91       	ld	r24, X
    29f6:	ee 96       	adiw	r28, 0x3e	; 62
    29f8:	8f af       	std	Y+63, r24	; 0x3f
    29fa:	ee 97       	sbiw	r28, 0x3e	; 62
    29fc:	ef 96       	adiw	r28, 0x3f	; 63
    29fe:	1f ae       	std	Y+63, r1	; 0x3f
    2a00:	ef 97       	sbiw	r28, 0x3f	; 63
				char Longitude_minutes_integer[] = {GPS_Data[comma_indices[4]+4], GPS_Data[comma_indices[4]+5], '\0'};
    2a02:	df 01       	movw	r26, r30
    2a04:	14 96       	adiw	r26, 0x04	; 4
    2a06:	a2 0f       	add	r26, r18
    2a08:	b3 1f       	adc	r27, r19
    2a0a:	8c 91       	ld	r24, X
    2a0c:	c1 58       	subi	r28, 0x81	; 129
    2a0e:	df 4f       	sbci	r29, 0xFF	; 255
    2a10:	88 83       	st	Y, r24
    2a12:	cf 57       	subi	r28, 0x7F	; 127
    2a14:	d0 40       	sbci	r29, 0x00	; 0
    2a16:	df 01       	movw	r26, r30
    2a18:	15 96       	adiw	r26, 0x05	; 5
    2a1a:	a2 0f       	add	r26, r18
    2a1c:	b3 1f       	adc	r27, r19
    2a1e:	8c 91       	ld	r24, X
    2a20:	c0 58       	subi	r28, 0x80	; 128
    2a22:	df 4f       	sbci	r29, 0xFF	; 255
    2a24:	88 83       	st	Y, r24
    2a26:	c0 58       	subi	r28, 0x80	; 128
    2a28:	d0 40       	sbci	r29, 0x00	; 0
    2a2a:	cf 57       	subi	r28, 0x7F	; 127
    2a2c:	df 4f       	sbci	r29, 0xFF	; 255
    2a2e:	18 82       	st	Y, r1
    2a30:	c1 58       	subi	r28, 0x81	; 129
    2a32:	d0 40       	sbci	r29, 0x00	; 0
				char Longitude_minutes_decimal[] = {GPS_Data[comma_indices[4]+7], GPS_Data[comma_indices[4]+8], GPS_Data[comma_indices[4]+9], GPS_Data[comma_indices[4]+10], GPS_Data[comma_indices[4]+11], '\0'};
    2a34:	df 01       	movw	r26, r30
    2a36:	17 96       	adiw	r26, 0x07	; 7
    2a38:	a2 0f       	add	r26, r18
    2a3a:	b3 1f       	adc	r27, r19
    2a3c:	8c 91       	ld	r24, X
    2a3e:	e6 96       	adiw	r28, 0x36	; 54
    2a40:	8f af       	std	Y+63, r24	; 0x3f
    2a42:	e6 97       	sbiw	r28, 0x36	; 54
    2a44:	df 01       	movw	r26, r30
    2a46:	18 96       	adiw	r26, 0x08	; 8
    2a48:	a2 0f       	add	r26, r18
    2a4a:	b3 1f       	adc	r27, r19
    2a4c:	8c 91       	ld	r24, X
    2a4e:	e7 96       	adiw	r28, 0x37	; 55
    2a50:	8f af       	std	Y+63, r24	; 0x3f
    2a52:	e7 97       	sbiw	r28, 0x37	; 55
    2a54:	df 01       	movw	r26, r30
    2a56:	19 96       	adiw	r26, 0x09	; 9
    2a58:	a2 0f       	add	r26, r18
    2a5a:	b3 1f       	adc	r27, r19
    2a5c:	8c 91       	ld	r24, X
    2a5e:	e8 96       	adiw	r28, 0x38	; 56
    2a60:	8f af       	std	Y+63, r24	; 0x3f
    2a62:	e8 97       	sbiw	r28, 0x38	; 56
    2a64:	df 01       	movw	r26, r30
    2a66:	1a 96       	adiw	r26, 0x0a	; 10
    2a68:	a2 0f       	add	r26, r18
    2a6a:	b3 1f       	adc	r27, r19
    2a6c:	8c 91       	ld	r24, X
    2a6e:	e9 96       	adiw	r28, 0x39	; 57
    2a70:	8f af       	std	Y+63, r24	; 0x3f
    2a72:	e9 97       	sbiw	r28, 0x39	; 57
    2a74:	3b 96       	adiw	r30, 0x0b	; 11
    2a76:	e2 0f       	add	r30, r18
    2a78:	f3 1f       	adc	r31, r19
    2a7a:	80 81       	ld	r24, Z
    2a7c:	ea 96       	adiw	r28, 0x3a	; 58
    2a7e:	8f af       	std	Y+63, r24	; 0x3f
    2a80:	ea 97       	sbiw	r28, 0x3a	; 58
    2a82:	eb 96       	adiw	r28, 0x3b	; 59
    2a84:	1f ae       	std	Y+63, r1	; 0x3f
    2a86:	eb 97       	sbiw	r28, 0x3b	; 59
				Longitude_window[window_counter] = ((atol(Longitude_degrees)*60)+atol(Longitude_minutes_integer))*100000 + atol(Longitude_minutes_decimal);
    2a88:	e0 91 a1 43 	lds	r30, 0x43A1	; 0x8043a1 <window_counter.4955>
    2a8c:	4e 2e       	mov	r4, r30
    2a8e:	51 2c       	mov	r5, r1
    2a90:	ce 01       	movw	r24, r28
    2a92:	85 58       	subi	r24, 0x85	; 133
    2a94:	9f 4f       	sbci	r25, 0xFF	; 255
    2a96:	0e 94 47 28 	call	0x508e	; 0x508e <atol>
    2a9a:	9b 01       	movw	r18, r22
    2a9c:	ac 01       	movw	r20, r24
    2a9e:	ac e3       	ldi	r26, 0x3C	; 60
    2aa0:	b0 e0       	ldi	r27, 0x00	; 0
    2aa2:	0e 94 56 25 	call	0x4aac	; 0x4aac <__muluhisi3>
    2aa6:	6b 01       	movw	r12, r22
    2aa8:	7c 01       	movw	r14, r24
    2aaa:	ce 01       	movw	r24, r28
    2aac:	81 58       	subi	r24, 0x81	; 129
    2aae:	9f 4f       	sbci	r25, 0xFF	; 255
    2ab0:	0e 94 47 28 	call	0x508e	; 0x508e <atol>
    2ab4:	a7 01       	movw	r20, r14
    2ab6:	96 01       	movw	r18, r12
    2ab8:	26 0f       	add	r18, r22
    2aba:	37 1f       	adc	r19, r23
    2abc:	48 1f       	adc	r20, r24
    2abe:	59 1f       	adc	r21, r25
    2ac0:	60 ea       	ldi	r22, 0xA0	; 160
    2ac2:	76 e8       	ldi	r23, 0x86	; 134
    2ac4:	81 e0       	ldi	r24, 0x01	; 1
    2ac6:	90 e0       	ldi	r25, 0x00	; 0
    2ac8:	0e 94 3d 25 	call	0x4a7a	; 0x4a7a <__mulsi3>
    2acc:	6b 01       	movw	r12, r22
    2ace:	7c 01       	movw	r14, r24
    2ad0:	ce 01       	movw	r24, r28
    2ad2:	8b 58       	subi	r24, 0x8B	; 139
    2ad4:	9f 4f       	sbci	r25, 0xFF	; 255
    2ad6:	0e 94 47 28 	call	0x508e	; 0x508e <atol>
    2ada:	dc 01       	movw	r26, r24
    2adc:	cb 01       	movw	r24, r22
    2ade:	8c 0d       	add	r24, r12
    2ae0:	9d 1d       	adc	r25, r13
    2ae2:	ae 1d       	adc	r26, r14
    2ae4:	bf 1d       	adc	r27, r15
    2ae6:	f2 01       	movw	r30, r4
    2ae8:	ee 0f       	add	r30, r30
    2aea:	ff 1f       	adc	r31, r31
    2aec:	ee 0f       	add	r30, r30
    2aee:	ff 1f       	adc	r31, r31
    2af0:	ef 57       	subi	r30, 0x7F	; 127
    2af2:	fc 4b       	sbci	r31, 0xBC	; 188
    2af4:	80 83       	st	Z, r24
    2af6:	91 83       	std	Z+1, r25	; 0x01
    2af8:	a2 83       	std	Z+2, r26	; 0x02
    2afa:	b3 83       	std	Z+3, r27	; 0x03
			}
			if (comma_indices[6] - comma_indices[5] - 1){
    2afc:	2f 80       	ldd	r2, Y+7	; 0x07
    2afe:	42 2c       	mov	r4, r2
    2b00:	02 2c       	mov	r0, r2
    2b02:	00 0c       	add	r0, r0
    2b04:	55 08       	sbc	r5, r5
    2b06:	c2 01       	movw	r24, r4
    2b08:	86 19       	sub	r24, r6
    2b0a:	97 09       	sbc	r25, r7
    2b0c:	01 97       	sbiw	r24, 0x01	; 1
    2b0e:	79 f1       	breq	.+94     	; 0x2b6e <Read_GPS+0x57c>
				Longitude_window[window_counter] *= (GPS_Data[comma_indices[5]+1] == 'W') ? -1 : 1;
    2b10:	80 91 a1 43 	lds	r24, 0x43A1	; 0x8043a1 <window_counter.4955>
    2b14:	a8 2f       	mov	r26, r24
    2b16:	b0 e0       	ldi	r27, 0x00	; 0
    2b18:	fd 01       	movw	r30, r26
    2b1a:	ee 0f       	add	r30, r30
    2b1c:	ff 1f       	adc	r31, r31
    2b1e:	ee 0f       	add	r30, r30
    2b20:	ff 1f       	adc	r31, r31
    2b22:	ef 57       	subi	r30, 0x7F	; 127
    2b24:	fc 4b       	sbci	r31, 0xBC	; 188
    2b26:	60 81       	ld	r22, Z
    2b28:	71 81       	ldd	r23, Z+1	; 0x01
    2b2a:	82 81       	ldd	r24, Z+2	; 0x02
    2b2c:	93 81       	ldd	r25, Z+3	; 0x03
    2b2e:	f3 01       	movw	r30, r6
    2b30:	31 96       	adiw	r30, 0x01	; 1
    2b32:	4e e0       	ldi	r20, 0x0E	; 14
    2b34:	50 e0       	ldi	r21, 0x00	; 0
    2b36:	4c 0f       	add	r20, r28
    2b38:	5d 1f       	adc	r21, r29
    2b3a:	e4 0f       	add	r30, r20
    2b3c:	f5 1f       	adc	r31, r21
    2b3e:	20 81       	ld	r18, Z
    2b40:	27 35       	cpi	r18, 0x57	; 87
    2b42:	21 f4       	brne	.+8      	; 0x2b4c <Read_GPS+0x55a>
    2b44:	2f ef       	ldi	r18, 0xFF	; 255
    2b46:	3f ef       	ldi	r19, 0xFF	; 255
    2b48:	a9 01       	movw	r20, r18
    2b4a:	04 c0       	rjmp	.+8      	; 0x2b54 <Read_GPS+0x562>
    2b4c:	21 e0       	ldi	r18, 0x01	; 1
    2b4e:	30 e0       	ldi	r19, 0x00	; 0
    2b50:	40 e0       	ldi	r20, 0x00	; 0
    2b52:	50 e0       	ldi	r21, 0x00	; 0
    2b54:	fd 01       	movw	r30, r26
    2b56:	ee 0f       	add	r30, r30
    2b58:	ff 1f       	adc	r31, r31
    2b5a:	ee 0f       	add	r30, r30
    2b5c:	ff 1f       	adc	r31, r31
    2b5e:	ef 57       	subi	r30, 0x7F	; 127
    2b60:	fc 4b       	sbci	r31, 0xBC	; 188
    2b62:	0e 94 3d 25 	call	0x4a7a	; 0x4a7a <__mulsi3>
    2b66:	60 83       	st	Z, r22
    2b68:	71 83       	std	Z+1, r23	; 0x01
    2b6a:	82 83       	std	Z+2, r24	; 0x02
    2b6c:	93 83       	std	Z+3, r25	; 0x03
			}
			if (comma_indices[7] - comma_indices[6] - 1){
    2b6e:	38 84       	ldd	r3, Y+8	; 0x08
    2b70:	63 2c       	mov	r6, r3
    2b72:	03 2c       	mov	r0, r3
    2b74:	00 0c       	add	r0, r0
    2b76:	77 08       	sbc	r7, r7
    2b78:	c3 01       	movw	r24, r6
    2b7a:	84 19       	sub	r24, r4
    2b7c:	95 09       	sbc	r25, r5
    2b7e:	01 97       	sbiw	r24, 0x01	; 1
    2b80:	09 f4       	brne	.+2      	; 0x2b84 <Read_GPS+0x592>
    2b82:	4d c0       	rjmp	.+154    	; 0x2c1e <Read_GPS+0x62c>
				unsigned char k = comma_indices[7] - comma_indices[6];
    2b84:	43 2d       	mov	r20, r3
    2b86:	42 19       	sub	r20, r2
				char Speed[6] = {0};
    2b88:	fe 01       	movw	r30, r28
    2b8a:	eb 58       	subi	r30, 0x8B	; 139
    2b8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b8e:	86 e0       	ldi	r24, 0x06	; 6
    2b90:	df 01       	movw	r26, r30
    2b92:	1d 92       	st	X+, r1
    2b94:	8a 95       	dec	r24
    2b96:	e9 f7       	brne	.-6      	; 0x2b92 <Read_GPS+0x5a0>
				char *ptr;
				for (unsigned char index=0;index<k;index++){
    2b98:	20 e0       	ldi	r18, 0x00	; 0
    2b9a:	15 c0       	rjmp	.+42     	; 0x2bc6 <Read_GPS+0x5d4>
					Speed[index] = GPS_Data[comma_indices[6]+1+index];
    2b9c:	82 2f       	mov	r24, r18
    2b9e:	90 e0       	ldi	r25, 0x00	; 0
    2ba0:	f2 01       	movw	r30, r4
    2ba2:	31 96       	adiw	r30, 0x01	; 1
    2ba4:	e8 0f       	add	r30, r24
    2ba6:	f9 1f       	adc	r31, r25
    2ba8:	6e e0       	ldi	r22, 0x0E	; 14
    2baa:	70 e0       	ldi	r23, 0x00	; 0
    2bac:	6c 0f       	add	r22, r28
    2bae:	7d 1f       	adc	r23, r29
    2bb0:	e6 0f       	add	r30, r22
    2bb2:	f7 1f       	adc	r31, r23
    2bb4:	30 81       	ld	r19, Z
    2bb6:	e5 e7       	ldi	r30, 0x75	; 117
    2bb8:	f0 e0       	ldi	r31, 0x00	; 0
    2bba:	ec 0f       	add	r30, r28
    2bbc:	fd 1f       	adc	r31, r29
    2bbe:	e8 0f       	add	r30, r24
    2bc0:	f9 1f       	adc	r31, r25
    2bc2:	30 83       	st	Z, r19
			}
			if (comma_indices[7] - comma_indices[6] - 1){
				unsigned char k = comma_indices[7] - comma_indices[6];
				char Speed[6] = {0};
				char *ptr;
				for (unsigned char index=0;index<k;index++){
    2bc4:	2f 5f       	subi	r18, 0xFF	; 255
    2bc6:	24 17       	cp	r18, r20
    2bc8:	48 f3       	brcs	.-46     	; 0x2b9c <Read_GPS+0x5aa>
					Speed[index] = GPS_Data[comma_indices[6]+1+index];
				}
				Drone->Speed_over_ground = Drone->Speed_over_ground*0.9 + strtod(Speed, &ptr)*0.1;
    2bca:	24 01       	movw	r4, r8
    2bcc:	74 e5       	ldi	r23, 0x54	; 84
    2bce:	47 0e       	add	r4, r23
    2bd0:	51 1c       	adc	r5, r1
    2bd2:	d2 01       	movw	r26, r4
    2bd4:	6d 91       	ld	r22, X+
    2bd6:	7d 91       	ld	r23, X+
    2bd8:	8d 91       	ld	r24, X+
    2bda:	9c 91       	ld	r25, X
    2bdc:	26 e6       	ldi	r18, 0x66	; 102
    2bde:	36 e6       	ldi	r19, 0x66	; 102
    2be0:	46 e6       	ldi	r20, 0x66	; 102
    2be2:	5f e3       	ldi	r21, 0x3F	; 63
    2be4:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__mulsf3>
    2be8:	6b 01       	movw	r12, r22
    2bea:	7c 01       	movw	r14, r24
    2bec:	be 01       	movw	r22, r28
    2bee:	65 58       	subi	r22, 0x85	; 133
    2bf0:	7f 4f       	sbci	r23, 0xFF	; 255
    2bf2:	ce 01       	movw	r24, r28
    2bf4:	8b 58       	subi	r24, 0x8B	; 139
    2bf6:	9f 4f       	sbci	r25, 0xFF	; 255
    2bf8:	0e 94 cd 26 	call	0x4d9a	; 0x4d9a <strtod>
    2bfc:	2d ec       	ldi	r18, 0xCD	; 205
    2bfe:	3c ec       	ldi	r19, 0xCC	; 204
    2c00:	4c ec       	ldi	r20, 0xCC	; 204
    2c02:	5d e3       	ldi	r21, 0x3D	; 61
    2c04:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__mulsf3>
    2c08:	9b 01       	movw	r18, r22
    2c0a:	ac 01       	movw	r20, r24
    2c0c:	c7 01       	movw	r24, r14
    2c0e:	b6 01       	movw	r22, r12
    2c10:	0e 94 8e 1c 	call	0x391c	; 0x391c <__addsf3>
    2c14:	f2 01       	movw	r30, r4
    2c16:	60 83       	st	Z, r22
    2c18:	71 83       	std	Z+1, r23	; 0x01
    2c1a:	82 83       	std	Z+2, r24	; 0x02
    2c1c:	93 83       	std	Z+3, r25	; 0x03
			}
			if (comma_indices[8] - comma_indices[7] - 1){
    2c1e:	39 85       	ldd	r19, Y+9	; 0x09
    2c20:	83 2f       	mov	r24, r19
    2c22:	03 2e       	mov	r0, r19
    2c24:	00 0c       	add	r0, r0
    2c26:	99 0b       	sbc	r25, r25
    2c28:	86 19       	sub	r24, r6
    2c2a:	97 09       	sbc	r25, r7
    2c2c:	01 97       	sbiw	r24, 0x01	; 1
    2c2e:	49 f1       	breq	.+82     	; 0x2c82 <Read_GPS+0x690>
				unsigned char k = comma_indices[8] - comma_indices[7];
    2c30:	33 19       	sub	r19, r3
				char Course[6];
				char *ptr;
				for (unsigned char index=0;index<k;index++){
    2c32:	20 e0       	ldi	r18, 0x00	; 0
    2c34:	15 c0       	rjmp	.+42     	; 0x2c60 <Read_GPS+0x66e>
					Course[index] = GPS_Data[comma_indices[7]+1+index];
    2c36:	82 2f       	mov	r24, r18
    2c38:	90 e0       	ldi	r25, 0x00	; 0
    2c3a:	f3 01       	movw	r30, r6
    2c3c:	31 96       	adiw	r30, 0x01	; 1
    2c3e:	e8 0f       	add	r30, r24
    2c40:	f9 1f       	adc	r31, r25
    2c42:	4e e0       	ldi	r20, 0x0E	; 14
    2c44:	50 e0       	ldi	r21, 0x00	; 0
    2c46:	4c 0f       	add	r20, r28
    2c48:	5d 1f       	adc	r21, r29
    2c4a:	e4 0f       	add	r30, r20
    2c4c:	f5 1f       	adc	r31, r21
    2c4e:	40 81       	ld	r20, Z
    2c50:	e5 e7       	ldi	r30, 0x75	; 117
    2c52:	f0 e0       	ldi	r31, 0x00	; 0
    2c54:	ec 0f       	add	r30, r28
    2c56:	fd 1f       	adc	r31, r29
    2c58:	e8 0f       	add	r30, r24
    2c5a:	f9 1f       	adc	r31, r25
    2c5c:	40 83       	st	Z, r20
			}
			if (comma_indices[8] - comma_indices[7] - 1){
				unsigned char k = comma_indices[8] - comma_indices[7];
				char Course[6];
				char *ptr;
				for (unsigned char index=0;index<k;index++){
    2c5e:	2f 5f       	subi	r18, 0xFF	; 255
    2c60:	23 17       	cp	r18, r19
    2c62:	48 f3       	brcs	.-46     	; 0x2c36 <Read_GPS+0x644>
					Course[index] = GPS_Data[comma_indices[7]+1+index];
				}
				Drone->Course_over_ground = strtod(Course, &ptr);
    2c64:	be 01       	movw	r22, r28
    2c66:	65 58       	subi	r22, 0x85	; 133
    2c68:	7f 4f       	sbci	r23, 0xFF	; 255
    2c6a:	ce 01       	movw	r24, r28
    2c6c:	8b 58       	subi	r24, 0x8B	; 139
    2c6e:	9f 4f       	sbci	r25, 0xFF	; 255
    2c70:	0e 94 cd 26 	call	0x4d9a	; 0x4d9a <strtod>
    2c74:	f4 01       	movw	r30, r8
    2c76:	e8 5a       	subi	r30, 0xA8	; 168
    2c78:	ff 4f       	sbci	r31, 0xFF	; 255
    2c7a:	60 83       	st	Z, r22
    2c7c:	71 83       	std	Z+1, r23	; 0x01
    2c7e:	82 83       	std	Z+2, r24	; 0x02
    2c80:	93 83       	std	Z+3, r25	; 0x03
			}
			
			if (++window_counter >= GPS_WINDOW_SIZE){
    2c82:	80 91 a1 43 	lds	r24, 0x43A1	; 0x8043a1 <window_counter.4955>
    2c86:	8f 5f       	subi	r24, 0xFF	; 255
    2c88:	80 93 a1 43 	sts	0x43A1, r24	; 0x8043a1 <window_counter.4955>
    2c8c:	84 30       	cpi	r24, 0x04	; 4
    2c8e:	08 f4       	brcc	.+2      	; 0x2c92 <Read_GPS+0x6a0>
    2c90:	4b c1       	rjmp	.+662    	; 0x2f28 <Read_GPS+0x936>
				window_counter = 0;
    2c92:	10 92 a1 43 	sts	0x43A1, r1	; 0x8043a1 <window_counter.4955>
				signed long long Latitude_oversampled = 0;
				signed long long Longitude_oversampled = 0;
				for (unsigned char k=0;k<GPS_WINDOW_SIZE;k++){
    2c96:	61 2c       	mov	r6, r1
			}
			
			if (++window_counter >= GPS_WINDOW_SIZE){
				window_counter = 0;
				signed long long Latitude_oversampled = 0;
				signed long long Longitude_oversampled = 0;
    2c98:	cb 57       	subi	r28, 0x7B	; 123
    2c9a:	df 4f       	sbci	r29, 0xFF	; 255
    2c9c:	18 82       	st	Y, r1
    2c9e:	c5 58       	subi	r28, 0x85	; 133
    2ca0:	d0 40       	sbci	r29, 0x00	; 0
    2ca2:	ca 57       	subi	r28, 0x7A	; 122
    2ca4:	df 4f       	sbci	r29, 0xFF	; 255
    2ca6:	18 82       	st	Y, r1
    2ca8:	c6 58       	subi	r28, 0x86	; 134
    2caa:	d0 40       	sbci	r29, 0x00	; 0
    2cac:	c9 57       	subi	r28, 0x79	; 121
    2cae:	df 4f       	sbci	r29, 0xFF	; 255
    2cb0:	18 82       	st	Y, r1
    2cb2:	c7 58       	subi	r28, 0x87	; 135
    2cb4:	d0 40       	sbci	r29, 0x00	; 0
    2cb6:	c8 57       	subi	r28, 0x78	; 120
    2cb8:	df 4f       	sbci	r29, 0xFF	; 255
    2cba:	18 82       	st	Y, r1
    2cbc:	c8 58       	subi	r28, 0x88	; 136
    2cbe:	d0 40       	sbci	r29, 0x00	; 0
    2cc0:	c7 57       	subi	r28, 0x77	; 119
    2cc2:	df 4f       	sbci	r29, 0xFF	; 255
    2cc4:	18 82       	st	Y, r1
    2cc6:	c9 58       	subi	r28, 0x89	; 137
    2cc8:	d0 40       	sbci	r29, 0x00	; 0
    2cca:	c6 57       	subi	r28, 0x76	; 118
    2ccc:	df 4f       	sbci	r29, 0xFF	; 255
    2cce:	18 82       	st	Y, r1
    2cd0:	ca 58       	subi	r28, 0x8A	; 138
    2cd2:	d0 40       	sbci	r29, 0x00	; 0
    2cd4:	41 2c       	mov	r4, r1
    2cd6:	51 2c       	mov	r5, r1
				Drone->Course_over_ground = strtod(Course, &ptr);
			}
			
			if (++window_counter >= GPS_WINDOW_SIZE){
				window_counter = 0;
				signed long long Latitude_oversampled = 0;
    2cd8:	71 2c       	mov	r7, r1
    2cda:	b0 e0       	ldi	r27, 0x00	; 0
    2cdc:	a0 e0       	ldi	r26, 0x00	; 0
    2cde:	ce 57       	subi	r28, 0x7E	; 126
    2ce0:	df 4f       	sbci	r29, 0xFF	; 255
    2ce2:	18 82       	st	Y, r1
    2ce4:	c2 58       	subi	r28, 0x82	; 130
    2ce6:	d0 40       	sbci	r29, 0x00	; 0
    2ce8:	cd 57       	subi	r28, 0x7D	; 125
    2cea:	df 4f       	sbci	r29, 0xFF	; 255
    2cec:	18 82       	st	Y, r1
    2cee:	c3 58       	subi	r28, 0x83	; 131
    2cf0:	d0 40       	sbci	r29, 0x00	; 0
    2cf2:	cc 57       	subi	r28, 0x7C	; 124
    2cf4:	df 4f       	sbci	r29, 0xFF	; 255
    2cf6:	18 82       	st	Y, r1
    2cf8:	c4 58       	subi	r28, 0x84	; 132
    2cfa:	d0 40       	sbci	r29, 0x00	; 0
    2cfc:	21 2c       	mov	r2, r1
    2cfe:	31 2c       	mov	r3, r1
				signed long long Longitude_oversampled = 0;
				for (unsigned char k=0;k<GPS_WINDOW_SIZE;k++){
    2d00:	aa c0       	rjmp	.+340    	; 0x2e56 <Read_GPS+0x864>
					Latitude_oversampled += Latitude_window[k];
    2d02:	e6 2d       	mov	r30, r6
    2d04:	f0 e0       	ldi	r31, 0x00	; 0
    2d06:	bf 01       	movw	r22, r30
    2d08:	66 0f       	add	r22, r22
    2d0a:	77 1f       	adc	r23, r23
    2d0c:	66 0f       	add	r22, r22
    2d0e:	77 1f       	adc	r23, r23
    2d10:	c5 57       	subi	r28, 0x75	; 117
    2d12:	df 4f       	sbci	r29, 0xFF	; 255
    2d14:	68 83       	st	Y, r22
    2d16:	79 83       	std	Y+1, r23	; 0x01
    2d18:	cb 58       	subi	r28, 0x8B	; 139
    2d1a:	d0 40       	sbci	r29, 0x00	; 0
    2d1c:	cb 01       	movw	r24, r22
    2d1e:	8f 56       	subi	r24, 0x6F	; 111
    2d20:	9c 4b       	sbci	r25, 0xBC	; 188
    2d22:	fc 01       	movw	r30, r24
    2d24:	60 81       	ld	r22, Z
    2d26:	71 81       	ldd	r23, Z+1	; 0x01
    2d28:	82 81       	ldd	r24, Z+2	; 0x02
    2d2a:	93 81       	ldd	r25, Z+3	; 0x03
    2d2c:	6b 01       	movw	r12, r22
    2d2e:	7c 01       	movw	r14, r24
    2d30:	ff 0c       	add	r15, r15
    2d32:	cc 08       	sbc	r12, r12
    2d34:	dc 2c       	mov	r13, r12
    2d36:	76 01       	movw	r14, r12
    2d38:	26 2f       	mov	r18, r22
    2d3a:	37 2f       	mov	r19, r23
    2d3c:	48 2f       	mov	r20, r24
    2d3e:	59 2f       	mov	r21, r25
    2d40:	6c 2d       	mov	r22, r12
    2d42:	7c 2d       	mov	r23, r12
    2d44:	8c 2d       	mov	r24, r12
    2d46:	9c 2d       	mov	r25, r12
    2d48:	a7 2c       	mov	r10, r7
    2d4a:	bb 2e       	mov	r11, r27
    2d4c:	ca 2e       	mov	r12, r26
    2d4e:	ce 57       	subi	r28, 0x7E	; 126
    2d50:	df 4f       	sbci	r29, 0xFF	; 255
    2d52:	d8 80       	ld	r13, Y
    2d54:	c2 58       	subi	r28, 0x82	; 130
    2d56:	d0 40       	sbci	r29, 0x00	; 0
    2d58:	cd 57       	subi	r28, 0x7D	; 125
    2d5a:	df 4f       	sbci	r29, 0xFF	; 255
    2d5c:	e8 80       	ld	r14, Y
    2d5e:	c3 58       	subi	r28, 0x83	; 131
    2d60:	d0 40       	sbci	r29, 0x00	; 0
    2d62:	cc 57       	subi	r28, 0x7C	; 124
    2d64:	df 4f       	sbci	r29, 0xFF	; 255
    2d66:	f8 80       	ld	r15, Y
    2d68:	c4 58       	subi	r28, 0x84	; 132
    2d6a:	d0 40       	sbci	r29, 0x00	; 0
    2d6c:	02 2d       	mov	r16, r2
    2d6e:	13 2d       	mov	r17, r3
    2d70:	0e 94 7f 25 	call	0x4afe	; 0x4afe <__adddi3>
    2d74:	72 2e       	mov	r7, r18
    2d76:	b3 2f       	mov	r27, r19
    2d78:	a4 2f       	mov	r26, r20
    2d7a:	ce 57       	subi	r28, 0x7E	; 126
    2d7c:	df 4f       	sbci	r29, 0xFF	; 255
    2d7e:	58 83       	st	Y, r21
    2d80:	c2 58       	subi	r28, 0x82	; 130
    2d82:	d0 40       	sbci	r29, 0x00	; 0
    2d84:	cd 57       	subi	r28, 0x7D	; 125
    2d86:	df 4f       	sbci	r29, 0xFF	; 255
    2d88:	68 83       	st	Y, r22
    2d8a:	c3 58       	subi	r28, 0x83	; 131
    2d8c:	d0 40       	sbci	r29, 0x00	; 0
    2d8e:	cc 57       	subi	r28, 0x7C	; 124
    2d90:	df 4f       	sbci	r29, 0xFF	; 255
    2d92:	78 83       	st	Y, r23
    2d94:	c4 58       	subi	r28, 0x84	; 132
    2d96:	d0 40       	sbci	r29, 0x00	; 0
    2d98:	28 2e       	mov	r2, r24
    2d9a:	39 2e       	mov	r3, r25
					Longitude_oversampled += Longitude_window[k];
    2d9c:	c5 57       	subi	r28, 0x75	; 117
    2d9e:	df 4f       	sbci	r29, 0xFF	; 255
    2da0:	e8 81       	ld	r30, Y
    2da2:	f9 81       	ldd	r31, Y+1	; 0x01
    2da4:	cb 58       	subi	r28, 0x8B	; 139
    2da6:	d0 40       	sbci	r29, 0x00	; 0
    2da8:	ef 57       	subi	r30, 0x7F	; 127
    2daa:	fc 4b       	sbci	r31, 0xBC	; 188
    2dac:	60 81       	ld	r22, Z
    2dae:	71 81       	ldd	r23, Z+1	; 0x01
    2db0:	82 81       	ldd	r24, Z+2	; 0x02
    2db2:	93 81       	ldd	r25, Z+3	; 0x03
    2db4:	6b 01       	movw	r12, r22
    2db6:	7c 01       	movw	r14, r24
    2db8:	ff 0c       	add	r15, r15
    2dba:	cc 08       	sbc	r12, r12
    2dbc:	dc 2c       	mov	r13, r12
    2dbe:	76 01       	movw	r14, r12
    2dc0:	26 2f       	mov	r18, r22
    2dc2:	37 2f       	mov	r19, r23
    2dc4:	48 2f       	mov	r20, r24
    2dc6:	59 2f       	mov	r21, r25
    2dc8:	6c 2d       	mov	r22, r12
    2dca:	7c 2d       	mov	r23, r12
    2dcc:	8c 2d       	mov	r24, r12
    2dce:	9c 2d       	mov	r25, r12
    2dd0:	cb 57       	subi	r28, 0x7B	; 123
    2dd2:	df 4f       	sbci	r29, 0xFF	; 255
    2dd4:	a8 80       	ld	r10, Y
    2dd6:	c5 58       	subi	r28, 0x85	; 133
    2dd8:	d0 40       	sbci	r29, 0x00	; 0
    2dda:	ca 57       	subi	r28, 0x7A	; 122
    2ddc:	df 4f       	sbci	r29, 0xFF	; 255
    2dde:	b8 80       	ld	r11, Y
    2de0:	c6 58       	subi	r28, 0x86	; 134
    2de2:	d0 40       	sbci	r29, 0x00	; 0
    2de4:	c9 57       	subi	r28, 0x79	; 121
    2de6:	df 4f       	sbci	r29, 0xFF	; 255
    2de8:	c8 80       	ld	r12, Y
    2dea:	c7 58       	subi	r28, 0x87	; 135
    2dec:	d0 40       	sbci	r29, 0x00	; 0
    2dee:	c8 57       	subi	r28, 0x78	; 120
    2df0:	df 4f       	sbci	r29, 0xFF	; 255
    2df2:	d8 80       	ld	r13, Y
    2df4:	c8 58       	subi	r28, 0x88	; 136
    2df6:	d0 40       	sbci	r29, 0x00	; 0
    2df8:	c7 57       	subi	r28, 0x77	; 119
    2dfa:	df 4f       	sbci	r29, 0xFF	; 255
    2dfc:	e8 80       	ld	r14, Y
    2dfe:	c9 58       	subi	r28, 0x89	; 137
    2e00:	d0 40       	sbci	r29, 0x00	; 0
    2e02:	c6 57       	subi	r28, 0x76	; 118
    2e04:	df 4f       	sbci	r29, 0xFF	; 255
    2e06:	f8 80       	ld	r15, Y
    2e08:	ca 58       	subi	r28, 0x8A	; 138
    2e0a:	d0 40       	sbci	r29, 0x00	; 0
    2e0c:	04 2d       	mov	r16, r4
    2e0e:	15 2d       	mov	r17, r5
    2e10:	0e 94 7f 25 	call	0x4afe	; 0x4afe <__adddi3>
    2e14:	cb 57       	subi	r28, 0x7B	; 123
    2e16:	df 4f       	sbci	r29, 0xFF	; 255
    2e18:	28 83       	st	Y, r18
    2e1a:	c5 58       	subi	r28, 0x85	; 133
    2e1c:	d0 40       	sbci	r29, 0x00	; 0
    2e1e:	ca 57       	subi	r28, 0x7A	; 122
    2e20:	df 4f       	sbci	r29, 0xFF	; 255
    2e22:	38 83       	st	Y, r19
    2e24:	c6 58       	subi	r28, 0x86	; 134
    2e26:	d0 40       	sbci	r29, 0x00	; 0
    2e28:	c9 57       	subi	r28, 0x79	; 121
    2e2a:	df 4f       	sbci	r29, 0xFF	; 255
    2e2c:	48 83       	st	Y, r20
    2e2e:	c7 58       	subi	r28, 0x87	; 135
    2e30:	d0 40       	sbci	r29, 0x00	; 0
    2e32:	c8 57       	subi	r28, 0x78	; 120
    2e34:	df 4f       	sbci	r29, 0xFF	; 255
    2e36:	58 83       	st	Y, r21
    2e38:	c8 58       	subi	r28, 0x88	; 136
    2e3a:	d0 40       	sbci	r29, 0x00	; 0
    2e3c:	c7 57       	subi	r28, 0x77	; 119
    2e3e:	df 4f       	sbci	r29, 0xFF	; 255
    2e40:	68 83       	st	Y, r22
    2e42:	c9 58       	subi	r28, 0x89	; 137
    2e44:	d0 40       	sbci	r29, 0x00	; 0
    2e46:	c6 57       	subi	r28, 0x76	; 118
    2e48:	df 4f       	sbci	r29, 0xFF	; 255
    2e4a:	78 83       	st	Y, r23
    2e4c:	ca 58       	subi	r28, 0x8A	; 138
    2e4e:	d0 40       	sbci	r29, 0x00	; 0
    2e50:	48 2e       	mov	r4, r24
    2e52:	59 2e       	mov	r5, r25
			
			if (++window_counter >= GPS_WINDOW_SIZE){
				window_counter = 0;
				signed long long Latitude_oversampled = 0;
				signed long long Longitude_oversampled = 0;
				for (unsigned char k=0;k<GPS_WINDOW_SIZE;k++){
    2e54:	63 94       	inc	r6
    2e56:	f3 e0       	ldi	r31, 0x03	; 3
    2e58:	f6 15       	cp	r31, r6
    2e5a:	08 f0       	brcs	.+2      	; 0x2e5e <Read_GPS+0x86c>
    2e5c:	52 cf       	rjmp	.-348    	; 0x2d02 <Read_GPS+0x710>
					Latitude_oversampled += Latitude_window[k];
					Longitude_oversampled += Longitude_window[k];
				}
				Latitude_oversampled >>= 2;
    2e5e:	27 2d       	mov	r18, r7
    2e60:	3b 2f       	mov	r19, r27
    2e62:	4a 2f       	mov	r20, r26
    2e64:	ce 57       	subi	r28, 0x7E	; 126
    2e66:	df 4f       	sbci	r29, 0xFF	; 255
    2e68:	58 81       	ld	r21, Y
    2e6a:	c2 58       	subi	r28, 0x82	; 130
    2e6c:	d0 40       	sbci	r29, 0x00	; 0
    2e6e:	cd 57       	subi	r28, 0x7D	; 125
    2e70:	df 4f       	sbci	r29, 0xFF	; 255
    2e72:	68 81       	ld	r22, Y
    2e74:	c3 58       	subi	r28, 0x83	; 131
    2e76:	d0 40       	sbci	r29, 0x00	; 0
    2e78:	cc 57       	subi	r28, 0x7C	; 124
    2e7a:	df 4f       	sbci	r29, 0xFF	; 255
    2e7c:	78 81       	ld	r23, Y
    2e7e:	c4 58       	subi	r28, 0x84	; 132
    2e80:	d0 40       	sbci	r29, 0x00	; 0
    2e82:	82 2d       	mov	r24, r2
    2e84:	93 2d       	mov	r25, r3
    2e86:	02 e0       	ldi	r16, 0x02	; 2
    2e88:	0e 94 61 25 	call	0x4ac2	; 0x4ac2 <__ashrdi3>
    2e8c:	62 2e       	mov	r6, r18
    2e8e:	73 2e       	mov	r7, r19
    2e90:	b4 2f       	mov	r27, r20
    2e92:	a5 2f       	mov	r26, r21
				Longitude_oversampled >>= 2;
    2e94:	cb 57       	subi	r28, 0x7B	; 123
    2e96:	df 4f       	sbci	r29, 0xFF	; 255
    2e98:	28 81       	ld	r18, Y
    2e9a:	c5 58       	subi	r28, 0x85	; 133
    2e9c:	d0 40       	sbci	r29, 0x00	; 0
    2e9e:	ca 57       	subi	r28, 0x7A	; 122
    2ea0:	df 4f       	sbci	r29, 0xFF	; 255
    2ea2:	38 81       	ld	r19, Y
    2ea4:	c6 58       	subi	r28, 0x86	; 134
    2ea6:	d0 40       	sbci	r29, 0x00	; 0
    2ea8:	c9 57       	subi	r28, 0x79	; 121
    2eaa:	df 4f       	sbci	r29, 0xFF	; 255
    2eac:	48 81       	ld	r20, Y
    2eae:	c7 58       	subi	r28, 0x87	; 135
    2eb0:	d0 40       	sbci	r29, 0x00	; 0
    2eb2:	c8 57       	subi	r28, 0x78	; 120
    2eb4:	df 4f       	sbci	r29, 0xFF	; 255
    2eb6:	58 81       	ld	r21, Y
    2eb8:	c8 58       	subi	r28, 0x88	; 136
    2eba:	d0 40       	sbci	r29, 0x00	; 0
    2ebc:	c7 57       	subi	r28, 0x77	; 119
    2ebe:	df 4f       	sbci	r29, 0xFF	; 255
    2ec0:	68 81       	ld	r22, Y
    2ec2:	c9 58       	subi	r28, 0x89	; 137
    2ec4:	d0 40       	sbci	r29, 0x00	; 0
    2ec6:	c6 57       	subi	r28, 0x76	; 118
    2ec8:	df 4f       	sbci	r29, 0xFF	; 255
    2eca:	78 81       	ld	r23, Y
    2ecc:	ca 58       	subi	r28, 0x8A	; 138
    2ece:	d0 40       	sbci	r29, 0x00	; 0
    2ed0:	84 2d       	mov	r24, r4
    2ed2:	95 2d       	mov	r25, r5
    2ed4:	0e 94 61 25 	call	0x4ac2	; 0x4ac2 <__ashrdi3>
				Drone->Longitude = Longitude_oversampled;
    2ed8:	f4 01       	movw	r30, r8
    2eda:	e0 5c       	subi	r30, 0xC0	; 192
    2edc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ede:	20 83       	st	Z, r18
    2ee0:	31 83       	std	Z+1, r19	; 0x01
    2ee2:	42 83       	std	Z+2, r20	; 0x02
    2ee4:	53 83       	std	Z+3, r21	; 0x03
				Drone->Latitude = Latitude_oversampled;
    2ee6:	66 2d       	mov	r22, r6
    2ee8:	77 2d       	mov	r23, r7
    2eea:	8b 2f       	mov	r24, r27
    2eec:	9a 2f       	mov	r25, r26
    2eee:	34 96       	adiw	r30, 0x04	; 4
    2ef0:	60 82       	st	Z, r6
    2ef2:	71 82       	std	Z+1, r7	; 0x01
    2ef4:	b2 83       	std	Z+2, r27	; 0x02
    2ef6:	a3 83       	std	Z+3, r26	; 0x03
				unsigned char NED_status = LLA_to_NED(Latitude_oversampled, Longitude_oversampled, Drone->pressure_altitude, Drone->Position_NED);
    2ef8:	64 01       	movw	r12, r8
    2efa:	a4 e3       	ldi	r26, 0x34	; 52
    2efc:	ca 0e       	add	r12, r26
    2efe:	d1 1c       	adc	r13, r1
    2f00:	f4 01       	movw	r30, r8
    2f02:	e0 a8       	ldd	r14, Z+48	; 0x30
    2f04:	f1 a8       	ldd	r15, Z+49	; 0x31
    2f06:	02 a9       	ldd	r16, Z+50	; 0x32
    2f08:	13 a9       	ldd	r17, Z+51	; 0x33
    2f0a:	0e 94 2f 11 	call	0x225e	; 0x225e <LLA_to_NED>
				return NED_status;
    2f0e:	0d c0       	rjmp	.+26     	; 0x2f2a <Read_GPS+0x938>
		else if ((g_GPS_Data[i] == 44)&&(start_index != -1)){comma_indices[j++] = i;}
		if (start_index != -1){GPS_Data[i] = g_GPS_Data[i];}
		i++;
	}
	g_GPS_Data_Index = 0;
	if ((start_index == -1)||(end_index == -1)){return 0;}
    2f10:	80 e0       	ldi	r24, 0x00	; 0
    2f12:	0b c0       	rjmp	.+22     	; 0x2f2a <Read_GPS+0x938>
    2f14:	80 e0       	ldi	r24, 0x00	; 0
    2f16:	09 c0       	rjmp	.+18     	; 0x2f2a <Read_GPS+0x938>
				unsigned char NED_status = LLA_to_NED(Latitude_oversampled, Longitude_oversampled, Drone->pressure_altitude, Drone->Position_NED);
				return NED_status;
			}
		}
	}
	return 0;
    2f18:	80 e0       	ldi	r24, 0x00	; 0
    2f1a:	07 c0       	rjmp	.+14     	; 0x2f2a <Read_GPS+0x938>
    2f1c:	80 e0       	ldi	r24, 0x00	; 0
    2f1e:	05 c0       	rjmp	.+10     	; 0x2f2a <Read_GPS+0x938>
    2f20:	80 e0       	ldi	r24, 0x00	; 0
    2f22:	03 c0       	rjmp	.+6      	; 0x2f2a <Read_GPS+0x938>
    2f24:	80 e0       	ldi	r24, 0x00	; 0
    2f26:	01 c0       	rjmp	.+2      	; 0x2f2a <Read_GPS+0x938>
    2f28:	80 e0       	ldi	r24, 0x00	; 0
}
    2f2a:	c4 57       	subi	r28, 0x74	; 116
    2f2c:	df 4f       	sbci	r29, 0xFF	; 255
    2f2e:	cd bf       	out	0x3d, r28	; 61
    2f30:	de bf       	out	0x3e, r29	; 62
    2f32:	df 91       	pop	r29
    2f34:	cf 91       	pop	r28
    2f36:	1f 91       	pop	r17
    2f38:	0f 91       	pop	r16
    2f3a:	ff 90       	pop	r15
    2f3c:	ef 90       	pop	r14
    2f3e:	df 90       	pop	r13
    2f40:	cf 90       	pop	r12
    2f42:	bf 90       	pop	r11
    2f44:	af 90       	pop	r10
    2f46:	9f 90       	pop	r9
    2f48:	8f 90       	pop	r8
    2f4a:	7f 90       	pop	r7
    2f4c:	6f 90       	pop	r6
    2f4e:	5f 90       	pop	r5
    2f50:	4f 90       	pop	r4
    2f52:	3f 90       	pop	r3
    2f54:	2f 90       	pop	r2
    2f56:	08 95       	ret

00002f58 <USART_Transmit>:
	Position_NED[2] = -Height;
	
	return 1;
}

void USART_Transmit(char* Message, unsigned char length){
    2f58:	fc 01       	movw	r30, r24
	for (unsigned char i=0;i<length;i++){
    2f5a:	90 e0       	ldi	r25, 0x00	; 0
    2f5c:	0f c0       	rjmp	.+30     	; 0x2f7c <USART_Transmit+0x24>
		USART3_TXDATAL = *Message++;
    2f5e:	9f 01       	movw	r18, r30
    2f60:	2f 5f       	subi	r18, 0xFF	; 255
    2f62:	3f 4f       	sbci	r19, 0xFF	; 255
    2f64:	80 81       	ld	r24, Z
    2f66:	80 93 62 08 	sts	0x0862, r24	; 0x800862 <__TEXT_REGION_LENGTH__+0x7e0862>
		while(!(USART3_STATUS & USART_TXCIF_bm));
    2f6a:	80 91 64 08 	lds	r24, 0x0864	; 0x800864 <__TEXT_REGION_LENGTH__+0x7e0864>
    2f6e:	86 ff       	sbrs	r24, 6
    2f70:	fc cf       	rjmp	.-8      	; 0x2f6a <USART_Transmit+0x12>
		USART3_STATUS = USART_TXCIF_bm;
    2f72:	80 e4       	ldi	r24, 0x40	; 64
    2f74:	80 93 64 08 	sts	0x0864, r24	; 0x800864 <__TEXT_REGION_LENGTH__+0x7e0864>
	
	return 1;
}

void USART_Transmit(char* Message, unsigned char length){
	for (unsigned char i=0;i<length;i++){
    2f78:	9f 5f       	subi	r25, 0xFF	; 255
		USART3_TXDATAL = *Message++;
    2f7a:	f9 01       	movw	r30, r18
	
	return 1;
}

void USART_Transmit(char* Message, unsigned char length){
	for (unsigned char i=0;i<length;i++){
    2f7c:	96 17       	cp	r25, r22
    2f7e:	78 f3       	brcs	.-34     	; 0x2f5e <USART_Transmit+0x6>
		USART3_TXDATAL = *Message++;
		while(!(USART3_STATUS & USART_TXCIF_bm));
		USART3_STATUS = USART_TXCIF_bm;
	}
	Delay(1000);
    2f80:	28 ee       	ldi	r18, 0xE8	; 232
    2f82:	33 e0       	ldi	r19, 0x03	; 3
    2f84:	40 e0       	ldi	r20, 0x00	; 0
    2f86:	50 e0       	ldi	r21, 0x00	; 0
    2f88:	60 e0       	ldi	r22, 0x00	; 0
    2f8a:	70 e0       	ldi	r23, 0x00	; 0
    2f8c:	80 e0       	ldi	r24, 0x00	; 0
    2f8e:	90 e0       	ldi	r25, 0x00	; 0
    2f90:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <Delay>
    2f94:	08 95       	ret

00002f96 <Setup_GPS>:
// GPS CODE
volatile char g_GPS_Data[256] = {0};
volatile unsigned char g_GPS_Data_Index = 0;
volatile unsigned char g_GPS_Read_Flag = 0;

unsigned char Setup_GPS(){
    2f96:	cf 93       	push	r28
    2f98:	df 93       	push	r29
    2f9a:	cd b7       	in	r28, 0x3d	; 61
    2f9c:	de b7       	in	r29, 0x3e	; 62
    2f9e:	c2 58       	subi	r28, 0x82	; 130
    2fa0:	d1 40       	sbci	r29, 0x01	; 1
    2fa2:	cd bf       	out	0x3d, r28	; 61
    2fa4:	de bf       	out	0x3e, r29	; 62
	USART3_BAUD = 2500; // Corresponds to 38400 baud rate
    2fa6:	84 ec       	ldi	r24, 0xC4	; 196
    2fa8:	99 e0       	ldi	r25, 0x09	; 9
    2faa:	80 93 68 08 	sts	0x0868, r24	; 0x800868 <__TEXT_REGION_LENGTH__+0x7e0868>
    2fae:	90 93 69 08 	sts	0x0869, r25	; 0x800869 <__TEXT_REGION_LENGTH__+0x7e0869>
	PORTB_DIR |= (1<<0);
    2fb2:	e0 e2       	ldi	r30, 0x20	; 32
    2fb4:	f4 e0       	ldi	r31, 0x04	; 4
    2fb6:	80 81       	ld	r24, Z
    2fb8:	81 60       	ori	r24, 0x01	; 1
    2fba:	80 83       	st	Z, r24
	USART3_CTRLA |= USART_RXCIE_bm;
    2fbc:	e5 e6       	ldi	r30, 0x65	; 101
    2fbe:	f8 e0       	ldi	r31, 0x08	; 8
    2fc0:	80 81       	ld	r24, Z
    2fc2:	80 68       	ori	r24, 0x80	; 128
    2fc4:	80 83       	st	Z, r24
	USART3_CTRLB |= USART_RXEN_bm | USART_TXEN_bm;
    2fc6:	e6 e6       	ldi	r30, 0x66	; 102
    2fc8:	f8 e0       	ldi	r31, 0x08	; 8
    2fca:	80 81       	ld	r24, Z
    2fcc:	80 6c       	ori	r24, 0xC0	; 192
    2fce:	80 83       	st	Z, r24
	//USART3_DBGCTRL |= 1;
	Delay(10);
    2fd0:	2a e0       	ldi	r18, 0x0A	; 10
    2fd2:	30 e0       	ldi	r19, 0x00	; 0
    2fd4:	40 e0       	ldi	r20, 0x00	; 0
    2fd6:	50 e0       	ldi	r21, 0x00	; 0
    2fd8:	60 e0       	ldi	r22, 0x00	; 0
    2fda:	70 e0       	ldi	r23, 0x00	; 0
    2fdc:	80 e0       	ldi	r24, 0x00	; 0
    2fde:	90 e0       	ldi	r25, 0x00	; 0
    2fe0:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <Delay>
	if (USART3_RXDATAH & USART_FERR_bm){
    2fe4:	80 91 61 08 	lds	r24, 0x0861	; 0x800861 <__TEXT_REGION_LENGTH__+0x7e0861>
    2fe8:	82 ff       	sbrs	r24, 2
    2fea:	0a c0       	rjmp	.+20     	; 0x3000 <Setup_GPS+0x6a>
		USART3_BAUD = 208; // Corresponds to 460800 baud rate
    2fec:	80 ed       	ldi	r24, 0xD0	; 208
    2fee:	90 e0       	ldi	r25, 0x00	; 0
    2ff0:	80 93 68 08 	sts	0x0868, r24	; 0x800868 <__TEXT_REGION_LENGTH__+0x7e0868>
    2ff4:	90 93 69 08 	sts	0x0869, r25	; 0x800869 <__TEXT_REGION_LENGTH__+0x7e0869>
		USART3_RXDATAH = USART_FERR_bm;
    2ff8:	84 e0       	ldi	r24, 0x04	; 4
    2ffa:	80 93 61 08 	sts	0x0861, r24	; 0x800861 <__TEXT_REGION_LENGTH__+0x7e0861>
    2ffe:	16 c0       	rjmp	.+44     	; 0x302c <Setup_GPS+0x96>
	}
	else{
		char Increase_Baud[] = {0xB5,0x62,0x06,0x00,0x14,0x00,0x01,0x00,0x00,0x00,0xD0,0x08,0x00,0x00,0x00,0x08,0x07,0x00,0x07,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x0C,0xBC};
    3000:	8c e1       	ldi	r24, 0x1C	; 28
    3002:	e4 e5       	ldi	r30, 0x54	; 84
    3004:	f0 e4       	ldi	r31, 0x40	; 64
    3006:	de 01       	movw	r26, r28
    3008:	a9 59       	subi	r26, 0x99	; 153
    300a:	be 4f       	sbci	r27, 0xFE	; 254
    300c:	01 90       	ld	r0, Z+
    300e:	0d 92       	st	X+, r0
    3010:	8a 95       	dec	r24
    3012:	e1 f7       	brne	.-8      	; 0x300c <Setup_GPS+0x76>
		USART_Transmit(Increase_Baud, sizeof(Increase_Baud));
    3014:	6c e1       	ldi	r22, 0x1C	; 28
    3016:	ce 01       	movw	r24, r28
    3018:	89 59       	subi	r24, 0x99	; 153
    301a:	9e 4f       	sbci	r25, 0xFE	; 254
    301c:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <USART_Transmit>
		USART3_BAUD = 208; // Corresponds to 460800 baud rate
    3020:	80 ed       	ldi	r24, 0xD0	; 208
    3022:	90 e0       	ldi	r25, 0x00	; 0
    3024:	80 93 68 08 	sts	0x0868, r24	; 0x800868 <__TEXT_REGION_LENGTH__+0x7e0868>
    3028:	90 93 69 08 	sts	0x0869, r25	; 0x800869 <__TEXT_REGION_LENGTH__+0x7e0869>
	}
	Delay(100000);
    302c:	20 ea       	ldi	r18, 0xA0	; 160
    302e:	36 e8       	ldi	r19, 0x86	; 134
    3030:	41 e0       	ldi	r20, 0x01	; 1
    3032:	50 e0       	ldi	r21, 0x00	; 0
    3034:	60 e0       	ldi	r22, 0x00	; 0
    3036:	70 e0       	ldi	r23, 0x00	; 0
    3038:	80 e0       	ldi	r24, 0x00	; 0
    303a:	90 e0       	ldi	r25, 0x00	; 0
    303c:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <Delay>
	
	// Disable all the messages we don't want
	char Disable_DTM[] = {0xB5,0x62,0x06,0x01,0x08,0x00,0xF0,0x0A,0x00,0x00,0x00,0x00,0x00,0x00,0x09,0x69};
    3040:	80 e1       	ldi	r24, 0x10	; 16
    3042:	e0 e7       	ldi	r30, 0x70	; 112
    3044:	f0 e4       	ldi	r31, 0x40	; 64
    3046:	de 01       	movw	r26, r28
    3048:	11 96       	adiw	r26, 0x01	; 1
    304a:	01 90       	ld	r0, Z+
    304c:	0d 92       	st	X+, r0
    304e:	8a 95       	dec	r24
    3050:	e1 f7       	brne	.-8      	; 0x304a <Setup_GPS+0xb4>
	USART_Transmit(Disable_DTM, sizeof(Disable_DTM));
    3052:	60 e1       	ldi	r22, 0x10	; 16
    3054:	ce 01       	movw	r24, r28
    3056:	01 96       	adiw	r24, 0x01	; 1
    3058:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <USART_Transmit>
	char Disable_GBQ[] = {0xB5,0x62,0x06,0x01,0x08,0x00,0xF0,0x44,0x00,0x00,0x00,0x00,0x00,0x00,0x43,0xFF};
    305c:	80 e1       	ldi	r24, 0x10	; 16
    305e:	e0 e8       	ldi	r30, 0x80	; 128
    3060:	f0 e4       	ldi	r31, 0x40	; 64
    3062:	de 01       	movw	r26, r28
    3064:	51 96       	adiw	r26, 0x11	; 17
    3066:	01 90       	ld	r0, Z+
    3068:	0d 92       	st	X+, r0
    306a:	8a 95       	dec	r24
    306c:	e1 f7       	brne	.-8      	; 0x3066 <Setup_GPS+0xd0>
	USART_Transmit(Disable_GBQ, sizeof(Disable_GBQ));
    306e:	60 e1       	ldi	r22, 0x10	; 16
    3070:	ce 01       	movw	r24, r28
    3072:	41 96       	adiw	r24, 0x11	; 17
    3074:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <USART_Transmit>
	char Disable_GBS[] = {0xB5,0x62,0x06,0x01,0x08,0x00,0xF0,0x09,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x62};
    3078:	80 e1       	ldi	r24, 0x10	; 16
    307a:	e0 e9       	ldi	r30, 0x90	; 144
    307c:	f0 e4       	ldi	r31, 0x40	; 64
    307e:	de 01       	movw	r26, r28
    3080:	91 96       	adiw	r26, 0x21	; 33
    3082:	01 90       	ld	r0, Z+
    3084:	0d 92       	st	X+, r0
    3086:	8a 95       	dec	r24
    3088:	e1 f7       	brne	.-8      	; 0x3082 <Setup_GPS+0xec>
	USART_Transmit(Disable_GBS, sizeof(Disable_GBS));
    308a:	60 e1       	ldi	r22, 0x10	; 16
    308c:	ce 01       	movw	r24, r28
    308e:	81 96       	adiw	r24, 0x21	; 33
    3090:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <USART_Transmit>
	char Disable_GGA[] = {0xB5,0x62,0x06,0x01,0x08,0x00,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x23};
    3094:	80 e1       	ldi	r24, 0x10	; 16
    3096:	e0 ea       	ldi	r30, 0xA0	; 160
    3098:	f0 e4       	ldi	r31, 0x40	; 64
    309a:	de 01       	movw	r26, r28
    309c:	d1 96       	adiw	r26, 0x31	; 49
    309e:	01 90       	ld	r0, Z+
    30a0:	0d 92       	st	X+, r0
    30a2:	8a 95       	dec	r24
    30a4:	e1 f7       	brne	.-8      	; 0x309e <Setup_GPS+0x108>
	USART_Transmit(Disable_GGA, sizeof(Disable_GGA));
    30a6:	60 e1       	ldi	r22, 0x10	; 16
    30a8:	ce 01       	movw	r24, r28
    30aa:	c1 96       	adiw	r24, 0x31	; 49
    30ac:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <USART_Transmit>
	char Disable_GLL[] = {0xB5,0x62,0x06,0x01,0x08,0x00,0xF0,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x2A};
    30b0:	80 e1       	ldi	r24, 0x10	; 16
    30b2:	e0 eb       	ldi	r30, 0xB0	; 176
    30b4:	f0 e4       	ldi	r31, 0x40	; 64
    30b6:	de 01       	movw	r26, r28
    30b8:	af 5b       	subi	r26, 0xBF	; 191
    30ba:	bf 4f       	sbci	r27, 0xFF	; 255
    30bc:	01 90       	ld	r0, Z+
    30be:	0d 92       	st	X+, r0
    30c0:	8a 95       	dec	r24
    30c2:	e1 f7       	brne	.-8      	; 0x30bc <Setup_GPS+0x126>
	USART_Transmit(Disable_GLL, sizeof(Disable_GLL));
    30c4:	60 e1       	ldi	r22, 0x10	; 16
    30c6:	ce 01       	movw	r24, r28
    30c8:	8f 5b       	subi	r24, 0xBF	; 191
    30ca:	9f 4f       	sbci	r25, 0xFF	; 255
    30cc:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <USART_Transmit>
	char Disable_GLQ[] = {0xB5,0x62,0x06,0x01,0x08,0x00,0xF0,0x43,0x00,0x00,0x00,0x00,0x00,0x00,0x42,0xF8};
    30d0:	80 e1       	ldi	r24, 0x10	; 16
    30d2:	e0 ec       	ldi	r30, 0xC0	; 192
    30d4:	f0 e4       	ldi	r31, 0x40	; 64
    30d6:	de 01       	movw	r26, r28
    30d8:	af 5a       	subi	r26, 0xAF	; 175
    30da:	bf 4f       	sbci	r27, 0xFF	; 255
    30dc:	01 90       	ld	r0, Z+
    30de:	0d 92       	st	X+, r0
    30e0:	8a 95       	dec	r24
    30e2:	e1 f7       	brne	.-8      	; 0x30dc <Setup_GPS+0x146>
	USART_Transmit(Disable_GLQ, sizeof(Disable_GLQ));
    30e4:	60 e1       	ldi	r22, 0x10	; 16
    30e6:	ce 01       	movw	r24, r28
    30e8:	8f 5a       	subi	r24, 0xAF	; 175
    30ea:	9f 4f       	sbci	r25, 0xFF	; 255
    30ec:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <USART_Transmit>
	char Disable_GNQ[] = {0xB5,0x62,0x06,0x01,0x08,0x00,0xF0,0x42,0x00,0x00,0x00,0x00,0x00,0x00,0x41,0xF1};
    30f0:	80 e1       	ldi	r24, 0x10	; 16
    30f2:	e0 ed       	ldi	r30, 0xD0	; 208
    30f4:	f0 e4       	ldi	r31, 0x40	; 64
    30f6:	de 01       	movw	r26, r28
    30f8:	af 59       	subi	r26, 0x9F	; 159
    30fa:	bf 4f       	sbci	r27, 0xFF	; 255
    30fc:	01 90       	ld	r0, Z+
    30fe:	0d 92       	st	X+, r0
    3100:	8a 95       	dec	r24
    3102:	e1 f7       	brne	.-8      	; 0x30fc <Setup_GPS+0x166>
	USART_Transmit(Disable_GNQ, sizeof(Disable_GNQ));
    3104:	60 e1       	ldi	r22, 0x10	; 16
    3106:	ce 01       	movw	r24, r28
    3108:	8f 59       	subi	r24, 0x9F	; 159
    310a:	9f 4f       	sbci	r25, 0xFF	; 255
    310c:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <USART_Transmit>
	char Disable_GNS[] = {0xB5,0x62,0x06,0x01,0x08,0x00,0xF0,0x0D,0x00,0x00,0x00,0x00,0x00,0x00,0x0C,0x7E};
    3110:	80 e1       	ldi	r24, 0x10	; 16
    3112:	e0 ee       	ldi	r30, 0xE0	; 224
    3114:	f0 e4       	ldi	r31, 0x40	; 64
    3116:	de 01       	movw	r26, r28
    3118:	af 58       	subi	r26, 0x8F	; 143
    311a:	bf 4f       	sbci	r27, 0xFF	; 255
    311c:	01 90       	ld	r0, Z+
    311e:	0d 92       	st	X+, r0
    3120:	8a 95       	dec	r24
    3122:	e1 f7       	brne	.-8      	; 0x311c <Setup_GPS+0x186>
	USART_Transmit(Disable_GNS, sizeof(Disable_GNS));
    3124:	60 e1       	ldi	r22, 0x10	; 16
    3126:	ce 01       	movw	r24, r28
    3128:	8f 58       	subi	r24, 0x8F	; 143
    312a:	9f 4f       	sbci	r25, 0xFF	; 255
    312c:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <USART_Transmit>
	char Disable_GPQ[] = {0xB5,0x62,0x06,0x01,0x08,0x00,0xF0,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xE3};
    3130:	80 e1       	ldi	r24, 0x10	; 16
    3132:	e0 ef       	ldi	r30, 0xF0	; 240
    3134:	f0 e4       	ldi	r31, 0x40	; 64
    3136:	de 01       	movw	r26, r28
    3138:	af 57       	subi	r26, 0x7F	; 127
    313a:	bf 4f       	sbci	r27, 0xFF	; 255
    313c:	01 90       	ld	r0, Z+
    313e:	0d 92       	st	X+, r0
    3140:	8a 95       	dec	r24
    3142:	e1 f7       	brne	.-8      	; 0x313c <Setup_GPS+0x1a6>
	USART_Transmit(Disable_GPQ, sizeof(Disable_GPQ));
    3144:	60 e1       	ldi	r22, 0x10	; 16
    3146:	ce 01       	movw	r24, r28
    3148:	8f 57       	subi	r24, 0x7F	; 127
    314a:	9f 4f       	sbci	r25, 0xFF	; 255
    314c:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <USART_Transmit>
	char Disable_GRS[] = {0xB5,0x62,0x06,0x01,0x08,0x00,0xF0,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x4D};
    3150:	80 e1       	ldi	r24, 0x10	; 16
    3152:	e0 e0       	ldi	r30, 0x00	; 0
    3154:	f1 e4       	ldi	r31, 0x41	; 65
    3156:	de 01       	movw	r26, r28
    3158:	af 56       	subi	r26, 0x6F	; 111
    315a:	bf 4f       	sbci	r27, 0xFF	; 255
    315c:	01 90       	ld	r0, Z+
    315e:	0d 92       	st	X+, r0
    3160:	8a 95       	dec	r24
    3162:	e1 f7       	brne	.-8      	; 0x315c <Setup_GPS+0x1c6>
	USART_Transmit(Disable_GRS, sizeof(Disable_GRS));
    3164:	60 e1       	ldi	r22, 0x10	; 16
    3166:	ce 01       	movw	r24, r28
    3168:	8f 56       	subi	r24, 0x6F	; 111
    316a:	9f 4f       	sbci	r25, 0xFF	; 255
    316c:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <USART_Transmit>
	char Disable_GSA[] = {0xB5,0x62,0x06,0x01,0x08,0x00,0xF0,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x31};
    3170:	80 e1       	ldi	r24, 0x10	; 16
    3172:	e0 e1       	ldi	r30, 0x10	; 16
    3174:	f1 e4       	ldi	r31, 0x41	; 65
    3176:	de 01       	movw	r26, r28
    3178:	af 55       	subi	r26, 0x5F	; 95
    317a:	bf 4f       	sbci	r27, 0xFF	; 255
    317c:	01 90       	ld	r0, Z+
    317e:	0d 92       	st	X+, r0
    3180:	8a 95       	dec	r24
    3182:	e1 f7       	brne	.-8      	; 0x317c <Setup_GPS+0x1e6>
	USART_Transmit(Disable_GSA, sizeof(Disable_GSA));
    3184:	60 e1       	ldi	r22, 0x10	; 16
    3186:	ce 01       	movw	r24, r28
    3188:	8f 55       	subi	r24, 0x5F	; 95
    318a:	9f 4f       	sbci	r25, 0xFF	; 255
    318c:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <USART_Transmit>
	char Disable_GST[] = {0xB5,0x62,0x06,0x01,0x08,0x00,0xF0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x54};
    3190:	80 e1       	ldi	r24, 0x10	; 16
    3192:	e0 e2       	ldi	r30, 0x20	; 32
    3194:	f1 e4       	ldi	r31, 0x41	; 65
    3196:	de 01       	movw	r26, r28
    3198:	af 54       	subi	r26, 0x4F	; 79
    319a:	bf 4f       	sbci	r27, 0xFF	; 255
    319c:	01 90       	ld	r0, Z+
    319e:	0d 92       	st	X+, r0
    31a0:	8a 95       	dec	r24
    31a2:	e1 f7       	brne	.-8      	; 0x319c <Setup_GPS+0x206>
	USART_Transmit(Disable_GST, sizeof(Disable_GST));
    31a4:	60 e1       	ldi	r22, 0x10	; 16
    31a6:	ce 01       	movw	r24, r28
    31a8:	8f 54       	subi	r24, 0x4F	; 79
    31aa:	9f 4f       	sbci	r25, 0xFF	; 255
    31ac:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <USART_Transmit>
	char Disable_GSV[] = {0xB5,0x62,0x06,0x01,0x08,0x00,0xF0,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x38};
    31b0:	80 e1       	ldi	r24, 0x10	; 16
    31b2:	e0 e3       	ldi	r30, 0x30	; 48
    31b4:	f1 e4       	ldi	r31, 0x41	; 65
    31b6:	de 01       	movw	r26, r28
    31b8:	af 53       	subi	r26, 0x3F	; 63
    31ba:	bf 4f       	sbci	r27, 0xFF	; 255
    31bc:	01 90       	ld	r0, Z+
    31be:	0d 92       	st	X+, r0
    31c0:	8a 95       	dec	r24
    31c2:	e1 f7       	brne	.-8      	; 0x31bc <Setup_GPS+0x226>
	USART_Transmit(Disable_GSV, sizeof(Disable_GSV));
    31c4:	60 e1       	ldi	r22, 0x10	; 16
    31c6:	ce 01       	movw	r24, r28
    31c8:	8f 53       	subi	r24, 0x3F	; 63
    31ca:	9f 4f       	sbci	r25, 0xFF	; 255
    31cc:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <USART_Transmit>
	char Disable_THS[] = {0xB5,0x62,0x06,0x01,0x08,0x00,0xF0,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,0x0D,0x85};
    31d0:	80 e1       	ldi	r24, 0x10	; 16
    31d2:	e0 e4       	ldi	r30, 0x40	; 64
    31d4:	f1 e4       	ldi	r31, 0x41	; 65
    31d6:	de 01       	movw	r26, r28
    31d8:	af 52       	subi	r26, 0x2F	; 47
    31da:	bf 4f       	sbci	r27, 0xFF	; 255
    31dc:	01 90       	ld	r0, Z+
    31de:	0d 92       	st	X+, r0
    31e0:	8a 95       	dec	r24
    31e2:	e1 f7       	brne	.-8      	; 0x31dc <Setup_GPS+0x246>
	USART_Transmit(Disable_THS, sizeof(Disable_THS));
    31e4:	60 e1       	ldi	r22, 0x10	; 16
    31e6:	ce 01       	movw	r24, r28
    31e8:	8f 52       	subi	r24, 0x2F	; 47
    31ea:	9f 4f       	sbci	r25, 0xFF	; 255
    31ec:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <USART_Transmit>
	char Disable_TXT[] = {0xB5,0x62,0x06,0x01,0x08,0x00,0xF0,0x41,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0xEA};
    31f0:	80 e1       	ldi	r24, 0x10	; 16
    31f2:	e0 e5       	ldi	r30, 0x50	; 80
    31f4:	f1 e4       	ldi	r31, 0x41	; 65
    31f6:	de 01       	movw	r26, r28
    31f8:	af 51       	subi	r26, 0x1F	; 31
    31fa:	bf 4f       	sbci	r27, 0xFF	; 255
    31fc:	01 90       	ld	r0, Z+
    31fe:	0d 92       	st	X+, r0
    3200:	8a 95       	dec	r24
    3202:	e1 f7       	brne	.-8      	; 0x31fc <Setup_GPS+0x266>
	USART_Transmit(Disable_TXT, sizeof(Disable_TXT));
    3204:	60 e1       	ldi	r22, 0x10	; 16
    3206:	ce 01       	movw	r24, r28
    3208:	8f 51       	subi	r24, 0x1F	; 31
    320a:	9f 4f       	sbci	r25, 0xFF	; 255
    320c:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <USART_Transmit>
	char Disable_VLW[] = {0xB5,0x62,0x06,0x01,0x08,0x00,0xF0,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x0E,0x8C};
    3210:	80 e1       	ldi	r24, 0x10	; 16
    3212:	e0 e6       	ldi	r30, 0x60	; 96
    3214:	f1 e4       	ldi	r31, 0x41	; 65
    3216:	de 01       	movw	r26, r28
    3218:	af 50       	subi	r26, 0x0F	; 15
    321a:	bf 4f       	sbci	r27, 0xFF	; 255
    321c:	01 90       	ld	r0, Z+
    321e:	0d 92       	st	X+, r0
    3220:	8a 95       	dec	r24
    3222:	e1 f7       	brne	.-8      	; 0x321c <Setup_GPS+0x286>
	USART_Transmit(Disable_VLW, sizeof(Disable_VLW));
    3224:	60 e1       	ldi	r22, 0x10	; 16
    3226:	ce 01       	movw	r24, r28
    3228:	8f 50       	subi	r24, 0x0F	; 15
    322a:	9f 4f       	sbci	r25, 0xFF	; 255
    322c:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <USART_Transmit>
	char Disable_VTG[] = {0xB5,0x62,0x06,0x01,0x08,0x00,0xF0,0x05,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x46};
    3230:	80 e1       	ldi	r24, 0x10	; 16
    3232:	e0 e7       	ldi	r30, 0x70	; 112
    3234:	f1 e4       	ldi	r31, 0x41	; 65
    3236:	de 01       	movw	r26, r28
    3238:	af 5f       	subi	r26, 0xFF	; 255
    323a:	be 4f       	sbci	r27, 0xFE	; 254
    323c:	01 90       	ld	r0, Z+
    323e:	0d 92       	st	X+, r0
    3240:	8a 95       	dec	r24
    3242:	e1 f7       	brne	.-8      	; 0x323c <Setup_GPS+0x2a6>
	USART_Transmit(Disable_VTG, sizeof(Disable_VTG));
    3244:	60 e1       	ldi	r22, 0x10	; 16
    3246:	ce 01       	movw	r24, r28
    3248:	8f 5f       	subi	r24, 0xFF	; 255
    324a:	9e 4f       	sbci	r25, 0xFE	; 254
    324c:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <USART_Transmit>
	char Disable_ZDA[] = {0xB5,0x62,0x06,0x01,0x08,0x00,0xF0,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x5B};
    3250:	80 e1       	ldi	r24, 0x10	; 16
    3252:	e0 e8       	ldi	r30, 0x80	; 128
    3254:	f1 e4       	ldi	r31, 0x41	; 65
    3256:	de 01       	movw	r26, r28
    3258:	af 5e       	subi	r26, 0xEF	; 239
    325a:	be 4f       	sbci	r27, 0xFE	; 254
    325c:	01 90       	ld	r0, Z+
    325e:	0d 92       	st	X+, r0
    3260:	8a 95       	dec	r24
    3262:	e1 f7       	brne	.-8      	; 0x325c <Setup_GPS+0x2c6>
	USART_Transmit(Disable_ZDA, sizeof(Disable_ZDA));
    3264:	60 e1       	ldi	r22, 0x10	; 16
    3266:	ce 01       	movw	r24, r28
    3268:	8f 5e       	subi	r24, 0xEF	; 239
    326a:	9e 4f       	sbci	r25, 0xFE	; 254
    326c:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <USART_Transmit>

	
	// Increase the update rate to 8Hz
	char Enable_UTC_8Hz[] = {0xB5, 0x62, 0x06, 0x08, 0x06, 0x00, 0x7D, 0x00, 0x01, 0x00, 0x00, 0x00, 0x92, 0xA6};
    3270:	8e e0       	ldi	r24, 0x0E	; 14
    3272:	e0 e9       	ldi	r30, 0x90	; 144
    3274:	f1 e4       	ldi	r31, 0x41	; 65
    3276:	de 01       	movw	r26, r28
    3278:	af 5d       	subi	r26, 0xDF	; 223
    327a:	be 4f       	sbci	r27, 0xFE	; 254
    327c:	01 90       	ld	r0, Z+
    327e:	0d 92       	st	X+, r0
    3280:	8a 95       	dec	r24
    3282:	e1 f7       	brne	.-8      	; 0x327c <Setup_GPS+0x2e6>
	USART_Transmit(Enable_UTC_8Hz, sizeof(Enable_UTC_8Hz));
    3284:	6e e0       	ldi	r22, 0x0E	; 14
    3286:	ce 01       	movw	r24, r28
    3288:	8f 5d       	subi	r24, 0xDF	; 223
    328a:	9e 4f       	sbci	r25, 0xFE	; 254
    328c:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <USART_Transmit>
	char Enable_GPS_8Hz[] = {0xB5, 0x62, 0x06, 0x08, 0x06, 0x00, 0x7D, 0x00, 0x01, 0x00, 0x01, 0x00, 0x93, 0xA8};
    3290:	8e e0       	ldi	r24, 0x0E	; 14
    3292:	ee e9       	ldi	r30, 0x9E	; 158
    3294:	f1 e4       	ldi	r31, 0x41	; 65
    3296:	de 01       	movw	r26, r28
    3298:	a1 5d       	subi	r26, 0xD1	; 209
    329a:	be 4f       	sbci	r27, 0xFE	; 254
    329c:	01 90       	ld	r0, Z+
    329e:	0d 92       	st	X+, r0
    32a0:	8a 95       	dec	r24
    32a2:	e1 f7       	brne	.-8      	; 0x329c <Setup_GPS+0x306>
	USART_Transmit(Enable_GPS_8Hz, sizeof(Enable_GPS_8Hz));
    32a4:	6e e0       	ldi	r22, 0x0E	; 14
    32a6:	ce 01       	movw	r24, r28
    32a8:	81 5d       	subi	r24, 0xD1	; 209
    32aa:	9e 4f       	sbci	r25, 0xFE	; 254
    32ac:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <USART_Transmit>
	char Enable_GLO_8Hz[] = {0xB5, 0x62, 0x06, 0x08, 0x06, 0x00, 0x7D, 0x00, 0x01, 0x00, 0x02, 0x00, 0x94, 0xAA};
    32b0:	8e e0       	ldi	r24, 0x0E	; 14
    32b2:	ec ea       	ldi	r30, 0xAC	; 172
    32b4:	f1 e4       	ldi	r31, 0x41	; 65
    32b6:	de 01       	movw	r26, r28
    32b8:	a3 5c       	subi	r26, 0xC3	; 195
    32ba:	be 4f       	sbci	r27, 0xFE	; 254
    32bc:	01 90       	ld	r0, Z+
    32be:	0d 92       	st	X+, r0
    32c0:	8a 95       	dec	r24
    32c2:	e1 f7       	brne	.-8      	; 0x32bc <Setup_GPS+0x326>
	USART_Transmit(Enable_GLO_8Hz, sizeof(Enable_GLO_8Hz));
    32c4:	6e e0       	ldi	r22, 0x0E	; 14
    32c6:	ce 01       	movw	r24, r28
    32c8:	83 5c       	subi	r24, 0xC3	; 195
    32ca:	9e 4f       	sbci	r25, 0xFE	; 254
    32cc:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <USART_Transmit>
	char Enable_BDS_8Hz[] = {0xB5, 0x62, 0x06, 0x08, 0x06, 0x00, 0x7D, 0x00, 0x01, 0x00, 0x03, 0x00, 0x95, 0xAC};
    32d0:	8e e0       	ldi	r24, 0x0E	; 14
    32d2:	ea eb       	ldi	r30, 0xBA	; 186
    32d4:	f1 e4       	ldi	r31, 0x41	; 65
    32d6:	de 01       	movw	r26, r28
    32d8:	a5 5b       	subi	r26, 0xB5	; 181
    32da:	be 4f       	sbci	r27, 0xFE	; 254
    32dc:	01 90       	ld	r0, Z+
    32de:	0d 92       	st	X+, r0
    32e0:	8a 95       	dec	r24
    32e2:	e1 f7       	brne	.-8      	; 0x32dc <Setup_GPS+0x346>
	USART_Transmit(Enable_BDS_8Hz, sizeof(Enable_BDS_8Hz));
    32e4:	6e e0       	ldi	r22, 0x0E	; 14
    32e6:	ce 01       	movw	r24, r28
    32e8:	85 5b       	subi	r24, 0xB5	; 181
    32ea:	9e 4f       	sbci	r25, 0xFE	; 254
    32ec:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <USART_Transmit>
	char Enable_GAL_8Hz[] = {0xB5, 0x62, 0x06, 0x08, 0x06, 0x00, 0x7D, 0x00, 0x01, 0x00, 0x04, 0x00, 0x96, 0xAE};
    32f0:	8e e0       	ldi	r24, 0x0E	; 14
    32f2:	e8 ec       	ldi	r30, 0xC8	; 200
    32f4:	f1 e4       	ldi	r31, 0x41	; 65
    32f6:	de 01       	movw	r26, r28
    32f8:	a7 5a       	subi	r26, 0xA7	; 167
    32fa:	be 4f       	sbci	r27, 0xFE	; 254
    32fc:	01 90       	ld	r0, Z+
    32fe:	0d 92       	st	X+, r0
    3300:	8a 95       	dec	r24
    3302:	e1 f7       	brne	.-8      	; 0x32fc <Setup_GPS+0x366>
	USART_Transmit(Enable_GAL_8Hz, sizeof(Enable_GAL_8Hz));
    3304:	6e e0       	ldi	r22, 0x0E	; 14
    3306:	ce 01       	movw	r24, r28
    3308:	87 5a       	subi	r24, 0xA7	; 167
    330a:	9e 4f       	sbci	r25, 0xFE	; 254
    330c:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <USART_Transmit>

	return (USART3_RXDATAH & USART_FERR_bm) ? 0 : 1;
    3310:	80 91 61 08 	lds	r24, 0x0861	; 0x800861 <__TEXT_REGION_LENGTH__+0x7e0861>
    3314:	86 95       	lsr	r24
    3316:	86 95       	lsr	r24
    3318:	91 e0       	ldi	r25, 0x01	; 1
    331a:	89 27       	eor	r24, r25
}
    331c:	81 70       	andi	r24, 0x01	; 1
    331e:	ce 57       	subi	r28, 0x7E	; 126
    3320:	de 4f       	sbci	r29, 0xFE	; 254
    3322:	cd bf       	out	0x3d, r28	; 61
    3324:	de bf       	out	0x3e, r29	; 62
    3326:	df 91       	pop	r29
    3328:	cf 91       	pop	r28
    332a:	08 95       	ret

0000332c <__vector_53>:
		USART3_STATUS = USART_TXCIF_bm;
	}
	Delay(1000);
}

ISR(USART3_RXC_vect){
    332c:	1f 92       	push	r1
    332e:	0f 92       	push	r0
    3330:	0f b6       	in	r0, 0x3f	; 63
    3332:	0f 92       	push	r0
    3334:	11 24       	eor	r1, r1
    3336:	0b b6       	in	r0, 0x3b	; 59
    3338:	0f 92       	push	r0
    333a:	8f 93       	push	r24
    333c:	9f 93       	push	r25
    333e:	ef 93       	push	r30
    3340:	ff 93       	push	r31
	while(USART3_STATUS & USART_RXCIF_bm){
    3342:	11 c0       	rjmp	.+34     	; 0x3366 <__vector_53+0x3a>
		char temp = USART3_RXDATAL;
    3344:	80 91 60 08 	lds	r24, 0x0860	; 0x800860 <__TEXT_REGION_LENGTH__+0x7e0860>
		if (temp == 10){g_GPS_Read_Flag = 1;}
    3348:	8a 30       	cpi	r24, 0x0A	; 10
    334a:	19 f4       	brne	.+6      	; 0x3352 <__vector_53+0x26>
    334c:	91 e0       	ldi	r25, 0x01	; 1
    334e:	90 93 bf 44 	sts	0x44BF, r25	; 0x8044bf <g_GPS_Read_Flag>
		g_GPS_Data[g_GPS_Data_Index++] = temp;
    3352:	e0 91 c0 44 	lds	r30, 0x44C0	; 0x8044c0 <g_GPS_Data_Index>
    3356:	91 e0       	ldi	r25, 0x01	; 1
    3358:	9e 0f       	add	r25, r30
    335a:	90 93 c0 44 	sts	0x44C0, r25	; 0x8044c0 <g_GPS_Data_Index>
    335e:	f0 e0       	ldi	r31, 0x00	; 0
    3360:	ef 53       	subi	r30, 0x3F	; 63
    3362:	fb 4b       	sbci	r31, 0xBB	; 187
    3364:	80 83       	st	Z, r24
	}
	Delay(1000);
}

ISR(USART3_RXC_vect){
	while(USART3_STATUS & USART_RXCIF_bm){
    3366:	80 91 64 08 	lds	r24, 0x0864	; 0x800864 <__TEXT_REGION_LENGTH__+0x7e0864>
    336a:	88 23       	and	r24, r24
    336c:	5c f3       	brlt	.-42     	; 0x3344 <__vector_53+0x18>
		char temp = USART3_RXDATAL;
		if (temp == 10){g_GPS_Read_Flag = 1;}
		g_GPS_Data[g_GPS_Data_Index++] = temp;
	}
}
    336e:	ff 91       	pop	r31
    3370:	ef 91       	pop	r30
    3372:	9f 91       	pop	r25
    3374:	8f 91       	pop	r24
    3376:	0f 90       	pop	r0
    3378:	0b be       	out	0x3b, r0	; 59
    337a:	0f 90       	pop	r0
    337c:	0f be       	out	0x3f, r0	; 63
    337e:	0f 90       	pop	r0
    3380:	1f 90       	pop	r1
    3382:	18 95       	reti

00003384 <Observer>:

// OBSERVER CODE
void Observer(States *Drone){
    3384:	4f 92       	push	r4
    3386:	5f 92       	push	r5
    3388:	6f 92       	push	r6
    338a:	7f 92       	push	r7
    338c:	8f 92       	push	r8
    338e:	9f 92       	push	r9
    3390:	af 92       	push	r10
    3392:	bf 92       	push	r11
    3394:	cf 92       	push	r12
    3396:	df 92       	push	r13
    3398:	ef 92       	push	r14
    339a:	ff 92       	push	r15
    339c:	cf 93       	push	r28
    339e:	df 93       	push	r29
    33a0:	cd b7       	in	r28, 0x3d	; 61
    33a2:	de b7       	in	r29, 0x3e	; 62
    33a4:	aa 97       	sbiw	r28, 0x2a	; 42
    33a6:	cd bf       	out	0x3d, r28	; 61
    33a8:	de bf       	out	0x3e, r29	; 62
    33aa:	89 a7       	std	Y+41, r24	; 0x29
    33ac:	9a a7       	std	Y+42, r25	; 0x2a
	// and decreasing it increases the trust on the measurement (accelerometer and magnetometer)
	const float dt = 0.04; // Time between integrations
	const float Gimbal_Lock_Check_Angle = 5.0*D2R;
	// Measure
	
	float phi_m = atan2f(Drone->g_vec[1], Drone->g_vec[2]);
    33ae:	dc 01       	movw	r26, r24
    33b0:	54 96       	adiw	r26, 0x14	; 20
    33b2:	8d 90       	ld	r8, X+
    33b4:	9d 90       	ld	r9, X+
    33b6:	ad 90       	ld	r10, X+
    33b8:	bc 90       	ld	r11, X
    33ba:	57 97       	sbiw	r26, 0x17	; 23
    33bc:	50 96       	adiw	r26, 0x10	; 16
    33be:	cd 90       	ld	r12, X+
    33c0:	dd 90       	ld	r13, X+
    33c2:	ed 90       	ld	r14, X+
    33c4:	fc 90       	ld	r15, X
    33c6:	53 97       	sbiw	r26, 0x13	; 19
    33c8:	a5 01       	movw	r20, r10
    33ca:	94 01       	movw	r18, r8
    33cc:	c7 01       	movw	r24, r14
    33ce:	b6 01       	movw	r22, r12
    33d0:	0e 94 0d 1d 	call	0x3a1a	; 0x3a1a <atan2>
    33d4:	69 8b       	std	Y+17, r22	; 0x11
    33d6:	7a 8b       	std	Y+18, r23	; 0x12
    33d8:	8b 8b       	std	Y+19, r24	; 0x13
    33da:	9c 8b       	std	Y+20, r25	; 0x14
	if (isnan(phi_m)){
    33dc:	9b 01       	movw	r18, r22
    33de:	ac 01       	movw	r20, r24
    33e0:	0e 94 77 20 	call	0x40ee	; 0x40ee <__unordsf2>
    33e4:	88 23       	and	r24, r24
    33e6:	61 f0       	breq	.+24     	; 0x3400 <Observer+0x7c>
		phi_m = Drone->Euler[0];
    33e8:	a9 a5       	ldd	r26, Y+41	; 0x29
    33ea:	ba a5       	ldd	r27, Y+42	; 0x2a
    33ec:	94 96       	adiw	r26, 0x24	; 36
    33ee:	2d 91       	ld	r18, X+
    33f0:	3d 91       	ld	r19, X+
    33f2:	4d 91       	ld	r20, X+
    33f4:	5c 91       	ld	r21, X
    33f6:	97 97       	sbiw	r26, 0x27	; 39
    33f8:	29 8b       	std	Y+17, r18	; 0x11
    33fa:	3a 8b       	std	Y+18, r19	; 0x12
    33fc:	4b 8b       	std	Y+19, r20	; 0x13
    33fe:	5c 8b       	std	Y+20, r21	; 0x14
	}
	float theta_m = atan2f(-Drone->g_vec[0], sqrt(pow(Drone->g_vec[1],2) + pow(Drone->g_vec[2],2)));
    3400:	20 e0       	ldi	r18, 0x00	; 0
    3402:	30 e0       	ldi	r19, 0x00	; 0
    3404:	40 e0       	ldi	r20, 0x00	; 0
    3406:	50 e4       	ldi	r21, 0x40	; 64
    3408:	c7 01       	movw	r24, r14
    340a:	b6 01       	movw	r22, r12
    340c:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <pow>
    3410:	6b 01       	movw	r12, r22
    3412:	7c 01       	movw	r14, r24
    3414:	20 e0       	ldi	r18, 0x00	; 0
    3416:	30 e0       	ldi	r19, 0x00	; 0
    3418:	40 e0       	ldi	r20, 0x00	; 0
    341a:	50 e4       	ldi	r21, 0x40	; 64
    341c:	c5 01       	movw	r24, r10
    341e:	b4 01       	movw	r22, r8
    3420:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <pow>
    3424:	4b 01       	movw	r8, r22
    3426:	5c 01       	movw	r10, r24
    3428:	a5 01       	movw	r20, r10
    342a:	94 01       	movw	r18, r8
    342c:	c7 01       	movw	r24, r14
    342e:	b6 01       	movw	r22, r12
    3430:	0e 94 8e 1c 	call	0x391c	; 0x391c <__addsf3>
    3434:	0e 94 0e 20 	call	0x401c	; 0x401c <sqrt>
    3438:	9b 01       	movw	r18, r22
    343a:	ac 01       	movw	r20, r24
    343c:	e9 a5       	ldd	r30, Y+41	; 0x29
    343e:	fa a5       	ldd	r31, Y+42	; 0x2a
    3440:	84 85       	ldd	r24, Z+12	; 0x0c
    3442:	95 85       	ldd	r25, Z+13	; 0x0d
    3444:	a6 85       	ldd	r26, Z+14	; 0x0e
    3446:	b7 85       	ldd	r27, Z+15	; 0x0f
    3448:	bc 01       	movw	r22, r24
    344a:	cd 01       	movw	r24, r26
    344c:	90 58       	subi	r25, 0x80	; 128
    344e:	0e 94 0d 1d 	call	0x3a1a	; 0x3a1a <atan2>
    3452:	6d 8b       	std	Y+21, r22	; 0x15
    3454:	7e 8b       	std	Y+22, r23	; 0x16
    3456:	8f 8b       	std	Y+23, r24	; 0x17
    3458:	98 8f       	std	Y+24, r25	; 0x18
	if (isnan(theta_m)){
    345a:	9b 01       	movw	r18, r22
    345c:	ac 01       	movw	r20, r24
    345e:	0e 94 77 20 	call	0x40ee	; 0x40ee <__unordsf2>
    3462:	88 23       	and	r24, r24
    3464:	61 f0       	breq	.+24     	; 0x347e <Observer+0xfa>
		theta_m = Drone->Euler[1];
    3466:	a9 a5       	ldd	r26, Y+41	; 0x29
    3468:	ba a5       	ldd	r27, Y+42	; 0x2a
    346a:	98 96       	adiw	r26, 0x28	; 40
    346c:	2d 91       	ld	r18, X+
    346e:	3d 91       	ld	r19, X+
    3470:	4d 91       	ld	r20, X+
    3472:	5c 91       	ld	r21, X
    3474:	9b 97       	sbiw	r26, 0x2b	; 43
    3476:	2d 8b       	std	Y+21, r18	; 0x15
    3478:	3e 8b       	std	Y+22, r19	; 0x16
    347a:	4f 8b       	std	Y+23, r20	; 0x17
    347c:	58 8f       	std	Y+24, r21	; 0x18
	}
	float mag_x_NED = cosf(Drone->Euler[1])*Drone->m_vec[0] + sinf(Drone->Euler[0])*sinf(Drone->Euler[1])*Drone->m_vec[1] + cosf(Drone->Euler[0])*sinf(Drone->Euler[1])*Drone->m_vec[2];
    347e:	a9 a5       	ldd	r26, Y+41	; 0x29
    3480:	ba a5       	ldd	r27, Y+42	; 0x2a
    3482:	98 96       	adiw	r26, 0x28	; 40
    3484:	2d 91       	ld	r18, X+
    3486:	3d 91       	ld	r19, X+
    3488:	4d 91       	ld	r20, X+
    348a:	5c 91       	ld	r21, X
    348c:	9b 97       	sbiw	r26, 0x2b	; 43
    348e:	29 83       	std	Y+1, r18	; 0x01
    3490:	3a 83       	std	Y+2, r19	; 0x02
    3492:	4b 83       	std	Y+3, r20	; 0x03
    3494:	5c 83       	std	Y+4, r21	; 0x04
    3496:	ca 01       	movw	r24, r20
    3498:	b9 01       	movw	r22, r18
    349a:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <cos>
    349e:	69 8f       	std	Y+25, r22	; 0x19
    34a0:	7a 8f       	std	Y+26, r23	; 0x1a
    34a2:	8b 8f       	std	Y+27, r24	; 0x1b
    34a4:	9c 8f       	std	Y+28, r25	; 0x1c
    34a6:	e9 a5       	ldd	r30, Y+41	; 0x29
    34a8:	fa a5       	ldd	r31, Y+42	; 0x2a
    34aa:	20 8d       	ldd	r18, Z+24	; 0x18
    34ac:	31 8d       	ldd	r19, Z+25	; 0x19
    34ae:	42 8d       	ldd	r20, Z+26	; 0x1a
    34b0:	53 8d       	ldd	r21, Z+27	; 0x1b
    34b2:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__mulsf3>
    34b6:	2b 01       	movw	r4, r22
    34b8:	3c 01       	movw	r6, r24
    34ba:	a9 a5       	ldd	r26, Y+41	; 0x29
    34bc:	ba a5       	ldd	r27, Y+42	; 0x2a
    34be:	94 96       	adiw	r26, 0x24	; 36
    34c0:	2d 91       	ld	r18, X+
    34c2:	3d 91       	ld	r19, X+
    34c4:	4d 91       	ld	r20, X+
    34c6:	5c 91       	ld	r21, X
    34c8:	97 97       	sbiw	r26, 0x27	; 39
    34ca:	2d 83       	std	Y+5, r18	; 0x05
    34cc:	3e 83       	std	Y+6, r19	; 0x06
    34ce:	4f 83       	std	Y+7, r20	; 0x07
    34d0:	58 87       	std	Y+8, r21	; 0x08
    34d2:	ca 01       	movw	r24, r20
    34d4:	b9 01       	movw	r22, r18
    34d6:	0e 94 00 20 	call	0x4000	; 0x4000 <sin>
    34da:	69 87       	std	Y+9, r22	; 0x09
    34dc:	7a 87       	std	Y+10, r23	; 0x0a
    34de:	8b 87       	std	Y+11, r24	; 0x0b
    34e0:	9c 87       	std	Y+12, r25	; 0x0c
    34e2:	69 81       	ldd	r22, Y+1	; 0x01
    34e4:	7a 81       	ldd	r23, Y+2	; 0x02
    34e6:	8b 81       	ldd	r24, Y+3	; 0x03
    34e8:	9c 81       	ldd	r25, Y+4	; 0x04
    34ea:	0e 94 00 20 	call	0x4000	; 0x4000 <sin>
    34ee:	6b 01       	movw	r12, r22
    34f0:	7c 01       	movw	r14, r24
    34f2:	9b 01       	movw	r18, r22
    34f4:	ac 01       	movw	r20, r24
    34f6:	69 85       	ldd	r22, Y+9	; 0x09
    34f8:	7a 85       	ldd	r23, Y+10	; 0x0a
    34fa:	8b 85       	ldd	r24, Y+11	; 0x0b
    34fc:	9c 85       	ldd	r25, Y+12	; 0x0c
    34fe:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__mulsf3>
    3502:	e9 a5       	ldd	r30, Y+41	; 0x29
    3504:	fa a5       	ldd	r31, Y+42	; 0x2a
    3506:	84 8c       	ldd	r8, Z+28	; 0x1c
    3508:	95 8c       	ldd	r9, Z+29	; 0x1d
    350a:	a6 8c       	ldd	r10, Z+30	; 0x1e
    350c:	b7 8c       	ldd	r11, Z+31	; 0x1f
    350e:	a5 01       	movw	r20, r10
    3510:	94 01       	movw	r18, r8
    3512:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__mulsf3>
    3516:	9b 01       	movw	r18, r22
    3518:	ac 01       	movw	r20, r24
    351a:	c3 01       	movw	r24, r6
    351c:	b2 01       	movw	r22, r4
    351e:	0e 94 8e 1c 	call	0x391c	; 0x391c <__addsf3>
    3522:	2b 01       	movw	r4, r22
    3524:	3c 01       	movw	r6, r24
    3526:	6d 81       	ldd	r22, Y+5	; 0x05
    3528:	7e 81       	ldd	r23, Y+6	; 0x06
    352a:	8f 81       	ldd	r24, Y+7	; 0x07
    352c:	98 85       	ldd	r25, Y+8	; 0x08
    352e:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <cos>
    3532:	6d 87       	std	Y+13, r22	; 0x0d
    3534:	7e 87       	std	Y+14, r23	; 0x0e
    3536:	8f 87       	std	Y+15, r24	; 0x0f
    3538:	98 8b       	std	Y+16, r25	; 0x10
    353a:	9b 01       	movw	r18, r22
    353c:	ac 01       	movw	r20, r24
    353e:	c7 01       	movw	r24, r14
    3540:	b6 01       	movw	r22, r12
    3542:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__mulsf3>
    3546:	a9 a5       	ldd	r26, Y+41	; 0x29
    3548:	ba a5       	ldd	r27, Y+42	; 0x2a
    354a:	90 96       	adiw	r26, 0x20	; 32
    354c:	cd 90       	ld	r12, X+
    354e:	dd 90       	ld	r13, X+
    3550:	ed 90       	ld	r14, X+
    3552:	fc 90       	ld	r15, X
    3554:	93 97       	sbiw	r26, 0x23	; 35
    3556:	a7 01       	movw	r20, r14
    3558:	96 01       	movw	r18, r12
    355a:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__mulsf3>
    355e:	9b 01       	movw	r18, r22
    3560:	ac 01       	movw	r20, r24
    3562:	c3 01       	movw	r24, r6
    3564:	b2 01       	movw	r22, r4
    3566:	0e 94 8e 1c 	call	0x391c	; 0x391c <__addsf3>
    356a:	2b 01       	movw	r4, r22
    356c:	3c 01       	movw	r6, r24
	float mag_y_NED = cosf(Drone->Euler[0])*Drone->m_vec[1] - sinf(Drone->Euler[0])*Drone->m_vec[2];
    356e:	2d 85       	ldd	r18, Y+13	; 0x0d
    3570:	3e 85       	ldd	r19, Y+14	; 0x0e
    3572:	4f 85       	ldd	r20, Y+15	; 0x0f
    3574:	58 89       	ldd	r21, Y+16	; 0x10
    3576:	c5 01       	movw	r24, r10
    3578:	b4 01       	movw	r22, r8
    357a:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__mulsf3>
    357e:	4b 01       	movw	r8, r22
    3580:	5c 01       	movw	r10, r24
    3582:	a7 01       	movw	r20, r14
    3584:	96 01       	movw	r18, r12
    3586:	69 85       	ldd	r22, Y+9	; 0x09
    3588:	7a 85       	ldd	r23, Y+10	; 0x0a
    358a:	8b 85       	ldd	r24, Y+11	; 0x0b
    358c:	9c 85       	ldd	r25, Y+12	; 0x0c
    358e:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__mulsf3>
    3592:	9b 01       	movw	r18, r22
    3594:	ac 01       	movw	r20, r24
    3596:	c5 01       	movw	r24, r10
    3598:	b4 01       	movw	r22, r8
    359a:	0e 94 8d 1c 	call	0x391a	; 0x391a <__subsf3>
	float psi_m = -atan2f(mag_y_NED, mag_x_NED);
    359e:	a3 01       	movw	r20, r6
    35a0:	92 01       	movw	r18, r4
    35a2:	0e 94 0d 1d 	call	0x3a1a	; 0x3a1a <atan2>
    35a6:	2b 01       	movw	r4, r22
    35a8:	3c 01       	movw	r6, r24
    35aa:	77 fa       	bst	r7, 7
    35ac:	70 94       	com	r7
    35ae:	77 f8       	bld	r7, 7
    35b0:	70 94       	com	r7
	if (isnan(psi_m)){
    35b2:	a3 01       	movw	r20, r6
    35b4:	92 01       	movw	r18, r4
    35b6:	c3 01       	movw	r24, r6
    35b8:	b2 01       	movw	r22, r4
    35ba:	0e 94 77 20 	call	0x40ee	; 0x40ee <__unordsf2>
    35be:	88 23       	and	r24, r24
    35c0:	31 f0       	breq	.+12     	; 0x35ce <Observer+0x24a>
		psi_m = Drone->Euler[2];
    35c2:	e9 a5       	ldd	r30, Y+41	; 0x29
    35c4:	fa a5       	ldd	r31, Y+42	; 0x2a
    35c6:	44 a4       	ldd	r4, Z+44	; 0x2c
    35c8:	55 a4       	ldd	r5, Z+45	; 0x2d
    35ca:	66 a4       	ldd	r6, Z+46	; 0x2e
    35cc:	77 a4       	ldd	r7, Z+47	; 0x2f
	}
	if (psi_m <= 0){
    35ce:	20 e0       	ldi	r18, 0x00	; 0
    35d0:	30 e0       	ldi	r19, 0x00	; 0
    35d2:	a9 01       	movw	r20, r18
    35d4:	c3 01       	movw	r24, r6
    35d6:	b2 01       	movw	r22, r4
    35d8:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <__cmpsf2>
    35dc:	18 16       	cp	r1, r24
    35de:	54 f0       	brlt	.+20     	; 0x35f4 <Observer+0x270>
		psi_m += 2.0*M_PI;
    35e0:	2b ed       	ldi	r18, 0xDB	; 219
    35e2:	3f e0       	ldi	r19, 0x0F	; 15
    35e4:	49 ec       	ldi	r20, 0xC9	; 201
    35e6:	50 e4       	ldi	r21, 0x40	; 64
    35e8:	c3 01       	movw	r24, r6
    35ea:	b2 01       	movw	r22, r4
    35ec:	0e 94 8e 1c 	call	0x391c	; 0x391c <__addsf3>
    35f0:	2b 01       	movw	r4, r22
    35f2:	3c 01       	movw	r6, r24
	}
	
	// Predict
	float phi_hat = Drone->Euler[0];
	float theta_hat = Drone->Euler[1];
	float psi_hat = Drone->Euler[2];
    35f4:	a9 a5       	ldd	r26, Y+41	; 0x29
    35f6:	ba a5       	ldd	r27, Y+42	; 0x2a
    35f8:	9c 96       	adiw	r26, 0x2c	; 44
    35fa:	8d 90       	ld	r8, X+
    35fc:	9d 90       	ld	r9, X+
    35fe:	ad 90       	ld	r10, X+
    3600:	bc 90       	ld	r11, X
    3602:	9f 97       	sbiw	r26, 0x2f	; 47
	if (abs(abs(Drone->Euler[1]) - M_PI_2) > Gimbal_Lock_Check_Angle){
    3604:	69 81       	ldd	r22, Y+1	; 0x01
    3606:	7a 81       	ldd	r23, Y+2	; 0x02
    3608:	8b 81       	ldd	r24, Y+3	; 0x03
    360a:	9c 81       	ldd	r25, Y+4	; 0x04
    360c:	0e 94 e8 1d 	call	0x3bd0	; 0x3bd0 <__fixsfsi>
    3610:	9b 01       	movw	r18, r22
    3612:	77 23       	and	r23, r23
    3614:	24 f4       	brge	.+8      	; 0x361e <Observer+0x29a>
    3616:	22 27       	eor	r18, r18
    3618:	33 27       	eor	r19, r19
    361a:	26 1b       	sub	r18, r22
    361c:	37 0b       	sbc	r19, r23
    361e:	b9 01       	movw	r22, r18
    3620:	33 0f       	add	r19, r19
    3622:	88 0b       	sbc	r24, r24
    3624:	99 0b       	sbc	r25, r25
    3626:	0e 94 20 1e 	call	0x3c40	; 0x3c40 <__floatsisf>
    362a:	2b ed       	ldi	r18, 0xDB	; 219
    362c:	3f e0       	ldi	r19, 0x0F	; 15
    362e:	49 ec       	ldi	r20, 0xC9	; 201
    3630:	5f e3       	ldi	r21, 0x3F	; 63
    3632:	0e 94 8d 1c 	call	0x391a	; 0x391a <__subsf3>
    3636:	0e 94 e8 1d 	call	0x3bd0	; 0x3bd0 <__fixsfsi>
    363a:	9b 01       	movw	r18, r22
    363c:	77 23       	and	r23, r23
    363e:	24 f4       	brge	.+8      	; 0x3648 <Observer+0x2c4>
    3640:	22 27       	eor	r18, r18
    3642:	33 27       	eor	r19, r19
    3644:	26 1b       	sub	r18, r22
    3646:	37 0b       	sbc	r19, r23
    3648:	b9 01       	movw	r22, r18
    364a:	33 0f       	add	r19, r19
    364c:	88 0b       	sbc	r24, r24
    364e:	99 0b       	sbc	r25, r25
    3650:	0e 94 20 1e 	call	0x3c40	; 0x3c40 <__floatsisf>
    3654:	23 ec       	ldi	r18, 0xC3	; 195
    3656:	38 eb       	ldi	r19, 0xB8	; 184
    3658:	42 eb       	ldi	r20, 0xB2	; 178
    365a:	5d e3       	ldi	r21, 0x3D	; 61
    365c:	0e 94 36 1f 	call	0x3e6c	; 0x3e6c <__gesf2>
    3660:	18 16       	cp	r1, r24
    3662:	0c f0       	brlt	.+2      	; 0x3666 <Observer+0x2e2>
    3664:	ca c0       	rjmp	.+404    	; 0x37fa <Observer+0x476>
		phi_hat += (Drone->w[0] + sinf(Drone->Euler[0])*tanf(Drone->Euler[1])*Drone->w[1] + cosf(Drone->Euler[0])*tanf(Drone->Euler[1])*Drone->w[2])*dt;
    3666:	e9 a5       	ldd	r30, Y+41	; 0x29
    3668:	fa a5       	ldd	r31, Y+42	; 0x2a
    366a:	c0 80       	ld	r12, Z
    366c:	d1 80       	ldd	r13, Z+1	; 0x01
    366e:	e2 80       	ldd	r14, Z+2	; 0x02
    3670:	f3 80       	ldd	r15, Z+3	; 0x03
    3672:	69 81       	ldd	r22, Y+1	; 0x01
    3674:	7a 81       	ldd	r23, Y+2	; 0x02
    3676:	8b 81       	ldd	r24, Y+3	; 0x03
    3678:	9c 81       	ldd	r25, Y+4	; 0x04
    367a:	0e 94 52 20 	call	0x40a4	; 0x40a4 <tan>
    367e:	6d 8f       	std	Y+29, r22	; 0x1d
    3680:	7e 8f       	std	Y+30, r23	; 0x1e
    3682:	8f 8f       	std	Y+31, r24	; 0x1f
    3684:	98 a3       	std	Y+32, r25	; 0x20
    3686:	9b 01       	movw	r18, r22
    3688:	ac 01       	movw	r20, r24
    368a:	69 85       	ldd	r22, Y+9	; 0x09
    368c:	7a 85       	ldd	r23, Y+10	; 0x0a
    368e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3690:	9c 85       	ldd	r25, Y+12	; 0x0c
    3692:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__mulsf3>
    3696:	a9 a5       	ldd	r26, Y+41	; 0x29
    3698:	ba a5       	ldd	r27, Y+42	; 0x2a
    369a:	14 96       	adiw	r26, 0x04	; 4
    369c:	2d 91       	ld	r18, X+
    369e:	3d 91       	ld	r19, X+
    36a0:	4d 91       	ld	r20, X+
    36a2:	5c 91       	ld	r21, X
    36a4:	17 97       	sbiw	r26, 0x07	; 7
    36a6:	29 a3       	std	Y+33, r18	; 0x21
    36a8:	3a a3       	std	Y+34, r19	; 0x22
    36aa:	4b a3       	std	Y+35, r20	; 0x23
    36ac:	5c a3       	std	Y+36, r21	; 0x24
    36ae:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__mulsf3>
    36b2:	9b 01       	movw	r18, r22
    36b4:	ac 01       	movw	r20, r24
    36b6:	c7 01       	movw	r24, r14
    36b8:	b6 01       	movw	r22, r12
    36ba:	0e 94 8e 1c 	call	0x391c	; 0x391c <__addsf3>
    36be:	6d a3       	std	Y+37, r22	; 0x25
    36c0:	7e a3       	std	Y+38, r23	; 0x26
    36c2:	8f a3       	std	Y+39, r24	; 0x27
    36c4:	98 a7       	std	Y+40, r25	; 0x28
    36c6:	2d 8d       	ldd	r18, Y+29	; 0x1d
    36c8:	3e 8d       	ldd	r19, Y+30	; 0x1e
    36ca:	4f 8d       	ldd	r20, Y+31	; 0x1f
    36cc:	58 a1       	ldd	r21, Y+32	; 0x20
    36ce:	6d 85       	ldd	r22, Y+13	; 0x0d
    36d0:	7e 85       	ldd	r23, Y+14	; 0x0e
    36d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    36d4:	98 89       	ldd	r25, Y+16	; 0x10
    36d6:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__mulsf3>
    36da:	e9 a5       	ldd	r30, Y+41	; 0x29
    36dc:	fa a5       	ldd	r31, Y+42	; 0x2a
    36de:	c0 84       	ldd	r12, Z+8	; 0x08
    36e0:	d1 84       	ldd	r13, Z+9	; 0x09
    36e2:	e2 84       	ldd	r14, Z+10	; 0x0a
    36e4:	f3 84       	ldd	r15, Z+11	; 0x0b
    36e6:	a7 01       	movw	r20, r14
    36e8:	96 01       	movw	r18, r12
    36ea:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__mulsf3>
    36ee:	9b 01       	movw	r18, r22
    36f0:	ac 01       	movw	r20, r24
    36f2:	6d a1       	ldd	r22, Y+37	; 0x25
    36f4:	7e a1       	ldd	r23, Y+38	; 0x26
    36f6:	8f a1       	ldd	r24, Y+39	; 0x27
    36f8:	98 a5       	ldd	r25, Y+40	; 0x28
    36fa:	0e 94 8e 1c 	call	0x391c	; 0x391c <__addsf3>
    36fe:	2a e0       	ldi	r18, 0x0A	; 10
    3700:	37 ed       	ldi	r19, 0xD7	; 215
    3702:	43 e2       	ldi	r20, 0x23	; 35
    3704:	5d e3       	ldi	r21, 0x3D	; 61
    3706:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__mulsf3>
    370a:	9b 01       	movw	r18, r22
    370c:	ac 01       	movw	r20, r24
    370e:	6d 81       	ldd	r22, Y+5	; 0x05
    3710:	7e 81       	ldd	r23, Y+6	; 0x06
    3712:	8f 81       	ldd	r24, Y+7	; 0x07
    3714:	98 85       	ldd	r25, Y+8	; 0x08
    3716:	0e 94 8e 1c 	call	0x391c	; 0x391c <__addsf3>
    371a:	6d 83       	std	Y+5, r22	; 0x05
    371c:	7e 83       	std	Y+6, r23	; 0x06
    371e:	8f 83       	std	Y+7, r24	; 0x07
    3720:	98 87       	std	Y+8, r25	; 0x08
		theta_hat += (cosf(Drone->Euler[0])*Drone->w[1] - sinf(Drone->Euler[0])*Drone->w[2])*dt;
    3722:	29 a1       	ldd	r18, Y+33	; 0x21
    3724:	3a a1       	ldd	r19, Y+34	; 0x22
    3726:	4b a1       	ldd	r20, Y+35	; 0x23
    3728:	5c a1       	ldd	r21, Y+36	; 0x24
    372a:	6d 85       	ldd	r22, Y+13	; 0x0d
    372c:	7e 85       	ldd	r23, Y+14	; 0x0e
    372e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3730:	98 89       	ldd	r25, Y+16	; 0x10
    3732:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__mulsf3>
    3736:	6d 8f       	std	Y+29, r22	; 0x1d
    3738:	7e 8f       	std	Y+30, r23	; 0x1e
    373a:	8f 8f       	std	Y+31, r24	; 0x1f
    373c:	98 a3       	std	Y+32, r25	; 0x20
    373e:	a7 01       	movw	r20, r14
    3740:	96 01       	movw	r18, r12
    3742:	69 85       	ldd	r22, Y+9	; 0x09
    3744:	7a 85       	ldd	r23, Y+10	; 0x0a
    3746:	8b 85       	ldd	r24, Y+11	; 0x0b
    3748:	9c 85       	ldd	r25, Y+12	; 0x0c
    374a:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__mulsf3>
    374e:	9b 01       	movw	r18, r22
    3750:	ac 01       	movw	r20, r24
    3752:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3754:	7e 8d       	ldd	r23, Y+30	; 0x1e
    3756:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3758:	98 a1       	ldd	r25, Y+32	; 0x20
    375a:	0e 94 8d 1c 	call	0x391a	; 0x391a <__subsf3>
    375e:	2a e0       	ldi	r18, 0x0A	; 10
    3760:	37 ed       	ldi	r19, 0xD7	; 215
    3762:	43 e2       	ldi	r20, 0x23	; 35
    3764:	5d e3       	ldi	r21, 0x3D	; 61
    3766:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__mulsf3>
    376a:	9b 01       	movw	r18, r22
    376c:	ac 01       	movw	r20, r24
    376e:	69 81       	ldd	r22, Y+1	; 0x01
    3770:	7a 81       	ldd	r23, Y+2	; 0x02
    3772:	8b 81       	ldd	r24, Y+3	; 0x03
    3774:	9c 81       	ldd	r25, Y+4	; 0x04
    3776:	0e 94 8e 1c 	call	0x391c	; 0x391c <__addsf3>
    377a:	69 83       	std	Y+1, r22	; 0x01
    377c:	7a 83       	std	Y+2, r23	; 0x02
    377e:	8b 83       	std	Y+3, r24	; 0x03
    3780:	9c 83       	std	Y+4, r25	; 0x04
		psi_hat += ((sinf(Drone->Euler[0])/cosf(Drone->Euler[1]))*Drone->w[1] + (cosf(Drone->Euler[0])/cosf(Drone->Euler[1]))*Drone->w[2])*dt;
    3782:	29 8d       	ldd	r18, Y+25	; 0x19
    3784:	3a 8d       	ldd	r19, Y+26	; 0x1a
    3786:	4b 8d       	ldd	r20, Y+27	; 0x1b
    3788:	5c 8d       	ldd	r21, Y+28	; 0x1c
    378a:	69 85       	ldd	r22, Y+9	; 0x09
    378c:	7a 85       	ldd	r23, Y+10	; 0x0a
    378e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3790:	9c 85       	ldd	r25, Y+12	; 0x0c
    3792:	0e 94 76 1d 	call	0x3aec	; 0x3aec <__divsf3>
    3796:	9b 01       	movw	r18, r22
    3798:	ac 01       	movw	r20, r24
    379a:	69 a1       	ldd	r22, Y+33	; 0x21
    379c:	7a a1       	ldd	r23, Y+34	; 0x22
    379e:	8b a1       	ldd	r24, Y+35	; 0x23
    37a0:	9c a1       	ldd	r25, Y+36	; 0x24
    37a2:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__mulsf3>
    37a6:	69 87       	std	Y+9, r22	; 0x09
    37a8:	7a 87       	std	Y+10, r23	; 0x0a
    37aa:	8b 87       	std	Y+11, r24	; 0x0b
    37ac:	9c 87       	std	Y+12, r25	; 0x0c
    37ae:	29 8d       	ldd	r18, Y+25	; 0x19
    37b0:	3a 8d       	ldd	r19, Y+26	; 0x1a
    37b2:	4b 8d       	ldd	r20, Y+27	; 0x1b
    37b4:	5c 8d       	ldd	r21, Y+28	; 0x1c
    37b6:	6d 85       	ldd	r22, Y+13	; 0x0d
    37b8:	7e 85       	ldd	r23, Y+14	; 0x0e
    37ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    37bc:	98 89       	ldd	r25, Y+16	; 0x10
    37be:	0e 94 76 1d 	call	0x3aec	; 0x3aec <__divsf3>
    37c2:	9b 01       	movw	r18, r22
    37c4:	ac 01       	movw	r20, r24
    37c6:	c7 01       	movw	r24, r14
    37c8:	b6 01       	movw	r22, r12
    37ca:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__mulsf3>
    37ce:	9b 01       	movw	r18, r22
    37d0:	ac 01       	movw	r20, r24
    37d2:	69 85       	ldd	r22, Y+9	; 0x09
    37d4:	7a 85       	ldd	r23, Y+10	; 0x0a
    37d6:	8b 85       	ldd	r24, Y+11	; 0x0b
    37d8:	9c 85       	ldd	r25, Y+12	; 0x0c
    37da:	0e 94 8e 1c 	call	0x391c	; 0x391c <__addsf3>
    37de:	2a e0       	ldi	r18, 0x0A	; 10
    37e0:	37 ed       	ldi	r19, 0xD7	; 215
    37e2:	43 e2       	ldi	r20, 0x23	; 35
    37e4:	5d e3       	ldi	r21, 0x3D	; 61
    37e6:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__mulsf3>
    37ea:	9b 01       	movw	r18, r22
    37ec:	ac 01       	movw	r20, r24
    37ee:	c5 01       	movw	r24, r10
    37f0:	b4 01       	movw	r22, r8
    37f2:	0e 94 8e 1c 	call	0x391c	; 0x391c <__addsf3>
    37f6:	4b 01       	movw	r8, r22
    37f8:	5c 01       	movw	r10, r24
	}
	// Update
	Drone->Euler[0] = phi_hat + L*(phi_m-phi_hat);
    37fa:	2d 81       	ldd	r18, Y+5	; 0x05
    37fc:	3e 81       	ldd	r19, Y+6	; 0x06
    37fe:	4f 81       	ldd	r20, Y+7	; 0x07
    3800:	58 85       	ldd	r21, Y+8	; 0x08
    3802:	69 89       	ldd	r22, Y+17	; 0x11
    3804:	7a 89       	ldd	r23, Y+18	; 0x12
    3806:	8b 89       	ldd	r24, Y+19	; 0x13
    3808:	9c 89       	ldd	r25, Y+20	; 0x14
    380a:	0e 94 8d 1c 	call	0x391a	; 0x391a <__subsf3>
    380e:	2d ec       	ldi	r18, 0xCD	; 205
    3810:	3c ec       	ldi	r19, 0xCC	; 204
    3812:	4c e4       	ldi	r20, 0x4C	; 76
    3814:	5d e3       	ldi	r21, 0x3D	; 61
    3816:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__mulsf3>
    381a:	9b 01       	movw	r18, r22
    381c:	ac 01       	movw	r20, r24
    381e:	6d 81       	ldd	r22, Y+5	; 0x05
    3820:	7e 81       	ldd	r23, Y+6	; 0x06
    3822:	8f 81       	ldd	r24, Y+7	; 0x07
    3824:	98 85       	ldd	r25, Y+8	; 0x08
    3826:	0e 94 8e 1c 	call	0x391c	; 0x391c <__addsf3>
    382a:	a9 a5       	ldd	r26, Y+41	; 0x29
    382c:	ba a5       	ldd	r27, Y+42	; 0x2a
    382e:	94 96       	adiw	r26, 0x24	; 36
    3830:	6d 93       	st	X+, r22
    3832:	7d 93       	st	X+, r23
    3834:	8d 93       	st	X+, r24
    3836:	9c 93       	st	X, r25
    3838:	97 97       	sbiw	r26, 0x27	; 39
	Drone->Euler[1] = theta_hat + L*(theta_m-theta_hat);
    383a:	29 81       	ldd	r18, Y+1	; 0x01
    383c:	3a 81       	ldd	r19, Y+2	; 0x02
    383e:	4b 81       	ldd	r20, Y+3	; 0x03
    3840:	5c 81       	ldd	r21, Y+4	; 0x04
    3842:	6d 89       	ldd	r22, Y+21	; 0x15
    3844:	7e 89       	ldd	r23, Y+22	; 0x16
    3846:	8f 89       	ldd	r24, Y+23	; 0x17
    3848:	98 8d       	ldd	r25, Y+24	; 0x18
    384a:	0e 94 8d 1c 	call	0x391a	; 0x391a <__subsf3>
    384e:	2d ec       	ldi	r18, 0xCD	; 205
    3850:	3c ec       	ldi	r19, 0xCC	; 204
    3852:	4c e4       	ldi	r20, 0x4C	; 76
    3854:	5d e3       	ldi	r21, 0x3D	; 61
    3856:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__mulsf3>
    385a:	9b 01       	movw	r18, r22
    385c:	ac 01       	movw	r20, r24
    385e:	69 81       	ldd	r22, Y+1	; 0x01
    3860:	7a 81       	ldd	r23, Y+2	; 0x02
    3862:	8b 81       	ldd	r24, Y+3	; 0x03
    3864:	9c 81       	ldd	r25, Y+4	; 0x04
    3866:	0e 94 8e 1c 	call	0x391c	; 0x391c <__addsf3>
    386a:	e9 a5       	ldd	r30, Y+41	; 0x29
    386c:	fa a5       	ldd	r31, Y+42	; 0x2a
    386e:	60 a7       	std	Z+40, r22	; 0x28
    3870:	71 a7       	std	Z+41, r23	; 0x29
    3872:	82 a7       	std	Z+42, r24	; 0x2a
    3874:	93 a7       	std	Z+43, r25	; 0x2b
	// Prevent yaw angle discontinuity at 2pi - 0 to cause the filter to slowly cycle between them
	Drone->Euler[2] = (abs(psi_m-psi_hat)>M_PI)?(psi_m):(psi_hat + L*(psi_m-psi_hat));
    3876:	a5 01       	movw	r20, r10
    3878:	94 01       	movw	r18, r8
    387a:	c3 01       	movw	r24, r6
    387c:	b2 01       	movw	r22, r4
    387e:	0e 94 8d 1c 	call	0x391a	; 0x391a <__subsf3>
    3882:	6b 01       	movw	r12, r22
    3884:	7c 01       	movw	r14, r24
    3886:	0e 94 e8 1d 	call	0x3bd0	; 0x3bd0 <__fixsfsi>
    388a:	9b 01       	movw	r18, r22
    388c:	77 23       	and	r23, r23
    388e:	24 f4       	brge	.+8      	; 0x3898 <Observer+0x514>
    3890:	22 27       	eor	r18, r18
    3892:	33 27       	eor	r19, r19
    3894:	26 1b       	sub	r18, r22
    3896:	37 0b       	sbc	r19, r23
    3898:	b9 01       	movw	r22, r18
    389a:	33 0f       	add	r19, r19
    389c:	88 0b       	sbc	r24, r24
    389e:	99 0b       	sbc	r25, r25
    38a0:	0e 94 20 1e 	call	0x3c40	; 0x3c40 <__floatsisf>
    38a4:	2b ed       	ldi	r18, 0xDB	; 219
    38a6:	3f e0       	ldi	r19, 0x0F	; 15
    38a8:	49 e4       	ldi	r20, 0x49	; 73
    38aa:	50 e4       	ldi	r21, 0x40	; 64
    38ac:	0e 94 36 1f 	call	0x3e6c	; 0x3e6c <__gesf2>
    38b0:	18 16       	cp	r1, r24
    38b2:	8c f0       	brlt	.+34     	; 0x38d6 <Observer+0x552>
    38b4:	2d ec       	ldi	r18, 0xCD	; 205
    38b6:	3c ec       	ldi	r19, 0xCC	; 204
    38b8:	4c e4       	ldi	r20, 0x4C	; 76
    38ba:	5d e3       	ldi	r21, 0x3D	; 61
    38bc:	c7 01       	movw	r24, r14
    38be:	b6 01       	movw	r22, r12
    38c0:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__mulsf3>
    38c4:	9b 01       	movw	r18, r22
    38c6:	ac 01       	movw	r20, r24
    38c8:	c5 01       	movw	r24, r10
    38ca:	b4 01       	movw	r22, r8
    38cc:	0e 94 8e 1c 	call	0x391c	; 0x391c <__addsf3>
    38d0:	36 2f       	mov	r19, r22
    38d2:	27 2f       	mov	r18, r23
    38d4:	04 c0       	rjmp	.+8      	; 0x38de <Observer+0x55a>
    38d6:	34 2d       	mov	r19, r4
    38d8:	25 2d       	mov	r18, r5
    38da:	86 2d       	mov	r24, r6
    38dc:	97 2d       	mov	r25, r7
    38de:	43 2f       	mov	r20, r19
    38e0:	52 2f       	mov	r21, r18
    38e2:	68 2f       	mov	r22, r24
    38e4:	79 2f       	mov	r23, r25
    38e6:	a9 a5       	ldd	r26, Y+41	; 0x29
    38e8:	ba a5       	ldd	r27, Y+42	; 0x2a
    38ea:	9c 96       	adiw	r26, 0x2c	; 44
    38ec:	4d 93       	st	X+, r20
    38ee:	5d 93       	st	X+, r21
    38f0:	6d 93       	st	X+, r22
    38f2:	7c 93       	st	X, r23
    38f4:	9f 97       	sbiw	r26, 0x2f	; 47
    38f6:	aa 96       	adiw	r28, 0x2a	; 42
    38f8:	cd bf       	out	0x3d, r28	; 61
    38fa:	de bf       	out	0x3e, r29	; 62
    38fc:	df 91       	pop	r29
    38fe:	cf 91       	pop	r28
    3900:	ff 90       	pop	r15
    3902:	ef 90       	pop	r14
    3904:	df 90       	pop	r13
    3906:	cf 90       	pop	r12
    3908:	bf 90       	pop	r11
    390a:	af 90       	pop	r10
    390c:	9f 90       	pop	r9
    390e:	8f 90       	pop	r8
    3910:	7f 90       	pop	r7
    3912:	6f 90       	pop	r6
    3914:	5f 90       	pop	r5
    3916:	4f 90       	pop	r4
    3918:	08 95       	ret

0000391a <__subsf3>:
    391a:	50 58       	subi	r21, 0x80	; 128

0000391c <__addsf3>:
    391c:	bb 27       	eor	r27, r27
    391e:	aa 27       	eor	r26, r26
    3920:	0e 94 a5 1c 	call	0x394a	; 0x394a <__addsf3x>
    3924:	0c 94 e8 1e 	jmp	0x3dd0	; 0x3dd0 <__fp_round>
    3928:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__fp_pscA>
    392c:	38 f0       	brcs	.+14     	; 0x393c <__addsf3+0x20>
    392e:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <__fp_pscB>
    3932:	20 f0       	brcs	.+8      	; 0x393c <__addsf3+0x20>
    3934:	39 f4       	brne	.+14     	; 0x3944 <__addsf3+0x28>
    3936:	9f 3f       	cpi	r25, 0xFF	; 255
    3938:	19 f4       	brne	.+6      	; 0x3940 <__addsf3+0x24>
    393a:	26 f4       	brtc	.+8      	; 0x3944 <__addsf3+0x28>
    393c:	0c 94 85 1e 	jmp	0x3d0a	; 0x3d0a <__fp_nan>
    3940:	0e f4       	brtc	.+2      	; 0x3944 <__addsf3+0x28>
    3942:	e0 95       	com	r30
    3944:	e7 fb       	bst	r30, 7
    3946:	0c 94 7f 1e 	jmp	0x3cfe	; 0x3cfe <__fp_inf>

0000394a <__addsf3x>:
    394a:	e9 2f       	mov	r30, r25
    394c:	0e 94 0d 1f 	call	0x3e1a	; 0x3e1a <__fp_split3>
    3950:	58 f3       	brcs	.-42     	; 0x3928 <__addsf3+0xc>
    3952:	ba 17       	cp	r27, r26
    3954:	62 07       	cpc	r22, r18
    3956:	73 07       	cpc	r23, r19
    3958:	84 07       	cpc	r24, r20
    395a:	95 07       	cpc	r25, r21
    395c:	20 f0       	brcs	.+8      	; 0x3966 <__addsf3x+0x1c>
    395e:	79 f4       	brne	.+30     	; 0x397e <__addsf3x+0x34>
    3960:	a6 f5       	brtc	.+104    	; 0x39ca <__addsf3x+0x80>
    3962:	0c 94 2f 1f 	jmp	0x3e5e	; 0x3e5e <__fp_zero>
    3966:	0e f4       	brtc	.+2      	; 0x396a <__addsf3x+0x20>
    3968:	e0 95       	com	r30
    396a:	0b 2e       	mov	r0, r27
    396c:	ba 2f       	mov	r27, r26
    396e:	a0 2d       	mov	r26, r0
    3970:	0b 01       	movw	r0, r22
    3972:	b9 01       	movw	r22, r18
    3974:	90 01       	movw	r18, r0
    3976:	0c 01       	movw	r0, r24
    3978:	ca 01       	movw	r24, r20
    397a:	a0 01       	movw	r20, r0
    397c:	11 24       	eor	r1, r1
    397e:	ff 27       	eor	r31, r31
    3980:	59 1b       	sub	r21, r25
    3982:	99 f0       	breq	.+38     	; 0x39aa <__addsf3x+0x60>
    3984:	59 3f       	cpi	r21, 0xF9	; 249
    3986:	50 f4       	brcc	.+20     	; 0x399c <__addsf3x+0x52>
    3988:	50 3e       	cpi	r21, 0xE0	; 224
    398a:	68 f1       	brcs	.+90     	; 0x39e6 <__addsf3x+0x9c>
    398c:	1a 16       	cp	r1, r26
    398e:	f0 40       	sbci	r31, 0x00	; 0
    3990:	a2 2f       	mov	r26, r18
    3992:	23 2f       	mov	r18, r19
    3994:	34 2f       	mov	r19, r20
    3996:	44 27       	eor	r20, r20
    3998:	58 5f       	subi	r21, 0xF8	; 248
    399a:	f3 cf       	rjmp	.-26     	; 0x3982 <__addsf3x+0x38>
    399c:	46 95       	lsr	r20
    399e:	37 95       	ror	r19
    39a0:	27 95       	ror	r18
    39a2:	a7 95       	ror	r26
    39a4:	f0 40       	sbci	r31, 0x00	; 0
    39a6:	53 95       	inc	r21
    39a8:	c9 f7       	brne	.-14     	; 0x399c <__addsf3x+0x52>
    39aa:	7e f4       	brtc	.+30     	; 0x39ca <__addsf3x+0x80>
    39ac:	1f 16       	cp	r1, r31
    39ae:	ba 0b       	sbc	r27, r26
    39b0:	62 0b       	sbc	r22, r18
    39b2:	73 0b       	sbc	r23, r19
    39b4:	84 0b       	sbc	r24, r20
    39b6:	ba f0       	brmi	.+46     	; 0x39e6 <__addsf3x+0x9c>
    39b8:	91 50       	subi	r25, 0x01	; 1
    39ba:	a1 f0       	breq	.+40     	; 0x39e4 <__addsf3x+0x9a>
    39bc:	ff 0f       	add	r31, r31
    39be:	bb 1f       	adc	r27, r27
    39c0:	66 1f       	adc	r22, r22
    39c2:	77 1f       	adc	r23, r23
    39c4:	88 1f       	adc	r24, r24
    39c6:	c2 f7       	brpl	.-16     	; 0x39b8 <__addsf3x+0x6e>
    39c8:	0e c0       	rjmp	.+28     	; 0x39e6 <__addsf3x+0x9c>
    39ca:	ba 0f       	add	r27, r26
    39cc:	62 1f       	adc	r22, r18
    39ce:	73 1f       	adc	r23, r19
    39d0:	84 1f       	adc	r24, r20
    39d2:	48 f4       	brcc	.+18     	; 0x39e6 <__addsf3x+0x9c>
    39d4:	87 95       	ror	r24
    39d6:	77 95       	ror	r23
    39d8:	67 95       	ror	r22
    39da:	b7 95       	ror	r27
    39dc:	f7 95       	ror	r31
    39de:	9e 3f       	cpi	r25, 0xFE	; 254
    39e0:	08 f0       	brcs	.+2      	; 0x39e4 <__addsf3x+0x9a>
    39e2:	b0 cf       	rjmp	.-160    	; 0x3944 <__addsf3+0x28>
    39e4:	93 95       	inc	r25
    39e6:	88 0f       	add	r24, r24
    39e8:	08 f0       	brcs	.+2      	; 0x39ec <__addsf3x+0xa2>
    39ea:	99 27       	eor	r25, r25
    39ec:	ee 0f       	add	r30, r30
    39ee:	97 95       	ror	r25
    39f0:	87 95       	ror	r24
    39f2:	08 95       	ret
    39f4:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__fp_pscA>
    39f8:	60 f0       	brcs	.+24     	; 0x3a12 <__addsf3x+0xc8>
    39fa:	80 e8       	ldi	r24, 0x80	; 128
    39fc:	91 e0       	ldi	r25, 0x01	; 1
    39fe:	09 f4       	brne	.+2      	; 0x3a02 <__addsf3x+0xb8>
    3a00:	9e ef       	ldi	r25, 0xFE	; 254
    3a02:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <__fp_pscB>
    3a06:	28 f0       	brcs	.+10     	; 0x3a12 <__addsf3x+0xc8>
    3a08:	40 e8       	ldi	r20, 0x80	; 128
    3a0a:	51 e0       	ldi	r21, 0x01	; 1
    3a0c:	71 f4       	brne	.+28     	; 0x3a2a <atan2+0x10>
    3a0e:	5e ef       	ldi	r21, 0xFE	; 254
    3a10:	0c c0       	rjmp	.+24     	; 0x3a2a <atan2+0x10>
    3a12:	0c 94 85 1e 	jmp	0x3d0a	; 0x3d0a <__fp_nan>
    3a16:	0c 94 2f 1f 	jmp	0x3e5e	; 0x3e5e <__fp_zero>

00003a1a <atan2>:
    3a1a:	e9 2f       	mov	r30, r25
    3a1c:	e0 78       	andi	r30, 0x80	; 128
    3a1e:	0e 94 0d 1f 	call	0x3e1a	; 0x3e1a <__fp_split3>
    3a22:	40 f3       	brcs	.-48     	; 0x39f4 <__addsf3x+0xaa>
    3a24:	09 2e       	mov	r0, r25
    3a26:	05 2a       	or	r0, r21
    3a28:	b1 f3       	breq	.-20     	; 0x3a16 <__addsf3x+0xcc>
    3a2a:	26 17       	cp	r18, r22
    3a2c:	37 07       	cpc	r19, r23
    3a2e:	48 07       	cpc	r20, r24
    3a30:	59 07       	cpc	r21, r25
    3a32:	38 f0       	brcs	.+14     	; 0x3a42 <atan2+0x28>
    3a34:	0e 2e       	mov	r0, r30
    3a36:	07 f8       	bld	r0, 7
    3a38:	e0 25       	eor	r30, r0
    3a3a:	69 f0       	breq	.+26     	; 0x3a56 <atan2+0x3c>
    3a3c:	e0 25       	eor	r30, r0
    3a3e:	e0 64       	ori	r30, 0x40	; 64
    3a40:	0a c0       	rjmp	.+20     	; 0x3a56 <atan2+0x3c>
    3a42:	ef 63       	ori	r30, 0x3F	; 63
    3a44:	07 f8       	bld	r0, 7
    3a46:	00 94       	com	r0
    3a48:	07 fa       	bst	r0, 7
    3a4a:	db 01       	movw	r26, r22
    3a4c:	b9 01       	movw	r22, r18
    3a4e:	9d 01       	movw	r18, r26
    3a50:	dc 01       	movw	r26, r24
    3a52:	ca 01       	movw	r24, r20
    3a54:	ad 01       	movw	r20, r26
    3a56:	ef 93       	push	r30
    3a58:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <__divsf3_pse>
    3a5c:	0e 94 e8 1e 	call	0x3dd0	; 0x3dd0 <__fp_round>
    3a60:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <atan>
    3a64:	5f 91       	pop	r21
    3a66:	55 23       	and	r21, r21
    3a68:	39 f0       	breq	.+14     	; 0x3a78 <atan2+0x5e>
    3a6a:	2b ed       	ldi	r18, 0xDB	; 219
    3a6c:	3f e0       	ldi	r19, 0x0F	; 15
    3a6e:	49 e4       	ldi	r20, 0x49	; 73
    3a70:	50 fd       	sbrc	r21, 0
    3a72:	49 ec       	ldi	r20, 0xC9	; 201
    3a74:	0c 94 8e 1c 	jmp	0x391c	; 0x391c <__addsf3>
    3a78:	08 95       	ret

00003a7a <atan>:
    3a7a:	df 93       	push	r29
    3a7c:	dd 27       	eor	r29, r29
    3a7e:	b9 2f       	mov	r27, r25
    3a80:	bf 77       	andi	r27, 0x7F	; 127
    3a82:	40 e8       	ldi	r20, 0x80	; 128
    3a84:	5f e3       	ldi	r21, 0x3F	; 63
    3a86:	16 16       	cp	r1, r22
    3a88:	17 06       	cpc	r1, r23
    3a8a:	48 07       	cpc	r20, r24
    3a8c:	5b 07       	cpc	r21, r27
    3a8e:	18 f4       	brcc	.+6      	; 0x3a96 <atan+0x1c>
    3a90:	d9 2f       	mov	r29, r25
    3a92:	0e 94 3b 1f 	call	0x3e76	; 0x3e76 <inverse>
    3a96:	9f 93       	push	r25
    3a98:	8f 93       	push	r24
    3a9a:	7f 93       	push	r23
    3a9c:	6f 93       	push	r22
    3a9e:	0e 94 4e 20 	call	0x409c	; 0x409c <square>
    3aa2:	e0 e7       	ldi	r30, 0x70	; 112
    3aa4:	f1 e0       	ldi	r31, 0x01	; 1
    3aa6:	0e 94 88 1e 	call	0x3d10	; 0x3d10 <__fp_powser>
    3aaa:	0e 94 e8 1e 	call	0x3dd0	; 0x3dd0 <__fp_round>
    3aae:	2f 91       	pop	r18
    3ab0:	3f 91       	pop	r19
    3ab2:	4f 91       	pop	r20
    3ab4:	5f 91       	pop	r21
    3ab6:	0e 94 56 1f 	call	0x3eac	; 0x3eac <__mulsf3x>
    3aba:	dd 23       	and	r29, r29
    3abc:	51 f0       	breq	.+20     	; 0x3ad2 <atan+0x58>
    3abe:	90 58       	subi	r25, 0x80	; 128
    3ac0:	a2 ea       	ldi	r26, 0xA2	; 162
    3ac2:	2a ed       	ldi	r18, 0xDA	; 218
    3ac4:	3f e0       	ldi	r19, 0x0F	; 15
    3ac6:	49 ec       	ldi	r20, 0xC9	; 201
    3ac8:	5f e3       	ldi	r21, 0x3F	; 63
    3aca:	d0 78       	andi	r29, 0x80	; 128
    3acc:	5d 27       	eor	r21, r29
    3ace:	0e 94 a5 1c 	call	0x394a	; 0x394a <__addsf3x>
    3ad2:	df 91       	pop	r29
    3ad4:	0c 94 e8 1e 	jmp	0x3dd0	; 0x3dd0 <__fp_round>

00003ad8 <__cmpsf2>:
    3ad8:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <__fp_cmp>
    3adc:	08 f4       	brcc	.+2      	; 0x3ae0 <__cmpsf2+0x8>
    3ade:	81 e0       	ldi	r24, 0x01	; 1
    3ae0:	08 95       	ret

00003ae2 <cos>:
    3ae2:	0e 94 bf 1e 	call	0x3d7e	; 0x3d7e <__fp_rempio2>
    3ae6:	e3 95       	inc	r30
    3ae8:	0c 94 f9 1e 	jmp	0x3df2	; 0x3df2 <__fp_sinus>

00003aec <__divsf3>:
    3aec:	0e 94 8a 1d 	call	0x3b14	; 0x3b14 <__divsf3x>
    3af0:	0c 94 e8 1e 	jmp	0x3dd0	; 0x3dd0 <__fp_round>
    3af4:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <__fp_pscB>
    3af8:	58 f0       	brcs	.+22     	; 0x3b10 <__divsf3+0x24>
    3afa:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__fp_pscA>
    3afe:	40 f0       	brcs	.+16     	; 0x3b10 <__divsf3+0x24>
    3b00:	29 f4       	brne	.+10     	; 0x3b0c <__divsf3+0x20>
    3b02:	5f 3f       	cpi	r21, 0xFF	; 255
    3b04:	29 f0       	breq	.+10     	; 0x3b10 <__divsf3+0x24>
    3b06:	0c 94 7f 1e 	jmp	0x3cfe	; 0x3cfe <__fp_inf>
    3b0a:	51 11       	cpse	r21, r1
    3b0c:	0c 94 30 1f 	jmp	0x3e60	; 0x3e60 <__fp_szero>
    3b10:	0c 94 85 1e 	jmp	0x3d0a	; 0x3d0a <__fp_nan>

00003b14 <__divsf3x>:
    3b14:	0e 94 0d 1f 	call	0x3e1a	; 0x3e1a <__fp_split3>
    3b18:	68 f3       	brcs	.-38     	; 0x3af4 <__divsf3+0x8>

00003b1a <__divsf3_pse>:
    3b1a:	99 23       	and	r25, r25
    3b1c:	b1 f3       	breq	.-20     	; 0x3b0a <__divsf3+0x1e>
    3b1e:	55 23       	and	r21, r21
    3b20:	91 f3       	breq	.-28     	; 0x3b06 <__divsf3+0x1a>
    3b22:	95 1b       	sub	r25, r21
    3b24:	55 0b       	sbc	r21, r21
    3b26:	bb 27       	eor	r27, r27
    3b28:	aa 27       	eor	r26, r26
    3b2a:	62 17       	cp	r22, r18
    3b2c:	73 07       	cpc	r23, r19
    3b2e:	84 07       	cpc	r24, r20
    3b30:	38 f0       	brcs	.+14     	; 0x3b40 <__divsf3_pse+0x26>
    3b32:	9f 5f       	subi	r25, 0xFF	; 255
    3b34:	5f 4f       	sbci	r21, 0xFF	; 255
    3b36:	22 0f       	add	r18, r18
    3b38:	33 1f       	adc	r19, r19
    3b3a:	44 1f       	adc	r20, r20
    3b3c:	aa 1f       	adc	r26, r26
    3b3e:	a9 f3       	breq	.-22     	; 0x3b2a <__divsf3_pse+0x10>
    3b40:	35 d0       	rcall	.+106    	; 0x3bac <__divsf3_pse+0x92>
    3b42:	0e 2e       	mov	r0, r30
    3b44:	3a f0       	brmi	.+14     	; 0x3b54 <__divsf3_pse+0x3a>
    3b46:	e0 e8       	ldi	r30, 0x80	; 128
    3b48:	32 d0       	rcall	.+100    	; 0x3bae <__divsf3_pse+0x94>
    3b4a:	91 50       	subi	r25, 0x01	; 1
    3b4c:	50 40       	sbci	r21, 0x00	; 0
    3b4e:	e6 95       	lsr	r30
    3b50:	00 1c       	adc	r0, r0
    3b52:	ca f7       	brpl	.-14     	; 0x3b46 <__divsf3_pse+0x2c>
    3b54:	2b d0       	rcall	.+86     	; 0x3bac <__divsf3_pse+0x92>
    3b56:	fe 2f       	mov	r31, r30
    3b58:	29 d0       	rcall	.+82     	; 0x3bac <__divsf3_pse+0x92>
    3b5a:	66 0f       	add	r22, r22
    3b5c:	77 1f       	adc	r23, r23
    3b5e:	88 1f       	adc	r24, r24
    3b60:	bb 1f       	adc	r27, r27
    3b62:	26 17       	cp	r18, r22
    3b64:	37 07       	cpc	r19, r23
    3b66:	48 07       	cpc	r20, r24
    3b68:	ab 07       	cpc	r26, r27
    3b6a:	b0 e8       	ldi	r27, 0x80	; 128
    3b6c:	09 f0       	breq	.+2      	; 0x3b70 <__divsf3_pse+0x56>
    3b6e:	bb 0b       	sbc	r27, r27
    3b70:	80 2d       	mov	r24, r0
    3b72:	bf 01       	movw	r22, r30
    3b74:	ff 27       	eor	r31, r31
    3b76:	93 58       	subi	r25, 0x83	; 131
    3b78:	5f 4f       	sbci	r21, 0xFF	; 255
    3b7a:	3a f0       	brmi	.+14     	; 0x3b8a <__divsf3_pse+0x70>
    3b7c:	9e 3f       	cpi	r25, 0xFE	; 254
    3b7e:	51 05       	cpc	r21, r1
    3b80:	78 f0       	brcs	.+30     	; 0x3ba0 <__divsf3_pse+0x86>
    3b82:	0c 94 7f 1e 	jmp	0x3cfe	; 0x3cfe <__fp_inf>
    3b86:	0c 94 30 1f 	jmp	0x3e60	; 0x3e60 <__fp_szero>
    3b8a:	5f 3f       	cpi	r21, 0xFF	; 255
    3b8c:	e4 f3       	brlt	.-8      	; 0x3b86 <__divsf3_pse+0x6c>
    3b8e:	98 3e       	cpi	r25, 0xE8	; 232
    3b90:	d4 f3       	brlt	.-12     	; 0x3b86 <__divsf3_pse+0x6c>
    3b92:	86 95       	lsr	r24
    3b94:	77 95       	ror	r23
    3b96:	67 95       	ror	r22
    3b98:	b7 95       	ror	r27
    3b9a:	f7 95       	ror	r31
    3b9c:	9f 5f       	subi	r25, 0xFF	; 255
    3b9e:	c9 f7       	brne	.-14     	; 0x3b92 <__divsf3_pse+0x78>
    3ba0:	88 0f       	add	r24, r24
    3ba2:	91 1d       	adc	r25, r1
    3ba4:	96 95       	lsr	r25
    3ba6:	87 95       	ror	r24
    3ba8:	97 f9       	bld	r25, 7
    3baa:	08 95       	ret
    3bac:	e1 e0       	ldi	r30, 0x01	; 1
    3bae:	66 0f       	add	r22, r22
    3bb0:	77 1f       	adc	r23, r23
    3bb2:	88 1f       	adc	r24, r24
    3bb4:	bb 1f       	adc	r27, r27
    3bb6:	62 17       	cp	r22, r18
    3bb8:	73 07       	cpc	r23, r19
    3bba:	84 07       	cpc	r24, r20
    3bbc:	ba 07       	cpc	r27, r26
    3bbe:	20 f0       	brcs	.+8      	; 0x3bc8 <__divsf3_pse+0xae>
    3bc0:	62 1b       	sub	r22, r18
    3bc2:	73 0b       	sbc	r23, r19
    3bc4:	84 0b       	sbc	r24, r20
    3bc6:	ba 0b       	sbc	r27, r26
    3bc8:	ee 1f       	adc	r30, r30
    3bca:	88 f7       	brcc	.-30     	; 0x3bae <__divsf3_pse+0x94>
    3bcc:	e0 95       	com	r30
    3bce:	08 95       	ret

00003bd0 <__fixsfsi>:
    3bd0:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <__fixunssfsi>
    3bd4:	68 94       	set
    3bd6:	b1 11       	cpse	r27, r1
    3bd8:	0c 94 30 1f 	jmp	0x3e60	; 0x3e60 <__fp_szero>
    3bdc:	08 95       	ret

00003bde <__fixunssfsi>:
    3bde:	0e 94 15 1f 	call	0x3e2a	; 0x3e2a <__fp_splitA>
    3be2:	88 f0       	brcs	.+34     	; 0x3c06 <__fixunssfsi+0x28>
    3be4:	9f 57       	subi	r25, 0x7F	; 127
    3be6:	98 f0       	brcs	.+38     	; 0x3c0e <__fixunssfsi+0x30>
    3be8:	b9 2f       	mov	r27, r25
    3bea:	99 27       	eor	r25, r25
    3bec:	b7 51       	subi	r27, 0x17	; 23
    3bee:	b0 f0       	brcs	.+44     	; 0x3c1c <__fixunssfsi+0x3e>
    3bf0:	e1 f0       	breq	.+56     	; 0x3c2a <__fixunssfsi+0x4c>
    3bf2:	66 0f       	add	r22, r22
    3bf4:	77 1f       	adc	r23, r23
    3bf6:	88 1f       	adc	r24, r24
    3bf8:	99 1f       	adc	r25, r25
    3bfa:	1a f0       	brmi	.+6      	; 0x3c02 <__fixunssfsi+0x24>
    3bfc:	ba 95       	dec	r27
    3bfe:	c9 f7       	brne	.-14     	; 0x3bf2 <__fixunssfsi+0x14>
    3c00:	14 c0       	rjmp	.+40     	; 0x3c2a <__fixunssfsi+0x4c>
    3c02:	b1 30       	cpi	r27, 0x01	; 1
    3c04:	91 f0       	breq	.+36     	; 0x3c2a <__fixunssfsi+0x4c>
    3c06:	0e 94 2f 1f 	call	0x3e5e	; 0x3e5e <__fp_zero>
    3c0a:	b1 e0       	ldi	r27, 0x01	; 1
    3c0c:	08 95       	ret
    3c0e:	0c 94 2f 1f 	jmp	0x3e5e	; 0x3e5e <__fp_zero>
    3c12:	67 2f       	mov	r22, r23
    3c14:	78 2f       	mov	r23, r24
    3c16:	88 27       	eor	r24, r24
    3c18:	b8 5f       	subi	r27, 0xF8	; 248
    3c1a:	39 f0       	breq	.+14     	; 0x3c2a <__fixunssfsi+0x4c>
    3c1c:	b9 3f       	cpi	r27, 0xF9	; 249
    3c1e:	cc f3       	brlt	.-14     	; 0x3c12 <__fixunssfsi+0x34>
    3c20:	86 95       	lsr	r24
    3c22:	77 95       	ror	r23
    3c24:	67 95       	ror	r22
    3c26:	b3 95       	inc	r27
    3c28:	d9 f7       	brne	.-10     	; 0x3c20 <__fixunssfsi+0x42>
    3c2a:	3e f4       	brtc	.+14     	; 0x3c3a <__fixunssfsi+0x5c>
    3c2c:	90 95       	com	r25
    3c2e:	80 95       	com	r24
    3c30:	70 95       	com	r23
    3c32:	61 95       	neg	r22
    3c34:	7f 4f       	sbci	r23, 0xFF	; 255
    3c36:	8f 4f       	sbci	r24, 0xFF	; 255
    3c38:	9f 4f       	sbci	r25, 0xFF	; 255
    3c3a:	08 95       	ret

00003c3c <__floatunsisf>:
    3c3c:	e8 94       	clt
    3c3e:	09 c0       	rjmp	.+18     	; 0x3c52 <__floatsisf+0x12>

00003c40 <__floatsisf>:
    3c40:	97 fb       	bst	r25, 7
    3c42:	3e f4       	brtc	.+14     	; 0x3c52 <__floatsisf+0x12>
    3c44:	90 95       	com	r25
    3c46:	80 95       	com	r24
    3c48:	70 95       	com	r23
    3c4a:	61 95       	neg	r22
    3c4c:	7f 4f       	sbci	r23, 0xFF	; 255
    3c4e:	8f 4f       	sbci	r24, 0xFF	; 255
    3c50:	9f 4f       	sbci	r25, 0xFF	; 255
    3c52:	99 23       	and	r25, r25
    3c54:	a9 f0       	breq	.+42     	; 0x3c80 <__floatsisf+0x40>
    3c56:	f9 2f       	mov	r31, r25
    3c58:	96 e9       	ldi	r25, 0x96	; 150
    3c5a:	bb 27       	eor	r27, r27
    3c5c:	93 95       	inc	r25
    3c5e:	f6 95       	lsr	r31
    3c60:	87 95       	ror	r24
    3c62:	77 95       	ror	r23
    3c64:	67 95       	ror	r22
    3c66:	b7 95       	ror	r27
    3c68:	f1 11       	cpse	r31, r1
    3c6a:	f8 cf       	rjmp	.-16     	; 0x3c5c <__floatsisf+0x1c>
    3c6c:	fa f4       	brpl	.+62     	; 0x3cac <__floatsisf+0x6c>
    3c6e:	bb 0f       	add	r27, r27
    3c70:	11 f4       	brne	.+4      	; 0x3c76 <__floatsisf+0x36>
    3c72:	60 ff       	sbrs	r22, 0
    3c74:	1b c0       	rjmp	.+54     	; 0x3cac <__floatsisf+0x6c>
    3c76:	6f 5f       	subi	r22, 0xFF	; 255
    3c78:	7f 4f       	sbci	r23, 0xFF	; 255
    3c7a:	8f 4f       	sbci	r24, 0xFF	; 255
    3c7c:	9f 4f       	sbci	r25, 0xFF	; 255
    3c7e:	16 c0       	rjmp	.+44     	; 0x3cac <__floatsisf+0x6c>
    3c80:	88 23       	and	r24, r24
    3c82:	11 f0       	breq	.+4      	; 0x3c88 <__floatsisf+0x48>
    3c84:	96 e9       	ldi	r25, 0x96	; 150
    3c86:	11 c0       	rjmp	.+34     	; 0x3caa <__floatsisf+0x6a>
    3c88:	77 23       	and	r23, r23
    3c8a:	21 f0       	breq	.+8      	; 0x3c94 <__floatsisf+0x54>
    3c8c:	9e e8       	ldi	r25, 0x8E	; 142
    3c8e:	87 2f       	mov	r24, r23
    3c90:	76 2f       	mov	r23, r22
    3c92:	05 c0       	rjmp	.+10     	; 0x3c9e <__floatsisf+0x5e>
    3c94:	66 23       	and	r22, r22
    3c96:	71 f0       	breq	.+28     	; 0x3cb4 <__floatsisf+0x74>
    3c98:	96 e8       	ldi	r25, 0x86	; 134
    3c9a:	86 2f       	mov	r24, r22
    3c9c:	70 e0       	ldi	r23, 0x00	; 0
    3c9e:	60 e0       	ldi	r22, 0x00	; 0
    3ca0:	2a f0       	brmi	.+10     	; 0x3cac <__floatsisf+0x6c>
    3ca2:	9a 95       	dec	r25
    3ca4:	66 0f       	add	r22, r22
    3ca6:	77 1f       	adc	r23, r23
    3ca8:	88 1f       	adc	r24, r24
    3caa:	da f7       	brpl	.-10     	; 0x3ca2 <__floatsisf+0x62>
    3cac:	88 0f       	add	r24, r24
    3cae:	96 95       	lsr	r25
    3cb0:	87 95       	ror	r24
    3cb2:	97 f9       	bld	r25, 7
    3cb4:	08 95       	ret

00003cb6 <__fp_cmp>:
    3cb6:	99 0f       	add	r25, r25
    3cb8:	00 08       	sbc	r0, r0
    3cba:	55 0f       	add	r21, r21
    3cbc:	aa 0b       	sbc	r26, r26
    3cbe:	e0 e8       	ldi	r30, 0x80	; 128
    3cc0:	fe ef       	ldi	r31, 0xFE	; 254
    3cc2:	16 16       	cp	r1, r22
    3cc4:	17 06       	cpc	r1, r23
    3cc6:	e8 07       	cpc	r30, r24
    3cc8:	f9 07       	cpc	r31, r25
    3cca:	c0 f0       	brcs	.+48     	; 0x3cfc <__fp_cmp+0x46>
    3ccc:	12 16       	cp	r1, r18
    3cce:	13 06       	cpc	r1, r19
    3cd0:	e4 07       	cpc	r30, r20
    3cd2:	f5 07       	cpc	r31, r21
    3cd4:	98 f0       	brcs	.+38     	; 0x3cfc <__fp_cmp+0x46>
    3cd6:	62 1b       	sub	r22, r18
    3cd8:	73 0b       	sbc	r23, r19
    3cda:	84 0b       	sbc	r24, r20
    3cdc:	95 0b       	sbc	r25, r21
    3cde:	39 f4       	brne	.+14     	; 0x3cee <__fp_cmp+0x38>
    3ce0:	0a 26       	eor	r0, r26
    3ce2:	61 f0       	breq	.+24     	; 0x3cfc <__fp_cmp+0x46>
    3ce4:	23 2b       	or	r18, r19
    3ce6:	24 2b       	or	r18, r20
    3ce8:	25 2b       	or	r18, r21
    3cea:	21 f4       	brne	.+8      	; 0x3cf4 <__fp_cmp+0x3e>
    3cec:	08 95       	ret
    3cee:	0a 26       	eor	r0, r26
    3cf0:	09 f4       	brne	.+2      	; 0x3cf4 <__fp_cmp+0x3e>
    3cf2:	a1 40       	sbci	r26, 0x01	; 1
    3cf4:	a6 95       	lsr	r26
    3cf6:	8f ef       	ldi	r24, 0xFF	; 255
    3cf8:	81 1d       	adc	r24, r1
    3cfa:	81 1d       	adc	r24, r1
    3cfc:	08 95       	ret

00003cfe <__fp_inf>:
    3cfe:	97 f9       	bld	r25, 7
    3d00:	9f 67       	ori	r25, 0x7F	; 127
    3d02:	80 e8       	ldi	r24, 0x80	; 128
    3d04:	70 e0       	ldi	r23, 0x00	; 0
    3d06:	60 e0       	ldi	r22, 0x00	; 0
    3d08:	08 95       	ret

00003d0a <__fp_nan>:
    3d0a:	9f ef       	ldi	r25, 0xFF	; 255
    3d0c:	80 ec       	ldi	r24, 0xC0	; 192
    3d0e:	08 95       	ret

00003d10 <__fp_powser>:
    3d10:	df 93       	push	r29
    3d12:	cf 93       	push	r28
    3d14:	1f 93       	push	r17
    3d16:	0f 93       	push	r16
    3d18:	ff 92       	push	r15
    3d1a:	ef 92       	push	r14
    3d1c:	df 92       	push	r13
    3d1e:	7b 01       	movw	r14, r22
    3d20:	8c 01       	movw	r16, r24
    3d22:	68 94       	set
    3d24:	06 c0       	rjmp	.+12     	; 0x3d32 <__fp_powser+0x22>
    3d26:	da 2e       	mov	r13, r26
    3d28:	ef 01       	movw	r28, r30
    3d2a:	0e 94 56 1f 	call	0x3eac	; 0x3eac <__mulsf3x>
    3d2e:	fe 01       	movw	r30, r28
    3d30:	e8 94       	clt
    3d32:	a5 91       	lpm	r26, Z+
    3d34:	25 91       	lpm	r18, Z+
    3d36:	35 91       	lpm	r19, Z+
    3d38:	45 91       	lpm	r20, Z+
    3d3a:	55 91       	lpm	r21, Z+
    3d3c:	a6 f3       	brts	.-24     	; 0x3d26 <__fp_powser+0x16>
    3d3e:	ef 01       	movw	r28, r30
    3d40:	0e 94 a5 1c 	call	0x394a	; 0x394a <__addsf3x>
    3d44:	fe 01       	movw	r30, r28
    3d46:	97 01       	movw	r18, r14
    3d48:	a8 01       	movw	r20, r16
    3d4a:	da 94       	dec	r13
    3d4c:	69 f7       	brne	.-38     	; 0x3d28 <__fp_powser+0x18>
    3d4e:	df 90       	pop	r13
    3d50:	ef 90       	pop	r14
    3d52:	ff 90       	pop	r15
    3d54:	0f 91       	pop	r16
    3d56:	1f 91       	pop	r17
    3d58:	cf 91       	pop	r28
    3d5a:	df 91       	pop	r29
    3d5c:	08 95       	ret

00003d5e <__fp_pscA>:
    3d5e:	00 24       	eor	r0, r0
    3d60:	0a 94       	dec	r0
    3d62:	16 16       	cp	r1, r22
    3d64:	17 06       	cpc	r1, r23
    3d66:	18 06       	cpc	r1, r24
    3d68:	09 06       	cpc	r0, r25
    3d6a:	08 95       	ret

00003d6c <__fp_pscB>:
    3d6c:	00 24       	eor	r0, r0
    3d6e:	0a 94       	dec	r0
    3d70:	12 16       	cp	r1, r18
    3d72:	13 06       	cpc	r1, r19
    3d74:	14 06       	cpc	r1, r20
    3d76:	05 06       	cpc	r0, r21
    3d78:	08 95       	ret
    3d7a:	0c 94 85 1e 	jmp	0x3d0a	; 0x3d0a <__fp_nan>

00003d7e <__fp_rempio2>:
    3d7e:	0e 94 15 1f 	call	0x3e2a	; 0x3e2a <__fp_splitA>
    3d82:	d8 f3       	brcs	.-10     	; 0x3d7a <__fp_pscB+0xe>
    3d84:	e8 94       	clt
    3d86:	e0 e0       	ldi	r30, 0x00	; 0
    3d88:	bb 27       	eor	r27, r27
    3d8a:	9f 57       	subi	r25, 0x7F	; 127
    3d8c:	f0 f0       	brcs	.+60     	; 0x3dca <__fp_rempio2+0x4c>
    3d8e:	2a ed       	ldi	r18, 0xDA	; 218
    3d90:	3f e0       	ldi	r19, 0x0F	; 15
    3d92:	49 ec       	ldi	r20, 0xC9	; 201
    3d94:	06 c0       	rjmp	.+12     	; 0x3da2 <__fp_rempio2+0x24>
    3d96:	ee 0f       	add	r30, r30
    3d98:	bb 0f       	add	r27, r27
    3d9a:	66 1f       	adc	r22, r22
    3d9c:	77 1f       	adc	r23, r23
    3d9e:	88 1f       	adc	r24, r24
    3da0:	28 f0       	brcs	.+10     	; 0x3dac <__fp_rempio2+0x2e>
    3da2:	b2 3a       	cpi	r27, 0xA2	; 162
    3da4:	62 07       	cpc	r22, r18
    3da6:	73 07       	cpc	r23, r19
    3da8:	84 07       	cpc	r24, r20
    3daa:	28 f0       	brcs	.+10     	; 0x3db6 <__fp_rempio2+0x38>
    3dac:	b2 5a       	subi	r27, 0xA2	; 162
    3dae:	62 0b       	sbc	r22, r18
    3db0:	73 0b       	sbc	r23, r19
    3db2:	84 0b       	sbc	r24, r20
    3db4:	e3 95       	inc	r30
    3db6:	9a 95       	dec	r25
    3db8:	72 f7       	brpl	.-36     	; 0x3d96 <__fp_rempio2+0x18>
    3dba:	80 38       	cpi	r24, 0x80	; 128
    3dbc:	30 f4       	brcc	.+12     	; 0x3dca <__fp_rempio2+0x4c>
    3dbe:	9a 95       	dec	r25
    3dc0:	bb 0f       	add	r27, r27
    3dc2:	66 1f       	adc	r22, r22
    3dc4:	77 1f       	adc	r23, r23
    3dc6:	88 1f       	adc	r24, r24
    3dc8:	d2 f7       	brpl	.-12     	; 0x3dbe <__fp_rempio2+0x40>
    3dca:	90 48       	sbci	r25, 0x80	; 128
    3dcc:	0c 94 b8 20 	jmp	0x4170	; 0x4170 <__fp_mpack_finite>

00003dd0 <__fp_round>:
    3dd0:	09 2e       	mov	r0, r25
    3dd2:	03 94       	inc	r0
    3dd4:	00 0c       	add	r0, r0
    3dd6:	11 f4       	brne	.+4      	; 0x3ddc <__fp_round+0xc>
    3dd8:	88 23       	and	r24, r24
    3dda:	52 f0       	brmi	.+20     	; 0x3df0 <__fp_round+0x20>
    3ddc:	bb 0f       	add	r27, r27
    3dde:	40 f4       	brcc	.+16     	; 0x3df0 <__fp_round+0x20>
    3de0:	bf 2b       	or	r27, r31
    3de2:	11 f4       	brne	.+4      	; 0x3de8 <__fp_round+0x18>
    3de4:	60 ff       	sbrs	r22, 0
    3de6:	04 c0       	rjmp	.+8      	; 0x3df0 <__fp_round+0x20>
    3de8:	6f 5f       	subi	r22, 0xFF	; 255
    3dea:	7f 4f       	sbci	r23, 0xFF	; 255
    3dec:	8f 4f       	sbci	r24, 0xFF	; 255
    3dee:	9f 4f       	sbci	r25, 0xFF	; 255
    3df0:	08 95       	ret

00003df2 <__fp_sinus>:
    3df2:	ef 93       	push	r30
    3df4:	e0 ff       	sbrs	r30, 0
    3df6:	07 c0       	rjmp	.+14     	; 0x3e06 <__fp_sinus+0x14>
    3df8:	a2 ea       	ldi	r26, 0xA2	; 162
    3dfa:	2a ed       	ldi	r18, 0xDA	; 218
    3dfc:	3f e0       	ldi	r19, 0x0F	; 15
    3dfe:	49 ec       	ldi	r20, 0xC9	; 201
    3e00:	5f eb       	ldi	r21, 0xBF	; 191
    3e02:	0e 94 a5 1c 	call	0x394a	; 0x394a <__addsf3x>
    3e06:	0e 94 e8 1e 	call	0x3dd0	; 0x3dd0 <__fp_round>
    3e0a:	0f 90       	pop	r0
    3e0c:	03 94       	inc	r0
    3e0e:	01 fc       	sbrc	r0, 1
    3e10:	90 58       	subi	r25, 0x80	; 128
    3e12:	ed e9       	ldi	r30, 0x9D	; 157
    3e14:	f1 e0       	ldi	r31, 0x01	; 1
    3e16:	0c 94 cb 20 	jmp	0x4196	; 0x4196 <__fp_powsodd>

00003e1a <__fp_split3>:
    3e1a:	57 fd       	sbrc	r21, 7
    3e1c:	90 58       	subi	r25, 0x80	; 128
    3e1e:	44 0f       	add	r20, r20
    3e20:	55 1f       	adc	r21, r21
    3e22:	59 f0       	breq	.+22     	; 0x3e3a <__fp_splitA+0x10>
    3e24:	5f 3f       	cpi	r21, 0xFF	; 255
    3e26:	71 f0       	breq	.+28     	; 0x3e44 <__fp_splitA+0x1a>
    3e28:	47 95       	ror	r20

00003e2a <__fp_splitA>:
    3e2a:	88 0f       	add	r24, r24
    3e2c:	97 fb       	bst	r25, 7
    3e2e:	99 1f       	adc	r25, r25
    3e30:	61 f0       	breq	.+24     	; 0x3e4a <__fp_splitA+0x20>
    3e32:	9f 3f       	cpi	r25, 0xFF	; 255
    3e34:	79 f0       	breq	.+30     	; 0x3e54 <__fp_splitA+0x2a>
    3e36:	87 95       	ror	r24
    3e38:	08 95       	ret
    3e3a:	12 16       	cp	r1, r18
    3e3c:	13 06       	cpc	r1, r19
    3e3e:	14 06       	cpc	r1, r20
    3e40:	55 1f       	adc	r21, r21
    3e42:	f2 cf       	rjmp	.-28     	; 0x3e28 <__fp_split3+0xe>
    3e44:	46 95       	lsr	r20
    3e46:	f1 df       	rcall	.-30     	; 0x3e2a <__fp_splitA>
    3e48:	08 c0       	rjmp	.+16     	; 0x3e5a <__fp_splitA+0x30>
    3e4a:	16 16       	cp	r1, r22
    3e4c:	17 06       	cpc	r1, r23
    3e4e:	18 06       	cpc	r1, r24
    3e50:	99 1f       	adc	r25, r25
    3e52:	f1 cf       	rjmp	.-30     	; 0x3e36 <__fp_splitA+0xc>
    3e54:	86 95       	lsr	r24
    3e56:	71 05       	cpc	r23, r1
    3e58:	61 05       	cpc	r22, r1
    3e5a:	08 94       	sec
    3e5c:	08 95       	ret

00003e5e <__fp_zero>:
    3e5e:	e8 94       	clt

00003e60 <__fp_szero>:
    3e60:	bb 27       	eor	r27, r27
    3e62:	66 27       	eor	r22, r22
    3e64:	77 27       	eor	r23, r23
    3e66:	cb 01       	movw	r24, r22
    3e68:	97 f9       	bld	r25, 7
    3e6a:	08 95       	ret

00003e6c <__gesf2>:
    3e6c:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <__fp_cmp>
    3e70:	08 f4       	brcc	.+2      	; 0x3e74 <__gesf2+0x8>
    3e72:	8f ef       	ldi	r24, 0xFF	; 255
    3e74:	08 95       	ret

00003e76 <inverse>:
    3e76:	9b 01       	movw	r18, r22
    3e78:	ac 01       	movw	r20, r24
    3e7a:	60 e0       	ldi	r22, 0x00	; 0
    3e7c:	70 e0       	ldi	r23, 0x00	; 0
    3e7e:	80 e8       	ldi	r24, 0x80	; 128
    3e80:	9f e3       	ldi	r25, 0x3F	; 63
    3e82:	0c 94 76 1d 	jmp	0x3aec	; 0x3aec <__divsf3>

00003e86 <__mulsf3>:
    3e86:	0e 94 56 1f 	call	0x3eac	; 0x3eac <__mulsf3x>
    3e8a:	0c 94 e8 1e 	jmp	0x3dd0	; 0x3dd0 <__fp_round>
    3e8e:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__fp_pscA>
    3e92:	38 f0       	brcs	.+14     	; 0x3ea2 <__mulsf3+0x1c>
    3e94:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <__fp_pscB>
    3e98:	20 f0       	brcs	.+8      	; 0x3ea2 <__mulsf3+0x1c>
    3e9a:	95 23       	and	r25, r21
    3e9c:	11 f0       	breq	.+4      	; 0x3ea2 <__mulsf3+0x1c>
    3e9e:	0c 94 7f 1e 	jmp	0x3cfe	; 0x3cfe <__fp_inf>
    3ea2:	0c 94 85 1e 	jmp	0x3d0a	; 0x3d0a <__fp_nan>
    3ea6:	11 24       	eor	r1, r1
    3ea8:	0c 94 30 1f 	jmp	0x3e60	; 0x3e60 <__fp_szero>

00003eac <__mulsf3x>:
    3eac:	0e 94 0d 1f 	call	0x3e1a	; 0x3e1a <__fp_split3>
    3eb0:	70 f3       	brcs	.-36     	; 0x3e8e <__mulsf3+0x8>

00003eb2 <__mulsf3_pse>:
    3eb2:	95 9f       	mul	r25, r21
    3eb4:	c1 f3       	breq	.-16     	; 0x3ea6 <__mulsf3+0x20>
    3eb6:	95 0f       	add	r25, r21
    3eb8:	50 e0       	ldi	r21, 0x00	; 0
    3eba:	55 1f       	adc	r21, r21
    3ebc:	62 9f       	mul	r22, r18
    3ebe:	f0 01       	movw	r30, r0
    3ec0:	72 9f       	mul	r23, r18
    3ec2:	bb 27       	eor	r27, r27
    3ec4:	f0 0d       	add	r31, r0
    3ec6:	b1 1d       	adc	r27, r1
    3ec8:	63 9f       	mul	r22, r19
    3eca:	aa 27       	eor	r26, r26
    3ecc:	f0 0d       	add	r31, r0
    3ece:	b1 1d       	adc	r27, r1
    3ed0:	aa 1f       	adc	r26, r26
    3ed2:	64 9f       	mul	r22, r20
    3ed4:	66 27       	eor	r22, r22
    3ed6:	b0 0d       	add	r27, r0
    3ed8:	a1 1d       	adc	r26, r1
    3eda:	66 1f       	adc	r22, r22
    3edc:	82 9f       	mul	r24, r18
    3ede:	22 27       	eor	r18, r18
    3ee0:	b0 0d       	add	r27, r0
    3ee2:	a1 1d       	adc	r26, r1
    3ee4:	62 1f       	adc	r22, r18
    3ee6:	73 9f       	mul	r23, r19
    3ee8:	b0 0d       	add	r27, r0
    3eea:	a1 1d       	adc	r26, r1
    3eec:	62 1f       	adc	r22, r18
    3eee:	83 9f       	mul	r24, r19
    3ef0:	a0 0d       	add	r26, r0
    3ef2:	61 1d       	adc	r22, r1
    3ef4:	22 1f       	adc	r18, r18
    3ef6:	74 9f       	mul	r23, r20
    3ef8:	33 27       	eor	r19, r19
    3efa:	a0 0d       	add	r26, r0
    3efc:	61 1d       	adc	r22, r1
    3efe:	23 1f       	adc	r18, r19
    3f00:	84 9f       	mul	r24, r20
    3f02:	60 0d       	add	r22, r0
    3f04:	21 1d       	adc	r18, r1
    3f06:	82 2f       	mov	r24, r18
    3f08:	76 2f       	mov	r23, r22
    3f0a:	6a 2f       	mov	r22, r26
    3f0c:	11 24       	eor	r1, r1
    3f0e:	9f 57       	subi	r25, 0x7F	; 127
    3f10:	50 40       	sbci	r21, 0x00	; 0
    3f12:	9a f0       	brmi	.+38     	; 0x3f3a <__mulsf3_pse+0x88>
    3f14:	f1 f0       	breq	.+60     	; 0x3f52 <__mulsf3_pse+0xa0>
    3f16:	88 23       	and	r24, r24
    3f18:	4a f0       	brmi	.+18     	; 0x3f2c <__mulsf3_pse+0x7a>
    3f1a:	ee 0f       	add	r30, r30
    3f1c:	ff 1f       	adc	r31, r31
    3f1e:	bb 1f       	adc	r27, r27
    3f20:	66 1f       	adc	r22, r22
    3f22:	77 1f       	adc	r23, r23
    3f24:	88 1f       	adc	r24, r24
    3f26:	91 50       	subi	r25, 0x01	; 1
    3f28:	50 40       	sbci	r21, 0x00	; 0
    3f2a:	a9 f7       	brne	.-22     	; 0x3f16 <__mulsf3_pse+0x64>
    3f2c:	9e 3f       	cpi	r25, 0xFE	; 254
    3f2e:	51 05       	cpc	r21, r1
    3f30:	80 f0       	brcs	.+32     	; 0x3f52 <__mulsf3_pse+0xa0>
    3f32:	0c 94 7f 1e 	jmp	0x3cfe	; 0x3cfe <__fp_inf>
    3f36:	0c 94 30 1f 	jmp	0x3e60	; 0x3e60 <__fp_szero>
    3f3a:	5f 3f       	cpi	r21, 0xFF	; 255
    3f3c:	e4 f3       	brlt	.-8      	; 0x3f36 <__mulsf3_pse+0x84>
    3f3e:	98 3e       	cpi	r25, 0xE8	; 232
    3f40:	d4 f3       	brlt	.-12     	; 0x3f36 <__mulsf3_pse+0x84>
    3f42:	86 95       	lsr	r24
    3f44:	77 95       	ror	r23
    3f46:	67 95       	ror	r22
    3f48:	b7 95       	ror	r27
    3f4a:	f7 95       	ror	r31
    3f4c:	e7 95       	ror	r30
    3f4e:	9f 5f       	subi	r25, 0xFF	; 255
    3f50:	c1 f7       	brne	.-16     	; 0x3f42 <__mulsf3_pse+0x90>
    3f52:	fe 2b       	or	r31, r30
    3f54:	88 0f       	add	r24, r24
    3f56:	91 1d       	adc	r25, r1
    3f58:	96 95       	lsr	r25
    3f5a:	87 95       	ror	r24
    3f5c:	97 f9       	bld	r25, 7
    3f5e:	08 95       	ret

00003f60 <pow>:
    3f60:	fa 01       	movw	r30, r20
    3f62:	ee 0f       	add	r30, r30
    3f64:	ff 1f       	adc	r31, r31
    3f66:	30 96       	adiw	r30, 0x00	; 0
    3f68:	21 05       	cpc	r18, r1
    3f6a:	31 05       	cpc	r19, r1
    3f6c:	a1 f1       	breq	.+104    	; 0x3fd6 <pow+0x76>
    3f6e:	61 15       	cp	r22, r1
    3f70:	71 05       	cpc	r23, r1
    3f72:	61 f4       	brne	.+24     	; 0x3f8c <pow+0x2c>
    3f74:	80 38       	cpi	r24, 0x80	; 128
    3f76:	bf e3       	ldi	r27, 0x3F	; 63
    3f78:	9b 07       	cpc	r25, r27
    3f7a:	49 f1       	breq	.+82     	; 0x3fce <pow+0x6e>
    3f7c:	68 94       	set
    3f7e:	90 38       	cpi	r25, 0x80	; 128
    3f80:	81 05       	cpc	r24, r1
    3f82:	61 f0       	breq	.+24     	; 0x3f9c <pow+0x3c>
    3f84:	80 38       	cpi	r24, 0x80	; 128
    3f86:	bf ef       	ldi	r27, 0xFF	; 255
    3f88:	9b 07       	cpc	r25, r27
    3f8a:	41 f0       	breq	.+16     	; 0x3f9c <pow+0x3c>
    3f8c:	99 23       	and	r25, r25
    3f8e:	4a f5       	brpl	.+82     	; 0x3fe2 <pow+0x82>
    3f90:	ff 3f       	cpi	r31, 0xFF	; 255
    3f92:	e1 05       	cpc	r30, r1
    3f94:	31 05       	cpc	r19, r1
    3f96:	21 05       	cpc	r18, r1
    3f98:	19 f1       	breq	.+70     	; 0x3fe0 <pow+0x80>
    3f9a:	e8 94       	clt
    3f9c:	08 94       	sec
    3f9e:	e7 95       	ror	r30
    3fa0:	d9 01       	movw	r26, r18
    3fa2:	aa 23       	and	r26, r26
    3fa4:	29 f4       	brne	.+10     	; 0x3fb0 <pow+0x50>
    3fa6:	ab 2f       	mov	r26, r27
    3fa8:	be 2f       	mov	r27, r30
    3faa:	f8 5f       	subi	r31, 0xF8	; 248
    3fac:	d0 f3       	brcs	.-12     	; 0x3fa2 <pow+0x42>
    3fae:	10 c0       	rjmp	.+32     	; 0x3fd0 <pow+0x70>
    3fb0:	ff 5f       	subi	r31, 0xFF	; 255
    3fb2:	70 f4       	brcc	.+28     	; 0x3fd0 <pow+0x70>
    3fb4:	a6 95       	lsr	r26
    3fb6:	e0 f7       	brcc	.-8      	; 0x3fb0 <pow+0x50>
    3fb8:	f7 39       	cpi	r31, 0x97	; 151
    3fba:	50 f0       	brcs	.+20     	; 0x3fd0 <pow+0x70>
    3fbc:	19 f0       	breq	.+6      	; 0x3fc4 <pow+0x64>
    3fbe:	ff 3a       	cpi	r31, 0xAF	; 175
    3fc0:	38 f4       	brcc	.+14     	; 0x3fd0 <pow+0x70>
    3fc2:	9f 77       	andi	r25, 0x7F	; 127
    3fc4:	9f 93       	push	r25
    3fc6:	0d d0       	rcall	.+26     	; 0x3fe2 <pow+0x82>
    3fc8:	0f 90       	pop	r0
    3fca:	07 fc       	sbrc	r0, 7
    3fcc:	90 58       	subi	r25, 0x80	; 128
    3fce:	08 95       	ret
    3fd0:	46 f0       	brts	.+16     	; 0x3fe2 <pow+0x82>
    3fd2:	0c 94 85 1e 	jmp	0x3d0a	; 0x3d0a <__fp_nan>
    3fd6:	60 e0       	ldi	r22, 0x00	; 0
    3fd8:	70 e0       	ldi	r23, 0x00	; 0
    3fda:	80 e8       	ldi	r24, 0x80	; 128
    3fdc:	9f e3       	ldi	r25, 0x3F	; 63
    3fde:	08 95       	ret
    3fe0:	4f e7       	ldi	r20, 0x7F	; 127
    3fe2:	9f 77       	andi	r25, 0x7F	; 127
    3fe4:	5f 93       	push	r21
    3fe6:	4f 93       	push	r20
    3fe8:	3f 93       	push	r19
    3fea:	2f 93       	push	r18
    3fec:	0e 94 21 21 	call	0x4242	; 0x4242 <log>
    3ff0:	2f 91       	pop	r18
    3ff2:	3f 91       	pop	r19
    3ff4:	4f 91       	pop	r20
    3ff6:	5f 91       	pop	r21
    3ff8:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__mulsf3>
    3ffc:	0c 94 84 20 	jmp	0x4108	; 0x4108 <exp>

00004000 <sin>:
    4000:	9f 93       	push	r25
    4002:	0e 94 bf 1e 	call	0x3d7e	; 0x3d7e <__fp_rempio2>
    4006:	0f 90       	pop	r0
    4008:	07 fc       	sbrc	r0, 7
    400a:	ee 5f       	subi	r30, 0xFE	; 254
    400c:	0c 94 f9 1e 	jmp	0x3df2	; 0x3df2 <__fp_sinus>
    4010:	19 f4       	brne	.+6      	; 0x4018 <sin+0x18>
    4012:	16 f4       	brtc	.+4      	; 0x4018 <sin+0x18>
    4014:	0c 94 85 1e 	jmp	0x3d0a	; 0x3d0a <__fp_nan>
    4018:	0c 94 b6 20 	jmp	0x416c	; 0x416c <__fp_mpack>

0000401c <sqrt>:
    401c:	0e 94 15 1f 	call	0x3e2a	; 0x3e2a <__fp_splitA>
    4020:	b8 f3       	brcs	.-18     	; 0x4010 <sin+0x10>
    4022:	99 23       	and	r25, r25
    4024:	c9 f3       	breq	.-14     	; 0x4018 <sin+0x18>
    4026:	b6 f3       	brts	.-20     	; 0x4014 <sin+0x14>
    4028:	9f 57       	subi	r25, 0x7F	; 127
    402a:	55 0b       	sbc	r21, r21
    402c:	87 ff       	sbrs	r24, 7
    402e:	0e 94 c4 20 	call	0x4188	; 0x4188 <__fp_norm2>
    4032:	00 24       	eor	r0, r0
    4034:	a0 e6       	ldi	r26, 0x60	; 96
    4036:	40 ea       	ldi	r20, 0xA0	; 160
    4038:	90 01       	movw	r18, r0
    403a:	80 58       	subi	r24, 0x80	; 128
    403c:	56 95       	lsr	r21
    403e:	97 95       	ror	r25
    4040:	28 f4       	brcc	.+10     	; 0x404c <sqrt+0x30>
    4042:	80 5c       	subi	r24, 0xC0	; 192
    4044:	66 0f       	add	r22, r22
    4046:	77 1f       	adc	r23, r23
    4048:	88 1f       	adc	r24, r24
    404a:	20 f0       	brcs	.+8      	; 0x4054 <sqrt+0x38>
    404c:	26 17       	cp	r18, r22
    404e:	37 07       	cpc	r19, r23
    4050:	48 07       	cpc	r20, r24
    4052:	30 f4       	brcc	.+12     	; 0x4060 <sqrt+0x44>
    4054:	62 1b       	sub	r22, r18
    4056:	73 0b       	sbc	r23, r19
    4058:	84 0b       	sbc	r24, r20
    405a:	20 29       	or	r18, r0
    405c:	31 29       	or	r19, r1
    405e:	4a 2b       	or	r20, r26
    4060:	a6 95       	lsr	r26
    4062:	17 94       	ror	r1
    4064:	07 94       	ror	r0
    4066:	20 25       	eor	r18, r0
    4068:	31 25       	eor	r19, r1
    406a:	4a 27       	eor	r20, r26
    406c:	58 f7       	brcc	.-42     	; 0x4044 <sqrt+0x28>
    406e:	66 0f       	add	r22, r22
    4070:	77 1f       	adc	r23, r23
    4072:	88 1f       	adc	r24, r24
    4074:	20 f0       	brcs	.+8      	; 0x407e <sqrt+0x62>
    4076:	26 17       	cp	r18, r22
    4078:	37 07       	cpc	r19, r23
    407a:	48 07       	cpc	r20, r24
    407c:	30 f4       	brcc	.+12     	; 0x408a <sqrt+0x6e>
    407e:	62 0b       	sbc	r22, r18
    4080:	73 0b       	sbc	r23, r19
    4082:	84 0b       	sbc	r24, r20
    4084:	20 0d       	add	r18, r0
    4086:	31 1d       	adc	r19, r1
    4088:	41 1d       	adc	r20, r1
    408a:	a0 95       	com	r26
    408c:	81 f7       	brne	.-32     	; 0x406e <sqrt+0x52>
    408e:	b9 01       	movw	r22, r18
    4090:	84 2f       	mov	r24, r20
    4092:	91 58       	subi	r25, 0x81	; 129
    4094:	88 0f       	add	r24, r24
    4096:	96 95       	lsr	r25
    4098:	87 95       	ror	r24
    409a:	08 95       	ret

0000409c <square>:
    409c:	9b 01       	movw	r18, r22
    409e:	ac 01       	movw	r20, r24
    40a0:	0c 94 43 1f 	jmp	0x3e86	; 0x3e86 <__mulsf3>

000040a4 <tan>:
    40a4:	df 93       	push	r29
    40a6:	d9 2f       	mov	r29, r25
    40a8:	0e 94 bf 1e 	call	0x3d7e	; 0x3d7e <__fp_rempio2>
    40ac:	e6 95       	lsr	r30
    40ae:	d7 95       	ror	r29
    40b0:	2a ed       	ldi	r18, 0xDA	; 218
    40b2:	3f e0       	ldi	r19, 0x0F	; 15
    40b4:	49 e4       	ldi	r20, 0x49	; 73
    40b6:	5f e3       	ldi	r21, 0x3F	; 63
    40b8:	b3 3a       	cpi	r27, 0xA3	; 163
    40ba:	62 07       	cpc	r22, r18
    40bc:	73 07       	cpc	r23, r19
    40be:	84 07       	cpc	r24, r20
    40c0:	95 07       	cpc	r25, r21
    40c2:	d7 95       	ror	r29
    40c4:	3a f0       	brmi	.+14     	; 0x40d4 <tan+0x30>
    40c6:	a2 ea       	ldi	r26, 0xA2	; 162
    40c8:	49 ec       	ldi	r20, 0xC9	; 201
    40ca:	90 68       	ori	r25, 0x80	; 128
    40cc:	0e 94 a5 1c 	call	0x394a	; 0x394a <__addsf3x>
    40d0:	0e 94 e8 1e 	call	0x3dd0	; 0x3dd0 <__fp_round>
    40d4:	eb eb       	ldi	r30, 0xBB	; 187
    40d6:	f1 e0       	ldi	r31, 0x01	; 1
    40d8:	0e 94 cb 20 	call	0x4196	; 0x4196 <__fp_powsodd>
    40dc:	dd 0f       	add	r29, r29
    40de:	13 f0       	brvs	.+4      	; 0x40e4 <tan+0x40>
    40e0:	0e 94 3b 1f 	call	0x3e76	; 0x3e76 <inverse>
    40e4:	dd 0f       	add	r29, r29
    40e6:	0b f4       	brvc	.+2      	; 0x40ea <tan+0x46>
    40e8:	90 58       	subi	r25, 0x80	; 128
    40ea:	df 91       	pop	r29
    40ec:	08 95       	ret

000040ee <__unordsf2>:
    40ee:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <__fp_cmp>
    40f2:	88 0b       	sbc	r24, r24
    40f4:	99 0b       	sbc	r25, r25
    40f6:	08 95       	ret
    40f8:	29 f4       	brne	.+10     	; 0x4104 <__unordsf2+0x16>
    40fa:	16 f0       	brts	.+4      	; 0x4100 <__unordsf2+0x12>
    40fc:	0c 94 7f 1e 	jmp	0x3cfe	; 0x3cfe <__fp_inf>
    4100:	0c 94 2f 1f 	jmp	0x3e5e	; 0x3e5e <__fp_zero>
    4104:	0c 94 85 1e 	jmp	0x3d0a	; 0x3d0a <__fp_nan>

00004108 <exp>:
    4108:	0e 94 15 1f 	call	0x3e2a	; 0x3e2a <__fp_splitA>
    410c:	a8 f3       	brcs	.-22     	; 0x40f8 <__unordsf2+0xa>
    410e:	96 38       	cpi	r25, 0x86	; 134
    4110:	a0 f7       	brcc	.-24     	; 0x40fa <__unordsf2+0xc>
    4112:	07 f8       	bld	r0, 7
    4114:	0f 92       	push	r0
    4116:	e8 94       	clt
    4118:	2b e3       	ldi	r18, 0x3B	; 59
    411a:	3a ea       	ldi	r19, 0xAA	; 170
    411c:	48 eb       	ldi	r20, 0xB8	; 184
    411e:	5f e7       	ldi	r21, 0x7F	; 127
    4120:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <__mulsf3_pse>
    4124:	0f 92       	push	r0
    4126:	0f 92       	push	r0
    4128:	0f 92       	push	r0
    412a:	4d b7       	in	r20, 0x3d	; 61
    412c:	5e b7       	in	r21, 0x3e	; 62
    412e:	0f 92       	push	r0
    4130:	0e 94 69 21 	call	0x42d2	; 0x42d2 <modf>
    4134:	ee ed       	ldi	r30, 0xDE	; 222
    4136:	f1 e0       	ldi	r31, 0x01	; 1
    4138:	0e 94 88 1e 	call	0x3d10	; 0x3d10 <__fp_powser>
    413c:	4f 91       	pop	r20
    413e:	5f 91       	pop	r21
    4140:	ef 91       	pop	r30
    4142:	ff 91       	pop	r31
    4144:	e5 95       	asr	r30
    4146:	ee 1f       	adc	r30, r30
    4148:	ff 1f       	adc	r31, r31
    414a:	49 f0       	breq	.+18     	; 0x415e <exp+0x56>
    414c:	fe 57       	subi	r31, 0x7E	; 126
    414e:	e0 68       	ori	r30, 0x80	; 128
    4150:	44 27       	eor	r20, r20
    4152:	ee 0f       	add	r30, r30
    4154:	44 1f       	adc	r20, r20
    4156:	fa 95       	dec	r31
    4158:	e1 f7       	brne	.-8      	; 0x4152 <exp+0x4a>
    415a:	41 95       	neg	r20
    415c:	55 0b       	sbc	r21, r21
    415e:	0e 94 e3 20 	call	0x41c6	; 0x41c6 <ldexp>
    4162:	0f 90       	pop	r0
    4164:	07 fe       	sbrs	r0, 7
    4166:	0c 94 3b 1f 	jmp	0x3e76	; 0x3e76 <inverse>
    416a:	08 95       	ret

0000416c <__fp_mpack>:
    416c:	9f 3f       	cpi	r25, 0xFF	; 255
    416e:	31 f0       	breq	.+12     	; 0x417c <__fp_mpack_finite+0xc>

00004170 <__fp_mpack_finite>:
    4170:	91 50       	subi	r25, 0x01	; 1
    4172:	20 f4       	brcc	.+8      	; 0x417c <__fp_mpack_finite+0xc>
    4174:	87 95       	ror	r24
    4176:	77 95       	ror	r23
    4178:	67 95       	ror	r22
    417a:	b7 95       	ror	r27
    417c:	88 0f       	add	r24, r24
    417e:	91 1d       	adc	r25, r1
    4180:	96 95       	lsr	r25
    4182:	87 95       	ror	r24
    4184:	97 f9       	bld	r25, 7
    4186:	08 95       	ret

00004188 <__fp_norm2>:
    4188:	91 50       	subi	r25, 0x01	; 1
    418a:	50 40       	sbci	r21, 0x00	; 0
    418c:	66 0f       	add	r22, r22
    418e:	77 1f       	adc	r23, r23
    4190:	88 1f       	adc	r24, r24
    4192:	d2 f7       	brpl	.-12     	; 0x4188 <__fp_norm2>
    4194:	08 95       	ret

00004196 <__fp_powsodd>:
    4196:	9f 93       	push	r25
    4198:	8f 93       	push	r24
    419a:	7f 93       	push	r23
    419c:	6f 93       	push	r22
    419e:	ff 93       	push	r31
    41a0:	ef 93       	push	r30
    41a2:	9b 01       	movw	r18, r22
    41a4:	ac 01       	movw	r20, r24
    41a6:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__mulsf3>
    41aa:	ef 91       	pop	r30
    41ac:	ff 91       	pop	r31
    41ae:	0e 94 88 1e 	call	0x3d10	; 0x3d10 <__fp_powser>
    41b2:	2f 91       	pop	r18
    41b4:	3f 91       	pop	r19
    41b6:	4f 91       	pop	r20
    41b8:	5f 91       	pop	r21
    41ba:	0c 94 43 1f 	jmp	0x3e86	; 0x3e86 <__mulsf3>
    41be:	0c 94 7f 1e 	jmp	0x3cfe	; 0x3cfe <__fp_inf>
    41c2:	0c 94 b6 20 	jmp	0x416c	; 0x416c <__fp_mpack>

000041c6 <ldexp>:
    41c6:	0e 94 15 1f 	call	0x3e2a	; 0x3e2a <__fp_splitA>
    41ca:	d8 f3       	brcs	.-10     	; 0x41c2 <__fp_powsodd+0x2c>
    41cc:	99 23       	and	r25, r25
    41ce:	c9 f3       	breq	.-14     	; 0x41c2 <__fp_powsodd+0x2c>
    41d0:	94 0f       	add	r25, r20
    41d2:	51 1d       	adc	r21, r1
    41d4:	a3 f3       	brvs	.-24     	; 0x41be <__fp_powsodd+0x28>
    41d6:	91 50       	subi	r25, 0x01	; 1
    41d8:	50 40       	sbci	r21, 0x00	; 0
    41da:	94 f0       	brlt	.+36     	; 0x4200 <ldexp+0x3a>
    41dc:	59 f0       	breq	.+22     	; 0x41f4 <ldexp+0x2e>
    41de:	88 23       	and	r24, r24
    41e0:	32 f0       	brmi	.+12     	; 0x41ee <ldexp+0x28>
    41e2:	66 0f       	add	r22, r22
    41e4:	77 1f       	adc	r23, r23
    41e6:	88 1f       	adc	r24, r24
    41e8:	91 50       	subi	r25, 0x01	; 1
    41ea:	50 40       	sbci	r21, 0x00	; 0
    41ec:	c1 f7       	brne	.-16     	; 0x41de <ldexp+0x18>
    41ee:	9e 3f       	cpi	r25, 0xFE	; 254
    41f0:	51 05       	cpc	r21, r1
    41f2:	2c f7       	brge	.-54     	; 0x41be <__fp_powsodd+0x28>
    41f4:	88 0f       	add	r24, r24
    41f6:	91 1d       	adc	r25, r1
    41f8:	96 95       	lsr	r25
    41fa:	87 95       	ror	r24
    41fc:	97 f9       	bld	r25, 7
    41fe:	08 95       	ret
    4200:	5f 3f       	cpi	r21, 0xFF	; 255
    4202:	ac f0       	brlt	.+42     	; 0x422e <ldexp+0x68>
    4204:	98 3e       	cpi	r25, 0xE8	; 232
    4206:	9c f0       	brlt	.+38     	; 0x422e <ldexp+0x68>
    4208:	bb 27       	eor	r27, r27
    420a:	86 95       	lsr	r24
    420c:	77 95       	ror	r23
    420e:	67 95       	ror	r22
    4210:	b7 95       	ror	r27
    4212:	08 f4       	brcc	.+2      	; 0x4216 <ldexp+0x50>
    4214:	b1 60       	ori	r27, 0x01	; 1
    4216:	93 95       	inc	r25
    4218:	c1 f7       	brne	.-16     	; 0x420a <ldexp+0x44>
    421a:	bb 0f       	add	r27, r27
    421c:	58 f7       	brcc	.-42     	; 0x41f4 <ldexp+0x2e>
    421e:	11 f4       	brne	.+4      	; 0x4224 <ldexp+0x5e>
    4220:	60 ff       	sbrs	r22, 0
    4222:	e8 cf       	rjmp	.-48     	; 0x41f4 <ldexp+0x2e>
    4224:	6f 5f       	subi	r22, 0xFF	; 255
    4226:	7f 4f       	sbci	r23, 0xFF	; 255
    4228:	8f 4f       	sbci	r24, 0xFF	; 255
    422a:	9f 4f       	sbci	r25, 0xFF	; 255
    422c:	e3 cf       	rjmp	.-58     	; 0x41f4 <ldexp+0x2e>
    422e:	0c 94 30 1f 	jmp	0x3e60	; 0x3e60 <__fp_szero>
    4232:	16 f0       	brts	.+4      	; 0x4238 <ldexp+0x72>
    4234:	0c 94 b6 20 	jmp	0x416c	; 0x416c <__fp_mpack>
    4238:	0c 94 85 1e 	jmp	0x3d0a	; 0x3d0a <__fp_nan>
    423c:	68 94       	set
    423e:	0c 94 7f 1e 	jmp	0x3cfe	; 0x3cfe <__fp_inf>

00004242 <log>:
    4242:	0e 94 15 1f 	call	0x3e2a	; 0x3e2a <__fp_splitA>
    4246:	a8 f3       	brcs	.-22     	; 0x4232 <ldexp+0x6c>
    4248:	99 23       	and	r25, r25
    424a:	c1 f3       	breq	.-16     	; 0x423c <ldexp+0x76>
    424c:	ae f3       	brts	.-22     	; 0x4238 <ldexp+0x72>
    424e:	df 93       	push	r29
    4250:	cf 93       	push	r28
    4252:	1f 93       	push	r17
    4254:	0f 93       	push	r16
    4256:	ff 92       	push	r15
    4258:	c9 2f       	mov	r28, r25
    425a:	dd 27       	eor	r29, r29
    425c:	88 23       	and	r24, r24
    425e:	2a f0       	brmi	.+10     	; 0x426a <log+0x28>
    4260:	21 97       	sbiw	r28, 0x01	; 1
    4262:	66 0f       	add	r22, r22
    4264:	77 1f       	adc	r23, r23
    4266:	88 1f       	adc	r24, r24
    4268:	da f7       	brpl	.-10     	; 0x4260 <log+0x1e>
    426a:	20 e0       	ldi	r18, 0x00	; 0
    426c:	30 e0       	ldi	r19, 0x00	; 0
    426e:	40 e8       	ldi	r20, 0x80	; 128
    4270:	5f eb       	ldi	r21, 0xBF	; 191
    4272:	9f e3       	ldi	r25, 0x3F	; 63
    4274:	88 39       	cpi	r24, 0x98	; 152
    4276:	20 f0       	brcs	.+8      	; 0x4280 <log+0x3e>
    4278:	80 3e       	cpi	r24, 0xE0	; 224
    427a:	38 f0       	brcs	.+14     	; 0x428a <log+0x48>
    427c:	21 96       	adiw	r28, 0x01	; 1
    427e:	8f 77       	andi	r24, 0x7F	; 127
    4280:	0e 94 8e 1c 	call	0x391c	; 0x391c <__addsf3>
    4284:	e6 e0       	ldi	r30, 0x06	; 6
    4286:	f2 e0       	ldi	r31, 0x02	; 2
    4288:	04 c0       	rjmp	.+8      	; 0x4292 <log+0x50>
    428a:	0e 94 8e 1c 	call	0x391c	; 0x391c <__addsf3>
    428e:	e3 e3       	ldi	r30, 0x33	; 51
    4290:	f2 e0       	ldi	r31, 0x02	; 2
    4292:	0e 94 88 1e 	call	0x3d10	; 0x3d10 <__fp_powser>
    4296:	8b 01       	movw	r16, r22
    4298:	be 01       	movw	r22, r28
    429a:	ec 01       	movw	r28, r24
    429c:	fb 2e       	mov	r15, r27
    429e:	6f 57       	subi	r22, 0x7F	; 127
    42a0:	71 09       	sbc	r23, r1
    42a2:	75 95       	asr	r23
    42a4:	77 1f       	adc	r23, r23
    42a6:	88 0b       	sbc	r24, r24
    42a8:	99 0b       	sbc	r25, r25
    42aa:	0e 94 20 1e 	call	0x3c40	; 0x3c40 <__floatsisf>
    42ae:	28 e1       	ldi	r18, 0x18	; 24
    42b0:	32 e7       	ldi	r19, 0x72	; 114
    42b2:	41 e3       	ldi	r20, 0x31	; 49
    42b4:	5f e3       	ldi	r21, 0x3F	; 63
    42b6:	0e 94 56 1f 	call	0x3eac	; 0x3eac <__mulsf3x>
    42ba:	af 2d       	mov	r26, r15
    42bc:	98 01       	movw	r18, r16
    42be:	ae 01       	movw	r20, r28
    42c0:	ff 90       	pop	r15
    42c2:	0f 91       	pop	r16
    42c4:	1f 91       	pop	r17
    42c6:	cf 91       	pop	r28
    42c8:	df 91       	pop	r29
    42ca:	0e 94 a5 1c 	call	0x394a	; 0x394a <__addsf3x>
    42ce:	0c 94 e8 1e 	jmp	0x3dd0	; 0x3dd0 <__fp_round>

000042d2 <modf>:
    42d2:	fa 01       	movw	r30, r20
    42d4:	dc 01       	movw	r26, r24
    42d6:	aa 0f       	add	r26, r26
    42d8:	bb 1f       	adc	r27, r27
    42da:	9b 01       	movw	r18, r22
    42dc:	ac 01       	movw	r20, r24
    42de:	bf 57       	subi	r27, 0x7F	; 127
    42e0:	28 f4       	brcc	.+10     	; 0x42ec <modf+0x1a>
    42e2:	22 27       	eor	r18, r18
    42e4:	33 27       	eor	r19, r19
    42e6:	44 27       	eor	r20, r20
    42e8:	50 78       	andi	r21, 0x80	; 128
    42ea:	20 c0       	rjmp	.+64     	; 0x432c <modf+0x5a>
    42ec:	b7 51       	subi	r27, 0x17	; 23
    42ee:	90 f4       	brcc	.+36     	; 0x4314 <modf+0x42>
    42f0:	ab 2f       	mov	r26, r27
    42f2:	00 24       	eor	r0, r0
    42f4:	46 95       	lsr	r20
    42f6:	37 95       	ror	r19
    42f8:	27 95       	ror	r18
    42fa:	01 1c       	adc	r0, r1
    42fc:	a3 95       	inc	r26
    42fe:	d2 f3       	brmi	.-12     	; 0x42f4 <modf+0x22>
    4300:	00 20       	and	r0, r0
    4302:	71 f0       	breq	.+28     	; 0x4320 <modf+0x4e>
    4304:	22 0f       	add	r18, r18
    4306:	33 1f       	adc	r19, r19
    4308:	44 1f       	adc	r20, r20
    430a:	b3 95       	inc	r27
    430c:	da f3       	brmi	.-10     	; 0x4304 <modf+0x32>
    430e:	0e d0       	rcall	.+28     	; 0x432c <modf+0x5a>
    4310:	0c 94 8d 1c 	jmp	0x391a	; 0x391a <__subsf3>
    4314:	61 30       	cpi	r22, 0x01	; 1
    4316:	71 05       	cpc	r23, r1
    4318:	a0 e8       	ldi	r26, 0x80	; 128
    431a:	8a 07       	cpc	r24, r26
    431c:	b9 46       	sbci	r27, 0x69	; 105
    431e:	30 f4       	brcc	.+12     	; 0x432c <modf+0x5a>
    4320:	9b 01       	movw	r18, r22
    4322:	ac 01       	movw	r20, r24
    4324:	66 27       	eor	r22, r22
    4326:	77 27       	eor	r23, r23
    4328:	88 27       	eor	r24, r24
    432a:	90 78       	andi	r25, 0x80	; 128
    432c:	30 96       	adiw	r30, 0x00	; 0
    432e:	21 f0       	breq	.+8      	; 0x4338 <modf+0x66>
    4330:	20 83       	st	Z, r18
    4332:	31 83       	std	Z+1, r19	; 0x01
    4334:	42 83       	std	Z+2, r20	; 0x02
    4336:	53 83       	std	Z+3, r21	; 0x03
    4338:	08 95       	ret

0000433a <vfprintf>:
    433a:	2f 92       	push	r2
    433c:	3f 92       	push	r3
    433e:	4f 92       	push	r4
    4340:	5f 92       	push	r5
    4342:	6f 92       	push	r6
    4344:	7f 92       	push	r7
    4346:	8f 92       	push	r8
    4348:	9f 92       	push	r9
    434a:	af 92       	push	r10
    434c:	bf 92       	push	r11
    434e:	cf 92       	push	r12
    4350:	df 92       	push	r13
    4352:	ef 92       	push	r14
    4354:	ff 92       	push	r15
    4356:	0f 93       	push	r16
    4358:	1f 93       	push	r17
    435a:	cf 93       	push	r28
    435c:	df 93       	push	r29
    435e:	cd b7       	in	r28, 0x3d	; 61
    4360:	de b7       	in	r29, 0x3e	; 62
    4362:	60 97       	sbiw	r28, 0x10	; 16
    4364:	cd bf       	out	0x3d, r28	; 61
    4366:	de bf       	out	0x3e, r29	; 62
    4368:	7c 01       	movw	r14, r24
    436a:	1b 01       	movw	r2, r22
    436c:	6a 01       	movw	r12, r20
    436e:	fc 01       	movw	r30, r24
    4370:	16 82       	std	Z+6, r1	; 0x06
    4372:	17 82       	std	Z+7, r1	; 0x07
    4374:	83 81       	ldd	r24, Z+3	; 0x03
    4376:	81 ff       	sbrs	r24, 1
    4378:	44 c3       	rjmp	.+1672   	; 0x4a02 <vfprintf+0x6c8>
    437a:	9e 01       	movw	r18, r28
    437c:	2f 5f       	subi	r18, 0xFF	; 255
    437e:	3f 4f       	sbci	r19, 0xFF	; 255
    4380:	39 01       	movw	r6, r18
    4382:	f7 01       	movw	r30, r14
    4384:	93 81       	ldd	r25, Z+3	; 0x03
    4386:	f1 01       	movw	r30, r2
    4388:	93 fd       	sbrc	r25, 3
    438a:	85 91       	lpm	r24, Z+
    438c:	93 ff       	sbrs	r25, 3
    438e:	81 91       	ld	r24, Z+
    4390:	1f 01       	movw	r2, r30
    4392:	88 23       	and	r24, r24
    4394:	09 f4       	brne	.+2      	; 0x4398 <vfprintf+0x5e>
    4396:	31 c3       	rjmp	.+1634   	; 0x49fa <vfprintf+0x6c0>
    4398:	85 32       	cpi	r24, 0x25	; 37
    439a:	39 f4       	brne	.+14     	; 0x43aa <vfprintf+0x70>
    439c:	93 fd       	sbrc	r25, 3
    439e:	85 91       	lpm	r24, Z+
    43a0:	93 ff       	sbrs	r25, 3
    43a2:	81 91       	ld	r24, Z+
    43a4:	1f 01       	movw	r2, r30
    43a6:	85 32       	cpi	r24, 0x25	; 37
    43a8:	39 f4       	brne	.+14     	; 0x43b8 <vfprintf+0x7e>
    43aa:	b7 01       	movw	r22, r14
    43ac:	90 e0       	ldi	r25, 0x00	; 0
    43ae:	0e 94 9a 29 	call	0x5334	; 0x5334 <fputc>
    43b2:	56 01       	movw	r10, r12
    43b4:	65 01       	movw	r12, r10
    43b6:	e5 cf       	rjmp	.-54     	; 0x4382 <vfprintf+0x48>
    43b8:	10 e0       	ldi	r17, 0x00	; 0
    43ba:	51 2c       	mov	r5, r1
    43bc:	91 2c       	mov	r9, r1
    43be:	ff e1       	ldi	r31, 0x1F	; 31
    43c0:	f9 15       	cp	r31, r9
    43c2:	d8 f0       	brcs	.+54     	; 0x43fa <vfprintf+0xc0>
    43c4:	8b 32       	cpi	r24, 0x2B	; 43
    43c6:	79 f0       	breq	.+30     	; 0x43e6 <vfprintf+0xac>
    43c8:	38 f4       	brcc	.+14     	; 0x43d8 <vfprintf+0x9e>
    43ca:	80 32       	cpi	r24, 0x20	; 32
    43cc:	79 f0       	breq	.+30     	; 0x43ec <vfprintf+0xb2>
    43ce:	83 32       	cpi	r24, 0x23	; 35
    43d0:	a1 f4       	brne	.+40     	; 0x43fa <vfprintf+0xc0>
    43d2:	f9 2d       	mov	r31, r9
    43d4:	f0 61       	ori	r31, 0x10	; 16
    43d6:	2e c0       	rjmp	.+92     	; 0x4434 <vfprintf+0xfa>
    43d8:	8d 32       	cpi	r24, 0x2D	; 45
    43da:	61 f0       	breq	.+24     	; 0x43f4 <vfprintf+0xba>
    43dc:	80 33       	cpi	r24, 0x30	; 48
    43de:	69 f4       	brne	.+26     	; 0x43fa <vfprintf+0xc0>
    43e0:	29 2d       	mov	r18, r9
    43e2:	21 60       	ori	r18, 0x01	; 1
    43e4:	2d c0       	rjmp	.+90     	; 0x4440 <vfprintf+0x106>
    43e6:	39 2d       	mov	r19, r9
    43e8:	32 60       	ori	r19, 0x02	; 2
    43ea:	93 2e       	mov	r9, r19
    43ec:	89 2d       	mov	r24, r9
    43ee:	84 60       	ori	r24, 0x04	; 4
    43f0:	98 2e       	mov	r9, r24
    43f2:	2a c0       	rjmp	.+84     	; 0x4448 <vfprintf+0x10e>
    43f4:	e9 2d       	mov	r30, r9
    43f6:	e8 60       	ori	r30, 0x08	; 8
    43f8:	15 c0       	rjmp	.+42     	; 0x4424 <vfprintf+0xea>
    43fa:	97 fc       	sbrc	r9, 7
    43fc:	2d c0       	rjmp	.+90     	; 0x4458 <vfprintf+0x11e>
    43fe:	20 ed       	ldi	r18, 0xD0	; 208
    4400:	28 0f       	add	r18, r24
    4402:	2a 30       	cpi	r18, 0x0A	; 10
    4404:	88 f4       	brcc	.+34     	; 0x4428 <vfprintf+0xee>
    4406:	96 fe       	sbrs	r9, 6
    4408:	06 c0       	rjmp	.+12     	; 0x4416 <vfprintf+0xdc>
    440a:	3a e0       	ldi	r19, 0x0A	; 10
    440c:	13 9f       	mul	r17, r19
    440e:	20 0d       	add	r18, r0
    4410:	11 24       	eor	r1, r1
    4412:	12 2f       	mov	r17, r18
    4414:	19 c0       	rjmp	.+50     	; 0x4448 <vfprintf+0x10e>
    4416:	8a e0       	ldi	r24, 0x0A	; 10
    4418:	58 9e       	mul	r5, r24
    441a:	20 0d       	add	r18, r0
    441c:	11 24       	eor	r1, r1
    441e:	52 2e       	mov	r5, r18
    4420:	e9 2d       	mov	r30, r9
    4422:	e0 62       	ori	r30, 0x20	; 32
    4424:	9e 2e       	mov	r9, r30
    4426:	10 c0       	rjmp	.+32     	; 0x4448 <vfprintf+0x10e>
    4428:	8e 32       	cpi	r24, 0x2E	; 46
    442a:	31 f4       	brne	.+12     	; 0x4438 <vfprintf+0xfe>
    442c:	96 fc       	sbrc	r9, 6
    442e:	e5 c2       	rjmp	.+1482   	; 0x49fa <vfprintf+0x6c0>
    4430:	f9 2d       	mov	r31, r9
    4432:	f0 64       	ori	r31, 0x40	; 64
    4434:	9f 2e       	mov	r9, r31
    4436:	08 c0       	rjmp	.+16     	; 0x4448 <vfprintf+0x10e>
    4438:	8c 36       	cpi	r24, 0x6C	; 108
    443a:	21 f4       	brne	.+8      	; 0x4444 <vfprintf+0x10a>
    443c:	29 2d       	mov	r18, r9
    443e:	20 68       	ori	r18, 0x80	; 128
    4440:	92 2e       	mov	r9, r18
    4442:	02 c0       	rjmp	.+4      	; 0x4448 <vfprintf+0x10e>
    4444:	88 36       	cpi	r24, 0x68	; 104
    4446:	41 f4       	brne	.+16     	; 0x4458 <vfprintf+0x11e>
    4448:	f1 01       	movw	r30, r2
    444a:	93 fd       	sbrc	r25, 3
    444c:	85 91       	lpm	r24, Z+
    444e:	93 ff       	sbrs	r25, 3
    4450:	81 91       	ld	r24, Z+
    4452:	1f 01       	movw	r2, r30
    4454:	81 11       	cpse	r24, r1
    4456:	b3 cf       	rjmp	.-154    	; 0x43be <vfprintf+0x84>
    4458:	9b eb       	ldi	r25, 0xBB	; 187
    445a:	98 0f       	add	r25, r24
    445c:	93 30       	cpi	r25, 0x03	; 3
    445e:	20 f4       	brcc	.+8      	; 0x4468 <vfprintf+0x12e>
    4460:	99 2d       	mov	r25, r9
    4462:	90 61       	ori	r25, 0x10	; 16
    4464:	80 5e       	subi	r24, 0xE0	; 224
    4466:	07 c0       	rjmp	.+14     	; 0x4476 <vfprintf+0x13c>
    4468:	9b e9       	ldi	r25, 0x9B	; 155
    446a:	98 0f       	add	r25, r24
    446c:	93 30       	cpi	r25, 0x03	; 3
    446e:	08 f0       	brcs	.+2      	; 0x4472 <vfprintf+0x138>
    4470:	66 c1       	rjmp	.+716    	; 0x473e <vfprintf+0x404>
    4472:	99 2d       	mov	r25, r9
    4474:	9f 7e       	andi	r25, 0xEF	; 239
    4476:	96 ff       	sbrs	r25, 6
    4478:	16 e0       	ldi	r17, 0x06	; 6
    447a:	9f 73       	andi	r25, 0x3F	; 63
    447c:	99 2e       	mov	r9, r25
    447e:	85 36       	cpi	r24, 0x65	; 101
    4480:	19 f4       	brne	.+6      	; 0x4488 <vfprintf+0x14e>
    4482:	90 64       	ori	r25, 0x40	; 64
    4484:	99 2e       	mov	r9, r25
    4486:	08 c0       	rjmp	.+16     	; 0x4498 <vfprintf+0x15e>
    4488:	86 36       	cpi	r24, 0x66	; 102
    448a:	21 f4       	brne	.+8      	; 0x4494 <vfprintf+0x15a>
    448c:	39 2f       	mov	r19, r25
    448e:	30 68       	ori	r19, 0x80	; 128
    4490:	93 2e       	mov	r9, r19
    4492:	02 c0       	rjmp	.+4      	; 0x4498 <vfprintf+0x15e>
    4494:	11 11       	cpse	r17, r1
    4496:	11 50       	subi	r17, 0x01	; 1
    4498:	97 fe       	sbrs	r9, 7
    449a:	07 c0       	rjmp	.+14     	; 0x44aa <vfprintf+0x170>
    449c:	1c 33       	cpi	r17, 0x3C	; 60
    449e:	50 f4       	brcc	.+20     	; 0x44b4 <vfprintf+0x17a>
    44a0:	44 24       	eor	r4, r4
    44a2:	43 94       	inc	r4
    44a4:	41 0e       	add	r4, r17
    44a6:	27 e0       	ldi	r18, 0x07	; 7
    44a8:	0b c0       	rjmp	.+22     	; 0x44c0 <vfprintf+0x186>
    44aa:	18 30       	cpi	r17, 0x08	; 8
    44ac:	38 f0       	brcs	.+14     	; 0x44bc <vfprintf+0x182>
    44ae:	27 e0       	ldi	r18, 0x07	; 7
    44b0:	17 e0       	ldi	r17, 0x07	; 7
    44b2:	05 c0       	rjmp	.+10     	; 0x44be <vfprintf+0x184>
    44b4:	27 e0       	ldi	r18, 0x07	; 7
    44b6:	9c e3       	ldi	r25, 0x3C	; 60
    44b8:	49 2e       	mov	r4, r25
    44ba:	02 c0       	rjmp	.+4      	; 0x44c0 <vfprintf+0x186>
    44bc:	21 2f       	mov	r18, r17
    44be:	41 2c       	mov	r4, r1
    44c0:	56 01       	movw	r10, r12
    44c2:	84 e0       	ldi	r24, 0x04	; 4
    44c4:	a8 0e       	add	r10, r24
    44c6:	b1 1c       	adc	r11, r1
    44c8:	f6 01       	movw	r30, r12
    44ca:	60 81       	ld	r22, Z
    44cc:	71 81       	ldd	r23, Z+1	; 0x01
    44ce:	82 81       	ldd	r24, Z+2	; 0x02
    44d0:	93 81       	ldd	r25, Z+3	; 0x03
    44d2:	04 2d       	mov	r16, r4
    44d4:	a3 01       	movw	r20, r6
    44d6:	0e 94 6e 28 	call	0x50dc	; 0x50dc <__ftoa_engine>
    44da:	6c 01       	movw	r12, r24
    44dc:	f9 81       	ldd	r31, Y+1	; 0x01
    44de:	fc 87       	std	Y+12, r31	; 0x0c
    44e0:	f0 ff       	sbrs	r31, 0
    44e2:	02 c0       	rjmp	.+4      	; 0x44e8 <vfprintf+0x1ae>
    44e4:	f3 ff       	sbrs	r31, 3
    44e6:	06 c0       	rjmp	.+12     	; 0x44f4 <vfprintf+0x1ba>
    44e8:	91 fc       	sbrc	r9, 1
    44ea:	06 c0       	rjmp	.+12     	; 0x44f8 <vfprintf+0x1be>
    44ec:	92 fe       	sbrs	r9, 2
    44ee:	06 c0       	rjmp	.+12     	; 0x44fc <vfprintf+0x1c2>
    44f0:	00 e2       	ldi	r16, 0x20	; 32
    44f2:	05 c0       	rjmp	.+10     	; 0x44fe <vfprintf+0x1c4>
    44f4:	0d e2       	ldi	r16, 0x2D	; 45
    44f6:	03 c0       	rjmp	.+6      	; 0x44fe <vfprintf+0x1c4>
    44f8:	0b e2       	ldi	r16, 0x2B	; 43
    44fa:	01 c0       	rjmp	.+2      	; 0x44fe <vfprintf+0x1c4>
    44fc:	00 e0       	ldi	r16, 0x00	; 0
    44fe:	8c 85       	ldd	r24, Y+12	; 0x0c
    4500:	8c 70       	andi	r24, 0x0C	; 12
    4502:	19 f0       	breq	.+6      	; 0x450a <vfprintf+0x1d0>
    4504:	01 11       	cpse	r16, r1
    4506:	5a c2       	rjmp	.+1204   	; 0x49bc <vfprintf+0x682>
    4508:	9b c2       	rjmp	.+1334   	; 0x4a40 <vfprintf+0x706>
    450a:	97 fe       	sbrs	r9, 7
    450c:	10 c0       	rjmp	.+32     	; 0x452e <vfprintf+0x1f4>
    450e:	4c 0c       	add	r4, r12
    4510:	fc 85       	ldd	r31, Y+12	; 0x0c
    4512:	f4 ff       	sbrs	r31, 4
    4514:	04 c0       	rjmp	.+8      	; 0x451e <vfprintf+0x1e4>
    4516:	8a 81       	ldd	r24, Y+2	; 0x02
    4518:	81 33       	cpi	r24, 0x31	; 49
    451a:	09 f4       	brne	.+2      	; 0x451e <vfprintf+0x1e4>
    451c:	4a 94       	dec	r4
    451e:	14 14       	cp	r1, r4
    4520:	74 f5       	brge	.+92     	; 0x457e <vfprintf+0x244>
    4522:	28 e0       	ldi	r18, 0x08	; 8
    4524:	24 15       	cp	r18, r4
    4526:	78 f5       	brcc	.+94     	; 0x4586 <vfprintf+0x24c>
    4528:	88 e0       	ldi	r24, 0x08	; 8
    452a:	48 2e       	mov	r4, r24
    452c:	2c c0       	rjmp	.+88     	; 0x4586 <vfprintf+0x24c>
    452e:	96 fc       	sbrc	r9, 6
    4530:	2a c0       	rjmp	.+84     	; 0x4586 <vfprintf+0x24c>
    4532:	81 2f       	mov	r24, r17
    4534:	90 e0       	ldi	r25, 0x00	; 0
    4536:	8c 15       	cp	r24, r12
    4538:	9d 05       	cpc	r25, r13
    453a:	9c f0       	brlt	.+38     	; 0x4562 <vfprintf+0x228>
    453c:	3c ef       	ldi	r19, 0xFC	; 252
    453e:	c3 16       	cp	r12, r19
    4540:	3f ef       	ldi	r19, 0xFF	; 255
    4542:	d3 06       	cpc	r13, r19
    4544:	74 f0       	brlt	.+28     	; 0x4562 <vfprintf+0x228>
    4546:	89 2d       	mov	r24, r9
    4548:	80 68       	ori	r24, 0x80	; 128
    454a:	98 2e       	mov	r9, r24
    454c:	0a c0       	rjmp	.+20     	; 0x4562 <vfprintf+0x228>
    454e:	e2 e0       	ldi	r30, 0x02	; 2
    4550:	f0 e0       	ldi	r31, 0x00	; 0
    4552:	ec 0f       	add	r30, r28
    4554:	fd 1f       	adc	r31, r29
    4556:	e1 0f       	add	r30, r17
    4558:	f1 1d       	adc	r31, r1
    455a:	80 81       	ld	r24, Z
    455c:	80 33       	cpi	r24, 0x30	; 48
    455e:	19 f4       	brne	.+6      	; 0x4566 <vfprintf+0x22c>
    4560:	11 50       	subi	r17, 0x01	; 1
    4562:	11 11       	cpse	r17, r1
    4564:	f4 cf       	rjmp	.-24     	; 0x454e <vfprintf+0x214>
    4566:	97 fe       	sbrs	r9, 7
    4568:	0e c0       	rjmp	.+28     	; 0x4586 <vfprintf+0x24c>
    456a:	44 24       	eor	r4, r4
    456c:	43 94       	inc	r4
    456e:	41 0e       	add	r4, r17
    4570:	81 2f       	mov	r24, r17
    4572:	90 e0       	ldi	r25, 0x00	; 0
    4574:	c8 16       	cp	r12, r24
    4576:	d9 06       	cpc	r13, r25
    4578:	2c f4       	brge	.+10     	; 0x4584 <vfprintf+0x24a>
    457a:	1c 19       	sub	r17, r12
    457c:	04 c0       	rjmp	.+8      	; 0x4586 <vfprintf+0x24c>
    457e:	44 24       	eor	r4, r4
    4580:	43 94       	inc	r4
    4582:	01 c0       	rjmp	.+2      	; 0x4586 <vfprintf+0x24c>
    4584:	10 e0       	ldi	r17, 0x00	; 0
    4586:	97 fe       	sbrs	r9, 7
    4588:	06 c0       	rjmp	.+12     	; 0x4596 <vfprintf+0x25c>
    458a:	1c 14       	cp	r1, r12
    458c:	1d 04       	cpc	r1, r13
    458e:	34 f4       	brge	.+12     	; 0x459c <vfprintf+0x262>
    4590:	c6 01       	movw	r24, r12
    4592:	01 96       	adiw	r24, 0x01	; 1
    4594:	05 c0       	rjmp	.+10     	; 0x45a0 <vfprintf+0x266>
    4596:	85 e0       	ldi	r24, 0x05	; 5
    4598:	90 e0       	ldi	r25, 0x00	; 0
    459a:	02 c0       	rjmp	.+4      	; 0x45a0 <vfprintf+0x266>
    459c:	81 e0       	ldi	r24, 0x01	; 1
    459e:	90 e0       	ldi	r25, 0x00	; 0
    45a0:	01 11       	cpse	r16, r1
    45a2:	01 96       	adiw	r24, 0x01	; 1
    45a4:	11 23       	and	r17, r17
    45a6:	31 f0       	breq	.+12     	; 0x45b4 <vfprintf+0x27a>
    45a8:	21 2f       	mov	r18, r17
    45aa:	30 e0       	ldi	r19, 0x00	; 0
    45ac:	2f 5f       	subi	r18, 0xFF	; 255
    45ae:	3f 4f       	sbci	r19, 0xFF	; 255
    45b0:	82 0f       	add	r24, r18
    45b2:	93 1f       	adc	r25, r19
    45b4:	25 2d       	mov	r18, r5
    45b6:	30 e0       	ldi	r19, 0x00	; 0
    45b8:	82 17       	cp	r24, r18
    45ba:	93 07       	cpc	r25, r19
    45bc:	14 f4       	brge	.+4      	; 0x45c2 <vfprintf+0x288>
    45be:	58 1a       	sub	r5, r24
    45c0:	01 c0       	rjmp	.+2      	; 0x45c4 <vfprintf+0x28a>
    45c2:	51 2c       	mov	r5, r1
    45c4:	89 2d       	mov	r24, r9
    45c6:	89 70       	andi	r24, 0x09	; 9
    45c8:	49 f4       	brne	.+18     	; 0x45dc <vfprintf+0x2a2>
    45ca:	55 20       	and	r5, r5
    45cc:	39 f0       	breq	.+14     	; 0x45dc <vfprintf+0x2a2>
    45ce:	b7 01       	movw	r22, r14
    45d0:	80 e2       	ldi	r24, 0x20	; 32
    45d2:	90 e0       	ldi	r25, 0x00	; 0
    45d4:	0e 94 9a 29 	call	0x5334	; 0x5334 <fputc>
    45d8:	5a 94       	dec	r5
    45da:	f7 cf       	rjmp	.-18     	; 0x45ca <vfprintf+0x290>
    45dc:	00 23       	and	r16, r16
    45de:	29 f0       	breq	.+10     	; 0x45ea <vfprintf+0x2b0>
    45e0:	b7 01       	movw	r22, r14
    45e2:	80 2f       	mov	r24, r16
    45e4:	90 e0       	ldi	r25, 0x00	; 0
    45e6:	0e 94 9a 29 	call	0x5334	; 0x5334 <fputc>
    45ea:	93 fc       	sbrc	r9, 3
    45ec:	09 c0       	rjmp	.+18     	; 0x4600 <vfprintf+0x2c6>
    45ee:	55 20       	and	r5, r5
    45f0:	39 f0       	breq	.+14     	; 0x4600 <vfprintf+0x2c6>
    45f2:	b7 01       	movw	r22, r14
    45f4:	80 e3       	ldi	r24, 0x30	; 48
    45f6:	90 e0       	ldi	r25, 0x00	; 0
    45f8:	0e 94 9a 29 	call	0x5334	; 0x5334 <fputc>
    45fc:	5a 94       	dec	r5
    45fe:	f7 cf       	rjmp	.-18     	; 0x45ee <vfprintf+0x2b4>
    4600:	97 fe       	sbrs	r9, 7
    4602:	4c c0       	rjmp	.+152    	; 0x469c <vfprintf+0x362>
    4604:	46 01       	movw	r8, r12
    4606:	d7 fe       	sbrs	r13, 7
    4608:	02 c0       	rjmp	.+4      	; 0x460e <vfprintf+0x2d4>
    460a:	81 2c       	mov	r8, r1
    460c:	91 2c       	mov	r9, r1
    460e:	c6 01       	movw	r24, r12
    4610:	88 19       	sub	r24, r8
    4612:	99 09       	sbc	r25, r9
    4614:	f3 01       	movw	r30, r6
    4616:	e8 0f       	add	r30, r24
    4618:	f9 1f       	adc	r31, r25
    461a:	ed 87       	std	Y+13, r30	; 0x0d
    461c:	fe 87       	std	Y+14, r31	; 0x0e
    461e:	96 01       	movw	r18, r12
    4620:	24 19       	sub	r18, r4
    4622:	31 09       	sbc	r19, r1
    4624:	2f 87       	std	Y+15, r18	; 0x0f
    4626:	38 8b       	std	Y+16, r19	; 0x10
    4628:	01 2f       	mov	r16, r17
    462a:	10 e0       	ldi	r17, 0x00	; 0
    462c:	11 95       	neg	r17
    462e:	01 95       	neg	r16
    4630:	11 09       	sbc	r17, r1
    4632:	3f ef       	ldi	r19, 0xFF	; 255
    4634:	83 16       	cp	r8, r19
    4636:	93 06       	cpc	r9, r19
    4638:	29 f4       	brne	.+10     	; 0x4644 <vfprintf+0x30a>
    463a:	b7 01       	movw	r22, r14
    463c:	8e e2       	ldi	r24, 0x2E	; 46
    463e:	90 e0       	ldi	r25, 0x00	; 0
    4640:	0e 94 9a 29 	call	0x5334	; 0x5334 <fputc>
    4644:	c8 14       	cp	r12, r8
    4646:	d9 04       	cpc	r13, r9
    4648:	4c f0       	brlt	.+18     	; 0x465c <vfprintf+0x322>
    464a:	8f 85       	ldd	r24, Y+15	; 0x0f
    464c:	98 89       	ldd	r25, Y+16	; 0x10
    464e:	88 15       	cp	r24, r8
    4650:	99 05       	cpc	r25, r9
    4652:	24 f4       	brge	.+8      	; 0x465c <vfprintf+0x322>
    4654:	ed 85       	ldd	r30, Y+13	; 0x0d
    4656:	fe 85       	ldd	r31, Y+14	; 0x0e
    4658:	81 81       	ldd	r24, Z+1	; 0x01
    465a:	01 c0       	rjmp	.+2      	; 0x465e <vfprintf+0x324>
    465c:	80 e3       	ldi	r24, 0x30	; 48
    465e:	f1 e0       	ldi	r31, 0x01	; 1
    4660:	8f 1a       	sub	r8, r31
    4662:	91 08       	sbc	r9, r1
    4664:	2d 85       	ldd	r18, Y+13	; 0x0d
    4666:	3e 85       	ldd	r19, Y+14	; 0x0e
    4668:	2f 5f       	subi	r18, 0xFF	; 255
    466a:	3f 4f       	sbci	r19, 0xFF	; 255
    466c:	2d 87       	std	Y+13, r18	; 0x0d
    466e:	3e 87       	std	Y+14, r19	; 0x0e
    4670:	80 16       	cp	r8, r16
    4672:	91 06       	cpc	r9, r17
    4674:	2c f0       	brlt	.+10     	; 0x4680 <vfprintf+0x346>
    4676:	b7 01       	movw	r22, r14
    4678:	90 e0       	ldi	r25, 0x00	; 0
    467a:	0e 94 9a 29 	call	0x5334	; 0x5334 <fputc>
    467e:	d9 cf       	rjmp	.-78     	; 0x4632 <vfprintf+0x2f8>
    4680:	c8 14       	cp	r12, r8
    4682:	d9 04       	cpc	r13, r9
    4684:	41 f4       	brne	.+16     	; 0x4696 <vfprintf+0x35c>
    4686:	9a 81       	ldd	r25, Y+2	; 0x02
    4688:	96 33       	cpi	r25, 0x36	; 54
    468a:	20 f4       	brcc	.+8      	; 0x4694 <vfprintf+0x35a>
    468c:	95 33       	cpi	r25, 0x35	; 53
    468e:	19 f4       	brne	.+6      	; 0x4696 <vfprintf+0x35c>
    4690:	3c 85       	ldd	r19, Y+12	; 0x0c
    4692:	34 ff       	sbrs	r19, 4
    4694:	81 e3       	ldi	r24, 0x31	; 49
    4696:	b7 01       	movw	r22, r14
    4698:	90 e0       	ldi	r25, 0x00	; 0
    469a:	4e c0       	rjmp	.+156    	; 0x4738 <vfprintf+0x3fe>
    469c:	8a 81       	ldd	r24, Y+2	; 0x02
    469e:	81 33       	cpi	r24, 0x31	; 49
    46a0:	19 f0       	breq	.+6      	; 0x46a8 <vfprintf+0x36e>
    46a2:	9c 85       	ldd	r25, Y+12	; 0x0c
    46a4:	9f 7e       	andi	r25, 0xEF	; 239
    46a6:	9c 87       	std	Y+12, r25	; 0x0c
    46a8:	b7 01       	movw	r22, r14
    46aa:	90 e0       	ldi	r25, 0x00	; 0
    46ac:	0e 94 9a 29 	call	0x5334	; 0x5334 <fputc>
    46b0:	11 11       	cpse	r17, r1
    46b2:	05 c0       	rjmp	.+10     	; 0x46be <vfprintf+0x384>
    46b4:	94 fc       	sbrc	r9, 4
    46b6:	18 c0       	rjmp	.+48     	; 0x46e8 <vfprintf+0x3ae>
    46b8:	85 e6       	ldi	r24, 0x65	; 101
    46ba:	90 e0       	ldi	r25, 0x00	; 0
    46bc:	17 c0       	rjmp	.+46     	; 0x46ec <vfprintf+0x3b2>
    46be:	b7 01       	movw	r22, r14
    46c0:	8e e2       	ldi	r24, 0x2E	; 46
    46c2:	90 e0       	ldi	r25, 0x00	; 0
    46c4:	0e 94 9a 29 	call	0x5334	; 0x5334 <fputc>
    46c8:	1e 5f       	subi	r17, 0xFE	; 254
    46ca:	82 e0       	ldi	r24, 0x02	; 2
    46cc:	01 e0       	ldi	r16, 0x01	; 1
    46ce:	08 0f       	add	r16, r24
    46d0:	f3 01       	movw	r30, r6
    46d2:	e8 0f       	add	r30, r24
    46d4:	f1 1d       	adc	r31, r1
    46d6:	80 81       	ld	r24, Z
    46d8:	b7 01       	movw	r22, r14
    46da:	90 e0       	ldi	r25, 0x00	; 0
    46dc:	0e 94 9a 29 	call	0x5334	; 0x5334 <fputc>
    46e0:	80 2f       	mov	r24, r16
    46e2:	01 13       	cpse	r16, r17
    46e4:	f3 cf       	rjmp	.-26     	; 0x46cc <vfprintf+0x392>
    46e6:	e6 cf       	rjmp	.-52     	; 0x46b4 <vfprintf+0x37a>
    46e8:	85 e4       	ldi	r24, 0x45	; 69
    46ea:	90 e0       	ldi	r25, 0x00	; 0
    46ec:	b7 01       	movw	r22, r14
    46ee:	0e 94 9a 29 	call	0x5334	; 0x5334 <fputc>
    46f2:	d7 fc       	sbrc	r13, 7
    46f4:	06 c0       	rjmp	.+12     	; 0x4702 <vfprintf+0x3c8>
    46f6:	c1 14       	cp	r12, r1
    46f8:	d1 04       	cpc	r13, r1
    46fa:	41 f4       	brne	.+16     	; 0x470c <vfprintf+0x3d2>
    46fc:	ec 85       	ldd	r30, Y+12	; 0x0c
    46fe:	e4 ff       	sbrs	r30, 4
    4700:	05 c0       	rjmp	.+10     	; 0x470c <vfprintf+0x3d2>
    4702:	d1 94       	neg	r13
    4704:	c1 94       	neg	r12
    4706:	d1 08       	sbc	r13, r1
    4708:	8d e2       	ldi	r24, 0x2D	; 45
    470a:	01 c0       	rjmp	.+2      	; 0x470e <vfprintf+0x3d4>
    470c:	8b e2       	ldi	r24, 0x2B	; 43
    470e:	b7 01       	movw	r22, r14
    4710:	90 e0       	ldi	r25, 0x00	; 0
    4712:	0e 94 9a 29 	call	0x5334	; 0x5334 <fputc>
    4716:	80 e3       	ldi	r24, 0x30	; 48
    4718:	2a e0       	ldi	r18, 0x0A	; 10
    471a:	c2 16       	cp	r12, r18
    471c:	d1 04       	cpc	r13, r1
    471e:	2c f0       	brlt	.+10     	; 0x472a <vfprintf+0x3f0>
    4720:	8f 5f       	subi	r24, 0xFF	; 255
    4722:	fa e0       	ldi	r31, 0x0A	; 10
    4724:	cf 1a       	sub	r12, r31
    4726:	d1 08       	sbc	r13, r1
    4728:	f7 cf       	rjmp	.-18     	; 0x4718 <vfprintf+0x3de>
    472a:	b7 01       	movw	r22, r14
    472c:	90 e0       	ldi	r25, 0x00	; 0
    472e:	0e 94 9a 29 	call	0x5334	; 0x5334 <fputc>
    4732:	b7 01       	movw	r22, r14
    4734:	c6 01       	movw	r24, r12
    4736:	c0 96       	adiw	r24, 0x30	; 48
    4738:	0e 94 9a 29 	call	0x5334	; 0x5334 <fputc>
    473c:	54 c1       	rjmp	.+680    	; 0x49e6 <vfprintf+0x6ac>
    473e:	83 36       	cpi	r24, 0x63	; 99
    4740:	31 f0       	breq	.+12     	; 0x474e <vfprintf+0x414>
    4742:	83 37       	cpi	r24, 0x73	; 115
    4744:	79 f0       	breq	.+30     	; 0x4764 <vfprintf+0x42a>
    4746:	83 35       	cpi	r24, 0x53	; 83
    4748:	09 f0       	breq	.+2      	; 0x474c <vfprintf+0x412>
    474a:	56 c0       	rjmp	.+172    	; 0x47f8 <vfprintf+0x4be>
    474c:	20 c0       	rjmp	.+64     	; 0x478e <vfprintf+0x454>
    474e:	56 01       	movw	r10, r12
    4750:	32 e0       	ldi	r19, 0x02	; 2
    4752:	a3 0e       	add	r10, r19
    4754:	b1 1c       	adc	r11, r1
    4756:	f6 01       	movw	r30, r12
    4758:	80 81       	ld	r24, Z
    475a:	89 83       	std	Y+1, r24	; 0x01
    475c:	01 e0       	ldi	r16, 0x01	; 1
    475e:	10 e0       	ldi	r17, 0x00	; 0
    4760:	63 01       	movw	r12, r6
    4762:	12 c0       	rjmp	.+36     	; 0x4788 <vfprintf+0x44e>
    4764:	56 01       	movw	r10, r12
    4766:	f2 e0       	ldi	r31, 0x02	; 2
    4768:	af 0e       	add	r10, r31
    476a:	b1 1c       	adc	r11, r1
    476c:	f6 01       	movw	r30, r12
    476e:	c0 80       	ld	r12, Z
    4770:	d1 80       	ldd	r13, Z+1	; 0x01
    4772:	96 fe       	sbrs	r9, 6
    4774:	03 c0       	rjmp	.+6      	; 0x477c <vfprintf+0x442>
    4776:	61 2f       	mov	r22, r17
    4778:	70 e0       	ldi	r23, 0x00	; 0
    477a:	02 c0       	rjmp	.+4      	; 0x4780 <vfprintf+0x446>
    477c:	6f ef       	ldi	r22, 0xFF	; 255
    477e:	7f ef       	ldi	r23, 0xFF	; 255
    4780:	c6 01       	movw	r24, r12
    4782:	0e 94 72 29 	call	0x52e4	; 0x52e4 <strnlen>
    4786:	8c 01       	movw	r16, r24
    4788:	f9 2d       	mov	r31, r9
    478a:	ff 77       	andi	r31, 0x7F	; 127
    478c:	14 c0       	rjmp	.+40     	; 0x47b6 <vfprintf+0x47c>
    478e:	56 01       	movw	r10, r12
    4790:	22 e0       	ldi	r18, 0x02	; 2
    4792:	a2 0e       	add	r10, r18
    4794:	b1 1c       	adc	r11, r1
    4796:	f6 01       	movw	r30, r12
    4798:	c0 80       	ld	r12, Z
    479a:	d1 80       	ldd	r13, Z+1	; 0x01
    479c:	96 fe       	sbrs	r9, 6
    479e:	03 c0       	rjmp	.+6      	; 0x47a6 <vfprintf+0x46c>
    47a0:	61 2f       	mov	r22, r17
    47a2:	70 e0       	ldi	r23, 0x00	; 0
    47a4:	02 c0       	rjmp	.+4      	; 0x47aa <vfprintf+0x470>
    47a6:	6f ef       	ldi	r22, 0xFF	; 255
    47a8:	7f ef       	ldi	r23, 0xFF	; 255
    47aa:	c6 01       	movw	r24, r12
    47ac:	0e 94 67 29 	call	0x52ce	; 0x52ce <strnlen_P>
    47b0:	8c 01       	movw	r16, r24
    47b2:	f9 2d       	mov	r31, r9
    47b4:	f0 68       	ori	r31, 0x80	; 128
    47b6:	9f 2e       	mov	r9, r31
    47b8:	f3 fd       	sbrc	r31, 3
    47ba:	1a c0       	rjmp	.+52     	; 0x47f0 <vfprintf+0x4b6>
    47bc:	85 2d       	mov	r24, r5
    47be:	90 e0       	ldi	r25, 0x00	; 0
    47c0:	08 17       	cp	r16, r24
    47c2:	19 07       	cpc	r17, r25
    47c4:	a8 f4       	brcc	.+42     	; 0x47f0 <vfprintf+0x4b6>
    47c6:	b7 01       	movw	r22, r14
    47c8:	80 e2       	ldi	r24, 0x20	; 32
    47ca:	90 e0       	ldi	r25, 0x00	; 0
    47cc:	0e 94 9a 29 	call	0x5334	; 0x5334 <fputc>
    47d0:	5a 94       	dec	r5
    47d2:	f4 cf       	rjmp	.-24     	; 0x47bc <vfprintf+0x482>
    47d4:	f6 01       	movw	r30, r12
    47d6:	97 fc       	sbrc	r9, 7
    47d8:	85 91       	lpm	r24, Z+
    47da:	97 fe       	sbrs	r9, 7
    47dc:	81 91       	ld	r24, Z+
    47de:	6f 01       	movw	r12, r30
    47e0:	b7 01       	movw	r22, r14
    47e2:	90 e0       	ldi	r25, 0x00	; 0
    47e4:	0e 94 9a 29 	call	0x5334	; 0x5334 <fputc>
    47e8:	51 10       	cpse	r5, r1
    47ea:	5a 94       	dec	r5
    47ec:	01 50       	subi	r16, 0x01	; 1
    47ee:	11 09       	sbc	r17, r1
    47f0:	01 15       	cp	r16, r1
    47f2:	11 05       	cpc	r17, r1
    47f4:	79 f7       	brne	.-34     	; 0x47d4 <vfprintf+0x49a>
    47f6:	f7 c0       	rjmp	.+494    	; 0x49e6 <vfprintf+0x6ac>
    47f8:	84 36       	cpi	r24, 0x64	; 100
    47fa:	11 f0       	breq	.+4      	; 0x4800 <vfprintf+0x4c6>
    47fc:	89 36       	cpi	r24, 0x69	; 105
    47fe:	61 f5       	brne	.+88     	; 0x4858 <vfprintf+0x51e>
    4800:	56 01       	movw	r10, r12
    4802:	97 fe       	sbrs	r9, 7
    4804:	09 c0       	rjmp	.+18     	; 0x4818 <vfprintf+0x4de>
    4806:	24 e0       	ldi	r18, 0x04	; 4
    4808:	a2 0e       	add	r10, r18
    480a:	b1 1c       	adc	r11, r1
    480c:	f6 01       	movw	r30, r12
    480e:	60 81       	ld	r22, Z
    4810:	71 81       	ldd	r23, Z+1	; 0x01
    4812:	82 81       	ldd	r24, Z+2	; 0x02
    4814:	93 81       	ldd	r25, Z+3	; 0x03
    4816:	0a c0       	rjmp	.+20     	; 0x482c <vfprintf+0x4f2>
    4818:	f2 e0       	ldi	r31, 0x02	; 2
    481a:	af 0e       	add	r10, r31
    481c:	b1 1c       	adc	r11, r1
    481e:	f6 01       	movw	r30, r12
    4820:	60 81       	ld	r22, Z
    4822:	71 81       	ldd	r23, Z+1	; 0x01
    4824:	07 2e       	mov	r0, r23
    4826:	00 0c       	add	r0, r0
    4828:	88 0b       	sbc	r24, r24
    482a:	99 0b       	sbc	r25, r25
    482c:	f9 2d       	mov	r31, r9
    482e:	ff 76       	andi	r31, 0x6F	; 111
    4830:	9f 2e       	mov	r9, r31
    4832:	97 ff       	sbrs	r25, 7
    4834:	09 c0       	rjmp	.+18     	; 0x4848 <vfprintf+0x50e>
    4836:	90 95       	com	r25
    4838:	80 95       	com	r24
    483a:	70 95       	com	r23
    483c:	61 95       	neg	r22
    483e:	7f 4f       	sbci	r23, 0xFF	; 255
    4840:	8f 4f       	sbci	r24, 0xFF	; 255
    4842:	9f 4f       	sbci	r25, 0xFF	; 255
    4844:	f0 68       	ori	r31, 0x80	; 128
    4846:	9f 2e       	mov	r9, r31
    4848:	2a e0       	ldi	r18, 0x0A	; 10
    484a:	30 e0       	ldi	r19, 0x00	; 0
    484c:	a3 01       	movw	r20, r6
    484e:	0e 94 0d 2a 	call	0x541a	; 0x541a <__ultoa_invert>
    4852:	c8 2e       	mov	r12, r24
    4854:	c6 18       	sub	r12, r6
    4856:	3f c0       	rjmp	.+126    	; 0x48d6 <vfprintf+0x59c>
    4858:	09 2d       	mov	r16, r9
    485a:	85 37       	cpi	r24, 0x75	; 117
    485c:	21 f4       	brne	.+8      	; 0x4866 <vfprintf+0x52c>
    485e:	0f 7e       	andi	r16, 0xEF	; 239
    4860:	2a e0       	ldi	r18, 0x0A	; 10
    4862:	30 e0       	ldi	r19, 0x00	; 0
    4864:	1d c0       	rjmp	.+58     	; 0x48a0 <vfprintf+0x566>
    4866:	09 7f       	andi	r16, 0xF9	; 249
    4868:	8f 36       	cpi	r24, 0x6F	; 111
    486a:	91 f0       	breq	.+36     	; 0x4890 <vfprintf+0x556>
    486c:	18 f4       	brcc	.+6      	; 0x4874 <vfprintf+0x53a>
    486e:	88 35       	cpi	r24, 0x58	; 88
    4870:	59 f0       	breq	.+22     	; 0x4888 <vfprintf+0x54e>
    4872:	c3 c0       	rjmp	.+390    	; 0x49fa <vfprintf+0x6c0>
    4874:	80 37       	cpi	r24, 0x70	; 112
    4876:	19 f0       	breq	.+6      	; 0x487e <vfprintf+0x544>
    4878:	88 37       	cpi	r24, 0x78	; 120
    487a:	11 f0       	breq	.+4      	; 0x4880 <vfprintf+0x546>
    487c:	be c0       	rjmp	.+380    	; 0x49fa <vfprintf+0x6c0>
    487e:	00 61       	ori	r16, 0x10	; 16
    4880:	04 ff       	sbrs	r16, 4
    4882:	09 c0       	rjmp	.+18     	; 0x4896 <vfprintf+0x55c>
    4884:	04 60       	ori	r16, 0x04	; 4
    4886:	07 c0       	rjmp	.+14     	; 0x4896 <vfprintf+0x55c>
    4888:	94 fe       	sbrs	r9, 4
    488a:	08 c0       	rjmp	.+16     	; 0x489c <vfprintf+0x562>
    488c:	06 60       	ori	r16, 0x06	; 6
    488e:	06 c0       	rjmp	.+12     	; 0x489c <vfprintf+0x562>
    4890:	28 e0       	ldi	r18, 0x08	; 8
    4892:	30 e0       	ldi	r19, 0x00	; 0
    4894:	05 c0       	rjmp	.+10     	; 0x48a0 <vfprintf+0x566>
    4896:	20 e1       	ldi	r18, 0x10	; 16
    4898:	30 e0       	ldi	r19, 0x00	; 0
    489a:	02 c0       	rjmp	.+4      	; 0x48a0 <vfprintf+0x566>
    489c:	20 e1       	ldi	r18, 0x10	; 16
    489e:	32 e0       	ldi	r19, 0x02	; 2
    48a0:	56 01       	movw	r10, r12
    48a2:	07 ff       	sbrs	r16, 7
    48a4:	09 c0       	rjmp	.+18     	; 0x48b8 <vfprintf+0x57e>
    48a6:	84 e0       	ldi	r24, 0x04	; 4
    48a8:	a8 0e       	add	r10, r24
    48aa:	b1 1c       	adc	r11, r1
    48ac:	f6 01       	movw	r30, r12
    48ae:	60 81       	ld	r22, Z
    48b0:	71 81       	ldd	r23, Z+1	; 0x01
    48b2:	82 81       	ldd	r24, Z+2	; 0x02
    48b4:	93 81       	ldd	r25, Z+3	; 0x03
    48b6:	08 c0       	rjmp	.+16     	; 0x48c8 <vfprintf+0x58e>
    48b8:	f2 e0       	ldi	r31, 0x02	; 2
    48ba:	af 0e       	add	r10, r31
    48bc:	b1 1c       	adc	r11, r1
    48be:	f6 01       	movw	r30, r12
    48c0:	60 81       	ld	r22, Z
    48c2:	71 81       	ldd	r23, Z+1	; 0x01
    48c4:	80 e0       	ldi	r24, 0x00	; 0
    48c6:	90 e0       	ldi	r25, 0x00	; 0
    48c8:	a3 01       	movw	r20, r6
    48ca:	0e 94 0d 2a 	call	0x541a	; 0x541a <__ultoa_invert>
    48ce:	c8 2e       	mov	r12, r24
    48d0:	c6 18       	sub	r12, r6
    48d2:	0f 77       	andi	r16, 0x7F	; 127
    48d4:	90 2e       	mov	r9, r16
    48d6:	96 fe       	sbrs	r9, 6
    48d8:	0b c0       	rjmp	.+22     	; 0x48f0 <vfprintf+0x5b6>
    48da:	09 2d       	mov	r16, r9
    48dc:	0e 7f       	andi	r16, 0xFE	; 254
    48de:	c1 16       	cp	r12, r17
    48e0:	50 f4       	brcc	.+20     	; 0x48f6 <vfprintf+0x5bc>
    48e2:	94 fe       	sbrs	r9, 4
    48e4:	0a c0       	rjmp	.+20     	; 0x48fa <vfprintf+0x5c0>
    48e6:	92 fc       	sbrc	r9, 2
    48e8:	08 c0       	rjmp	.+16     	; 0x48fa <vfprintf+0x5c0>
    48ea:	09 2d       	mov	r16, r9
    48ec:	0e 7e       	andi	r16, 0xEE	; 238
    48ee:	05 c0       	rjmp	.+10     	; 0x48fa <vfprintf+0x5c0>
    48f0:	dc 2c       	mov	r13, r12
    48f2:	09 2d       	mov	r16, r9
    48f4:	03 c0       	rjmp	.+6      	; 0x48fc <vfprintf+0x5c2>
    48f6:	dc 2c       	mov	r13, r12
    48f8:	01 c0       	rjmp	.+2      	; 0x48fc <vfprintf+0x5c2>
    48fa:	d1 2e       	mov	r13, r17
    48fc:	04 ff       	sbrs	r16, 4
    48fe:	0d c0       	rjmp	.+26     	; 0x491a <vfprintf+0x5e0>
    4900:	fe 01       	movw	r30, r28
    4902:	ec 0d       	add	r30, r12
    4904:	f1 1d       	adc	r31, r1
    4906:	80 81       	ld	r24, Z
    4908:	80 33       	cpi	r24, 0x30	; 48
    490a:	11 f4       	brne	.+4      	; 0x4910 <vfprintf+0x5d6>
    490c:	09 7e       	andi	r16, 0xE9	; 233
    490e:	09 c0       	rjmp	.+18     	; 0x4922 <vfprintf+0x5e8>
    4910:	02 ff       	sbrs	r16, 2
    4912:	06 c0       	rjmp	.+12     	; 0x4920 <vfprintf+0x5e6>
    4914:	d3 94       	inc	r13
    4916:	d3 94       	inc	r13
    4918:	04 c0       	rjmp	.+8      	; 0x4922 <vfprintf+0x5e8>
    491a:	80 2f       	mov	r24, r16
    491c:	86 78       	andi	r24, 0x86	; 134
    491e:	09 f0       	breq	.+2      	; 0x4922 <vfprintf+0x5e8>
    4920:	d3 94       	inc	r13
    4922:	03 fd       	sbrc	r16, 3
    4924:	11 c0       	rjmp	.+34     	; 0x4948 <vfprintf+0x60e>
    4926:	00 ff       	sbrs	r16, 0
    4928:	06 c0       	rjmp	.+12     	; 0x4936 <vfprintf+0x5fc>
    492a:	1c 2d       	mov	r17, r12
    492c:	d5 14       	cp	r13, r5
    492e:	80 f4       	brcc	.+32     	; 0x4950 <vfprintf+0x616>
    4930:	15 0d       	add	r17, r5
    4932:	1d 19       	sub	r17, r13
    4934:	0d c0       	rjmp	.+26     	; 0x4950 <vfprintf+0x616>
    4936:	d5 14       	cp	r13, r5
    4938:	58 f4       	brcc	.+22     	; 0x4950 <vfprintf+0x616>
    493a:	b7 01       	movw	r22, r14
    493c:	80 e2       	ldi	r24, 0x20	; 32
    493e:	90 e0       	ldi	r25, 0x00	; 0
    4940:	0e 94 9a 29 	call	0x5334	; 0x5334 <fputc>
    4944:	d3 94       	inc	r13
    4946:	f7 cf       	rjmp	.-18     	; 0x4936 <vfprintf+0x5fc>
    4948:	d5 14       	cp	r13, r5
    494a:	10 f4       	brcc	.+4      	; 0x4950 <vfprintf+0x616>
    494c:	5d 18       	sub	r5, r13
    494e:	01 c0       	rjmp	.+2      	; 0x4952 <vfprintf+0x618>
    4950:	51 2c       	mov	r5, r1
    4952:	04 ff       	sbrs	r16, 4
    4954:	10 c0       	rjmp	.+32     	; 0x4976 <vfprintf+0x63c>
    4956:	b7 01       	movw	r22, r14
    4958:	80 e3       	ldi	r24, 0x30	; 48
    495a:	90 e0       	ldi	r25, 0x00	; 0
    495c:	0e 94 9a 29 	call	0x5334	; 0x5334 <fputc>
    4960:	02 ff       	sbrs	r16, 2
    4962:	17 c0       	rjmp	.+46     	; 0x4992 <vfprintf+0x658>
    4964:	01 fd       	sbrc	r16, 1
    4966:	03 c0       	rjmp	.+6      	; 0x496e <vfprintf+0x634>
    4968:	88 e7       	ldi	r24, 0x78	; 120
    496a:	90 e0       	ldi	r25, 0x00	; 0
    496c:	02 c0       	rjmp	.+4      	; 0x4972 <vfprintf+0x638>
    496e:	88 e5       	ldi	r24, 0x58	; 88
    4970:	90 e0       	ldi	r25, 0x00	; 0
    4972:	b7 01       	movw	r22, r14
    4974:	0c c0       	rjmp	.+24     	; 0x498e <vfprintf+0x654>
    4976:	80 2f       	mov	r24, r16
    4978:	86 78       	andi	r24, 0x86	; 134
    497a:	59 f0       	breq	.+22     	; 0x4992 <vfprintf+0x658>
    497c:	01 ff       	sbrs	r16, 1
    497e:	02 c0       	rjmp	.+4      	; 0x4984 <vfprintf+0x64a>
    4980:	8b e2       	ldi	r24, 0x2B	; 43
    4982:	01 c0       	rjmp	.+2      	; 0x4986 <vfprintf+0x64c>
    4984:	80 e2       	ldi	r24, 0x20	; 32
    4986:	07 fd       	sbrc	r16, 7
    4988:	8d e2       	ldi	r24, 0x2D	; 45
    498a:	b7 01       	movw	r22, r14
    498c:	90 e0       	ldi	r25, 0x00	; 0
    498e:	0e 94 9a 29 	call	0x5334	; 0x5334 <fputc>
    4992:	c1 16       	cp	r12, r17
    4994:	38 f4       	brcc	.+14     	; 0x49a4 <vfprintf+0x66a>
    4996:	b7 01       	movw	r22, r14
    4998:	80 e3       	ldi	r24, 0x30	; 48
    499a:	90 e0       	ldi	r25, 0x00	; 0
    499c:	0e 94 9a 29 	call	0x5334	; 0x5334 <fputc>
    49a0:	11 50       	subi	r17, 0x01	; 1
    49a2:	f7 cf       	rjmp	.-18     	; 0x4992 <vfprintf+0x658>
    49a4:	ca 94       	dec	r12
    49a6:	f3 01       	movw	r30, r6
    49a8:	ec 0d       	add	r30, r12
    49aa:	f1 1d       	adc	r31, r1
    49ac:	80 81       	ld	r24, Z
    49ae:	b7 01       	movw	r22, r14
    49b0:	90 e0       	ldi	r25, 0x00	; 0
    49b2:	0e 94 9a 29 	call	0x5334	; 0x5334 <fputc>
    49b6:	c1 10       	cpse	r12, r1
    49b8:	f5 cf       	rjmp	.-22     	; 0x49a4 <vfprintf+0x66a>
    49ba:	15 c0       	rjmp	.+42     	; 0x49e6 <vfprintf+0x6ac>
    49bc:	f4 e0       	ldi	r31, 0x04	; 4
    49be:	f5 15       	cp	r31, r5
    49c0:	60 f5       	brcc	.+88     	; 0x4a1a <vfprintf+0x6e0>
    49c2:	84 e0       	ldi	r24, 0x04	; 4
    49c4:	58 1a       	sub	r5, r24
    49c6:	93 fe       	sbrs	r9, 3
    49c8:	1f c0       	rjmp	.+62     	; 0x4a08 <vfprintf+0x6ce>
    49ca:	01 11       	cpse	r16, r1
    49cc:	27 c0       	rjmp	.+78     	; 0x4a1c <vfprintf+0x6e2>
    49ce:	2c 85       	ldd	r18, Y+12	; 0x0c
    49d0:	23 ff       	sbrs	r18, 3
    49d2:	2a c0       	rjmp	.+84     	; 0x4a28 <vfprintf+0x6ee>
    49d4:	00 e6       	ldi	r16, 0x60	; 96
    49d6:	12 e0       	ldi	r17, 0x02	; 2
    49d8:	39 2d       	mov	r19, r9
    49da:	30 71       	andi	r19, 0x10	; 16
    49dc:	93 2e       	mov	r9, r19
    49de:	f8 01       	movw	r30, r16
    49e0:	84 91       	lpm	r24, Z
    49e2:	81 11       	cpse	r24, r1
    49e4:	24 c0       	rjmp	.+72     	; 0x4a2e <vfprintf+0x6f4>
    49e6:	55 20       	and	r5, r5
    49e8:	09 f4       	brne	.+2      	; 0x49ec <vfprintf+0x6b2>
    49ea:	e4 cc       	rjmp	.-1592   	; 0x43b4 <vfprintf+0x7a>
    49ec:	b7 01       	movw	r22, r14
    49ee:	80 e2       	ldi	r24, 0x20	; 32
    49f0:	90 e0       	ldi	r25, 0x00	; 0
    49f2:	0e 94 9a 29 	call	0x5334	; 0x5334 <fputc>
    49f6:	5a 94       	dec	r5
    49f8:	f6 cf       	rjmp	.-20     	; 0x49e6 <vfprintf+0x6ac>
    49fa:	f7 01       	movw	r30, r14
    49fc:	86 81       	ldd	r24, Z+6	; 0x06
    49fe:	97 81       	ldd	r25, Z+7	; 0x07
    4a00:	26 c0       	rjmp	.+76     	; 0x4a4e <vfprintf+0x714>
    4a02:	8f ef       	ldi	r24, 0xFF	; 255
    4a04:	9f ef       	ldi	r25, 0xFF	; 255
    4a06:	23 c0       	rjmp	.+70     	; 0x4a4e <vfprintf+0x714>
    4a08:	b7 01       	movw	r22, r14
    4a0a:	80 e2       	ldi	r24, 0x20	; 32
    4a0c:	90 e0       	ldi	r25, 0x00	; 0
    4a0e:	0e 94 9a 29 	call	0x5334	; 0x5334 <fputc>
    4a12:	5a 94       	dec	r5
    4a14:	51 10       	cpse	r5, r1
    4a16:	f8 cf       	rjmp	.-16     	; 0x4a08 <vfprintf+0x6ce>
    4a18:	d8 cf       	rjmp	.-80     	; 0x49ca <vfprintf+0x690>
    4a1a:	51 2c       	mov	r5, r1
    4a1c:	b7 01       	movw	r22, r14
    4a1e:	80 2f       	mov	r24, r16
    4a20:	90 e0       	ldi	r25, 0x00	; 0
    4a22:	0e 94 9a 29 	call	0x5334	; 0x5334 <fputc>
    4a26:	d3 cf       	rjmp	.-90     	; 0x49ce <vfprintf+0x694>
    4a28:	04 e6       	ldi	r16, 0x64	; 100
    4a2a:	12 e0       	ldi	r17, 0x02	; 2
    4a2c:	d5 cf       	rjmp	.-86     	; 0x49d8 <vfprintf+0x69e>
    4a2e:	91 10       	cpse	r9, r1
    4a30:	80 52       	subi	r24, 0x20	; 32
    4a32:	b7 01       	movw	r22, r14
    4a34:	90 e0       	ldi	r25, 0x00	; 0
    4a36:	0e 94 9a 29 	call	0x5334	; 0x5334 <fputc>
    4a3a:	0f 5f       	subi	r16, 0xFF	; 255
    4a3c:	1f 4f       	sbci	r17, 0xFF	; 255
    4a3e:	cf cf       	rjmp	.-98     	; 0x49de <vfprintf+0x6a4>
    4a40:	23 e0       	ldi	r18, 0x03	; 3
    4a42:	25 15       	cp	r18, r5
    4a44:	10 f4       	brcc	.+4      	; 0x4a4a <vfprintf+0x710>
    4a46:	83 e0       	ldi	r24, 0x03	; 3
    4a48:	bd cf       	rjmp	.-134    	; 0x49c4 <vfprintf+0x68a>
    4a4a:	51 2c       	mov	r5, r1
    4a4c:	c0 cf       	rjmp	.-128    	; 0x49ce <vfprintf+0x694>
    4a4e:	60 96       	adiw	r28, 0x10	; 16
    4a50:	cd bf       	out	0x3d, r28	; 61
    4a52:	de bf       	out	0x3e, r29	; 62
    4a54:	df 91       	pop	r29
    4a56:	cf 91       	pop	r28
    4a58:	1f 91       	pop	r17
    4a5a:	0f 91       	pop	r16
    4a5c:	ff 90       	pop	r15
    4a5e:	ef 90       	pop	r14
    4a60:	df 90       	pop	r13
    4a62:	cf 90       	pop	r12
    4a64:	bf 90       	pop	r11
    4a66:	af 90       	pop	r10
    4a68:	9f 90       	pop	r9
    4a6a:	8f 90       	pop	r8
    4a6c:	7f 90       	pop	r7
    4a6e:	6f 90       	pop	r6
    4a70:	5f 90       	pop	r5
    4a72:	4f 90       	pop	r4
    4a74:	3f 90       	pop	r3
    4a76:	2f 90       	pop	r2
    4a78:	08 95       	ret

00004a7a <__mulsi3>:
    4a7a:	db 01       	movw	r26, r22
    4a7c:	8f 93       	push	r24
    4a7e:	9f 93       	push	r25
    4a80:	0e 94 56 25 	call	0x4aac	; 0x4aac <__muluhisi3>
    4a84:	bf 91       	pop	r27
    4a86:	af 91       	pop	r26
    4a88:	a2 9f       	mul	r26, r18
    4a8a:	80 0d       	add	r24, r0
    4a8c:	91 1d       	adc	r25, r1
    4a8e:	a3 9f       	mul	r26, r19
    4a90:	90 0d       	add	r25, r0
    4a92:	b2 9f       	mul	r27, r18
    4a94:	90 0d       	add	r25, r0
    4a96:	11 24       	eor	r1, r1
    4a98:	08 95       	ret

00004a9a <__tablejump2__>:
    4a9a:	ee 0f       	add	r30, r30
    4a9c:	ff 1f       	adc	r31, r31
    4a9e:	00 24       	eor	r0, r0
    4aa0:	00 1c       	adc	r0, r0
    4aa2:	0b be       	out	0x3b, r0	; 59
    4aa4:	07 90       	elpm	r0, Z+
    4aa6:	f6 91       	elpm	r31, Z
    4aa8:	e0 2d       	mov	r30, r0
    4aaa:	09 94       	ijmp

00004aac <__muluhisi3>:
    4aac:	0e 94 9d 25 	call	0x4b3a	; 0x4b3a <__umulhisi3>
    4ab0:	a5 9f       	mul	r26, r21
    4ab2:	90 0d       	add	r25, r0
    4ab4:	b4 9f       	mul	r27, r20
    4ab6:	90 0d       	add	r25, r0
    4ab8:	a4 9f       	mul	r26, r20
    4aba:	80 0d       	add	r24, r0
    4abc:	91 1d       	adc	r25, r1
    4abe:	11 24       	eor	r1, r1
    4ac0:	08 95       	ret

00004ac2 <__ashrdi3>:
    4ac2:	97 fb       	bst	r25, 7
    4ac4:	10 f8       	bld	r1, 0

00004ac6 <__lshrdi3>:
    4ac6:	16 94       	lsr	r1
    4ac8:	00 08       	sbc	r0, r0
    4aca:	0f 93       	push	r16
    4acc:	08 30       	cpi	r16, 0x08	; 8
    4ace:	98 f0       	brcs	.+38     	; 0x4af6 <__lshrdi3+0x30>
    4ad0:	08 50       	subi	r16, 0x08	; 8
    4ad2:	23 2f       	mov	r18, r19
    4ad4:	34 2f       	mov	r19, r20
    4ad6:	45 2f       	mov	r20, r21
    4ad8:	56 2f       	mov	r21, r22
    4ada:	67 2f       	mov	r22, r23
    4adc:	78 2f       	mov	r23, r24
    4ade:	89 2f       	mov	r24, r25
    4ae0:	90 2d       	mov	r25, r0
    4ae2:	f4 cf       	rjmp	.-24     	; 0x4acc <__lshrdi3+0x6>
    4ae4:	05 94       	asr	r0
    4ae6:	97 95       	ror	r25
    4ae8:	87 95       	ror	r24
    4aea:	77 95       	ror	r23
    4aec:	67 95       	ror	r22
    4aee:	57 95       	ror	r21
    4af0:	47 95       	ror	r20
    4af2:	37 95       	ror	r19
    4af4:	27 95       	ror	r18
    4af6:	0a 95       	dec	r16
    4af8:	aa f7       	brpl	.-22     	; 0x4ae4 <__lshrdi3+0x1e>
    4afa:	0f 91       	pop	r16
    4afc:	08 95       	ret

00004afe <__adddi3>:
    4afe:	2a 0d       	add	r18, r10
    4b00:	3b 1d       	adc	r19, r11
    4b02:	4c 1d       	adc	r20, r12
    4b04:	5d 1d       	adc	r21, r13
    4b06:	6e 1d       	adc	r22, r14
    4b08:	7f 1d       	adc	r23, r15
    4b0a:	80 1f       	adc	r24, r16
    4b0c:	91 1f       	adc	r25, r17
    4b0e:	08 95       	ret

00004b10 <__adddi3_s8>:
    4b10:	00 24       	eor	r0, r0
    4b12:	a7 fd       	sbrc	r26, 7
    4b14:	00 94       	com	r0
    4b16:	2a 0f       	add	r18, r26
    4b18:	30 1d       	adc	r19, r0
    4b1a:	40 1d       	adc	r20, r0
    4b1c:	50 1d       	adc	r21, r0
    4b1e:	60 1d       	adc	r22, r0
    4b20:	70 1d       	adc	r23, r0
    4b22:	80 1d       	adc	r24, r0
    4b24:	90 1d       	adc	r25, r0
    4b26:	08 95       	ret

00004b28 <__cmpdi2>:
    4b28:	2a 15       	cp	r18, r10
    4b2a:	3b 05       	cpc	r19, r11
    4b2c:	4c 05       	cpc	r20, r12
    4b2e:	5d 05       	cpc	r21, r13
    4b30:	6e 05       	cpc	r22, r14
    4b32:	7f 05       	cpc	r23, r15
    4b34:	80 07       	cpc	r24, r16
    4b36:	91 07       	cpc	r25, r17
    4b38:	08 95       	ret

00004b3a <__umulhisi3>:
    4b3a:	a2 9f       	mul	r26, r18
    4b3c:	b0 01       	movw	r22, r0
    4b3e:	b3 9f       	mul	r27, r19
    4b40:	c0 01       	movw	r24, r0
    4b42:	a3 9f       	mul	r26, r19
    4b44:	70 0d       	add	r23, r0
    4b46:	81 1d       	adc	r24, r1
    4b48:	11 24       	eor	r1, r1
    4b4a:	91 1d       	adc	r25, r1
    4b4c:	b2 9f       	mul	r27, r18
    4b4e:	70 0d       	add	r23, r0
    4b50:	81 1d       	adc	r24, r1
    4b52:	11 24       	eor	r1, r1
    4b54:	91 1d       	adc	r25, r1
    4b56:	08 95       	ret

00004b58 <malloc>:
    4b58:	0f 93       	push	r16
    4b5a:	1f 93       	push	r17
    4b5c:	cf 93       	push	r28
    4b5e:	df 93       	push	r29
    4b60:	82 30       	cpi	r24, 0x02	; 2
    4b62:	91 05       	cpc	r25, r1
    4b64:	10 f4       	brcc	.+4      	; 0x4b6a <malloc+0x12>
    4b66:	82 e0       	ldi	r24, 0x02	; 2
    4b68:	90 e0       	ldi	r25, 0x00	; 0
    4b6a:	e0 91 c3 45 	lds	r30, 0x45C3	; 0x8045c3 <__flp>
    4b6e:	f0 91 c4 45 	lds	r31, 0x45C4	; 0x8045c4 <__flp+0x1>
    4b72:	20 e0       	ldi	r18, 0x00	; 0
    4b74:	30 e0       	ldi	r19, 0x00	; 0
    4b76:	a0 e0       	ldi	r26, 0x00	; 0
    4b78:	b0 e0       	ldi	r27, 0x00	; 0
    4b7a:	30 97       	sbiw	r30, 0x00	; 0
    4b7c:	19 f1       	breq	.+70     	; 0x4bc4 <malloc+0x6c>
    4b7e:	40 81       	ld	r20, Z
    4b80:	51 81       	ldd	r21, Z+1	; 0x01
    4b82:	02 81       	ldd	r16, Z+2	; 0x02
    4b84:	13 81       	ldd	r17, Z+3	; 0x03
    4b86:	48 17       	cp	r20, r24
    4b88:	59 07       	cpc	r21, r25
    4b8a:	c8 f0       	brcs	.+50     	; 0x4bbe <malloc+0x66>
    4b8c:	84 17       	cp	r24, r20
    4b8e:	95 07       	cpc	r25, r21
    4b90:	69 f4       	brne	.+26     	; 0x4bac <malloc+0x54>
    4b92:	10 97       	sbiw	r26, 0x00	; 0
    4b94:	31 f0       	breq	.+12     	; 0x4ba2 <malloc+0x4a>
    4b96:	12 96       	adiw	r26, 0x02	; 2
    4b98:	0c 93       	st	X, r16
    4b9a:	12 97       	sbiw	r26, 0x02	; 2
    4b9c:	13 96       	adiw	r26, 0x03	; 3
    4b9e:	1c 93       	st	X, r17
    4ba0:	27 c0       	rjmp	.+78     	; 0x4bf0 <malloc+0x98>
    4ba2:	00 93 c3 45 	sts	0x45C3, r16	; 0x8045c3 <__flp>
    4ba6:	10 93 c4 45 	sts	0x45C4, r17	; 0x8045c4 <__flp+0x1>
    4baa:	22 c0       	rjmp	.+68     	; 0x4bf0 <malloc+0x98>
    4bac:	21 15       	cp	r18, r1
    4bae:	31 05       	cpc	r19, r1
    4bb0:	19 f0       	breq	.+6      	; 0x4bb8 <malloc+0x60>
    4bb2:	42 17       	cp	r20, r18
    4bb4:	53 07       	cpc	r21, r19
    4bb6:	18 f4       	brcc	.+6      	; 0x4bbe <malloc+0x66>
    4bb8:	9a 01       	movw	r18, r20
    4bba:	bd 01       	movw	r22, r26
    4bbc:	ef 01       	movw	r28, r30
    4bbe:	df 01       	movw	r26, r30
    4bc0:	f8 01       	movw	r30, r16
    4bc2:	db cf       	rjmp	.-74     	; 0x4b7a <malloc+0x22>
    4bc4:	21 15       	cp	r18, r1
    4bc6:	31 05       	cpc	r19, r1
    4bc8:	f9 f0       	breq	.+62     	; 0x4c08 <malloc+0xb0>
    4bca:	28 1b       	sub	r18, r24
    4bcc:	39 0b       	sbc	r19, r25
    4bce:	24 30       	cpi	r18, 0x04	; 4
    4bd0:	31 05       	cpc	r19, r1
    4bd2:	80 f4       	brcc	.+32     	; 0x4bf4 <malloc+0x9c>
    4bd4:	8a 81       	ldd	r24, Y+2	; 0x02
    4bd6:	9b 81       	ldd	r25, Y+3	; 0x03
    4bd8:	61 15       	cp	r22, r1
    4bda:	71 05       	cpc	r23, r1
    4bdc:	21 f0       	breq	.+8      	; 0x4be6 <malloc+0x8e>
    4bde:	fb 01       	movw	r30, r22
    4be0:	82 83       	std	Z+2, r24	; 0x02
    4be2:	93 83       	std	Z+3, r25	; 0x03
    4be4:	04 c0       	rjmp	.+8      	; 0x4bee <malloc+0x96>
    4be6:	80 93 c3 45 	sts	0x45C3, r24	; 0x8045c3 <__flp>
    4bea:	90 93 c4 45 	sts	0x45C4, r25	; 0x8045c4 <__flp+0x1>
    4bee:	fe 01       	movw	r30, r28
    4bf0:	32 96       	adiw	r30, 0x02	; 2
    4bf2:	44 c0       	rjmp	.+136    	; 0x4c7c <malloc+0x124>
    4bf4:	fe 01       	movw	r30, r28
    4bf6:	e2 0f       	add	r30, r18
    4bf8:	f3 1f       	adc	r31, r19
    4bfa:	81 93       	st	Z+, r24
    4bfc:	91 93       	st	Z+, r25
    4bfe:	22 50       	subi	r18, 0x02	; 2
    4c00:	31 09       	sbc	r19, r1
    4c02:	28 83       	st	Y, r18
    4c04:	39 83       	std	Y+1, r19	; 0x01
    4c06:	3a c0       	rjmp	.+116    	; 0x4c7c <malloc+0x124>
    4c08:	20 91 c1 45 	lds	r18, 0x45C1	; 0x8045c1 <__brkval>
    4c0c:	30 91 c2 45 	lds	r19, 0x45C2	; 0x8045c2 <__brkval+0x1>
    4c10:	23 2b       	or	r18, r19
    4c12:	41 f4       	brne	.+16     	; 0x4c24 <malloc+0xcc>
    4c14:	20 91 02 40 	lds	r18, 0x4002	; 0x804002 <__malloc_heap_start>
    4c18:	30 91 03 40 	lds	r19, 0x4003	; 0x804003 <__malloc_heap_start+0x1>
    4c1c:	20 93 c1 45 	sts	0x45C1, r18	; 0x8045c1 <__brkval>
    4c20:	30 93 c2 45 	sts	0x45C2, r19	; 0x8045c2 <__brkval+0x1>
    4c24:	20 91 00 40 	lds	r18, 0x4000	; 0x804000 <__DATA_REGION_ORIGIN__>
    4c28:	30 91 01 40 	lds	r19, 0x4001	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
    4c2c:	21 15       	cp	r18, r1
    4c2e:	31 05       	cpc	r19, r1
    4c30:	41 f4       	brne	.+16     	; 0x4c42 <malloc+0xea>
    4c32:	2d b7       	in	r18, 0x3d	; 61
    4c34:	3e b7       	in	r19, 0x3e	; 62
    4c36:	40 91 04 40 	lds	r20, 0x4004	; 0x804004 <__malloc_margin>
    4c3a:	50 91 05 40 	lds	r21, 0x4005	; 0x804005 <__malloc_margin+0x1>
    4c3e:	24 1b       	sub	r18, r20
    4c40:	35 0b       	sbc	r19, r21
    4c42:	e0 91 c1 45 	lds	r30, 0x45C1	; 0x8045c1 <__brkval>
    4c46:	f0 91 c2 45 	lds	r31, 0x45C2	; 0x8045c2 <__brkval+0x1>
    4c4a:	e2 17       	cp	r30, r18
    4c4c:	f3 07       	cpc	r31, r19
    4c4e:	a0 f4       	brcc	.+40     	; 0x4c78 <malloc+0x120>
    4c50:	2e 1b       	sub	r18, r30
    4c52:	3f 0b       	sbc	r19, r31
    4c54:	28 17       	cp	r18, r24
    4c56:	39 07       	cpc	r19, r25
    4c58:	78 f0       	brcs	.+30     	; 0x4c78 <malloc+0x120>
    4c5a:	ac 01       	movw	r20, r24
    4c5c:	4e 5f       	subi	r20, 0xFE	; 254
    4c5e:	5f 4f       	sbci	r21, 0xFF	; 255
    4c60:	24 17       	cp	r18, r20
    4c62:	35 07       	cpc	r19, r21
    4c64:	48 f0       	brcs	.+18     	; 0x4c78 <malloc+0x120>
    4c66:	4e 0f       	add	r20, r30
    4c68:	5f 1f       	adc	r21, r31
    4c6a:	40 93 c1 45 	sts	0x45C1, r20	; 0x8045c1 <__brkval>
    4c6e:	50 93 c2 45 	sts	0x45C2, r21	; 0x8045c2 <__brkval+0x1>
    4c72:	81 93       	st	Z+, r24
    4c74:	91 93       	st	Z+, r25
    4c76:	02 c0       	rjmp	.+4      	; 0x4c7c <malloc+0x124>
    4c78:	e0 e0       	ldi	r30, 0x00	; 0
    4c7a:	f0 e0       	ldi	r31, 0x00	; 0
    4c7c:	cf 01       	movw	r24, r30
    4c7e:	df 91       	pop	r29
    4c80:	cf 91       	pop	r28
    4c82:	1f 91       	pop	r17
    4c84:	0f 91       	pop	r16
    4c86:	08 95       	ret

00004c88 <free>:
    4c88:	cf 93       	push	r28
    4c8a:	df 93       	push	r29
    4c8c:	00 97       	sbiw	r24, 0x00	; 0
    4c8e:	09 f4       	brne	.+2      	; 0x4c92 <free+0xa>
    4c90:	81 c0       	rjmp	.+258    	; 0x4d94 <free+0x10c>
    4c92:	fc 01       	movw	r30, r24
    4c94:	32 97       	sbiw	r30, 0x02	; 2
    4c96:	12 82       	std	Z+2, r1	; 0x02
    4c98:	13 82       	std	Z+3, r1	; 0x03
    4c9a:	a0 91 c3 45 	lds	r26, 0x45C3	; 0x8045c3 <__flp>
    4c9e:	b0 91 c4 45 	lds	r27, 0x45C4	; 0x8045c4 <__flp+0x1>
    4ca2:	10 97       	sbiw	r26, 0x00	; 0
    4ca4:	81 f4       	brne	.+32     	; 0x4cc6 <free+0x3e>
    4ca6:	20 81       	ld	r18, Z
    4ca8:	31 81       	ldd	r19, Z+1	; 0x01
    4caa:	82 0f       	add	r24, r18
    4cac:	93 1f       	adc	r25, r19
    4cae:	20 91 c1 45 	lds	r18, 0x45C1	; 0x8045c1 <__brkval>
    4cb2:	30 91 c2 45 	lds	r19, 0x45C2	; 0x8045c2 <__brkval+0x1>
    4cb6:	28 17       	cp	r18, r24
    4cb8:	39 07       	cpc	r19, r25
    4cba:	51 f5       	brne	.+84     	; 0x4d10 <free+0x88>
    4cbc:	e0 93 c1 45 	sts	0x45C1, r30	; 0x8045c1 <__brkval>
    4cc0:	f0 93 c2 45 	sts	0x45C2, r31	; 0x8045c2 <__brkval+0x1>
    4cc4:	67 c0       	rjmp	.+206    	; 0x4d94 <free+0x10c>
    4cc6:	ed 01       	movw	r28, r26
    4cc8:	20 e0       	ldi	r18, 0x00	; 0
    4cca:	30 e0       	ldi	r19, 0x00	; 0
    4ccc:	ce 17       	cp	r28, r30
    4cce:	df 07       	cpc	r29, r31
    4cd0:	40 f4       	brcc	.+16     	; 0x4ce2 <free+0x5a>
    4cd2:	4a 81       	ldd	r20, Y+2	; 0x02
    4cd4:	5b 81       	ldd	r21, Y+3	; 0x03
    4cd6:	9e 01       	movw	r18, r28
    4cd8:	41 15       	cp	r20, r1
    4cda:	51 05       	cpc	r21, r1
    4cdc:	f1 f0       	breq	.+60     	; 0x4d1a <free+0x92>
    4cde:	ea 01       	movw	r28, r20
    4ce0:	f5 cf       	rjmp	.-22     	; 0x4ccc <free+0x44>
    4ce2:	c2 83       	std	Z+2, r28	; 0x02
    4ce4:	d3 83       	std	Z+3, r29	; 0x03
    4ce6:	40 81       	ld	r20, Z
    4ce8:	51 81       	ldd	r21, Z+1	; 0x01
    4cea:	84 0f       	add	r24, r20
    4cec:	95 1f       	adc	r25, r21
    4cee:	c8 17       	cp	r28, r24
    4cf0:	d9 07       	cpc	r29, r25
    4cf2:	59 f4       	brne	.+22     	; 0x4d0a <free+0x82>
    4cf4:	88 81       	ld	r24, Y
    4cf6:	99 81       	ldd	r25, Y+1	; 0x01
    4cf8:	84 0f       	add	r24, r20
    4cfa:	95 1f       	adc	r25, r21
    4cfc:	02 96       	adiw	r24, 0x02	; 2
    4cfe:	80 83       	st	Z, r24
    4d00:	91 83       	std	Z+1, r25	; 0x01
    4d02:	8a 81       	ldd	r24, Y+2	; 0x02
    4d04:	9b 81       	ldd	r25, Y+3	; 0x03
    4d06:	82 83       	std	Z+2, r24	; 0x02
    4d08:	93 83       	std	Z+3, r25	; 0x03
    4d0a:	21 15       	cp	r18, r1
    4d0c:	31 05       	cpc	r19, r1
    4d0e:	29 f4       	brne	.+10     	; 0x4d1a <free+0x92>
    4d10:	e0 93 c3 45 	sts	0x45C3, r30	; 0x8045c3 <__flp>
    4d14:	f0 93 c4 45 	sts	0x45C4, r31	; 0x8045c4 <__flp+0x1>
    4d18:	3d c0       	rjmp	.+122    	; 0x4d94 <free+0x10c>
    4d1a:	e9 01       	movw	r28, r18
    4d1c:	ea 83       	std	Y+2, r30	; 0x02
    4d1e:	fb 83       	std	Y+3, r31	; 0x03
    4d20:	49 91       	ld	r20, Y+
    4d22:	59 91       	ld	r21, Y+
    4d24:	c4 0f       	add	r28, r20
    4d26:	d5 1f       	adc	r29, r21
    4d28:	ec 17       	cp	r30, r28
    4d2a:	fd 07       	cpc	r31, r29
    4d2c:	61 f4       	brne	.+24     	; 0x4d46 <free+0xbe>
    4d2e:	80 81       	ld	r24, Z
    4d30:	91 81       	ldd	r25, Z+1	; 0x01
    4d32:	84 0f       	add	r24, r20
    4d34:	95 1f       	adc	r25, r21
    4d36:	02 96       	adiw	r24, 0x02	; 2
    4d38:	e9 01       	movw	r28, r18
    4d3a:	88 83       	st	Y, r24
    4d3c:	99 83       	std	Y+1, r25	; 0x01
    4d3e:	82 81       	ldd	r24, Z+2	; 0x02
    4d40:	93 81       	ldd	r25, Z+3	; 0x03
    4d42:	8a 83       	std	Y+2, r24	; 0x02
    4d44:	9b 83       	std	Y+3, r25	; 0x03
    4d46:	e0 e0       	ldi	r30, 0x00	; 0
    4d48:	f0 e0       	ldi	r31, 0x00	; 0
    4d4a:	12 96       	adiw	r26, 0x02	; 2
    4d4c:	8d 91       	ld	r24, X+
    4d4e:	9c 91       	ld	r25, X
    4d50:	13 97       	sbiw	r26, 0x03	; 3
    4d52:	00 97       	sbiw	r24, 0x00	; 0
    4d54:	19 f0       	breq	.+6      	; 0x4d5c <free+0xd4>
    4d56:	fd 01       	movw	r30, r26
    4d58:	dc 01       	movw	r26, r24
    4d5a:	f7 cf       	rjmp	.-18     	; 0x4d4a <free+0xc2>
    4d5c:	8d 91       	ld	r24, X+
    4d5e:	9c 91       	ld	r25, X
    4d60:	11 97       	sbiw	r26, 0x01	; 1
    4d62:	9d 01       	movw	r18, r26
    4d64:	2e 5f       	subi	r18, 0xFE	; 254
    4d66:	3f 4f       	sbci	r19, 0xFF	; 255
    4d68:	82 0f       	add	r24, r18
    4d6a:	93 1f       	adc	r25, r19
    4d6c:	20 91 c1 45 	lds	r18, 0x45C1	; 0x8045c1 <__brkval>
    4d70:	30 91 c2 45 	lds	r19, 0x45C2	; 0x8045c2 <__brkval+0x1>
    4d74:	28 17       	cp	r18, r24
    4d76:	39 07       	cpc	r19, r25
    4d78:	69 f4       	brne	.+26     	; 0x4d94 <free+0x10c>
    4d7a:	30 97       	sbiw	r30, 0x00	; 0
    4d7c:	29 f4       	brne	.+10     	; 0x4d88 <free+0x100>
    4d7e:	10 92 c3 45 	sts	0x45C3, r1	; 0x8045c3 <__flp>
    4d82:	10 92 c4 45 	sts	0x45C4, r1	; 0x8045c4 <__flp+0x1>
    4d86:	02 c0       	rjmp	.+4      	; 0x4d8c <free+0x104>
    4d88:	12 82       	std	Z+2, r1	; 0x02
    4d8a:	13 82       	std	Z+3, r1	; 0x03
    4d8c:	a0 93 c1 45 	sts	0x45C1, r26	; 0x8045c1 <__brkval>
    4d90:	b0 93 c2 45 	sts	0x45C2, r27	; 0x8045c2 <__brkval+0x1>
    4d94:	df 91       	pop	r29
    4d96:	cf 91       	pop	r28
    4d98:	08 95       	ret

00004d9a <strtod>:
    4d9a:	8f 92       	push	r8
    4d9c:	9f 92       	push	r9
    4d9e:	af 92       	push	r10
    4da0:	bf 92       	push	r11
    4da2:	cf 92       	push	r12
    4da4:	df 92       	push	r13
    4da6:	ef 92       	push	r14
    4da8:	ff 92       	push	r15
    4daa:	0f 93       	push	r16
    4dac:	1f 93       	push	r17
    4dae:	cf 93       	push	r28
    4db0:	df 93       	push	r29
    4db2:	ec 01       	movw	r28, r24
    4db4:	6b 01       	movw	r12, r22
    4db6:	61 15       	cp	r22, r1
    4db8:	71 05       	cpc	r23, r1
    4dba:	19 f0       	breq	.+6      	; 0x4dc2 <strtod+0x28>
    4dbc:	fb 01       	movw	r30, r22
    4dbe:	80 83       	st	Z, r24
    4dc0:	91 83       	std	Z+1, r25	; 0x01
    4dc2:	7e 01       	movw	r14, r28
    4dc4:	ff ef       	ldi	r31, 0xFF	; 255
    4dc6:	ef 1a       	sub	r14, r31
    4dc8:	ff 0a       	sbc	r15, r31
    4dca:	08 81       	ld	r16, Y
    4dcc:	80 2f       	mov	r24, r16
    4dce:	90 e0       	ldi	r25, 0x00	; 0
    4dd0:	0e 94 46 29 	call	0x528c	; 0x528c <isspace>
    4dd4:	89 2b       	or	r24, r25
    4dd6:	11 f0       	breq	.+4      	; 0x4ddc <strtod+0x42>
    4dd8:	e7 01       	movw	r28, r14
    4dda:	f3 cf       	rjmp	.-26     	; 0x4dc2 <strtod+0x28>
    4ddc:	0d 32       	cpi	r16, 0x2D	; 45
    4dde:	39 f4       	brne	.+14     	; 0x4dee <strtod+0x54>
    4de0:	7e 01       	movw	r14, r28
    4de2:	82 e0       	ldi	r24, 0x02	; 2
    4de4:	e8 0e       	add	r14, r24
    4de6:	f1 1c       	adc	r15, r1
    4de8:	09 81       	ldd	r16, Y+1	; 0x01
    4dea:	11 e0       	ldi	r17, 0x01	; 1
    4dec:	08 c0       	rjmp	.+16     	; 0x4dfe <strtod+0x64>
    4dee:	0b 32       	cpi	r16, 0x2B	; 43
    4df0:	29 f4       	brne	.+10     	; 0x4dfc <strtod+0x62>
    4df2:	7e 01       	movw	r14, r28
    4df4:	92 e0       	ldi	r25, 0x02	; 2
    4df6:	e9 0e       	add	r14, r25
    4df8:	f1 1c       	adc	r15, r1
    4dfa:	09 81       	ldd	r16, Y+1	; 0x01
    4dfc:	10 e0       	ldi	r17, 0x00	; 0
    4dfe:	e7 01       	movw	r28, r14
    4e00:	21 97       	sbiw	r28, 0x01	; 1
    4e02:	43 e0       	ldi	r20, 0x03	; 3
    4e04:	50 e0       	ldi	r21, 0x00	; 0
    4e06:	60 e7       	ldi	r22, 0x70	; 112
    4e08:	72 e0       	ldi	r23, 0x02	; 2
    4e0a:	ce 01       	movw	r24, r28
    4e0c:	0e 94 4f 29 	call	0x529e	; 0x529e <strncasecmp_P>
    4e10:	89 2b       	or	r24, r25
    4e12:	c1 f4       	brne	.+48     	; 0x4e44 <strtod+0xaa>
    4e14:	23 96       	adiw	r28, 0x03	; 3
    4e16:	45 e0       	ldi	r20, 0x05	; 5
    4e18:	50 e0       	ldi	r21, 0x00	; 0
    4e1a:	6b e6       	ldi	r22, 0x6B	; 107
    4e1c:	72 e0       	ldi	r23, 0x02	; 2
    4e1e:	ce 01       	movw	r24, r28
    4e20:	0e 94 4f 29 	call	0x529e	; 0x529e <strncasecmp_P>
    4e24:	89 2b       	or	r24, r25
    4e26:	09 f4       	brne	.+2      	; 0x4e2a <strtod+0x90>
    4e28:	25 96       	adiw	r28, 0x05	; 5
    4e2a:	c1 14       	cp	r12, r1
    4e2c:	d1 04       	cpc	r13, r1
    4e2e:	19 f0       	breq	.+6      	; 0x4e36 <strtod+0x9c>
    4e30:	f6 01       	movw	r30, r12
    4e32:	c0 83       	st	Z, r28
    4e34:	d1 83       	std	Z+1, r29	; 0x01
    4e36:	11 11       	cpse	r17, r1
    4e38:	f6 c0       	rjmp	.+492    	; 0x5026 <strtod+0x28c>
    4e3a:	60 e0       	ldi	r22, 0x00	; 0
    4e3c:	70 e0       	ldi	r23, 0x00	; 0
    4e3e:	80 e8       	ldi	r24, 0x80	; 128
    4e40:	9f e7       	ldi	r25, 0x7F	; 127
    4e42:	fa c0       	rjmp	.+500    	; 0x5038 <strtod+0x29e>
    4e44:	43 e0       	ldi	r20, 0x03	; 3
    4e46:	50 e0       	ldi	r21, 0x00	; 0
    4e48:	68 e6       	ldi	r22, 0x68	; 104
    4e4a:	72 e0       	ldi	r23, 0x02	; 2
    4e4c:	ce 01       	movw	r24, r28
    4e4e:	0e 94 4f 29 	call	0x529e	; 0x529e <strncasecmp_P>
    4e52:	89 2b       	or	r24, r25
    4e54:	59 f4       	brne	.+22     	; 0x4e6c <strtod+0xd2>
    4e56:	c1 14       	cp	r12, r1
    4e58:	d1 04       	cpc	r13, r1
    4e5a:	09 f4       	brne	.+2      	; 0x4e5e <strtod+0xc4>
    4e5c:	e9 c0       	rjmp	.+466    	; 0x5030 <strtod+0x296>
    4e5e:	f2 e0       	ldi	r31, 0x02	; 2
    4e60:	ef 0e       	add	r14, r31
    4e62:	f1 1c       	adc	r15, r1
    4e64:	f6 01       	movw	r30, r12
    4e66:	e0 82       	st	Z, r14
    4e68:	f1 82       	std	Z+1, r15	; 0x01
    4e6a:	e2 c0       	rjmp	.+452    	; 0x5030 <strtod+0x296>
    4e6c:	20 e0       	ldi	r18, 0x00	; 0
    4e6e:	30 e0       	ldi	r19, 0x00	; 0
    4e70:	a9 01       	movw	r20, r18
    4e72:	c0 e0       	ldi	r28, 0x00	; 0
    4e74:	d0 e0       	ldi	r29, 0x00	; 0
    4e76:	f7 01       	movw	r30, r14
    4e78:	60 ed       	ldi	r22, 0xD0	; 208
    4e7a:	a6 2e       	mov	r10, r22
    4e7c:	a0 0e       	add	r10, r16
    4e7e:	89 e0       	ldi	r24, 0x09	; 9
    4e80:	8a 15       	cp	r24, r10
    4e82:	30 f1       	brcs	.+76     	; 0x4ed0 <strtod+0x136>
    4e84:	91 2f       	mov	r25, r17
    4e86:	92 60       	ori	r25, 0x02	; 2
    4e88:	b9 2e       	mov	r11, r25
    4e8a:	81 2f       	mov	r24, r17
    4e8c:	88 70       	andi	r24, 0x08	; 8
    4e8e:	12 ff       	sbrs	r17, 2
    4e90:	04 c0       	rjmp	.+8      	; 0x4e9a <strtod+0x100>
    4e92:	81 11       	cpse	r24, r1
    4e94:	24 c0       	rjmp	.+72     	; 0x4ede <strtod+0x144>
    4e96:	21 96       	adiw	r28, 0x01	; 1
    4e98:	22 c0       	rjmp	.+68     	; 0x4ede <strtod+0x144>
    4e9a:	81 11       	cpse	r24, r1
    4e9c:	21 97       	sbiw	r28, 0x01	; 1
    4e9e:	a5 e0       	ldi	r26, 0x05	; 5
    4ea0:	b0 e0       	ldi	r27, 0x00	; 0
    4ea2:	0e 94 56 25 	call	0x4aac	; 0x4aac <__muluhisi3>
    4ea6:	dc 01       	movw	r26, r24
    4ea8:	cb 01       	movw	r24, r22
    4eaa:	88 0f       	add	r24, r24
    4eac:	99 1f       	adc	r25, r25
    4eae:	aa 1f       	adc	r26, r26
    4eb0:	bb 1f       	adc	r27, r27
    4eb2:	9c 01       	movw	r18, r24
    4eb4:	ad 01       	movw	r20, r26
    4eb6:	2a 0d       	add	r18, r10
    4eb8:	31 1d       	adc	r19, r1
    4eba:	41 1d       	adc	r20, r1
    4ebc:	51 1d       	adc	r21, r1
    4ebe:	28 39       	cpi	r18, 0x98	; 152
    4ec0:	89 e9       	ldi	r24, 0x99	; 153
    4ec2:	38 07       	cpc	r19, r24
    4ec4:	48 07       	cpc	r20, r24
    4ec6:	89 e1       	ldi	r24, 0x19	; 25
    4ec8:	58 07       	cpc	r21, r24
    4eca:	48 f0       	brcs	.+18     	; 0x4ede <strtod+0x144>
    4ecc:	16 60       	ori	r17, 0x06	; 6
    4ece:	06 c0       	rjmp	.+12     	; 0x4edc <strtod+0x142>
    4ed0:	9e ef       	ldi	r25, 0xFE	; 254
    4ed2:	a9 12       	cpse	r10, r25
    4ed4:	0a c0       	rjmp	.+20     	; 0x4eea <strtod+0x150>
    4ed6:	13 fd       	sbrc	r17, 3
    4ed8:	40 c0       	rjmp	.+128    	; 0x4f5a <strtod+0x1c0>
    4eda:	18 60       	ori	r17, 0x08	; 8
    4edc:	b1 2e       	mov	r11, r17
    4ede:	8f ef       	ldi	r24, 0xFF	; 255
    4ee0:	e8 1a       	sub	r14, r24
    4ee2:	f8 0a       	sbc	r15, r24
    4ee4:	00 81       	ld	r16, Z
    4ee6:	1b 2d       	mov	r17, r11
    4ee8:	c6 cf       	rjmp	.-116    	; 0x4e76 <strtod+0xdc>
    4eea:	80 2f       	mov	r24, r16
    4eec:	8f 7d       	andi	r24, 0xDF	; 223
    4eee:	85 34       	cpi	r24, 0x45	; 69
    4ef0:	a1 f5       	brne	.+104    	; 0x4f5a <strtod+0x1c0>
    4ef2:	80 81       	ld	r24, Z
    4ef4:	8d 32       	cpi	r24, 0x2D	; 45
    4ef6:	11 f4       	brne	.+4      	; 0x4efc <strtod+0x162>
    4ef8:	10 61       	ori	r17, 0x10	; 16
    4efa:	06 c0       	rjmp	.+12     	; 0x4f08 <strtod+0x16e>
    4efc:	8b 32       	cpi	r24, 0x2B	; 43
    4efe:	21 f0       	breq	.+8      	; 0x4f08 <strtod+0x16e>
    4f00:	31 96       	adiw	r30, 0x01	; 1
    4f02:	61 e0       	ldi	r22, 0x01	; 1
    4f04:	70 e0       	ldi	r23, 0x00	; 0
    4f06:	04 c0       	rjmp	.+8      	; 0x4f10 <strtod+0x176>
    4f08:	81 81       	ldd	r24, Z+1	; 0x01
    4f0a:	32 96       	adiw	r30, 0x02	; 2
    4f0c:	62 e0       	ldi	r22, 0x02	; 2
    4f0e:	70 e0       	ldi	r23, 0x00	; 0
    4f10:	80 53       	subi	r24, 0x30	; 48
    4f12:	8a 30       	cpi	r24, 0x0A	; 10
    4f14:	18 f0       	brcs	.+6      	; 0x4f1c <strtod+0x182>
    4f16:	e6 1b       	sub	r30, r22
    4f18:	f7 0b       	sbc	r31, r23
    4f1a:	1f c0       	rjmp	.+62     	; 0x4f5a <strtod+0x1c0>
    4f1c:	60 e0       	ldi	r22, 0x00	; 0
    4f1e:	70 e0       	ldi	r23, 0x00	; 0
    4f20:	60 38       	cpi	r22, 0x80	; 128
    4f22:	9c e0       	ldi	r25, 0x0C	; 12
    4f24:	79 07       	cpc	r23, r25
    4f26:	5c f4       	brge	.+22     	; 0x4f3e <strtod+0x1a4>
    4f28:	db 01       	movw	r26, r22
    4f2a:	aa 0f       	add	r26, r26
    4f2c:	bb 1f       	adc	r27, r27
    4f2e:	aa 0f       	add	r26, r26
    4f30:	bb 1f       	adc	r27, r27
    4f32:	6a 0f       	add	r22, r26
    4f34:	7b 1f       	adc	r23, r27
    4f36:	66 0f       	add	r22, r22
    4f38:	77 1f       	adc	r23, r23
    4f3a:	68 0f       	add	r22, r24
    4f3c:	71 1d       	adc	r23, r1
    4f3e:	31 96       	adiw	r30, 0x01	; 1
    4f40:	df 01       	movw	r26, r30
    4f42:	11 97       	sbiw	r26, 0x01	; 1
    4f44:	8c 91       	ld	r24, X
    4f46:	80 53       	subi	r24, 0x30	; 48
    4f48:	8a 30       	cpi	r24, 0x0A	; 10
    4f4a:	50 f3       	brcs	.-44     	; 0x4f20 <strtod+0x186>
    4f4c:	14 ff       	sbrs	r17, 4
    4f4e:	03 c0       	rjmp	.+6      	; 0x4f56 <strtod+0x1bc>
    4f50:	71 95       	neg	r23
    4f52:	61 95       	neg	r22
    4f54:	71 09       	sbc	r23, r1
    4f56:	c6 0f       	add	r28, r22
    4f58:	d7 1f       	adc	r29, r23
    4f5a:	11 ff       	sbrs	r17, 1
    4f5c:	08 c0       	rjmp	.+16     	; 0x4f6e <strtod+0x1d4>
    4f5e:	c1 14       	cp	r12, r1
    4f60:	d1 04       	cpc	r13, r1
    4f62:	29 f0       	breq	.+10     	; 0x4f6e <strtod+0x1d4>
    4f64:	cf 01       	movw	r24, r30
    4f66:	01 97       	sbiw	r24, 0x01	; 1
    4f68:	f6 01       	movw	r30, r12
    4f6a:	80 83       	st	Z, r24
    4f6c:	91 83       	std	Z+1, r25	; 0x01
    4f6e:	ca 01       	movw	r24, r20
    4f70:	b9 01       	movw	r22, r18
    4f72:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <__floatunsisf>
    4f76:	21 2f       	mov	r18, r17
    4f78:	23 70       	andi	r18, 0x03	; 3
    4f7a:	23 30       	cpi	r18, 0x03	; 3
    4f7c:	19 f0       	breq	.+6      	; 0x4f84 <strtod+0x1ea>
    4f7e:	4b 01       	movw	r8, r22
    4f80:	5c 01       	movw	r10, r24
    4f82:	06 c0       	rjmp	.+12     	; 0x4f90 <strtod+0x1f6>
    4f84:	4b 01       	movw	r8, r22
    4f86:	5c 01       	movw	r10, r24
    4f88:	b7 fa       	bst	r11, 7
    4f8a:	b0 94       	com	r11
    4f8c:	b7 f8       	bld	r11, 7
    4f8e:	b0 94       	com	r11
    4f90:	20 e0       	ldi	r18, 0x00	; 0
    4f92:	30 e0       	ldi	r19, 0x00	; 0
    4f94:	a9 01       	movw	r20, r18
    4f96:	c5 01       	movw	r24, r10
    4f98:	b4 01       	movw	r22, r8
    4f9a:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <__cmpsf2>
    4f9e:	88 23       	and	r24, r24
    4fa0:	09 f4       	brne	.+2      	; 0x4fa4 <strtod+0x20a>
    4fa2:	3e c0       	rjmp	.+124    	; 0x5020 <strtod+0x286>
    4fa4:	d7 ff       	sbrs	r29, 7
    4fa6:	06 c0       	rjmp	.+12     	; 0x4fb4 <strtod+0x21a>
    4fa8:	d1 95       	neg	r29
    4faa:	c1 95       	neg	r28
    4fac:	d1 09       	sbc	r29, r1
    4fae:	07 e8       	ldi	r16, 0x87	; 135
    4fb0:	12 e0       	ldi	r17, 0x02	; 2
    4fb2:	02 c0       	rjmp	.+4      	; 0x4fb8 <strtod+0x21e>
    4fb4:	0f e9       	ldi	r16, 0x9F	; 159
    4fb6:	12 e0       	ldi	r17, 0x02	; 2
    4fb8:	68 01       	movw	r12, r16
    4fba:	f8 e1       	ldi	r31, 0x18	; 24
    4fbc:	cf 1a       	sub	r12, r31
    4fbe:	d1 08       	sbc	r13, r1
    4fc0:	90 e2       	ldi	r25, 0x20	; 32
    4fc2:	e9 2e       	mov	r14, r25
    4fc4:	f1 2c       	mov	r15, r1
    4fc6:	ce 15       	cp	r28, r14
    4fc8:	df 05       	cpc	r29, r15
    4fca:	74 f0       	brlt	.+28     	; 0x4fe8 <strtod+0x24e>
    4fcc:	f8 01       	movw	r30, r16
    4fce:	25 91       	lpm	r18, Z+
    4fd0:	35 91       	lpm	r19, Z+
    4fd2:	45 91       	lpm	r20, Z+
    4fd4:	54 91       	lpm	r21, Z
    4fd6:	c5 01       	movw	r24, r10
    4fd8:	b4 01       	movw	r22, r8
    4fda:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__mulsf3>
    4fde:	4b 01       	movw	r8, r22
    4fe0:	5c 01       	movw	r10, r24
    4fe2:	ce 19       	sub	r28, r14
    4fe4:	df 09       	sbc	r29, r15
    4fe6:	ef cf       	rjmp	.-34     	; 0x4fc6 <strtod+0x22c>
    4fe8:	04 50       	subi	r16, 0x04	; 4
    4fea:	11 09       	sbc	r17, r1
    4fec:	f5 94       	asr	r15
    4fee:	e7 94       	ror	r14
    4ff0:	0c 15       	cp	r16, r12
    4ff2:	1d 05       	cpc	r17, r13
    4ff4:	41 f7       	brne	.-48     	; 0x4fc6 <strtod+0x22c>
    4ff6:	8a 2d       	mov	r24, r10
    4ff8:	88 0f       	add	r24, r24
    4ffa:	8b 2d       	mov	r24, r11
    4ffc:	88 1f       	adc	r24, r24
    4ffe:	8f 3f       	cpi	r24, 0xFF	; 255
    5000:	49 f0       	breq	.+18     	; 0x5014 <strtod+0x27a>
    5002:	20 e0       	ldi	r18, 0x00	; 0
    5004:	30 e0       	ldi	r19, 0x00	; 0
    5006:	a9 01       	movw	r20, r18
    5008:	c5 01       	movw	r24, r10
    500a:	b4 01       	movw	r22, r8
    500c:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <__cmpsf2>
    5010:	81 11       	cpse	r24, r1
    5012:	06 c0       	rjmp	.+12     	; 0x5020 <strtod+0x286>
    5014:	82 e2       	ldi	r24, 0x22	; 34
    5016:	90 e0       	ldi	r25, 0x00	; 0
    5018:	80 93 c5 45 	sts	0x45C5, r24	; 0x8045c5 <errno>
    501c:	90 93 c6 45 	sts	0x45C6, r25	; 0x8045c6 <errno+0x1>
    5020:	c5 01       	movw	r24, r10
    5022:	b4 01       	movw	r22, r8
    5024:	09 c0       	rjmp	.+18     	; 0x5038 <strtod+0x29e>
    5026:	60 e0       	ldi	r22, 0x00	; 0
    5028:	70 e0       	ldi	r23, 0x00	; 0
    502a:	80 e8       	ldi	r24, 0x80	; 128
    502c:	9f ef       	ldi	r25, 0xFF	; 255
    502e:	04 c0       	rjmp	.+8      	; 0x5038 <strtod+0x29e>
    5030:	60 e0       	ldi	r22, 0x00	; 0
    5032:	70 e0       	ldi	r23, 0x00	; 0
    5034:	80 ec       	ldi	r24, 0xC0	; 192
    5036:	9f e7       	ldi	r25, 0x7F	; 127
    5038:	df 91       	pop	r29
    503a:	cf 91       	pop	r28
    503c:	1f 91       	pop	r17
    503e:	0f 91       	pop	r16
    5040:	ff 90       	pop	r15
    5042:	ef 90       	pop	r14
    5044:	df 90       	pop	r13
    5046:	cf 90       	pop	r12
    5048:	bf 90       	pop	r11
    504a:	af 90       	pop	r10
    504c:	9f 90       	pop	r9
    504e:	8f 90       	pop	r8
    5050:	08 95       	ret

00005052 <atoi>:
    5052:	fc 01       	movw	r30, r24
    5054:	88 27       	eor	r24, r24
    5056:	99 27       	eor	r25, r25
    5058:	e8 94       	clt
    505a:	21 91       	ld	r18, Z+
    505c:	20 32       	cpi	r18, 0x20	; 32
    505e:	e9 f3       	breq	.-6      	; 0x505a <atoi+0x8>
    5060:	29 30       	cpi	r18, 0x09	; 9
    5062:	10 f0       	brcs	.+4      	; 0x5068 <atoi+0x16>
    5064:	2e 30       	cpi	r18, 0x0E	; 14
    5066:	c8 f3       	brcs	.-14     	; 0x505a <atoi+0x8>
    5068:	2b 32       	cpi	r18, 0x2B	; 43
    506a:	41 f0       	breq	.+16     	; 0x507c <atoi+0x2a>
    506c:	2d 32       	cpi	r18, 0x2D	; 45
    506e:	39 f4       	brne	.+14     	; 0x507e <atoi+0x2c>
    5070:	68 94       	set
    5072:	04 c0       	rjmp	.+8      	; 0x507c <atoi+0x2a>
    5074:	0e 94 92 29 	call	0x5324	; 0x5324 <__mulhi_const_10>
    5078:	82 0f       	add	r24, r18
    507a:	91 1d       	adc	r25, r1
    507c:	21 91       	ld	r18, Z+
    507e:	20 53       	subi	r18, 0x30	; 48
    5080:	2a 30       	cpi	r18, 0x0A	; 10
    5082:	c0 f3       	brcs	.-16     	; 0x5074 <atoi+0x22>
    5084:	1e f4       	brtc	.+6      	; 0x508c <atoi+0x3a>
    5086:	90 95       	com	r25
    5088:	81 95       	neg	r24
    508a:	9f 4f       	sbci	r25, 0xFF	; 255
    508c:	08 95       	ret

0000508e <atol>:
    508e:	1f 93       	push	r17
    5090:	fc 01       	movw	r30, r24
    5092:	99 27       	eor	r25, r25
    5094:	88 27       	eor	r24, r24
    5096:	bc 01       	movw	r22, r24
    5098:	e8 94       	clt
    509a:	11 91       	ld	r17, Z+
    509c:	10 32       	cpi	r17, 0x20	; 32
    509e:	e9 f3       	breq	.-6      	; 0x509a <atol+0xc>
    50a0:	19 30       	cpi	r17, 0x09	; 9
    50a2:	10 f0       	brcs	.+4      	; 0x50a8 <atol+0x1a>
    50a4:	1e 30       	cpi	r17, 0x0E	; 14
    50a6:	c8 f3       	brcs	.-14     	; 0x509a <atol+0xc>
    50a8:	1b 32       	cpi	r17, 0x2B	; 43
    50aa:	51 f0       	breq	.+20     	; 0x50c0 <atol+0x32>
    50ac:	1d 32       	cpi	r17, 0x2D	; 45
    50ae:	49 f4       	brne	.+18     	; 0x50c2 <atol+0x34>
    50b0:	68 94       	set
    50b2:	06 c0       	rjmp	.+12     	; 0x50c0 <atol+0x32>
    50b4:	0e 94 7d 29 	call	0x52fa	; 0x52fa <__mulsi_const_10>
    50b8:	61 0f       	add	r22, r17
    50ba:	71 1d       	adc	r23, r1
    50bc:	81 1d       	adc	r24, r1
    50be:	91 1d       	adc	r25, r1
    50c0:	11 91       	ld	r17, Z+
    50c2:	10 53       	subi	r17, 0x30	; 48
    50c4:	1a 30       	cpi	r17, 0x0A	; 10
    50c6:	b0 f3       	brcs	.-20     	; 0x50b4 <atol+0x26>
    50c8:	3e f4       	brtc	.+14     	; 0x50d8 <atol+0x4a>
    50ca:	90 95       	com	r25
    50cc:	80 95       	com	r24
    50ce:	70 95       	com	r23
    50d0:	61 95       	neg	r22
    50d2:	7f 4f       	sbci	r23, 0xFF	; 255
    50d4:	8f 4f       	sbci	r24, 0xFF	; 255
    50d6:	9f 4f       	sbci	r25, 0xFF	; 255
    50d8:	1f 91       	pop	r17
    50da:	08 95       	ret

000050dc <__ftoa_engine>:
    50dc:	28 30       	cpi	r18, 0x08	; 8
    50de:	08 f0       	brcs	.+2      	; 0x50e2 <__ftoa_engine+0x6>
    50e0:	27 e0       	ldi	r18, 0x07	; 7
    50e2:	33 27       	eor	r19, r19
    50e4:	da 01       	movw	r26, r20
    50e6:	99 0f       	add	r25, r25
    50e8:	31 1d       	adc	r19, r1
    50ea:	87 fd       	sbrc	r24, 7
    50ec:	91 60       	ori	r25, 0x01	; 1
    50ee:	00 96       	adiw	r24, 0x00	; 0
    50f0:	61 05       	cpc	r22, r1
    50f2:	71 05       	cpc	r23, r1
    50f4:	39 f4       	brne	.+14     	; 0x5104 <__ftoa_engine+0x28>
    50f6:	32 60       	ori	r19, 0x02	; 2
    50f8:	2e 5f       	subi	r18, 0xFE	; 254
    50fa:	3d 93       	st	X+, r19
    50fc:	30 e3       	ldi	r19, 0x30	; 48
    50fe:	2a 95       	dec	r18
    5100:	e1 f7       	brne	.-8      	; 0x50fa <__ftoa_engine+0x1e>
    5102:	08 95       	ret
    5104:	9f 3f       	cpi	r25, 0xFF	; 255
    5106:	30 f0       	brcs	.+12     	; 0x5114 <__ftoa_engine+0x38>
    5108:	80 38       	cpi	r24, 0x80	; 128
    510a:	71 05       	cpc	r23, r1
    510c:	61 05       	cpc	r22, r1
    510e:	09 f0       	breq	.+2      	; 0x5112 <__ftoa_engine+0x36>
    5110:	3c 5f       	subi	r19, 0xFC	; 252
    5112:	3c 5f       	subi	r19, 0xFC	; 252
    5114:	3d 93       	st	X+, r19
    5116:	91 30       	cpi	r25, 0x01	; 1
    5118:	08 f0       	brcs	.+2      	; 0x511c <__ftoa_engine+0x40>
    511a:	80 68       	ori	r24, 0x80	; 128
    511c:	91 1d       	adc	r25, r1
    511e:	df 93       	push	r29
    5120:	cf 93       	push	r28
    5122:	1f 93       	push	r17
    5124:	0f 93       	push	r16
    5126:	ff 92       	push	r15
    5128:	ef 92       	push	r14
    512a:	19 2f       	mov	r17, r25
    512c:	98 7f       	andi	r25, 0xF8	; 248
    512e:	96 95       	lsr	r25
    5130:	e9 2f       	mov	r30, r25
    5132:	96 95       	lsr	r25
    5134:	96 95       	lsr	r25
    5136:	e9 0f       	add	r30, r25
    5138:	ff 27       	eor	r31, r31
    513a:	e3 50       	subi	r30, 0x03	; 3
    513c:	fd 4f       	sbci	r31, 0xFD	; 253
    513e:	99 27       	eor	r25, r25
    5140:	33 27       	eor	r19, r19
    5142:	ee 24       	eor	r14, r14
    5144:	ff 24       	eor	r15, r15
    5146:	a7 01       	movw	r20, r14
    5148:	e7 01       	movw	r28, r14
    514a:	05 90       	lpm	r0, Z+
    514c:	08 94       	sec
    514e:	07 94       	ror	r0
    5150:	28 f4       	brcc	.+10     	; 0x515c <__ftoa_engine+0x80>
    5152:	36 0f       	add	r19, r22
    5154:	e7 1e       	adc	r14, r23
    5156:	f8 1e       	adc	r15, r24
    5158:	49 1f       	adc	r20, r25
    515a:	51 1d       	adc	r21, r1
    515c:	66 0f       	add	r22, r22
    515e:	77 1f       	adc	r23, r23
    5160:	88 1f       	adc	r24, r24
    5162:	99 1f       	adc	r25, r25
    5164:	06 94       	lsr	r0
    5166:	a1 f7       	brne	.-24     	; 0x5150 <__ftoa_engine+0x74>
    5168:	05 90       	lpm	r0, Z+
    516a:	07 94       	ror	r0
    516c:	28 f4       	brcc	.+10     	; 0x5178 <__ftoa_engine+0x9c>
    516e:	e7 0e       	add	r14, r23
    5170:	f8 1e       	adc	r15, r24
    5172:	49 1f       	adc	r20, r25
    5174:	56 1f       	adc	r21, r22
    5176:	c1 1d       	adc	r28, r1
    5178:	77 0f       	add	r23, r23
    517a:	88 1f       	adc	r24, r24
    517c:	99 1f       	adc	r25, r25
    517e:	66 1f       	adc	r22, r22
    5180:	06 94       	lsr	r0
    5182:	a1 f7       	brne	.-24     	; 0x516c <__ftoa_engine+0x90>
    5184:	05 90       	lpm	r0, Z+
    5186:	07 94       	ror	r0
    5188:	28 f4       	brcc	.+10     	; 0x5194 <__ftoa_engine+0xb8>
    518a:	f8 0e       	add	r15, r24
    518c:	49 1f       	adc	r20, r25
    518e:	56 1f       	adc	r21, r22
    5190:	c7 1f       	adc	r28, r23
    5192:	d1 1d       	adc	r29, r1
    5194:	88 0f       	add	r24, r24
    5196:	99 1f       	adc	r25, r25
    5198:	66 1f       	adc	r22, r22
    519a:	77 1f       	adc	r23, r23
    519c:	06 94       	lsr	r0
    519e:	a1 f7       	brne	.-24     	; 0x5188 <__ftoa_engine+0xac>
    51a0:	05 90       	lpm	r0, Z+
    51a2:	07 94       	ror	r0
    51a4:	20 f4       	brcc	.+8      	; 0x51ae <__ftoa_engine+0xd2>
    51a6:	49 0f       	add	r20, r25
    51a8:	56 1f       	adc	r21, r22
    51aa:	c7 1f       	adc	r28, r23
    51ac:	d8 1f       	adc	r29, r24
    51ae:	99 0f       	add	r25, r25
    51b0:	66 1f       	adc	r22, r22
    51b2:	77 1f       	adc	r23, r23
    51b4:	88 1f       	adc	r24, r24
    51b6:	06 94       	lsr	r0
    51b8:	a9 f7       	brne	.-22     	; 0x51a4 <__ftoa_engine+0xc8>
    51ba:	84 91       	lpm	r24, Z
    51bc:	10 95       	com	r17
    51be:	17 70       	andi	r17, 0x07	; 7
    51c0:	41 f0       	breq	.+16     	; 0x51d2 <__ftoa_engine+0xf6>
    51c2:	d6 95       	lsr	r29
    51c4:	c7 95       	ror	r28
    51c6:	57 95       	ror	r21
    51c8:	47 95       	ror	r20
    51ca:	f7 94       	ror	r15
    51cc:	e7 94       	ror	r14
    51ce:	1a 95       	dec	r17
    51d0:	c1 f7       	brne	.-16     	; 0x51c2 <__ftoa_engine+0xe6>
    51d2:	e3 ea       	ldi	r30, 0xA3	; 163
    51d4:	f2 e0       	ldi	r31, 0x02	; 2
    51d6:	68 94       	set
    51d8:	15 90       	lpm	r1, Z+
    51da:	15 91       	lpm	r17, Z+
    51dc:	35 91       	lpm	r19, Z+
    51de:	65 91       	lpm	r22, Z+
    51e0:	95 91       	lpm	r25, Z+
    51e2:	05 90       	lpm	r0, Z+
    51e4:	7f e2       	ldi	r23, 0x2F	; 47
    51e6:	73 95       	inc	r23
    51e8:	e1 18       	sub	r14, r1
    51ea:	f1 0a       	sbc	r15, r17
    51ec:	43 0b       	sbc	r20, r19
    51ee:	56 0b       	sbc	r21, r22
    51f0:	c9 0b       	sbc	r28, r25
    51f2:	d0 09       	sbc	r29, r0
    51f4:	c0 f7       	brcc	.-16     	; 0x51e6 <__ftoa_engine+0x10a>
    51f6:	e1 0c       	add	r14, r1
    51f8:	f1 1e       	adc	r15, r17
    51fa:	43 1f       	adc	r20, r19
    51fc:	56 1f       	adc	r21, r22
    51fe:	c9 1f       	adc	r28, r25
    5200:	d0 1d       	adc	r29, r0
    5202:	7e f4       	brtc	.+30     	; 0x5222 <__ftoa_engine+0x146>
    5204:	70 33       	cpi	r23, 0x30	; 48
    5206:	11 f4       	brne	.+4      	; 0x520c <__ftoa_engine+0x130>
    5208:	8a 95       	dec	r24
    520a:	e6 cf       	rjmp	.-52     	; 0x51d8 <__ftoa_engine+0xfc>
    520c:	e8 94       	clt
    520e:	01 50       	subi	r16, 0x01	; 1
    5210:	30 f0       	brcs	.+12     	; 0x521e <__ftoa_engine+0x142>
    5212:	08 0f       	add	r16, r24
    5214:	0a f4       	brpl	.+2      	; 0x5218 <__ftoa_engine+0x13c>
    5216:	00 27       	eor	r16, r16
    5218:	02 17       	cp	r16, r18
    521a:	08 f4       	brcc	.+2      	; 0x521e <__ftoa_engine+0x142>
    521c:	20 2f       	mov	r18, r16
    521e:	23 95       	inc	r18
    5220:	02 2f       	mov	r16, r18
    5222:	7a 33       	cpi	r23, 0x3A	; 58
    5224:	28 f0       	brcs	.+10     	; 0x5230 <__ftoa_engine+0x154>
    5226:	79 e3       	ldi	r23, 0x39	; 57
    5228:	7d 93       	st	X+, r23
    522a:	2a 95       	dec	r18
    522c:	e9 f7       	brne	.-6      	; 0x5228 <__ftoa_engine+0x14c>
    522e:	10 c0       	rjmp	.+32     	; 0x5250 <__ftoa_engine+0x174>
    5230:	7d 93       	st	X+, r23
    5232:	2a 95       	dec	r18
    5234:	89 f6       	brne	.-94     	; 0x51d8 <__ftoa_engine+0xfc>
    5236:	06 94       	lsr	r0
    5238:	97 95       	ror	r25
    523a:	67 95       	ror	r22
    523c:	37 95       	ror	r19
    523e:	17 95       	ror	r17
    5240:	17 94       	ror	r1
    5242:	e1 18       	sub	r14, r1
    5244:	f1 0a       	sbc	r15, r17
    5246:	43 0b       	sbc	r20, r19
    5248:	56 0b       	sbc	r21, r22
    524a:	c9 0b       	sbc	r28, r25
    524c:	d0 09       	sbc	r29, r0
    524e:	98 f0       	brcs	.+38     	; 0x5276 <__ftoa_engine+0x19a>
    5250:	23 95       	inc	r18
    5252:	7e 91       	ld	r23, -X
    5254:	73 95       	inc	r23
    5256:	7a 33       	cpi	r23, 0x3A	; 58
    5258:	08 f0       	brcs	.+2      	; 0x525c <__ftoa_engine+0x180>
    525a:	70 e3       	ldi	r23, 0x30	; 48
    525c:	7c 93       	st	X, r23
    525e:	20 13       	cpse	r18, r16
    5260:	b8 f7       	brcc	.-18     	; 0x5250 <__ftoa_engine+0x174>
    5262:	7e 91       	ld	r23, -X
    5264:	70 61       	ori	r23, 0x10	; 16
    5266:	7d 93       	st	X+, r23
    5268:	30 f0       	brcs	.+12     	; 0x5276 <__ftoa_engine+0x19a>
    526a:	83 95       	inc	r24
    526c:	71 e3       	ldi	r23, 0x31	; 49
    526e:	7d 93       	st	X+, r23
    5270:	70 e3       	ldi	r23, 0x30	; 48
    5272:	2a 95       	dec	r18
    5274:	e1 f7       	brne	.-8      	; 0x526e <__ftoa_engine+0x192>
    5276:	11 24       	eor	r1, r1
    5278:	ef 90       	pop	r14
    527a:	ff 90       	pop	r15
    527c:	0f 91       	pop	r16
    527e:	1f 91       	pop	r17
    5280:	cf 91       	pop	r28
    5282:	df 91       	pop	r29
    5284:	99 27       	eor	r25, r25
    5286:	87 fd       	sbrc	r24, 7
    5288:	90 95       	com	r25
    528a:	08 95       	ret

0000528c <isspace>:
    528c:	91 11       	cpse	r25, r1
    528e:	0c 94 6b 2a 	jmp	0x54d6	; 0x54d6 <__ctype_isfalse>
    5292:	80 32       	cpi	r24, 0x20	; 32
    5294:	19 f0       	breq	.+6      	; 0x529c <isspace+0x10>
    5296:	89 50       	subi	r24, 0x09	; 9
    5298:	85 50       	subi	r24, 0x05	; 5
    529a:	c8 f7       	brcc	.-14     	; 0x528e <isspace+0x2>
    529c:	08 95       	ret

0000529e <strncasecmp_P>:
    529e:	fb 01       	movw	r30, r22
    52a0:	dc 01       	movw	r26, r24
    52a2:	41 50       	subi	r20, 0x01	; 1
    52a4:	50 40       	sbci	r21, 0x00	; 0
    52a6:	88 f0       	brcs	.+34     	; 0x52ca <strncasecmp_P+0x2c>
    52a8:	8d 91       	ld	r24, X+
    52aa:	81 34       	cpi	r24, 0x41	; 65
    52ac:	1c f0       	brlt	.+6      	; 0x52b4 <strncasecmp_P+0x16>
    52ae:	8b 35       	cpi	r24, 0x5B	; 91
    52b0:	0c f4       	brge	.+2      	; 0x52b4 <strncasecmp_P+0x16>
    52b2:	80 5e       	subi	r24, 0xE0	; 224
    52b4:	65 91       	lpm	r22, Z+
    52b6:	61 34       	cpi	r22, 0x41	; 65
    52b8:	1c f0       	brlt	.+6      	; 0x52c0 <strncasecmp_P+0x22>
    52ba:	6b 35       	cpi	r22, 0x5B	; 91
    52bc:	0c f4       	brge	.+2      	; 0x52c0 <strncasecmp_P+0x22>
    52be:	60 5e       	subi	r22, 0xE0	; 224
    52c0:	86 1b       	sub	r24, r22
    52c2:	61 11       	cpse	r22, r1
    52c4:	71 f3       	breq	.-36     	; 0x52a2 <strncasecmp_P+0x4>
    52c6:	99 0b       	sbc	r25, r25
    52c8:	08 95       	ret
    52ca:	88 1b       	sub	r24, r24
    52cc:	fc cf       	rjmp	.-8      	; 0x52c6 <strncasecmp_P+0x28>

000052ce <strnlen_P>:
    52ce:	fc 01       	movw	r30, r24
    52d0:	05 90       	lpm	r0, Z+
    52d2:	61 50       	subi	r22, 0x01	; 1
    52d4:	70 40       	sbci	r23, 0x00	; 0
    52d6:	01 10       	cpse	r0, r1
    52d8:	d8 f7       	brcc	.-10     	; 0x52d0 <strnlen_P+0x2>
    52da:	80 95       	com	r24
    52dc:	90 95       	com	r25
    52de:	8e 0f       	add	r24, r30
    52e0:	9f 1f       	adc	r25, r31
    52e2:	08 95       	ret

000052e4 <strnlen>:
    52e4:	fc 01       	movw	r30, r24
    52e6:	61 50       	subi	r22, 0x01	; 1
    52e8:	70 40       	sbci	r23, 0x00	; 0
    52ea:	01 90       	ld	r0, Z+
    52ec:	01 10       	cpse	r0, r1
    52ee:	d8 f7       	brcc	.-10     	; 0x52e6 <strnlen+0x2>
    52f0:	80 95       	com	r24
    52f2:	90 95       	com	r25
    52f4:	8e 0f       	add	r24, r30
    52f6:	9f 1f       	adc	r25, r31
    52f8:	08 95       	ret

000052fa <__mulsi_const_10>:
    52fa:	59 2f       	mov	r21, r25
    52fc:	48 2f       	mov	r20, r24
    52fe:	37 2f       	mov	r19, r23
    5300:	26 2f       	mov	r18, r22
    5302:	66 0f       	add	r22, r22
    5304:	77 1f       	adc	r23, r23
    5306:	88 1f       	adc	r24, r24
    5308:	99 1f       	adc	r25, r25
    530a:	66 0f       	add	r22, r22
    530c:	77 1f       	adc	r23, r23
    530e:	88 1f       	adc	r24, r24
    5310:	99 1f       	adc	r25, r25
    5312:	62 0f       	add	r22, r18
    5314:	73 1f       	adc	r23, r19
    5316:	84 1f       	adc	r24, r20
    5318:	95 1f       	adc	r25, r21
    531a:	66 0f       	add	r22, r22
    531c:	77 1f       	adc	r23, r23
    531e:	88 1f       	adc	r24, r24
    5320:	99 1f       	adc	r25, r25
    5322:	08 95       	ret

00005324 <__mulhi_const_10>:
    5324:	7a e0       	ldi	r23, 0x0A	; 10
    5326:	97 9f       	mul	r25, r23
    5328:	90 2d       	mov	r25, r0
    532a:	87 9f       	mul	r24, r23
    532c:	80 2d       	mov	r24, r0
    532e:	91 0d       	add	r25, r1
    5330:	11 24       	eor	r1, r1
    5332:	08 95       	ret

00005334 <fputc>:
    5334:	0f 93       	push	r16
    5336:	1f 93       	push	r17
    5338:	cf 93       	push	r28
    533a:	df 93       	push	r29
    533c:	fb 01       	movw	r30, r22
    533e:	23 81       	ldd	r18, Z+3	; 0x03
    5340:	21 fd       	sbrc	r18, 1
    5342:	03 c0       	rjmp	.+6      	; 0x534a <fputc+0x16>
    5344:	8f ef       	ldi	r24, 0xFF	; 255
    5346:	9f ef       	ldi	r25, 0xFF	; 255
    5348:	2c c0       	rjmp	.+88     	; 0x53a2 <fputc+0x6e>
    534a:	22 ff       	sbrs	r18, 2
    534c:	16 c0       	rjmp	.+44     	; 0x537a <fputc+0x46>
    534e:	46 81       	ldd	r20, Z+6	; 0x06
    5350:	57 81       	ldd	r21, Z+7	; 0x07
    5352:	24 81       	ldd	r18, Z+4	; 0x04
    5354:	35 81       	ldd	r19, Z+5	; 0x05
    5356:	42 17       	cp	r20, r18
    5358:	53 07       	cpc	r21, r19
    535a:	44 f4       	brge	.+16     	; 0x536c <fputc+0x38>
    535c:	a0 81       	ld	r26, Z
    535e:	b1 81       	ldd	r27, Z+1	; 0x01
    5360:	9d 01       	movw	r18, r26
    5362:	2f 5f       	subi	r18, 0xFF	; 255
    5364:	3f 4f       	sbci	r19, 0xFF	; 255
    5366:	20 83       	st	Z, r18
    5368:	31 83       	std	Z+1, r19	; 0x01
    536a:	8c 93       	st	X, r24
    536c:	26 81       	ldd	r18, Z+6	; 0x06
    536e:	37 81       	ldd	r19, Z+7	; 0x07
    5370:	2f 5f       	subi	r18, 0xFF	; 255
    5372:	3f 4f       	sbci	r19, 0xFF	; 255
    5374:	26 83       	std	Z+6, r18	; 0x06
    5376:	37 83       	std	Z+7, r19	; 0x07
    5378:	14 c0       	rjmp	.+40     	; 0x53a2 <fputc+0x6e>
    537a:	8b 01       	movw	r16, r22
    537c:	ec 01       	movw	r28, r24
    537e:	fb 01       	movw	r30, r22
    5380:	00 84       	ldd	r0, Z+8	; 0x08
    5382:	f1 85       	ldd	r31, Z+9	; 0x09
    5384:	e0 2d       	mov	r30, r0
    5386:	09 95       	icall
    5388:	89 2b       	or	r24, r25
    538a:	e1 f6       	brne	.-72     	; 0x5344 <fputc+0x10>
    538c:	d8 01       	movw	r26, r16
    538e:	16 96       	adiw	r26, 0x06	; 6
    5390:	8d 91       	ld	r24, X+
    5392:	9c 91       	ld	r25, X
    5394:	17 97       	sbiw	r26, 0x07	; 7
    5396:	01 96       	adiw	r24, 0x01	; 1
    5398:	16 96       	adiw	r26, 0x06	; 6
    539a:	8d 93       	st	X+, r24
    539c:	9c 93       	st	X, r25
    539e:	17 97       	sbiw	r26, 0x07	; 7
    53a0:	ce 01       	movw	r24, r28
    53a2:	df 91       	pop	r29
    53a4:	cf 91       	pop	r28
    53a6:	1f 91       	pop	r17
    53a8:	0f 91       	pop	r16
    53aa:	08 95       	ret

000053ac <snprintf>:
    53ac:	0f 93       	push	r16
    53ae:	1f 93       	push	r17
    53b0:	cf 93       	push	r28
    53b2:	df 93       	push	r29
    53b4:	cd b7       	in	r28, 0x3d	; 61
    53b6:	de b7       	in	r29, 0x3e	; 62
    53b8:	2e 97       	sbiw	r28, 0x0e	; 14
    53ba:	cd bf       	out	0x3d, r28	; 61
    53bc:	de bf       	out	0x3e, r29	; 62
    53be:	0d 89       	ldd	r16, Y+21	; 0x15
    53c0:	1e 89       	ldd	r17, Y+22	; 0x16
    53c2:	8f 89       	ldd	r24, Y+23	; 0x17
    53c4:	98 8d       	ldd	r25, Y+24	; 0x18
    53c6:	26 e0       	ldi	r18, 0x06	; 6
    53c8:	2c 83       	std	Y+4, r18	; 0x04
    53ca:	09 83       	std	Y+1, r16	; 0x01
    53cc:	1a 83       	std	Y+2, r17	; 0x02
    53ce:	97 ff       	sbrs	r25, 7
    53d0:	02 c0       	rjmp	.+4      	; 0x53d6 <snprintf+0x2a>
    53d2:	80 e0       	ldi	r24, 0x00	; 0
    53d4:	90 e8       	ldi	r25, 0x80	; 128
    53d6:	01 97       	sbiw	r24, 0x01	; 1
    53d8:	8d 83       	std	Y+5, r24	; 0x05
    53da:	9e 83       	std	Y+6, r25	; 0x06
    53dc:	ae 01       	movw	r20, r28
    53de:	45 5e       	subi	r20, 0xE5	; 229
    53e0:	5f 4f       	sbci	r21, 0xFF	; 255
    53e2:	69 8d       	ldd	r22, Y+25	; 0x19
    53e4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    53e6:	ce 01       	movw	r24, r28
    53e8:	01 96       	adiw	r24, 0x01	; 1
    53ea:	0e 94 9d 21 	call	0x433a	; 0x433a <vfprintf>
    53ee:	4d 81       	ldd	r20, Y+5	; 0x05
    53f0:	5e 81       	ldd	r21, Y+6	; 0x06
    53f2:	57 fd       	sbrc	r21, 7
    53f4:	0a c0       	rjmp	.+20     	; 0x540a <snprintf+0x5e>
    53f6:	2f 81       	ldd	r18, Y+7	; 0x07
    53f8:	38 85       	ldd	r19, Y+8	; 0x08
    53fa:	42 17       	cp	r20, r18
    53fc:	53 07       	cpc	r21, r19
    53fe:	0c f4       	brge	.+2      	; 0x5402 <snprintf+0x56>
    5400:	9a 01       	movw	r18, r20
    5402:	f8 01       	movw	r30, r16
    5404:	e2 0f       	add	r30, r18
    5406:	f3 1f       	adc	r31, r19
    5408:	10 82       	st	Z, r1
    540a:	2e 96       	adiw	r28, 0x0e	; 14
    540c:	cd bf       	out	0x3d, r28	; 61
    540e:	de bf       	out	0x3e, r29	; 62
    5410:	df 91       	pop	r29
    5412:	cf 91       	pop	r28
    5414:	1f 91       	pop	r17
    5416:	0f 91       	pop	r16
    5418:	08 95       	ret

0000541a <__ultoa_invert>:
    541a:	fa 01       	movw	r30, r20
    541c:	aa 27       	eor	r26, r26
    541e:	28 30       	cpi	r18, 0x08	; 8
    5420:	51 f1       	breq	.+84     	; 0x5476 <__ultoa_invert+0x5c>
    5422:	20 31       	cpi	r18, 0x10	; 16
    5424:	81 f1       	breq	.+96     	; 0x5486 <__ultoa_invert+0x6c>
    5426:	e8 94       	clt
    5428:	6f 93       	push	r22
    542a:	6e 7f       	andi	r22, 0xFE	; 254
    542c:	6e 5f       	subi	r22, 0xFE	; 254
    542e:	7f 4f       	sbci	r23, 0xFF	; 255
    5430:	8f 4f       	sbci	r24, 0xFF	; 255
    5432:	9f 4f       	sbci	r25, 0xFF	; 255
    5434:	af 4f       	sbci	r26, 0xFF	; 255
    5436:	b1 e0       	ldi	r27, 0x01	; 1
    5438:	3e d0       	rcall	.+124    	; 0x54b6 <__ultoa_invert+0x9c>
    543a:	b4 e0       	ldi	r27, 0x04	; 4
    543c:	3c d0       	rcall	.+120    	; 0x54b6 <__ultoa_invert+0x9c>
    543e:	67 0f       	add	r22, r23
    5440:	78 1f       	adc	r23, r24
    5442:	89 1f       	adc	r24, r25
    5444:	9a 1f       	adc	r25, r26
    5446:	a1 1d       	adc	r26, r1
    5448:	68 0f       	add	r22, r24
    544a:	79 1f       	adc	r23, r25
    544c:	8a 1f       	adc	r24, r26
    544e:	91 1d       	adc	r25, r1
    5450:	a1 1d       	adc	r26, r1
    5452:	6a 0f       	add	r22, r26
    5454:	71 1d       	adc	r23, r1
    5456:	81 1d       	adc	r24, r1
    5458:	91 1d       	adc	r25, r1
    545a:	a1 1d       	adc	r26, r1
    545c:	20 d0       	rcall	.+64     	; 0x549e <__ultoa_invert+0x84>
    545e:	09 f4       	brne	.+2      	; 0x5462 <__ultoa_invert+0x48>
    5460:	68 94       	set
    5462:	3f 91       	pop	r19
    5464:	2a e0       	ldi	r18, 0x0A	; 10
    5466:	26 9f       	mul	r18, r22
    5468:	11 24       	eor	r1, r1
    546a:	30 19       	sub	r19, r0
    546c:	30 5d       	subi	r19, 0xD0	; 208
    546e:	31 93       	st	Z+, r19
    5470:	de f6       	brtc	.-74     	; 0x5428 <__ultoa_invert+0xe>
    5472:	cf 01       	movw	r24, r30
    5474:	08 95       	ret
    5476:	46 2f       	mov	r20, r22
    5478:	47 70       	andi	r20, 0x07	; 7
    547a:	40 5d       	subi	r20, 0xD0	; 208
    547c:	41 93       	st	Z+, r20
    547e:	b3 e0       	ldi	r27, 0x03	; 3
    5480:	0f d0       	rcall	.+30     	; 0x54a0 <__ultoa_invert+0x86>
    5482:	c9 f7       	brne	.-14     	; 0x5476 <__ultoa_invert+0x5c>
    5484:	f6 cf       	rjmp	.-20     	; 0x5472 <__ultoa_invert+0x58>
    5486:	46 2f       	mov	r20, r22
    5488:	4f 70       	andi	r20, 0x0F	; 15
    548a:	40 5d       	subi	r20, 0xD0	; 208
    548c:	4a 33       	cpi	r20, 0x3A	; 58
    548e:	18 f0       	brcs	.+6      	; 0x5496 <__ultoa_invert+0x7c>
    5490:	49 5d       	subi	r20, 0xD9	; 217
    5492:	31 fd       	sbrc	r19, 1
    5494:	40 52       	subi	r20, 0x20	; 32
    5496:	41 93       	st	Z+, r20
    5498:	02 d0       	rcall	.+4      	; 0x549e <__ultoa_invert+0x84>
    549a:	a9 f7       	brne	.-22     	; 0x5486 <__ultoa_invert+0x6c>
    549c:	ea cf       	rjmp	.-44     	; 0x5472 <__ultoa_invert+0x58>
    549e:	b4 e0       	ldi	r27, 0x04	; 4
    54a0:	a6 95       	lsr	r26
    54a2:	97 95       	ror	r25
    54a4:	87 95       	ror	r24
    54a6:	77 95       	ror	r23
    54a8:	67 95       	ror	r22
    54aa:	ba 95       	dec	r27
    54ac:	c9 f7       	brne	.-14     	; 0x54a0 <__ultoa_invert+0x86>
    54ae:	00 97       	sbiw	r24, 0x00	; 0
    54b0:	61 05       	cpc	r22, r1
    54b2:	71 05       	cpc	r23, r1
    54b4:	08 95       	ret
    54b6:	9b 01       	movw	r18, r22
    54b8:	ac 01       	movw	r20, r24
    54ba:	0a 2e       	mov	r0, r26
    54bc:	06 94       	lsr	r0
    54be:	57 95       	ror	r21
    54c0:	47 95       	ror	r20
    54c2:	37 95       	ror	r19
    54c4:	27 95       	ror	r18
    54c6:	ba 95       	dec	r27
    54c8:	c9 f7       	brne	.-14     	; 0x54bc <__ultoa_invert+0xa2>
    54ca:	62 0f       	add	r22, r18
    54cc:	73 1f       	adc	r23, r19
    54ce:	84 1f       	adc	r24, r20
    54d0:	95 1f       	adc	r25, r21
    54d2:	a0 1d       	adc	r26, r0
    54d4:	08 95       	ret

000054d6 <__ctype_isfalse>:
    54d6:	99 27       	eor	r25, r25
    54d8:	88 27       	eor	r24, r24

000054da <__ctype_istrue>:
    54da:	08 95       	ret

000054dc <_exit>:
    54dc:	f8 94       	cli

000054de <__stop_program>:
    54de:	ff cf       	rjmp	.-2      	; 0x54de <__stop_program>
