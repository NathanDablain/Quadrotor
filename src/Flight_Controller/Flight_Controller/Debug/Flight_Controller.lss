
Flight_Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001e2  00804000  0000567e  00005712  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000567e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000af3  008041e2  008041e2  000058f4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000058f4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005950  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c0  00000000  00000000  00005990  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000716f  00000000  00000000  00005b50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003b2d  00000000  00000000  0000ccbf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002837  00000000  00000000  000107ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008d8  00000000  00000000  00013024  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0001cb5a  00000000  00000000  000138fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003230  00000000  00000000  00030456  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000200  00000000  00000000  00033686  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00007d3a  00000000  00000000  00033886  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__ctors_end>
       4:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
       8:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
       c:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      10:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      14:	0c 94 41 0c 	jmp	0x1882	; 0x1882 <__vector_5>
      18:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      1c:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      20:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      24:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      28:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      2c:	0c 94 18 09 	jmp	0x1230	; 0x1230 <__vector_11>
      30:	0c 94 46 09 	jmp	0x128c	; 0x128c <__vector_12>
      34:	0c 94 74 09 	jmp	0x12e8	; 0x12e8 <__vector_13>
      38:	0c 94 6e 0c 	jmp	0x18dc	; 0x18dc <__vector_14>
      3c:	0c 94 96 0c 	jmp	0x192c	; 0x192c <__vector_15>
      40:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      44:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      48:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      4c:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      50:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      54:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      58:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      5c:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      60:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      64:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      68:	0c 94 1a 0a 	jmp	0x1434	; 0x1434 <__vector_26>
      6c:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      70:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      74:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      78:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      7c:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      80:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      84:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      88:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      8c:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      90:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      94:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      98:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      9c:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      a0:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      a4:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      a8:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      ac:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      b0:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      b4:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      b8:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      bc:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      c0:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      c4:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__vector_49>
      c8:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      cc:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      d0:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      d4:	0c 94 65 1a 	jmp	0x34ca	; 0x34ca <__vector_53>
      d8:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      dc:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      e0:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      e4:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      e8:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      ec:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      f0:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      f4:	05 06       	cpc	r0, r21
      f6:	14 06       	cpc	r1, r20
      f8:	14 06       	cpc	r1, r20
      fa:	14 06       	cpc	r1, r20
      fc:	14 06       	cpc	r1, r20
      fe:	14 06       	cpc	r1, r20
     100:	0f 06       	cpc	r0, r31
     102:	14 06       	cpc	r1, r20
     104:	0a 06       	cpc	r0, r26
     106:	00 06       	cpc	r0, r16
     108:	bf 05       	cpc	r27, r15
     10a:	14 06       	cpc	r1, r20
     10c:	92 05       	cpc	r25, r2
     10e:	19 06       	cpc	r1, r25
     110:	97 05       	cpc	r25, r7
     112:	9c 05       	cpc	r25, r12
     114:	a1 05       	cpc	r26, r1
     116:	a6 05       	cpc	r26, r6
     118:	ab 05       	cpc	r26, r11
     11a:	b0 05       	cpc	r27, r0
     11c:	b5 05       	cpc	r27, r5
     11e:	ba 05       	cpc	r27, r10
     120:	14 06       	cpc	r1, r20
     122:	14 06       	cpc	r1, r20
     124:	14 06       	cpc	r1, r20
     126:	14 06       	cpc	r1, r20
     128:	14 06       	cpc	r1, r20
     12a:	14 06       	cpc	r1, r20
     12c:	14 06       	cpc	r1, r20
     12e:	ec 05       	cpc	r30, r12
     130:	14 06       	cpc	r1, r20
     132:	f1 05       	cpc	r31, r1
     134:	fb 05       	cpc	r31, r11
     136:	d8 05       	cpc	r29, r8
     138:	f6 05       	cpc	r31, r6
     13a:	c4 05       	cpc	r28, r4
     13c:	d3 05       	cpc	r29, r3
     13e:	14 06       	cpc	r1, r20
     140:	14 06       	cpc	r1, r20
     142:	14 06       	cpc	r1, r20
     144:	dd 05       	cpc	r29, r13
     146:	ce 05       	cpc	r28, r14
     148:	c9 05       	cpc	r28, r9
     14a:	e2 05       	cpc	r30, r2
     14c:	14 06       	cpc	r1, r20
     14e:	14 06       	cpc	r1, r20
     150:	e7 05       	cpc	r30, r7
     152:	46 06       	cpc	r4, r22
     154:	56 06       	cpc	r5, r22
     156:	66 06       	cpc	r6, r22
     158:	76 06       	cpc	r7, r22
     15a:	86 06       	cpc	r8, r22
     15c:	96 06       	cpc	r9, r22
     15e:	a6 06       	cpc	r10, r22
     160:	b6 06       	cpc	r11, r22
     162:	0a 08       	sbc	r0, r10
     164:	1a 08       	sbc	r1, r10
     166:	2a 08       	sbc	r2, r10
     168:	3b 08       	sbc	r3, r11
     16a:	4b 08       	sbc	r4, r11
     16c:	5b 08       	sbc	r5, r11
     16e:	6b 08       	sbc	r6, r11
     170:	08 4a       	sbci	r16, 0xA8	; 168
     172:	d7 3b       	cpi	r29, 0xB7	; 183
     174:	3b ce       	rjmp	.-906    	; 0xfffffdec <__eeprom_end+0xff7efdec>
     176:	01 6e       	ori	r16, 0xE1	; 225
     178:	84 bc       	out	0x24, r8	; 36
     17a:	bf fd       	.word	0xfdbf	; ????
     17c:	c1 2f       	mov	r28, r17
     17e:	3d 6c       	ori	r19, 0xCD	; 205
     180:	74 31       	cpi	r23, 0x14	; 20
     182:	9a bd       	out	0x2a, r25	; 42
     184:	56 83       	std	Z+6, r21	; 0x06
     186:	3d da       	rcall	.-2950   	; 0xfffff602 <__eeprom_end+0xff7ef602>
     188:	3d 00       	.word	0x003d	; ????
     18a:	c7 7f       	andi	r28, 0xF7	; 247
     18c:	11 be       	out	0x31, r1	; 49
     18e:	d9 e4       	ldi	r29, 0x49	; 73
     190:	bb 4c       	sbci	r27, 0xCB	; 203
     192:	3e 91       	ld	r19, -X
     194:	6b aa       	std	Y+51, r6	; 0x33
     196:	aa be       	out	0x3a, r10	; 58
     198:	00 00       	nop
     19a:	00 80       	ld	r0, Z
     19c:	3f 05       	cpc	r19, r15
     19e:	a8 4c       	sbci	r26, 0xC8	; 200
     1a0:	cd b2       	in	r12, 0x1d	; 29
     1a2:	d4 4e       	sbci	r29, 0xE4	; 228
     1a4:	b9 38       	cpi	r27, 0x89	; 137
     1a6:	36 a9       	ldd	r19, Z+54	; 0x36
     1a8:	02 0c       	add	r0, r2
     1aa:	50 b9       	out	0x00, r21	; 0
     1ac:	91 86       	std	Z+9, r9	; 0x09
     1ae:	88 08       	sbc	r8, r8
     1b0:	3c a6       	std	Y+44, r3	; 0x2c
     1b2:	aa aa       	std	Y+50, r10	; 0x32
     1b4:	2a be       	out	0x3a, r2	; 58
     1b6:	00 00       	nop
     1b8:	00 80       	ld	r0, Z
     1ba:	3f 06       	cpc	r3, r31
     1bc:	64 ec       	ldi	r22, 0xC4	; 196
     1be:	1b 3c       	cpi	r17, 0xCB	; 203
     1c0:	04 bc       	out	0x24, r0	; 36
     1c2:	16 3e       	cpi	r17, 0xE6	; 230
     1c4:	3b e5       	ldi	r19, 0x5B	; 91
     1c6:	b9 3c       	cpi	r27, 0xC9	; 201
     1c8:	c9 3c       	cpi	r28, 0xC9	; 201
     1ca:	37 c2       	rjmp	.+1134   	; 0x63a <Write_SPI+0xdc>
     1cc:	9e 5a       	subi	r25, 0xAE	; 174
     1ce:	3d 66       	ori	r19, 0x6D	; 109
     1d0:	04 98       	cbi	0x00, 4	; 0
     1d2:	08 3e       	cpi	r16, 0xE8	; 232
     1d4:	ea 69       	ori	r30, 0x9A	; 154
     1d6:	aa aa       	std	Y+50, r10	; 0x32
     1d8:	3e 00       	.word	0x003e	; ????
     1da:	00 00       	nop
     1dc:	80 3f       	cpi	r24, 0xF0	; 240
     1de:	07 63       	ori	r16, 0x37	; 55
     1e0:	42 36       	cpi	r20, 0x62	; 98
     1e2:	b7 9b       	sbis	0x16, 7	; 22
     1e4:	d8 a7       	std	Y+40, r29	; 0x28
     1e6:	1a 39       	cpi	r17, 0x9A	; 154
     1e8:	68 56       	subi	r22, 0x68	; 104
     1ea:	18 ae       	std	Y+56, r1	; 0x38
     1ec:	ba ab       	std	Y+50, r27	; 0x32
     1ee:	55 8c       	ldd	r5, Z+29	; 0x1d
     1f0:	1d 3c       	cpi	r17, 0xCD	; 205
     1f2:	b7 cc       	rjmp	.-1682   	; 0xfffffb62 <__eeprom_end+0xff7efb62>
     1f4:	57 63       	ori	r21, 0x37	; 55
     1f6:	bd 6d       	ori	r27, 0xDD	; 221
     1f8:	ed fd       	.word	0xfded	; ????
     1fa:	75 3e       	cpi	r23, 0xE5	; 229
     1fc:	f6 17       	cp	r31, r22
     1fe:	72 31       	cpi	r23, 0x12	; 18
     200:	bf 00       	.word	0x00bf	; ????
     202:	00 00       	nop
     204:	80 3f       	cpi	r24, 0xF0	; 240
     206:	08 00       	.word	0x0008	; ????
     208:	00 00       	nop
     20a:	be 92       	st	-X, r11
     20c:	24 49       	sbci	r18, 0x94	; 148
     20e:	12 3e       	cpi	r17, 0xE2	; 226
     210:	ab aa       	std	Y+51, r10	; 0x33
     212:	aa 2a       	or	r10, r26
     214:	be cd       	rjmp	.-1156   	; 0xfffffd92 <__eeprom_end+0xff7efd92>
     216:	cc cc       	rjmp	.-1640   	; 0xfffffbb0 <__eeprom_end+0xff7efbb0>
     218:	4c 3e       	cpi	r20, 0xEC	; 236
     21a:	00 00       	nop
     21c:	00 80       	ld	r0, Z
     21e:	be ab       	std	Y+54, r27	; 0x36
     220:	aa aa       	std	Y+50, r10	; 0x32
     222:	aa 3e       	cpi	r26, 0xEA	; 234
     224:	00 00       	nop
     226:	00 00       	nop
     228:	bf 00       	.word	0x00bf	; ????
     22a:	00 00       	nop
     22c:	80 3f       	cpi	r24, 0xF0	; 240
     22e:	00 00       	nop
     230:	00 00       	nop
     232:	00 08       	sbc	r0, r0
     234:	41 78       	andi	r20, 0x81	; 129
     236:	d3 bb       	out	0x13, r29	; 19
     238:	43 87       	std	Z+11, r20	; 0x0b
     23a:	d1 13       	cpse	r29, r17
     23c:	3d 19       	sub	r19, r13
     23e:	0e 3c       	cpi	r16, 0xCE	; 206
     240:	c3 bd       	out	0x23, r28	; 35
     242:	42 82       	std	Z+2, r4	; 0x02
     244:	ad 2b       	or	r26, r29
     246:	3e 68       	ori	r19, 0x8E	; 142
     248:	ec 82       	std	Y+4, r14	; 0x04
     24a:	76 be       	out	0x36, r7	; 54
     24c:	d9 8f       	std	Y+25, r29	; 0x19
     24e:	e1 a9       	ldd	r30, Z+49	; 0x31
     250:	3e 4c       	sbci	r19, 0xCE	; 206
     252:	80 ef       	ldi	r24, 0xF0	; 240
     254:	ff be       	out	0x3f, r15	; 63
     256:	01 c4       	rjmp	.+2050   	; 0xa5a <Write_Character+0x148>
     258:	ff 7f       	andi	r31, 0xFF	; 255
     25a:	3f 00       	.word	0x003f	; ????
     25c:	00 00       	nop
	...

00000260 <__trampolines_end>:
     260:	6e 61       	ori	r22, 0x1E	; 30
     262:	6e 00       	.word	0x006e	; ????

00000264 <__c.2332>:
     264:	69 6e 66 00                                         inf.

00000268 <pstr_nan>:
     268:	4e 41 4e                                            NAN

0000026b <pstr_inity>:
     26b:	49 4e 49 54 59                                      INITY

00000270 <pstr_inf>:
     270:	49 4e 46                                            INF

00000273 <pwr_m10>:
     273:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     283:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

0000028b <pwr_p10>:
     28b:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     29b:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
     2ab:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
     2bb:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
     2cb:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
     2db:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
     2eb:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
     2fb:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     30b:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     31b:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     32b:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     33b:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     34b:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     35b:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     36b:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     37b:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     38b:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     39b:	3d 27 00                                            ='.

0000039e <__ctors_end>:
     39e:	11 24       	eor	r1, r1
     3a0:	1f be       	out	0x3f, r1	; 63
     3a2:	cf ef       	ldi	r28, 0xFF	; 255
     3a4:	cd bf       	out	0x3d, r28	; 61
     3a6:	df e7       	ldi	r29, 0x7F	; 127
     3a8:	de bf       	out	0x3e, r29	; 62

000003aa <__do_copy_data>:
     3aa:	11 e4       	ldi	r17, 0x41	; 65
     3ac:	a0 e0       	ldi	r26, 0x00	; 0
     3ae:	b0 e4       	ldi	r27, 0x40	; 64
     3b0:	ee e7       	ldi	r30, 0x7E	; 126
     3b2:	f6 e5       	ldi	r31, 0x56	; 86
     3b4:	00 e0       	ldi	r16, 0x00	; 0
     3b6:	0b bf       	out	0x3b, r16	; 59
     3b8:	02 c0       	rjmp	.+4      	; 0x3be <__do_copy_data+0x14>
     3ba:	07 90       	elpm	r0, Z+
     3bc:	0d 92       	st	X+, r0
     3be:	a2 3e       	cpi	r26, 0xE2	; 226
     3c0:	b1 07       	cpc	r27, r17
     3c2:	d9 f7       	brne	.-10     	; 0x3ba <__do_copy_data+0x10>

000003c4 <__do_clear_bss>:
     3c4:	2c e4       	ldi	r18, 0x4C	; 76
     3c6:	a2 ee       	ldi	r26, 0xE2	; 226
     3c8:	b1 e4       	ldi	r27, 0x41	; 65
     3ca:	01 c0       	rjmp	.+2      	; 0x3ce <.do_clear_bss_start>

000003cc <.do_clear_bss_loop>:
     3cc:	1d 92       	st	X+, r1

000003ce <.do_clear_bss_start>:
     3ce:	a5 3d       	cpi	r26, 0xD5	; 213
     3d0:	b2 07       	cpc	r27, r18
     3d2:	e1 f7       	brne	.-8      	; 0x3cc <.do_clear_bss_loop>
     3d4:	0e 94 32 0c 	call	0x1864	; 0x1864 <main>
     3d8:	0c 94 3d 2b 	jmp	0x567a	; 0x567a <_exit>

000003dc <__bad_interrupt>:
     3dc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003e0 <Setup_SPI>:
inline unsigned char Write_Display_Double(unsigned char Address_Byte, unsigned char Data_Byte){
	unsigned char input_data[2] = {Address_Byte, Data_Byte};
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x00, input_data, 2);
	
	return (TWI_status == 4) ? 1 : 0;
}
     3e0:	e0 e0       	ldi	r30, 0x00	; 0
     3e2:	f4 e0       	ldi	r31, 0x04	; 4
     3e4:	80 81       	ld	r24, Z
     3e6:	80 6e       	ori	r24, 0xE0	; 224
     3e8:	80 83       	st	Z, r24
     3ea:	e0 e2       	ldi	r30, 0x20	; 32
     3ec:	f4 e0       	ldi	r31, 0x04	; 4
     3ee:	80 81       	ld	r24, Z
     3f0:	8c 60       	ori	r24, 0x0C	; 12
     3f2:	80 83       	st	Z, r24
     3f4:	e0 e4       	ldi	r30, 0x40	; 64
     3f6:	f4 e0       	ldi	r31, 0x04	; 4
     3f8:	80 81       	ld	r24, Z
     3fa:	85 60       	ori	r24, 0x05	; 5
     3fc:	80 83       	st	Z, r24
     3fe:	e4 e0       	ldi	r30, 0x04	; 4
     400:	f4 e0       	ldi	r31, 0x04	; 4
     402:	80 81       	ld	r24, Z
     404:	80 6e       	ori	r24, 0xE0	; 224
     406:	80 83       	st	Z, r24
     408:	e4 e2       	ldi	r30, 0x24	; 36
     40a:	f4 e0       	ldi	r31, 0x04	; 4
     40c:	80 81       	ld	r24, Z
     40e:	8c 60       	ori	r24, 0x0C	; 12
     410:	80 83       	st	Z, r24
     412:	e0 e6       	ldi	r30, 0x60	; 96
     414:	f9 e0       	ldi	r31, 0x09	; 9
     416:	80 81       	ld	r24, Z
     418:	81 62       	ori	r24, 0x21	; 33
     41a:	80 83       	st	Z, r24
     41c:	08 95       	ret

0000041e <Read_SPI>:
     41e:	af 92       	push	r10
     420:	bf 92       	push	r11
     422:	cf 92       	push	r12
     424:	df 92       	push	r13
     426:	ef 92       	push	r14
     428:	ff 92       	push	r15
     42a:	0f 93       	push	r16
     42c:	1f 93       	push	r17
     42e:	cf 93       	push	r28
     430:	df 93       	push	r29
     432:	18 2f       	mov	r17, r24
     434:	b6 2e       	mov	r11, r22
     436:	e9 01       	movw	r28, r18
     438:	81 34       	cpi	r24, 0x41	; 65
     43a:	71 f4       	brne	.+28     	; 0x458 <Read_SPI+0x3a>
     43c:	e4 e0       	ldi	r30, 0x04	; 4
     43e:	f4 e0       	ldi	r31, 0x04	; 4
     440:	20 81       	ld	r18, Z
     442:	81 e0       	ldi	r24, 0x01	; 1
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	02 c0       	rjmp	.+4      	; 0x44c <Read_SPI+0x2e>
     448:	88 0f       	add	r24, r24
     44a:	99 1f       	adc	r25, r25
     44c:	6a 95       	dec	r22
     44e:	e2 f7       	brpl	.-8      	; 0x448 <Read_SPI+0x2a>
     450:	80 95       	com	r24
     452:	82 23       	and	r24, r18
     454:	80 83       	st	Z, r24
     456:	10 c0       	rjmp	.+32     	; 0x478 <Read_SPI+0x5a>
     458:	82 34       	cpi	r24, 0x42	; 66
     45a:	09 f0       	breq	.+2      	; 0x45e <Read_SPI+0x40>
     45c:	70 c0       	rjmp	.+224    	; 0x53e <Read_SPI+0x120>
     45e:	e4 e2       	ldi	r30, 0x24	; 36
     460:	f4 e0       	ldi	r31, 0x04	; 4
     462:	20 81       	ld	r18, Z
     464:	81 e0       	ldi	r24, 0x01	; 1
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	02 c0       	rjmp	.+4      	; 0x46e <Read_SPI+0x50>
     46a:	88 0f       	add	r24, r24
     46c:	99 1f       	adc	r25, r25
     46e:	6a 95       	dec	r22
     470:	e2 f7       	brpl	.-8      	; 0x46a <Read_SPI+0x4c>
     472:	80 95       	com	r24
     474:	82 23       	and	r24, r18
     476:	80 83       	st	Z, r24
     478:	40 93 64 09 	sts	0x0964, r20	; 0x800964 <__TEXT_REGION_LENGTH__+0x7e0964>
     47c:	c1 2c       	mov	r12, r1
     47e:	d1 2c       	mov	r13, r1
     480:	76 01       	movw	r14, r12
     482:	12 c0       	rjmp	.+36     	; 0x4a8 <Read_SPI+0x8a>
     484:	8f ef       	ldi	r24, 0xFF	; 255
     486:	c8 1a       	sub	r12, r24
     488:	d8 0a       	sbc	r13, r24
     48a:	e8 0a       	sbc	r14, r24
     48c:	f8 0a       	sbc	r15, r24
     48e:	c7 01       	movw	r24, r14
     490:	b6 01       	movw	r22, r12
     492:	0e 94 ed 1e 	call	0x3dda	; 0x3dda <__floatunsisf>
     496:	20 e0       	ldi	r18, 0x00	; 0
     498:	30 e5       	ldi	r19, 0x50	; 80
     49a:	43 ec       	ldi	r20, 0xC3	; 195
     49c:	57 e4       	ldi	r21, 0x47	; 71
     49e:	0e 94 05 20 	call	0x400a	; 0x400a <__gesf2>
     4a2:	18 16       	cp	r1, r24
     4a4:	0c f4       	brge	.+2      	; 0x4a8 <Read_SPI+0x8a>
     4a6:	4d c0       	rjmp	.+154    	; 0x542 <Read_SPI+0x124>
     4a8:	80 91 63 09 	lds	r24, 0x0963	; 0x800963 <__TEXT_REGION_LENGTH__+0x7e0963>
     4ac:	88 23       	and	r24, r24
     4ae:	54 f7       	brge	.-44     	; 0x484 <Read_SPI+0x66>
     4b0:	e3 e6       	ldi	r30, 0x63	; 99
     4b2:	f9 e0       	ldi	r31, 0x09	; 9
     4b4:	80 81       	ld	r24, Z
     4b6:	8f 77       	andi	r24, 0x7F	; 127
     4b8:	80 83       	st	Z, r24
     4ba:	80 e0       	ldi	r24, 0x00	; 0
     4bc:	1d c0       	rjmp	.+58     	; 0x4f8 <Read_SPI+0xda>
     4be:	10 92 64 09 	sts	0x0964, r1	; 0x800964 <__TEXT_REGION_LENGTH__+0x7e0964>
     4c2:	11 c0       	rjmp	.+34     	; 0x4e6 <Read_SPI+0xc8>
     4c4:	8f ef       	ldi	r24, 0xFF	; 255
     4c6:	c8 1a       	sub	r12, r24
     4c8:	d8 0a       	sbc	r13, r24
     4ca:	e8 0a       	sbc	r14, r24
     4cc:	f8 0a       	sbc	r15, r24
     4ce:	c7 01       	movw	r24, r14
     4d0:	b6 01       	movw	r22, r12
     4d2:	0e 94 ed 1e 	call	0x3dda	; 0x3dda <__floatunsisf>
     4d6:	20 e0       	ldi	r18, 0x00	; 0
     4d8:	30 e5       	ldi	r19, 0x50	; 80
     4da:	43 ec       	ldi	r20, 0xC3	; 195
     4dc:	57 e4       	ldi	r21, 0x47	; 71
     4de:	0e 94 05 20 	call	0x400a	; 0x400a <__gesf2>
     4e2:	18 16       	cp	r1, r24
     4e4:	84 f1       	brlt	.+96     	; 0x546 <Read_SPI+0x128>
     4e6:	80 91 63 09 	lds	r24, 0x0963	; 0x800963 <__TEXT_REGION_LENGTH__+0x7e0963>
     4ea:	88 23       	and	r24, r24
     4ec:	5c f7       	brge	.-42     	; 0x4c4 <Read_SPI+0xa6>
     4ee:	80 91 64 09 	lds	r24, 0x0964	; 0x800964 <__TEXT_REGION_LENGTH__+0x7e0964>
     4f2:	88 83       	st	Y, r24
     4f4:	8a 2d       	mov	r24, r10
     4f6:	21 96       	adiw	r28, 0x01	; 1
     4f8:	aa 24       	eor	r10, r10
     4fa:	a3 94       	inc	r10
     4fc:	a8 0e       	add	r10, r24
     4fe:	80 17       	cp	r24, r16
     500:	f0 f2       	brcs	.-68     	; 0x4be <Read_SPI+0xa0>
     502:	11 34       	cpi	r17, 0x41	; 65
     504:	71 f4       	brne	.+28     	; 0x522 <Read_SPI+0x104>
     506:	e4 e0       	ldi	r30, 0x04	; 4
     508:	f4 e0       	ldi	r31, 0x04	; 4
     50a:	20 81       	ld	r18, Z
     50c:	81 e0       	ldi	r24, 0x01	; 1
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	02 c0       	rjmp	.+4      	; 0x516 <Read_SPI+0xf8>
     512:	88 0f       	add	r24, r24
     514:	99 1f       	adc	r25, r25
     516:	ba 94       	dec	r11
     518:	e2 f7       	brpl	.-8      	; 0x512 <Read_SPI+0xf4>
     51a:	82 2b       	or	r24, r18
     51c:	80 83       	st	Z, r24
     51e:	82 e0       	ldi	r24, 0x02	; 2
     520:	13 c0       	rjmp	.+38     	; 0x548 <Read_SPI+0x12a>
     522:	e4 e2       	ldi	r30, 0x24	; 36
     524:	f4 e0       	ldi	r31, 0x04	; 4
     526:	20 81       	ld	r18, Z
     528:	81 e0       	ldi	r24, 0x01	; 1
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	02 c0       	rjmp	.+4      	; 0x532 <Read_SPI+0x114>
     52e:	88 0f       	add	r24, r24
     530:	99 1f       	adc	r25, r25
     532:	ba 94       	dec	r11
     534:	e2 f7       	brpl	.-8      	; 0x52e <Read_SPI+0x110>
     536:	82 2b       	or	r24, r18
     538:	80 83       	st	Z, r24
     53a:	82 e0       	ldi	r24, 0x02	; 2
     53c:	05 c0       	rjmp	.+10     	; 0x548 <Read_SPI+0x12a>
     53e:	80 e0       	ldi	r24, 0x00	; 0
     540:	03 c0       	rjmp	.+6      	; 0x548 <Read_SPI+0x12a>
     542:	81 e0       	ldi	r24, 0x01	; 1
     544:	01 c0       	rjmp	.+2      	; 0x548 <Read_SPI+0x12a>
     546:	81 e0       	ldi	r24, 0x01	; 1
     548:	df 91       	pop	r29
     54a:	cf 91       	pop	r28
     54c:	1f 91       	pop	r17
     54e:	0f 91       	pop	r16
     550:	ff 90       	pop	r15
     552:	ef 90       	pop	r14
     554:	df 90       	pop	r13
     556:	cf 90       	pop	r12
     558:	bf 90       	pop	r11
     55a:	af 90       	pop	r10
     55c:	08 95       	ret

0000055e <Write_SPI>:
     55e:	cf 92       	push	r12
     560:	df 92       	push	r13
     562:	ef 92       	push	r14
     564:	ff 92       	push	r15
     566:	1f 93       	push	r17
     568:	cf 93       	push	r28
     56a:	df 93       	push	r29
     56c:	81 34       	cpi	r24, 0x41	; 65
     56e:	79 f4       	brne	.+30     	; 0x58e <Write_SPI+0x30>
     570:	a4 e0       	ldi	r26, 0x04	; 4
     572:	b4 e0       	ldi	r27, 0x04	; 4
     574:	9c 91       	ld	r25, X
     576:	e1 e0       	ldi	r30, 0x01	; 1
     578:	f0 e0       	ldi	r31, 0x00	; 0
     57a:	06 2e       	mov	r0, r22
     57c:	02 c0       	rjmp	.+4      	; 0x582 <Write_SPI+0x24>
     57e:	ee 0f       	add	r30, r30
     580:	ff 1f       	adc	r31, r31
     582:	0a 94       	dec	r0
     584:	e2 f7       	brpl	.-8      	; 0x57e <Write_SPI+0x20>
     586:	e0 95       	com	r30
     588:	e9 23       	and	r30, r25
     58a:	ec 93       	st	X, r30
     58c:	11 c0       	rjmp	.+34     	; 0x5b0 <Write_SPI+0x52>
     58e:	82 34       	cpi	r24, 0x42	; 66
     590:	09 f0       	breq	.+2      	; 0x594 <Write_SPI+0x36>
     592:	62 c0       	rjmp	.+196    	; 0x658 <Write_SPI+0xfa>
     594:	a4 e2       	ldi	r26, 0x24	; 36
     596:	b4 e0       	ldi	r27, 0x04	; 4
     598:	9c 91       	ld	r25, X
     59a:	e1 e0       	ldi	r30, 0x01	; 1
     59c:	f0 e0       	ldi	r31, 0x00	; 0
     59e:	06 2e       	mov	r0, r22
     5a0:	02 c0       	rjmp	.+4      	; 0x5a6 <Write_SPI+0x48>
     5a2:	ee 0f       	add	r30, r30
     5a4:	ff 1f       	adc	r31, r31
     5a6:	0a 94       	dec	r0
     5a8:	e2 f7       	brpl	.-8      	; 0x5a2 <Write_SPI+0x44>
     5aa:	e0 95       	com	r30
     5ac:	e9 23       	and	r30, r25
     5ae:	ec 93       	st	X, r30
     5b0:	12 2f       	mov	r17, r18
     5b2:	d6 2f       	mov	r29, r22
     5b4:	c8 2f       	mov	r28, r24
     5b6:	40 93 64 09 	sts	0x0964, r20	; 0x800964 <__TEXT_REGION_LENGTH__+0x7e0964>
     5ba:	c1 2c       	mov	r12, r1
     5bc:	d1 2c       	mov	r13, r1
     5be:	76 01       	movw	r14, r12
     5c0:	11 c0       	rjmp	.+34     	; 0x5e4 <Write_SPI+0x86>
     5c2:	8f ef       	ldi	r24, 0xFF	; 255
     5c4:	c8 1a       	sub	r12, r24
     5c6:	d8 0a       	sbc	r13, r24
     5c8:	e8 0a       	sbc	r14, r24
     5ca:	f8 0a       	sbc	r15, r24
     5cc:	c7 01       	movw	r24, r14
     5ce:	b6 01       	movw	r22, r12
     5d0:	0e 94 ed 1e 	call	0x3dda	; 0x3dda <__floatunsisf>
     5d4:	20 e0       	ldi	r18, 0x00	; 0
     5d6:	30 e5       	ldi	r19, 0x50	; 80
     5d8:	43 ec       	ldi	r20, 0xC3	; 195
     5da:	57 e4       	ldi	r21, 0x47	; 71
     5dc:	0e 94 05 20 	call	0x400a	; 0x400a <__gesf2>
     5e0:	18 16       	cp	r1, r24
     5e2:	e4 f1       	brlt	.+120    	; 0x65c <Write_SPI+0xfe>
     5e4:	90 91 63 09 	lds	r25, 0x0963	; 0x800963 <__TEXT_REGION_LENGTH__+0x7e0963>
     5e8:	99 23       	and	r25, r25
     5ea:	5c f7       	brge	.-42     	; 0x5c2 <Write_SPI+0x64>
     5ec:	10 93 64 09 	sts	0x0964, r17	; 0x800964 <__TEXT_REGION_LENGTH__+0x7e0964>
     5f0:	11 c0       	rjmp	.+34     	; 0x614 <Write_SPI+0xb6>
     5f2:	8f ef       	ldi	r24, 0xFF	; 255
     5f4:	c8 1a       	sub	r12, r24
     5f6:	d8 0a       	sbc	r13, r24
     5f8:	e8 0a       	sbc	r14, r24
     5fa:	f8 0a       	sbc	r15, r24
     5fc:	c7 01       	movw	r24, r14
     5fe:	b6 01       	movw	r22, r12
     600:	0e 94 ed 1e 	call	0x3dda	; 0x3dda <__floatunsisf>
     604:	20 e0       	ldi	r18, 0x00	; 0
     606:	30 e5       	ldi	r19, 0x50	; 80
     608:	43 ec       	ldi	r20, 0xC3	; 195
     60a:	57 e4       	ldi	r21, 0x47	; 71
     60c:	0e 94 05 20 	call	0x400a	; 0x400a <__gesf2>
     610:	18 16       	cp	r1, r24
     612:	34 f1       	brlt	.+76     	; 0x660 <Write_SPI+0x102>
     614:	90 91 63 09 	lds	r25, 0x0963	; 0x800963 <__TEXT_REGION_LENGTH__+0x7e0963>
     618:	99 23       	and	r25, r25
     61a:	5c f7       	brge	.-42     	; 0x5f2 <Write_SPI+0x94>
     61c:	c1 34       	cpi	r28, 0x41	; 65
     61e:	71 f4       	brne	.+28     	; 0x63c <Write_SPI+0xde>
     620:	e4 e0       	ldi	r30, 0x04	; 4
     622:	f4 e0       	ldi	r31, 0x04	; 4
     624:	20 81       	ld	r18, Z
     626:	81 e0       	ldi	r24, 0x01	; 1
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	02 c0       	rjmp	.+4      	; 0x630 <Write_SPI+0xd2>
     62c:	88 0f       	add	r24, r24
     62e:	99 1f       	adc	r25, r25
     630:	da 95       	dec	r29
     632:	e2 f7       	brpl	.-8      	; 0x62c <Write_SPI+0xce>
     634:	82 2b       	or	r24, r18
     636:	80 83       	st	Z, r24
     638:	82 e0       	ldi	r24, 0x02	; 2
     63a:	13 c0       	rjmp	.+38     	; 0x662 <Write_SPI+0x104>
     63c:	e4 e2       	ldi	r30, 0x24	; 36
     63e:	f4 e0       	ldi	r31, 0x04	; 4
     640:	20 81       	ld	r18, Z
     642:	81 e0       	ldi	r24, 0x01	; 1
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	02 c0       	rjmp	.+4      	; 0x64c <Write_SPI+0xee>
     648:	88 0f       	add	r24, r24
     64a:	99 1f       	adc	r25, r25
     64c:	da 95       	dec	r29
     64e:	e2 f7       	brpl	.-8      	; 0x648 <Write_SPI+0xea>
     650:	82 2b       	or	r24, r18
     652:	80 83       	st	Z, r24
     654:	82 e0       	ldi	r24, 0x02	; 2
     656:	05 c0       	rjmp	.+10     	; 0x662 <Write_SPI+0x104>
     658:	80 e0       	ldi	r24, 0x00	; 0
     65a:	03 c0       	rjmp	.+6      	; 0x662 <Write_SPI+0x104>
     65c:	81 e0       	ldi	r24, 0x01	; 1
     65e:	01 c0       	rjmp	.+2      	; 0x662 <Write_SPI+0x104>
     660:	81 e0       	ldi	r24, 0x01	; 1
     662:	df 91       	pop	r29
     664:	cf 91       	pop	r28
     666:	1f 91       	pop	r17
     668:	ff 90       	pop	r15
     66a:	ef 90       	pop	r14
     66c:	df 90       	pop	r13
     66e:	cf 90       	pop	r12
     670:	08 95       	ret

00000672 <Setup_TWI>:
     672:	e0 e0       	ldi	r30, 0x00	; 0
     674:	f9 e0       	ldi	r31, 0x09	; 9
     676:	80 81       	ld	r24, Z
     678:	8c 60       	ori	r24, 0x0C	; 12
     67a:	80 83       	st	Z, r24
     67c:	89 e1       	ldi	r24, 0x19	; 25
     67e:	80 93 06 09 	sts	0x0906, r24	; 0x800906 <__TEXT_REGION_LENGTH__+0x7e0906>
     682:	e3 e0       	ldi	r30, 0x03	; 3
     684:	f9 e0       	ldi	r31, 0x09	; 9
     686:	80 81       	ld	r24, Z
     688:	83 61       	ori	r24, 0x13	; 19
     68a:	80 83       	st	Z, r24
     68c:	e5 e0       	ldi	r30, 0x05	; 5
     68e:	f9 e0       	ldi	r31, 0x09	; 9
     690:	80 81       	ld	r24, Z
     692:	81 60       	ori	r24, 0x01	; 1
     694:	80 83       	st	Z, r24
     696:	e2 e1       	ldi	r30, 0x12	; 18
     698:	f4 e0       	ldi	r31, 0x04	; 4
     69a:	80 81       	ld	r24, Z
     69c:	88 60       	ori	r24, 0x08	; 8
     69e:	80 83       	st	Z, r24
     6a0:	e3 e1       	ldi	r30, 0x13	; 19
     6a2:	f4 e0       	ldi	r31, 0x04	; 4
     6a4:	80 81       	ld	r24, Z
     6a6:	88 60       	ori	r24, 0x08	; 8
     6a8:	80 83       	st	Z, r24
     6aa:	08 95       	ret

000006ac <Write_TWI>:
     6ac:	af 92       	push	r10
     6ae:	bf 92       	push	r11
     6b0:	cf 92       	push	r12
     6b2:	df 92       	push	r13
     6b4:	ef 92       	push	r14
     6b6:	ff 92       	push	r15
     6b8:	0f 93       	push	r16
     6ba:	1f 93       	push	r17
     6bc:	cf 93       	push	r28
     6be:	df 93       	push	r29
     6c0:	b6 2e       	mov	r11, r22
     6c2:	ea 01       	movw	r28, r20
     6c4:	12 2f       	mov	r17, r18
     6c6:	88 0f       	add	r24, r24
     6c8:	80 93 07 09 	sts	0x0907, r24	; 0x800907 <__TEXT_REGION_LENGTH__+0x7e0907>
     6cc:	c1 2c       	mov	r12, r1
     6ce:	d1 2c       	mov	r13, r1
     6d0:	76 01       	movw	r14, r12
     6d2:	12 c0       	rjmp	.+36     	; 0x6f8 <Write_TWI+0x4c>
     6d4:	8f ef       	ldi	r24, 0xFF	; 255
     6d6:	c8 1a       	sub	r12, r24
     6d8:	d8 0a       	sbc	r13, r24
     6da:	e8 0a       	sbc	r14, r24
     6dc:	f8 0a       	sbc	r15, r24
     6de:	c7 01       	movw	r24, r14
     6e0:	b6 01       	movw	r22, r12
     6e2:	0e 94 ed 1e 	call	0x3dda	; 0x3dda <__floatunsisf>
     6e6:	20 e0       	ldi	r18, 0x00	; 0
     6e8:	34 e2       	ldi	r19, 0x24	; 36
     6ea:	44 e7       	ldi	r20, 0x74	; 116
     6ec:	59 e4       	ldi	r21, 0x49	; 73
     6ee:	0e 94 05 20 	call	0x400a	; 0x400a <__gesf2>
     6f2:	18 16       	cp	r1, r24
     6f4:	0c f4       	brge	.+2      	; 0x6f8 <Write_TWI+0x4c>
     6f6:	54 c0       	rjmp	.+168    	; 0x7a0 <Write_TWI+0xf4>
     6f8:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
     6fc:	86 ff       	sbrs	r24, 6
     6fe:	ea cf       	rjmp	.-44     	; 0x6d4 <Write_TWI+0x28>
     700:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
     704:	84 fd       	sbrc	r24, 4
     706:	4e c0       	rjmp	.+156    	; 0x7a4 <Write_TWI+0xf8>
     708:	b0 92 08 09 	sts	0x0908, r11	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
     70c:	11 c0       	rjmp	.+34     	; 0x730 <Write_TWI+0x84>
     70e:	8f ef       	ldi	r24, 0xFF	; 255
     710:	c8 1a       	sub	r12, r24
     712:	d8 0a       	sbc	r13, r24
     714:	e8 0a       	sbc	r14, r24
     716:	f8 0a       	sbc	r15, r24
     718:	c7 01       	movw	r24, r14
     71a:	b6 01       	movw	r22, r12
     71c:	0e 94 ed 1e 	call	0x3dda	; 0x3dda <__floatunsisf>
     720:	20 e0       	ldi	r18, 0x00	; 0
     722:	34 e2       	ldi	r19, 0x24	; 36
     724:	44 e7       	ldi	r20, 0x74	; 116
     726:	59 e4       	ldi	r21, 0x49	; 73
     728:	0e 94 05 20 	call	0x400a	; 0x400a <__gesf2>
     72c:	18 16       	cp	r1, r24
     72e:	e4 f1       	brlt	.+120    	; 0x7a8 <Write_TWI+0xfc>
     730:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
     734:	86 ff       	sbrs	r24, 6
     736:	eb cf       	rjmp	.-42     	; 0x70e <Write_TWI+0x62>
     738:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
     73c:	84 fd       	sbrc	r24, 4
     73e:	36 c0       	rjmp	.+108    	; 0x7ac <Write_TWI+0x100>
     740:	80 e0       	ldi	r24, 0x00	; 0
     742:	23 c0       	rjmp	.+70     	; 0x78a <Write_TWI+0xde>
     744:	5e 01       	movw	r10, r28
     746:	8f ef       	ldi	r24, 0xFF	; 255
     748:	a8 1a       	sub	r10, r24
     74a:	b8 0a       	sbc	r11, r24
     74c:	88 81       	ld	r24, Y
     74e:	80 93 08 09 	sts	0x0908, r24	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
     752:	11 c0       	rjmp	.+34     	; 0x776 <Write_TWI+0xca>
     754:	8f ef       	ldi	r24, 0xFF	; 255
     756:	c8 1a       	sub	r12, r24
     758:	d8 0a       	sbc	r13, r24
     75a:	e8 0a       	sbc	r14, r24
     75c:	f8 0a       	sbc	r15, r24
     75e:	c7 01       	movw	r24, r14
     760:	b6 01       	movw	r22, r12
     762:	0e 94 ed 1e 	call	0x3dda	; 0x3dda <__floatunsisf>
     766:	20 e0       	ldi	r18, 0x00	; 0
     768:	34 e2       	ldi	r19, 0x24	; 36
     76a:	44 e7       	ldi	r20, 0x74	; 116
     76c:	59 e4       	ldi	r21, 0x49	; 73
     76e:	0e 94 05 20 	call	0x400a	; 0x400a <__gesf2>
     772:	18 16       	cp	r1, r24
     774:	ec f0       	brlt	.+58     	; 0x7b0 <Write_TWI+0x104>
     776:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
     77a:	86 ff       	sbrs	r24, 6
     77c:	eb cf       	rjmp	.-42     	; 0x754 <Write_TWI+0xa8>
     77e:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
     782:	80 2f       	mov	r24, r16
     784:	94 fd       	sbrc	r25, 4
     786:	16 c0       	rjmp	.+44     	; 0x7b4 <Write_TWI+0x108>
     788:	e5 01       	movw	r28, r10
     78a:	01 e0       	ldi	r16, 0x01	; 1
     78c:	08 0f       	add	r16, r24
     78e:	81 17       	cp	r24, r17
     790:	c8 f2       	brcs	.-78     	; 0x744 <Write_TWI+0x98>
     792:	e4 e0       	ldi	r30, 0x04	; 4
     794:	f9 e0       	ldi	r31, 0x09	; 9
     796:	80 81       	ld	r24, Z
     798:	83 60       	ori	r24, 0x03	; 3
     79a:	80 83       	st	Z, r24
     79c:	84 e0       	ldi	r24, 0x04	; 4
     79e:	0b c0       	rjmp	.+22     	; 0x7b6 <Write_TWI+0x10a>
     7a0:	83 e0       	ldi	r24, 0x03	; 3
     7a2:	09 c0       	rjmp	.+18     	; 0x7b6 <Write_TWI+0x10a>
     7a4:	80 e0       	ldi	r24, 0x00	; 0
     7a6:	07 c0       	rjmp	.+14     	; 0x7b6 <Write_TWI+0x10a>
     7a8:	83 e0       	ldi	r24, 0x03	; 3
     7aa:	05 c0       	rjmp	.+10     	; 0x7b6 <Write_TWI+0x10a>
     7ac:	81 e0       	ldi	r24, 0x01	; 1
     7ae:	03 c0       	rjmp	.+6      	; 0x7b6 <Write_TWI+0x10a>
     7b0:	83 e0       	ldi	r24, 0x03	; 3
     7b2:	01 c0       	rjmp	.+2      	; 0x7b6 <Write_TWI+0x10a>
     7b4:	82 e0       	ldi	r24, 0x02	; 2
     7b6:	df 91       	pop	r29
     7b8:	cf 91       	pop	r28
     7ba:	1f 91       	pop	r17
     7bc:	0f 91       	pop	r16
     7be:	ff 90       	pop	r15
     7c0:	ef 90       	pop	r14
     7c2:	df 90       	pop	r13
     7c4:	cf 90       	pop	r12
     7c6:	bf 90       	pop	r11
     7c8:	af 90       	pop	r10
     7ca:	08 95       	ret

000007cc <Setup_LoRa>:
     7cc:	0f 93       	push	r16
     7ce:	1f 93       	push	r17
     7d0:	cf 93       	push	r28
     7d2:	df 93       	push	r29
     7d4:	1f 92       	push	r1
     7d6:	cd b7       	in	r28, 0x3d	; 61
     7d8:	de b7       	in	r29, 0x3e	; 62
     7da:	19 82       	std	Y+1, r1	; 0x01
     7dc:	01 e0       	ldi	r16, 0x01	; 1
     7de:	9e 01       	movw	r18, r28
     7e0:	2f 5f       	subi	r18, 0xFF	; 255
     7e2:	3f 4f       	sbci	r19, 0xFF	; 255
     7e4:	42 e4       	ldi	r20, 0x42	; 66
     7e6:	65 e0       	ldi	r22, 0x05	; 5
     7e8:	81 e4       	ldi	r24, 0x41	; 65
     7ea:	0e 94 0f 02 	call	0x41e	; 0x41e <Read_SPI>
     7ee:	18 2f       	mov	r17, r24
     7f0:	12 70       	andi	r17, 0x02	; 2
     7f2:	20 e8       	ldi	r18, 0x80	; 128
     7f4:	41 e8       	ldi	r20, 0x81	; 129
     7f6:	65 e0       	ldi	r22, 0x05	; 5
     7f8:	81 e4       	ldi	r24, 0x41	; 65
     7fa:	0e 94 af 02 	call	0x55e	; 0x55e <Write_SPI>
     7fe:	18 23       	and	r17, r24
     800:	24 ee       	ldi	r18, 0xE4	; 228
     802:	46 e8       	ldi	r20, 0x86	; 134
     804:	65 e0       	ldi	r22, 0x05	; 5
     806:	81 e4       	ldi	r24, 0x41	; 65
     808:	0e 94 af 02 	call	0x55e	; 0x55e <Write_SPI>
     80c:	18 23       	and	r17, r24
     80e:	20 ec       	ldi	r18, 0xC0	; 192
     810:	47 e8       	ldi	r20, 0x87	; 135
     812:	65 e0       	ldi	r22, 0x05	; 5
     814:	81 e4       	ldi	r24, 0x41	; 65
     816:	0e 94 af 02 	call	0x55e	; 0x55e <Write_SPI>
     81a:	18 23       	and	r17, r24
     81c:	20 e0       	ldi	r18, 0x00	; 0
     81e:	48 e8       	ldi	r20, 0x88	; 136
     820:	65 e0       	ldi	r22, 0x05	; 5
     822:	81 e4       	ldi	r24, 0x41	; 65
     824:	0e 94 af 02 	call	0x55e	; 0x55e <Write_SPI>
     828:	18 23       	and	r17, r24
     82a:	25 e0       	ldi	r18, 0x05	; 5
     82c:	41 e8       	ldi	r20, 0x81	; 129
     82e:	65 e0       	ldi	r22, 0x05	; 5
     830:	81 e4       	ldi	r24, 0x41	; 65
     832:	0e 94 af 02 	call	0x55e	; 0x55e <Write_SPI>
     836:	18 23       	and	r17, r24
     838:	21 e1       	ldi	r18, 0x11	; 17
     83a:	49 e8       	ldi	r20, 0x89	; 137
     83c:	65 e0       	ldi	r22, 0x05	; 5
     83e:	81 e4       	ldi	r24, 0x41	; 65
     840:	0e 94 af 02 	call	0x55e	; 0x55e <Write_SPI>
     844:	18 23       	and	r17, r24
     846:	81 e0       	ldi	r24, 0x01	; 1
     848:	12 30       	cpi	r17, 0x02	; 2
     84a:	09 f0       	breq	.+2      	; 0x84e <Setup_LoRa+0x82>
     84c:	80 e0       	ldi	r24, 0x00	; 0
     84e:	0f 90       	pop	r0
     850:	df 91       	pop	r29
     852:	cf 91       	pop	r28
     854:	1f 91       	pop	r17
     856:	0f 91       	pop	r16
     858:	08 95       	ret

0000085a <Read_LoRa>:
     85a:	ef 92       	push	r14
     85c:	ff 92       	push	r15
     85e:	0f 93       	push	r16
     860:	1f 93       	push	r17
     862:	cf 93       	push	r28
     864:	df 93       	push	r29
     866:	cd b7       	in	r28, 0x3d	; 61
     868:	de b7       	in	r29, 0x3e	; 62
     86a:	26 97       	sbiw	r28, 0x06	; 6
     86c:	cd bf       	out	0x3d, r28	; 61
     86e:	de bf       	out	0x3e, r29	; 62
     870:	19 82       	std	Y+1, r1	; 0x01
     872:	01 e0       	ldi	r16, 0x01	; 1
     874:	9e 01       	movw	r18, r28
     876:	2f 5f       	subi	r18, 0xFF	; 255
     878:	3f 4f       	sbci	r19, 0xFF	; 255
     87a:	43 e1       	ldi	r20, 0x13	; 19
     87c:	65 e0       	ldi	r22, 0x05	; 5
     87e:	81 e4       	ldi	r24, 0x41	; 65
     880:	0e 94 0f 02 	call	0x41e	; 0x41e <Read_SPI>
     884:	19 81       	ldd	r17, Y+1	; 0x01
     886:	81 2f       	mov	r24, r17
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	0e 94 7b 26 	call	0x4cf6	; 0x4cf6 <malloc>
     88e:	7c 01       	movw	r14, r24
     890:	15 30       	cpi	r17, 0x05	; 5
     892:	80 f1       	brcs	.+96     	; 0x8f4 <Read_LoRa+0x9a>
     894:	1e 82       	std	Y+6, r1	; 0x06
     896:	9e 01       	movw	r18, r28
     898:	2a 5f       	subi	r18, 0xFA	; 250
     89a:	3f 4f       	sbci	r19, 0xFF	; 255
     89c:	40 e1       	ldi	r20, 0x10	; 16
     89e:	65 e0       	ldi	r22, 0x05	; 5
     8a0:	81 e4       	ldi	r24, 0x41	; 65
     8a2:	0e 94 0f 02 	call	0x41e	; 0x41e <Read_SPI>
     8a6:	2e 81       	ldd	r18, Y+6	; 0x06
     8a8:	4d e8       	ldi	r20, 0x8D	; 141
     8aa:	65 e0       	ldi	r22, 0x05	; 5
     8ac:	81 e4       	ldi	r24, 0x41	; 65
     8ae:	0e 94 af 02 	call	0x55e	; 0x55e <Write_SPI>
     8b2:	09 81       	ldd	r16, Y+1	; 0x01
     8b4:	97 01       	movw	r18, r14
     8b6:	40 e0       	ldi	r20, 0x00	; 0
     8b8:	65 e0       	ldi	r22, 0x05	; 5
     8ba:	81 e4       	ldi	r24, 0x41	; 65
     8bc:	0e 94 0f 02 	call	0x41e	; 0x41e <Read_SPI>
     8c0:	f7 01       	movw	r30, r14
     8c2:	80 81       	ld	r24, Z
     8c4:	85 33       	cpi	r24, 0x35	; 53
     8c6:	b1 f4       	brne	.+44     	; 0x8f4 <Read_LoRa+0x9a>
     8c8:	81 81       	ldd	r24, Z+1	; 0x01
     8ca:	82 33       	cpi	r24, 0x32	; 50
     8cc:	99 f4       	brne	.+38     	; 0x8f4 <Read_LoRa+0x9a>
     8ce:	82 81       	ldd	r24, Z+2	; 0x02
     8d0:	8a 83       	std	Y+2, r24	; 0x02
     8d2:	83 81       	ldd	r24, Z+3	; 0x03
     8d4:	8b 83       	std	Y+3, r24	; 0x03
     8d6:	84 81       	ldd	r24, Z+4	; 0x04
     8d8:	8c 83       	std	Y+4, r24	; 0x04
     8da:	1d 82       	std	Y+5, r1	; 0x05
     8dc:	ce 01       	movw	r24, r28
     8de:	02 96       	adiw	r24, 0x02	; 2
     8e0:	0e 94 f8 28 	call	0x51f0	; 0x51f0 <atoi>
     8e4:	08 2f       	mov	r16, r24
     8e6:	19 2f       	mov	r17, r25
     8e8:	c7 01       	movw	r24, r14
     8ea:	0e 94 13 27 	call	0x4e26	; 0x4e26 <free>
     8ee:	80 2f       	mov	r24, r16
     8f0:	91 2f       	mov	r25, r17
     8f2:	05 c0       	rjmp	.+10     	; 0x8fe <Read_LoRa+0xa4>
     8f4:	c7 01       	movw	r24, r14
     8f6:	0e 94 13 27 	call	0x4e26	; 0x4e26 <free>
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	26 96       	adiw	r28, 0x06	; 6
     900:	cd bf       	out	0x3d, r28	; 61
     902:	de bf       	out	0x3e, r29	; 62
     904:	df 91       	pop	r29
     906:	cf 91       	pop	r28
     908:	1f 91       	pop	r17
     90a:	0f 91       	pop	r16
     90c:	ff 90       	pop	r15
     90e:	ef 90       	pop	r14
     910:	08 95       	ret

00000912 <Write_Character>:

unsigned char Write_Character(char Character_to_write){
     912:	0f 93       	push	r16
     914:	1f 93       	push	r17
     916:	cf 93       	push	r28
     918:	df 93       	push	r29
     91a:	cd b7       	in	r28, 0x3d	; 61
     91c:	de b7       	in	r29, 0x3e	; 62
     91e:	cb 57       	subi	r28, 0x7B	; 123
     920:	d1 09       	sbc	r29, r1
     922:	cd bf       	out	0x3d, r28	; 61
     924:	de bf       	out	0x3e, r29	; 62
	const unsigned char 
		SSD_space[3] = {0x00, 0x00, 0x00},
     926:	19 82       	std	Y+1, r1	; 0x01
     928:	1a 82       	std	Y+2, r1	; 0x02
     92a:	1b 82       	std	Y+3, r1	; 0x03
		SSD_dot[3] = {0x00, 0b01000000, 0x00},
     92c:	1c 82       	std	Y+4, r1	; 0x04
     92e:	40 e4       	ldi	r20, 0x40	; 64
     930:	4d 83       	std	Y+5, r20	; 0x05
     932:	1e 82       	std	Y+6, r1	; 0x06
		SSD_dash[3] = {0b00001000, 0b00001000, 0b00001000},
     934:	58 e0       	ldi	r21, 0x08	; 8
     936:	5f 83       	std	Y+7, r21	; 0x07
     938:	58 87       	std	Y+8, r21	; 0x08
     93a:	59 87       	std	Y+9, r21	; 0x09
		SSD_comma[3] = {0b00100000, 0b01100000, 0b00000000},
     93c:	90 e2       	ldi	r25, 0x20	; 32
     93e:	9a 87       	std	Y+10, r25	; 0x0a
     940:	90 e6       	ldi	r25, 0x60	; 96
     942:	9b 87       	std	Y+11, r25	; 0x0b
     944:	1c 86       	std	Y+12, r1	; 0x0c
		SSD_asterisk[3] = {0b00000010, 0b00000111, 0b00000010},
     946:	92 e0       	ldi	r25, 0x02	; 2
     948:	9d 87       	std	Y+13, r25	; 0x0d
     94a:	27 e0       	ldi	r18, 0x07	; 7
     94c:	2e 87       	std	Y+14, r18	; 0x0e
     94e:	9f 87       	std	Y+15, r25	; 0x0f
		SSD_dollar[5] = {0b01001111, 0b01001001, 0b011111111, 0b01001001, 0b01111001},
     950:	95 e0       	ldi	r25, 0x05	; 5
     952:	e6 e0       	ldi	r30, 0x06	; 6
     954:	f0 e4       	ldi	r31, 0x40	; 64
     956:	de 01       	movw	r26, r28
     958:	50 96       	adiw	r26, 0x10	; 16
     95a:	01 90       	ld	r0, Z+
     95c:	0d 92       	st	X+, r0
     95e:	9a 95       	dec	r25
     960:	e1 f7       	brne	.-8      	; 0x95a <Write_Character+0x48>
		SSD_0[4] = {0b00111110, 0b01000001, 0b01000001, 0b00111110},
     962:	6e e3       	ldi	r22, 0x3E	; 62
     964:	6d 8b       	std	Y+21, r22	; 0x15
     966:	31 e4       	ldi	r19, 0x41	; 65
     968:	3e 8b       	std	Y+22, r19	; 0x16
     96a:	3f 8b       	std	Y+23, r19	; 0x17
     96c:	68 8f       	std	Y+24, r22	; 0x18
		SSD_1[3] = {0b01000010, 0b01111111, 0b01000000},
     96e:	92 e4       	ldi	r25, 0x42	; 66
     970:	99 8f       	std	Y+25, r25	; 0x19
     972:	9f e7       	ldi	r25, 0x7F	; 127
     974:	9a 8f       	std	Y+26, r25	; 0x1a
     976:	4b 8f       	std	Y+27, r20	; 0x1b
		SSD_2[4] = {0b01111001, 0b01001001, 0b01001001, 0b01001111},
     978:	79 e7       	ldi	r23, 0x79	; 121
     97a:	7c 8f       	std	Y+28, r23	; 0x1c
     97c:	29 e4       	ldi	r18, 0x49	; 73
     97e:	2d 8f       	std	Y+29, r18	; 0x1d
     980:	2e 8f       	std	Y+30, r18	; 0x1e
     982:	1f e4       	ldi	r17, 0x4F	; 79
     984:	1f 8f       	std	Y+31, r17	; 0x1f
		SSD_3[5] = {0b01000001, 0b01001001, 0b01001001, 0b01010101, 0b00110110},
     986:	05 e0       	ldi	r16, 0x05	; 5
     988:	eb e0       	ldi	r30, 0x0B	; 11
     98a:	f0 e4       	ldi	r31, 0x40	; 64
     98c:	de 01       	movw	r26, r28
     98e:	90 96       	adiw	r26, 0x20	; 32
     990:	01 90       	ld	r0, Z+
     992:	0d 92       	st	X+, r0
     994:	0a 95       	dec	r16
     996:	e1 f7       	brne	.-8      	; 0x990 <Write_Character+0x7e>
		SSD_4[5] = {0b00010000, 0b00011000, 0b00010100, 0b00010010, 0b01111111},
     998:	05 e0       	ldi	r16, 0x05	; 5
     99a:	e0 e1       	ldi	r30, 0x10	; 16
     99c:	f0 e4       	ldi	r31, 0x40	; 64
     99e:	de 01       	movw	r26, r28
     9a0:	95 96       	adiw	r26, 0x25	; 37
     9a2:	01 90       	ld	r0, Z+
     9a4:	0d 92       	st	X+, r0
     9a6:	0a 95       	dec	r16
     9a8:	e1 f7       	brne	.-8      	; 0x9a2 <Write_Character+0x90>
		SSD_5[4] = {0b01001111, 0b01001001, 0b01001001, 0b01111001},
     9aa:	1a a7       	std	Y+42, r17	; 0x2a
     9ac:	2b a7       	std	Y+43, r18	; 0x2b
     9ae:	2c a7       	std	Y+44, r18	; 0x2c
     9b0:	7d a7       	std	Y+45, r23	; 0x2d
		SSD_6[5] = {0b00011100, 0b00101010, 0b01001001, 0b00101001, 0b00010000},
     9b2:	75 e0       	ldi	r23, 0x05	; 5
     9b4:	e5 e1       	ldi	r30, 0x15	; 21
     9b6:	f0 e4       	ldi	r31, 0x40	; 64
     9b8:	de 01       	movw	r26, r28
     9ba:	9e 96       	adiw	r26, 0x2e	; 46
     9bc:	01 90       	ld	r0, Z+
     9be:	0d 92       	st	X+, r0
     9c0:	7a 95       	dec	r23
     9c2:	e1 f7       	brne	.-8      	; 0x9bc <Write_Character+0xaa>
		SSD_7[6] = {0b01000001, 0b00100001, 0b00010001, 0b00001001, 0b00000101, 0b00000011},
     9c4:	76 e0       	ldi	r23, 0x06	; 6
     9c6:	ea e1       	ldi	r30, 0x1A	; 26
     9c8:	f0 e4       	ldi	r31, 0x40	; 64
     9ca:	de 01       	movw	r26, r28
     9cc:	d3 96       	adiw	r26, 0x33	; 51
     9ce:	01 90       	ld	r0, Z+
     9d0:	0d 92       	st	X+, r0
     9d2:	7a 95       	dec	r23
     9d4:	e1 f7       	brne	.-8      	; 0x9ce <Write_Character+0xbc>
		SSD_8[5] = {0b00010100, 0b00101010, 0b01001001, 0b00101010, 0b00010100},
     9d6:	75 e0       	ldi	r23, 0x05	; 5
     9d8:	e0 e2       	ldi	r30, 0x20	; 32
     9da:	f0 e4       	ldi	r31, 0x40	; 64
     9dc:	de 01       	movw	r26, r28
     9de:	d9 96       	adiw	r26, 0x39	; 57
     9e0:	01 90       	ld	r0, Z+
     9e2:	0d 92       	st	X+, r0
     9e4:	7a 95       	dec	r23
     9e6:	e1 f7       	brne	.-8      	; 0x9e0 <Write_Character+0xce>
		SSD_9[5] = {0b01000110, 0b00101010, 0b00011001, 0b00001010, 0b00000100},
     9e8:	75 e0       	ldi	r23, 0x05	; 5
     9ea:	e5 e2       	ldi	r30, 0x25	; 37
     9ec:	f0 e4       	ldi	r31, 0x40	; 64
     9ee:	de 01       	movw	r26, r28
     9f0:	de 96       	adiw	r26, 0x3e	; 62
     9f2:	01 90       	ld	r0, Z+
     9f4:	0d 92       	st	X+, r0
     9f6:	7a 95       	dec	r23
     9f8:	e1 f7       	brne	.-8      	; 0x9f2 <Write_Character+0xe0>
		SSD_G[5] = {0b00011100, 0b00100010, 0b01010001, 0b01010001, 0b01110010},
     9fa:	75 e0       	ldi	r23, 0x05	; 5
     9fc:	ea e2       	ldi	r30, 0x2A	; 42
     9fe:	f0 e4       	ldi	r31, 0x40	; 64
     a00:	de 01       	movw	r26, r28
     a02:	ad 5b       	subi	r26, 0xBD	; 189
     a04:	bf 4f       	sbci	r27, 0xFF	; 255
     a06:	01 90       	ld	r0, Z+
     a08:	0d 92       	st	X+, r0
     a0a:	7a 95       	dec	r23
     a0c:	e1 f7       	brne	.-8      	; 0xa06 <Write_Character+0xf4>
		SSD_N[7] = {0b01111111, 0b00000010, 0b00000100, 0b00001000, 0b00010000, 0b00100000, 0b01111111},
     a0e:	77 e0       	ldi	r23, 0x07	; 7
     a10:	ef e2       	ldi	r30, 0x2F	; 47
     a12:	f0 e4       	ldi	r31, 0x40	; 64
     a14:	de 01       	movw	r26, r28
     a16:	a8 5b       	subi	r26, 0xB8	; 184
     a18:	bf 4f       	sbci	r27, 0xFF	; 255
     a1a:	01 90       	ld	r0, Z+
     a1c:	0d 92       	st	X+, r0
     a1e:	7a 95       	dec	r23
     a20:	e1 f7       	brne	.-8      	; 0xa1a <Write_Character+0x108>
		SSD_M[5] = {0b01111111, 0b00000010, 0b00000100, 0b00000010, 0b01111111},
     a22:	75 e0       	ldi	r23, 0x05	; 5
     a24:	e6 e3       	ldi	r30, 0x36	; 54
     a26:	f0 e4       	ldi	r31, 0x40	; 64
     a28:	de 01       	movw	r26, r28
     a2a:	a1 5b       	subi	r26, 0xB1	; 177
     a2c:	bf 4f       	sbci	r27, 0xFF	; 255
     a2e:	01 90       	ld	r0, Z+
     a30:	0d 92       	st	X+, r0
     a32:	7a 95       	dec	r23
     a34:	e1 f7       	brne	.-8      	; 0xa2e <Write_Character+0x11c>
		SSD_h[4] = {0b01111111, 0b00001000, 0b00001000, 0b01111111},
     a36:	65 96       	adiw	r28, 0x15	; 21
     a38:	9f af       	std	Y+63, r25	; 0x3f
     a3a:	65 97       	sbiw	r28, 0x15	; 21
     a3c:	66 96       	adiw	r28, 0x16	; 22
     a3e:	5f af       	std	Y+63, r21	; 0x3f
     a40:	66 97       	sbiw	r28, 0x16	; 22
     a42:	67 96       	adiw	r28, 0x17	; 23
     a44:	5f af       	std	Y+63, r21	; 0x3f
     a46:	67 97       	sbiw	r28, 0x17	; 23
     a48:	68 96       	adiw	r28, 0x18	; 24
     a4a:	9f af       	std	Y+63, r25	; 0x3f
     a4c:	68 97       	sbiw	r28, 0x18	; 24
		SSD_E[4] = {0b01111111, 0b01001001, 0b01001001, 0b01001001},
     a4e:	69 96       	adiw	r28, 0x19	; 25
     a50:	9f af       	std	Y+63, r25	; 0x3f
     a52:	69 97       	sbiw	r28, 0x19	; 25
     a54:	6a 96       	adiw	r28, 0x1a	; 26
     a56:	2f af       	std	Y+63, r18	; 0x3f
     a58:	6a 97       	sbiw	r28, 0x1a	; 26
     a5a:	6b 96       	adiw	r28, 0x1b	; 27
     a5c:	2f af       	std	Y+63, r18	; 0x3f
     a5e:	6b 97       	sbiw	r28, 0x1b	; 27
     a60:	6c 96       	adiw	r28, 0x1c	; 28
     a62:	2f af       	std	Y+63, r18	; 0x3f
     a64:	6c 97       	sbiw	r28, 0x1c	; 28
		SSD_L[4] = {0b01111111, 0b01000000, 0b01000000, 0b01000000},
     a66:	6d 96       	adiw	r28, 0x1d	; 29
     a68:	9f af       	std	Y+63, r25	; 0x3f
     a6a:	6d 97       	sbiw	r28, 0x1d	; 29
     a6c:	6e 96       	adiw	r28, 0x1e	; 30
     a6e:	4f af       	std	Y+63, r20	; 0x3f
     a70:	6e 97       	sbiw	r28, 0x1e	; 30
     a72:	6f 96       	adiw	r28, 0x1f	; 31
     a74:	4f af       	std	Y+63, r20	; 0x3f
     a76:	6f 97       	sbiw	r28, 0x1f	; 31
     a78:	a0 96       	adiw	r28, 0x20	; 32
     a7a:	4f af       	std	Y+63, r20	; 0x3f
     a7c:	a0 97       	sbiw	r28, 0x20	; 32
		SSD_O[4] = {0b00111110, 0b01000001, 0b01000001, 0b00111110},
     a7e:	a1 96       	adiw	r28, 0x21	; 33
     a80:	6f af       	std	Y+63, r22	; 0x3f
     a82:	a1 97       	sbiw	r28, 0x21	; 33
     a84:	a2 96       	adiw	r28, 0x22	; 34
     a86:	3f af       	std	Y+63, r19	; 0x3f
     a88:	a2 97       	sbiw	r28, 0x22	; 34
     a8a:	a3 96       	adiw	r28, 0x23	; 35
     a8c:	3f af       	std	Y+63, r19	; 0x3f
     a8e:	a3 97       	sbiw	r28, 0x23	; 35
     a90:	a4 96       	adiw	r28, 0x24	; 36
     a92:	6f af       	std	Y+63, r22	; 0x3f
     a94:	a4 97       	sbiw	r28, 0x24	; 36
		SSD_R[5] = {0b01111111, 0b00001001, 0b00011001, 0b00100110, 0b01000000},
     a96:	25 e0       	ldi	r18, 0x05	; 5
     a98:	eb e3       	ldi	r30, 0x3B	; 59
     a9a:	f0 e4       	ldi	r31, 0x40	; 64
     a9c:	de 01       	movw	r26, r28
     a9e:	ac 59       	subi	r26, 0x9C	; 156
     aa0:	bf 4f       	sbci	r27, 0xFF	; 255
     aa2:	01 90       	ld	r0, Z+
     aa4:	0d 92       	st	X+, r0
     aa6:	2a 95       	dec	r18
     aa8:	e1 f7       	brne	.-8      	; 0xaa2 <Write_Character+0x190>
		SSD_A[7] = {0b01000000, 0b00010000, 0b00010100, 0b00000010, 0b00010100, 0b00010000, 0b01000000},
     aaa:	27 e0       	ldi	r18, 0x07	; 7
     aac:	e0 e4       	ldi	r30, 0x40	; 64
     aae:	f0 e4       	ldi	r31, 0x40	; 64
     ab0:	de 01       	movw	r26, r28
     ab2:	a7 59       	subi	r26, 0x97	; 151
     ab4:	bf 4f       	sbci	r27, 0xFF	; 255
     ab6:	01 90       	ld	r0, Z+
     ab8:	0d 92       	st	X+, r0
     aba:	2a 95       	dec	r18
     abc:	e1 f7       	brne	.-8      	; 0xab6 <Write_Character+0x1a4>
		SSD_C[4] = {0b00011100, 0b00100010, 0b01000001, 0b00100010},
     abe:	4c e1       	ldi	r20, 0x1C	; 28
     ac0:	e1 96       	adiw	r28, 0x31	; 49
     ac2:	4f af       	std	Y+63, r20	; 0x3f
     ac4:	e1 97       	sbiw	r28, 0x31	; 49
     ac6:	22 e2       	ldi	r18, 0x22	; 34
     ac8:	e2 96       	adiw	r28, 0x32	; 50
     aca:	2f af       	std	Y+63, r18	; 0x3f
     acc:	e2 97       	sbiw	r28, 0x32	; 50
     ace:	e3 96       	adiw	r28, 0x33	; 51
     ad0:	3f af       	std	Y+63, r19	; 0x3f
     ad2:	e3 97       	sbiw	r28, 0x33	; 51
     ad4:	e4 96       	adiw	r28, 0x34	; 52
     ad6:	2f af       	std	Y+63, r18	; 0x3f
     ad8:	e4 97       	sbiw	r28, 0x34	; 52
		SSD_F[4] = {0b01111111, 0b00010001, 0b00010001, 0b00000001},
     ada:	e5 96       	adiw	r28, 0x35	; 53
     adc:	9f af       	std	Y+63, r25	; 0x3f
     ade:	e5 97       	sbiw	r28, 0x35	; 53
     ae0:	51 e1       	ldi	r21, 0x11	; 17
     ae2:	e6 96       	adiw	r28, 0x36	; 54
     ae4:	5f af       	std	Y+63, r21	; 0x3f
     ae6:	e6 97       	sbiw	r28, 0x36	; 54
     ae8:	e7 96       	adiw	r28, 0x37	; 55
     aea:	5f af       	std	Y+63, r21	; 0x3f
     aec:	e7 97       	sbiw	r28, 0x37	; 55
     aee:	51 e0       	ldi	r21, 0x01	; 1
     af0:	e8 96       	adiw	r28, 0x38	; 56
     af2:	5f af       	std	Y+63, r21	; 0x3f
     af4:	e8 97       	sbiw	r28, 0x38	; 56
		SSD_D[4] = {0b01111111, 0b01000001, 0b00100010, 0b00011100};
     af6:	e9 96       	adiw	r28, 0x39	; 57
     af8:	9f af       	std	Y+63, r25	; 0x3f
     afa:	e9 97       	sbiw	r28, 0x39	; 57
     afc:	ea 96       	adiw	r28, 0x3a	; 58
     afe:	3f af       	std	Y+63, r19	; 0x3f
     b00:	ea 97       	sbiw	r28, 0x3a	; 58
     b02:	eb 96       	adiw	r28, 0x3b	; 59
     b04:	2f af       	std	Y+63, r18	; 0x3f
     b06:	eb 97       	sbiw	r28, 0x3b	; 59
     b08:	ec 96       	adiw	r28, 0x3c	; 60
     b0a:	4f af       	std	Y+63, r20	; 0x3f
     b0c:	ec 97       	sbiw	r28, 0x3c	; 60
	
	const unsigned char *output;
	unsigned char output_size;
	switch (Character_to_write){
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	fc 01       	movw	r30, r24
     b12:	b4 97       	sbiw	r30, 0x24	; 36
     b14:	ef 32       	cpi	r30, 0x2F	; 47
     b16:	f1 05       	cpc	r31, r1
     b18:	08 f0       	brcs	.+2      	; 0xb1c <Write_Character+0x20a>
     b1a:	86 c0       	rjmp	.+268    	; 0xc28 <Write_Character+0x316>
     b1c:	e6 58       	subi	r30, 0x86	; 134
     b1e:	ff 4f       	sbci	r31, 0xFF	; 255
     b20:	0c 94 1c 26 	jmp	0x4c38	; 0x4c38 <__tablejump2__>
		case '0':
		output = SSD_0;
		output_size = sizeof(SSD_0);
     b24:	24 e0       	ldi	r18, 0x04	; 4
	
	const unsigned char *output;
	unsigned char output_size;
	switch (Character_to_write){
		case '0':
		output = SSD_0;
     b26:	ae 01       	movw	r20, r28
     b28:	4b 5e       	subi	r20, 0xEB	; 235
     b2a:	5f 4f       	sbci	r21, 0xFF	; 255
     b2c:	86 c0       	rjmp	.+268    	; 0xc3a <Write_Character+0x328>
		output = SSD_1;
		output_size = sizeof(SSD_1);
		break;
		case '2':
		output = SSD_2;
		output_size = sizeof(SSD_2);
     b2e:	24 e0       	ldi	r18, 0x04	; 4
		case '1':
		output = SSD_1;
		output_size = sizeof(SSD_1);
		break;
		case '2':
		output = SSD_2;
     b30:	ae 01       	movw	r20, r28
     b32:	44 5e       	subi	r20, 0xE4	; 228
     b34:	5f 4f       	sbci	r21, 0xFF	; 255
		output_size = sizeof(SSD_2);
		break;
     b36:	81 c0       	rjmp	.+258    	; 0xc3a <Write_Character+0x328>
		case '3':
		output = SSD_3;
		output_size = sizeof(SSD_3);
     b38:	25 e0       	ldi	r18, 0x05	; 5
		case '2':
		output = SSD_2;
		output_size = sizeof(SSD_2);
		break;
		case '3':
		output = SSD_3;
     b3a:	ae 01       	movw	r20, r28
     b3c:	40 5e       	subi	r20, 0xE0	; 224
     b3e:	5f 4f       	sbci	r21, 0xFF	; 255
		output_size = sizeof(SSD_3);
		break;
     b40:	7c c0       	rjmp	.+248    	; 0xc3a <Write_Character+0x328>
		case '4':
		output = SSD_4;
		output_size = sizeof(SSD_4);
     b42:	25 e0       	ldi	r18, 0x05	; 5
		case '3':
		output = SSD_3;
		output_size = sizeof(SSD_3);
		break;
		case '4':
		output = SSD_4;
     b44:	ae 01       	movw	r20, r28
     b46:	4b 5d       	subi	r20, 0xDB	; 219
     b48:	5f 4f       	sbci	r21, 0xFF	; 255
		output_size = sizeof(SSD_4);
		break;
     b4a:	77 c0       	rjmp	.+238    	; 0xc3a <Write_Character+0x328>
		case '5':
		output = SSD_5;
		output_size = sizeof(SSD_5);
     b4c:	24 e0       	ldi	r18, 0x04	; 4
		case '4':
		output = SSD_4;
		output_size = sizeof(SSD_4);
		break;
		case '5':
		output = SSD_5;
     b4e:	ae 01       	movw	r20, r28
     b50:	46 5d       	subi	r20, 0xD6	; 214
     b52:	5f 4f       	sbci	r21, 0xFF	; 255
		output_size = sizeof(SSD_5);
		break;
     b54:	72 c0       	rjmp	.+228    	; 0xc3a <Write_Character+0x328>
		case '6':
		output = SSD_6;
		output_size = sizeof(SSD_6);
     b56:	25 e0       	ldi	r18, 0x05	; 5
		case '5':
		output = SSD_5;
		output_size = sizeof(SSD_5);
		break;
		case '6':
		output = SSD_6;
     b58:	ae 01       	movw	r20, r28
     b5a:	42 5d       	subi	r20, 0xD2	; 210
     b5c:	5f 4f       	sbci	r21, 0xFF	; 255
		output_size = sizeof(SSD_6);
		break;
     b5e:	6d c0       	rjmp	.+218    	; 0xc3a <Write_Character+0x328>
		case '7':
		output = SSD_7;
		output_size = sizeof(SSD_7);
     b60:	26 e0       	ldi	r18, 0x06	; 6
		case '6':
		output = SSD_6;
		output_size = sizeof(SSD_6);
		break;
		case '7':
		output = SSD_7;
     b62:	ae 01       	movw	r20, r28
     b64:	4d 5c       	subi	r20, 0xCD	; 205
     b66:	5f 4f       	sbci	r21, 0xFF	; 255
		output_size = sizeof(SSD_7);
		break;
     b68:	68 c0       	rjmp	.+208    	; 0xc3a <Write_Character+0x328>
		case '8':
		output = SSD_8;
		output_size = sizeof(SSD_8);
     b6a:	25 e0       	ldi	r18, 0x05	; 5
		case '7':
		output = SSD_7;
		output_size = sizeof(SSD_7);
		break;
		case '8':
		output = SSD_8;
     b6c:	ae 01       	movw	r20, r28
     b6e:	47 5c       	subi	r20, 0xC7	; 199
     b70:	5f 4f       	sbci	r21, 0xFF	; 255
		output_size = sizeof(SSD_8);
		break;
     b72:	63 c0       	rjmp	.+198    	; 0xc3a <Write_Character+0x328>
		case '9':
		output = SSD_9;
		output_size = sizeof(SSD_9);
     b74:	25 e0       	ldi	r18, 0x05	; 5
		case '8':
		output = SSD_8;
		output_size = sizeof(SSD_8);
		break;
		case '9':
		output = SSD_9;
     b76:	ae 01       	movw	r20, r28
     b78:	42 5c       	subi	r20, 0xC2	; 194
     b7a:	5f 4f       	sbci	r21, 0xFF	; 255
		output_size = sizeof(SSD_9);
		break;
     b7c:	5e c0       	rjmp	.+188    	; 0xc3a <Write_Character+0x328>
		case '.':
		output = SSD_dot;
		output_size = sizeof(SSD_dot);
     b7e:	23 e0       	ldi	r18, 0x03	; 3
		case '9':
		output = SSD_9;
		output_size = sizeof(SSD_9);
		break;
		case '.':
		output = SSD_dot;
     b80:	ae 01       	movw	r20, r28
     b82:	4c 5f       	subi	r20, 0xFC	; 252
     b84:	5f 4f       	sbci	r21, 0xFF	; 255
		output_size = sizeof(SSD_dot);
		break;
     b86:	59 c0       	rjmp	.+178    	; 0xc3a <Write_Character+0x328>
		case 'G':
		output = SSD_G;
		output_size = sizeof(SSD_G);
     b88:	25 e0       	ldi	r18, 0x05	; 5
		case '.':
		output = SSD_dot;
		output_size = sizeof(SSD_dot);
		break;
		case 'G':
		output = SSD_G;
     b8a:	ae 01       	movw	r20, r28
     b8c:	4d 5b       	subi	r20, 0xBD	; 189
     b8e:	5f 4f       	sbci	r21, 0xFF	; 255
		output_size = sizeof(SSD_G);
		break;
     b90:	54 c0       	rjmp	.+168    	; 0xc3a <Write_Character+0x328>
		case 'N':
		output = SSD_N;
		output_size = sizeof(SSD_N);
     b92:	27 e0       	ldi	r18, 0x07	; 7
		case 'G':
		output = SSD_G;
		output_size = sizeof(SSD_G);
		break;
		case 'N':
		output = SSD_N;
     b94:	ae 01       	movw	r20, r28
     b96:	48 5b       	subi	r20, 0xB8	; 184
     b98:	5f 4f       	sbci	r21, 0xFF	; 255
		output_size = sizeof(SSD_N);
		break;
     b9a:	4f c0       	rjmp	.+158    	; 0xc3a <Write_Character+0x328>
		case 'M':
		output = SSD_M;
		output_size = sizeof(SSD_M);
     b9c:	25 e0       	ldi	r18, 0x05	; 5
		case 'N':
		output = SSD_N;
		output_size = sizeof(SSD_N);
		break;
		case 'M':
		output = SSD_M;
     b9e:	ae 01       	movw	r20, r28
     ba0:	41 5b       	subi	r20, 0xB1	; 177
     ba2:	5f 4f       	sbci	r21, 0xFF	; 255
		output_size = sizeof(SSD_M);
		break;
     ba4:	4a c0       	rjmp	.+148    	; 0xc3a <Write_Character+0x328>
		case 'H':
		output = SSD_h;
		output_size = sizeof(SSD_h);
     ba6:	24 e0       	ldi	r18, 0x04	; 4
		case 'M':
		output = SSD_M;
		output_size = sizeof(SSD_M);
		break;
		case 'H':
		output = SSD_h;
     ba8:	ae 01       	movw	r20, r28
     baa:	4c 5a       	subi	r20, 0xAC	; 172
     bac:	5f 4f       	sbci	r21, 0xFF	; 255
		output_size = sizeof(SSD_h);
		break;
     bae:	45 c0       	rjmp	.+138    	; 0xc3a <Write_Character+0x328>
		case 'E':
		output = SSD_E;
		output_size = sizeof(SSD_E);
     bb0:	24 e0       	ldi	r18, 0x04	; 4
		case 'H':
		output = SSD_h;
		output_size = sizeof(SSD_h);
		break;
		case 'E':
		output = SSD_E;
     bb2:	ae 01       	movw	r20, r28
     bb4:	48 5a       	subi	r20, 0xA8	; 168
     bb6:	5f 4f       	sbci	r21, 0xFF	; 255
		output_size = sizeof(SSD_E);
		break;
     bb8:	40 c0       	rjmp	.+128    	; 0xc3a <Write_Character+0x328>
		case 'L':
		output = SSD_L;
		output_size = sizeof(SSD_L);
     bba:	24 e0       	ldi	r18, 0x04	; 4
		case 'E':
		output = SSD_E;
		output_size = sizeof(SSD_E);
		break;
		case 'L':
		output = SSD_L;
     bbc:	ae 01       	movw	r20, r28
     bbe:	44 5a       	subi	r20, 0xA4	; 164
     bc0:	5f 4f       	sbci	r21, 0xFF	; 255
		output_size = sizeof(SSD_L);
		break;
     bc2:	3b c0       	rjmp	.+118    	; 0xc3a <Write_Character+0x328>
		case 'O':
		output = SSD_O;
		output_size = sizeof(SSD_O);
     bc4:	24 e0       	ldi	r18, 0x04	; 4
		case 'L':
		output = SSD_L;
		output_size = sizeof(SSD_L);
		break;
		case 'O':
		output = SSD_O;
     bc6:	ae 01       	movw	r20, r28
     bc8:	40 5a       	subi	r20, 0xA0	; 160
     bca:	5f 4f       	sbci	r21, 0xFF	; 255
		output_size = sizeof(SSD_O);
		break;
     bcc:	36 c0       	rjmp	.+108    	; 0xc3a <Write_Character+0x328>
		case 'R':
		output = SSD_R;
		output_size = sizeof(SSD_R);
     bce:	25 e0       	ldi	r18, 0x05	; 5
		case 'O':
		output = SSD_O;
		output_size = sizeof(SSD_O);
		break;
		case 'R':
		output = SSD_R;
     bd0:	ae 01       	movw	r20, r28
     bd2:	4c 59       	subi	r20, 0x9C	; 156
     bd4:	5f 4f       	sbci	r21, 0xFF	; 255
		output_size = sizeof(SSD_R);
		break;
     bd6:	31 c0       	rjmp	.+98     	; 0xc3a <Write_Character+0x328>
		case 'A':
		output = SSD_A;
		output_size = sizeof(SSD_A);
     bd8:	27 e0       	ldi	r18, 0x07	; 7
		case 'R':
		output = SSD_R;
		output_size = sizeof(SSD_R);
		break;
		case 'A':
		output = SSD_A;
     bda:	ae 01       	movw	r20, r28
     bdc:	47 59       	subi	r20, 0x97	; 151
     bde:	5f 4f       	sbci	r21, 0xFF	; 255
		output_size = sizeof(SSD_A);
		break;
     be0:	2c c0       	rjmp	.+88     	; 0xc3a <Write_Character+0x328>
		case 'C':
		output = SSD_C;
		output_size = sizeof(SSD_C);
     be2:	24 e0       	ldi	r18, 0x04	; 4
		case 'A':
		output = SSD_A;
		output_size = sizeof(SSD_A);
		break;
		case 'C':
		output = SSD_C;
     be4:	ae 01       	movw	r20, r28
     be6:	40 59       	subi	r20, 0x90	; 144
     be8:	5f 4f       	sbci	r21, 0xFF	; 255
		output_size = sizeof(SSD_C);
		break;
     bea:	27 c0       	rjmp	.+78     	; 0xc3a <Write_Character+0x328>
		case 'F':
		output = SSD_F;
		output_size = sizeof(SSD_F);
     bec:	24 e0       	ldi	r18, 0x04	; 4
		case 'C':
		output = SSD_C;
		output_size = sizeof(SSD_C);
		break;
		case 'F':
		output = SSD_F;
     bee:	ae 01       	movw	r20, r28
     bf0:	4c 58       	subi	r20, 0x8C	; 140
     bf2:	5f 4f       	sbci	r21, 0xFF	; 255
		output_size = sizeof(SSD_F);
		break;
     bf4:	22 c0       	rjmp	.+68     	; 0xc3a <Write_Character+0x328>
		case 'D':
		output = SSD_D;
		output_size = sizeof(SSD_D);
     bf6:	24 e0       	ldi	r18, 0x04	; 4
		case 'F':
		output = SSD_F;
		output_size = sizeof(SSD_F);
		break;
		case 'D':
		output = SSD_D;
     bf8:	ae 01       	movw	r20, r28
     bfa:	48 58       	subi	r20, 0x88	; 136
     bfc:	5f 4f       	sbci	r21, 0xFF	; 255
		output_size = sizeof(SSD_D);
		break;
     bfe:	1d c0       	rjmp	.+58     	; 0xc3a <Write_Character+0x328>
		case '-':
		output = SSD_dash;
		output_size = sizeof(SSD_dash);
     c00:	23 e0       	ldi	r18, 0x03	; 3
		case 'D':
		output = SSD_D;
		output_size = sizeof(SSD_D);
		break;
		case '-':
		output = SSD_dash;
     c02:	ae 01       	movw	r20, r28
     c04:	49 5f       	subi	r20, 0xF9	; 249
     c06:	5f 4f       	sbci	r21, 0xFF	; 255
		output_size = sizeof(SSD_dash);
		break;
     c08:	18 c0       	rjmp	.+48     	; 0xc3a <Write_Character+0x328>
		case '$':
		output = SSD_dollar;
		output_size = sizeof(SSD_dollar);
     c0a:	25 e0       	ldi	r18, 0x05	; 5
		case '-':
		output = SSD_dash;
		output_size = sizeof(SSD_dash);
		break;
		case '$':
		output = SSD_dollar;
     c0c:	ae 01       	movw	r20, r28
     c0e:	40 5f       	subi	r20, 0xF0	; 240
     c10:	5f 4f       	sbci	r21, 0xFF	; 255
		output_size = sizeof(SSD_dollar);
		break;
     c12:	13 c0       	rjmp	.+38     	; 0xc3a <Write_Character+0x328>
		case ',':
		output = SSD_comma;
		output_size = sizeof(SSD_comma);
     c14:	23 e0       	ldi	r18, 0x03	; 3
		case '$':
		output = SSD_dollar;
		output_size = sizeof(SSD_dollar);
		break;
		case ',':
		output = SSD_comma;
     c16:	ae 01       	movw	r20, r28
     c18:	46 5f       	subi	r20, 0xF6	; 246
     c1a:	5f 4f       	sbci	r21, 0xFF	; 255
		output_size = sizeof(SSD_comma);
		break;
     c1c:	0e c0       	rjmp	.+28     	; 0xc3a <Write_Character+0x328>
		case '*':
		output = SSD_asterisk;
		output_size = sizeof(SSD_asterisk);
     c1e:	23 e0       	ldi	r18, 0x03	; 3
		case ',':
		output = SSD_comma;
		output_size = sizeof(SSD_comma);
		break;
		case '*':
		output = SSD_asterisk;
     c20:	ae 01       	movw	r20, r28
     c22:	43 5f       	subi	r20, 0xF3	; 243
     c24:	5f 4f       	sbci	r21, 0xFF	; 255
		output_size = sizeof(SSD_asterisk);
		break;
     c26:	09 c0       	rjmp	.+18     	; 0xc3a <Write_Character+0x328>
		default:
		output = SSD_space;
		output_size = sizeof(SSD_space);
     c28:	23 e0       	ldi	r18, 0x03	; 3
		case '*':
		output = SSD_asterisk;
		output_size = sizeof(SSD_asterisk);
		break;
		default:
		output = SSD_space;
     c2a:	ae 01       	movw	r20, r28
     c2c:	4f 5f       	subi	r20, 0xFF	; 255
     c2e:	5f 4f       	sbci	r21, 0xFF	; 255
		output_size = sizeof(SSD_space);
		break;
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <Write_Character+0x328>
		output = SSD_0;
		output_size = sizeof(SSD_0);
		break;
		case '1':
		output = SSD_1;
		output_size = sizeof(SSD_1);
     c32:	23 e0       	ldi	r18, 0x03	; 3
		case '0':
		output = SSD_0;
		output_size = sizeof(SSD_0);
		break;
		case '1':
		output = SSD_1;
     c34:	ae 01       	movw	r20, r28
     c36:	47 5e       	subi	r20, 0xE7	; 231
     c38:	5f 4f       	sbci	r21, 0xFF	; 255
		default:
		output = SSD_space;
		output_size = sizeof(SSD_space);
		break;
	}
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x40, (unsigned char *)output, output_size);
     c3a:	60 e4       	ldi	r22, 0x40	; 64
     c3c:	8c e3       	ldi	r24, 0x3C	; 60
     c3e:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
     c42:	91 e0       	ldi	r25, 0x01	; 1
     c44:	84 30       	cpi	r24, 0x04	; 4
     c46:	09 f0       	breq	.+2      	; 0xc4a <Write_Character+0x338>
     c48:	90 e0       	ldi	r25, 0x00	; 0
}
     c4a:	89 2f       	mov	r24, r25
     c4c:	c5 58       	subi	r28, 0x85	; 133
     c4e:	df 4f       	sbci	r29, 0xFF	; 255
     c50:	cd bf       	out	0x3d, r28	; 61
     c52:	de bf       	out	0x3e, r29	; 62
     c54:	df 91       	pop	r29
     c56:	cf 91       	pop	r28
     c58:	1f 91       	pop	r17
     c5a:	0f 91       	pop	r16
     c5c:	08 95       	ret

00000c5e <Clear_Display>:

unsigned char Clear_Display(){
     c5e:	ff 92       	push	r15
     c60:	0f 93       	push	r16
     c62:	1f 93       	push	r17
     c64:	cf 93       	push	r28
     c66:	df 93       	push	r29
     c68:	cd b7       	in	r28, 0x3d	; 61
     c6a:	de b7       	in	r29, 0x3e	; 62
     c6c:	6e 97       	sbiw	r28, 0x1e	; 30
     c6e:	cd bf       	out	0x3d, r28	; 61
     c70:	de bf       	out	0x3e, r29	; 62
	unsigned char 
		page = 0,
		Clear_Status = 1;
     c72:	01 e0       	ldi	r16, 0x01	; 1
	return (TWI_status == 4) ? 1 : 0;
}

unsigned char Clear_Display(){
	unsigned char 
		page = 0,
     c74:	f1 2c       	mov	r15, r1
		Clear_Status = 1;
	
	while(1){
		switch (page){
     c76:	8f 2d       	mov	r24, r15
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	88 30       	cpi	r24, 0x08	; 8
     c7c:	91 05       	cpc	r25, r1
     c7e:	08 f0       	brcs	.+2      	; 0xc82 <Clear_Display+0x24>
     c80:	84 c0       	rjmp	.+264    	; 0xd8a <Clear_Display+0x12c>
     c82:	fc 01       	movw	r30, r24
     c84:	e7 55       	subi	r30, 0x57	; 87
     c86:	ff 4f       	sbci	r31, 0xFF	; 255
     c88:	0c 94 1c 26 	jmp	0x4c38	; 0x4c38 <__tablejump2__>
     c8c:	80 eb       	ldi	r24, 0xB0	; 176
     c8e:	8e 8f       	std	Y+30, r24	; 0x1e
	
	return Setup_status;
}

inline unsigned char Write_Display(unsigned char Data_Byte){
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x80, &Data_Byte, 1);
     c90:	21 e0       	ldi	r18, 0x01	; 1
     c92:	ae 01       	movw	r20, r28
     c94:	42 5e       	subi	r20, 0xE2	; 226
     c96:	5f 4f       	sbci	r21, 0xFF	; 255
     c98:	60 e8       	ldi	r22, 0x80	; 128
     c9a:	8c e3       	ldi	r24, 0x3C	; 60
     c9c:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
     ca0:	91 e0       	ldi	r25, 0x01	; 1
     ca2:	84 30       	cpi	r24, 0x04	; 4
     ca4:	09 f0       	breq	.+2      	; 0xca8 <Clear_Display+0x4a>
     ca6:	90 e0       	ldi	r25, 0x00	; 0
		Clear_Status = 1;
	
	while(1){
		switch (page){
			case 0:
			Clear_Status &= Write_Display(SSD_PAGE0);
     ca8:	09 23       	and	r16, r25
			break;
     caa:	6f c0       	rjmp	.+222    	; 0xd8a <Clear_Display+0x12c>
     cac:	81 eb       	ldi	r24, 0xB1	; 177
     cae:	8d 8f       	std	Y+29, r24	; 0x1d
	
	return Setup_status;
}

inline unsigned char Write_Display(unsigned char Data_Byte){
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x80, &Data_Byte, 1);
     cb0:	21 e0       	ldi	r18, 0x01	; 1
     cb2:	ae 01       	movw	r20, r28
     cb4:	43 5e       	subi	r20, 0xE3	; 227
     cb6:	5f 4f       	sbci	r21, 0xFF	; 255
     cb8:	60 e8       	ldi	r22, 0x80	; 128
     cba:	8c e3       	ldi	r24, 0x3C	; 60
     cbc:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
     cc0:	91 e0       	ldi	r25, 0x01	; 1
     cc2:	84 30       	cpi	r24, 0x04	; 4
     cc4:	09 f0       	breq	.+2      	; 0xcc8 <Clear_Display+0x6a>
     cc6:	90 e0       	ldi	r25, 0x00	; 0
		switch (page){
			case 0:
			Clear_Status &= Write_Display(SSD_PAGE0);
			break;
			case 1:
			Clear_Status &= Write_Display(SSD_PAGE1);
     cc8:	09 23       	and	r16, r25
			break;
     cca:	5f c0       	rjmp	.+190    	; 0xd8a <Clear_Display+0x12c>
     ccc:	82 eb       	ldi	r24, 0xB2	; 178
     cce:	8c 8f       	std	Y+28, r24	; 0x1c
	
	return Setup_status;
}

inline unsigned char Write_Display(unsigned char Data_Byte){
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x80, &Data_Byte, 1);
     cd0:	21 e0       	ldi	r18, 0x01	; 1
     cd2:	ae 01       	movw	r20, r28
     cd4:	44 5e       	subi	r20, 0xE4	; 228
     cd6:	5f 4f       	sbci	r21, 0xFF	; 255
     cd8:	60 e8       	ldi	r22, 0x80	; 128
     cda:	8c e3       	ldi	r24, 0x3C	; 60
     cdc:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
     ce0:	91 e0       	ldi	r25, 0x01	; 1
     ce2:	84 30       	cpi	r24, 0x04	; 4
     ce4:	09 f0       	breq	.+2      	; 0xce8 <Clear_Display+0x8a>
     ce6:	90 e0       	ldi	r25, 0x00	; 0
			break;
			case 1:
			Clear_Status &= Write_Display(SSD_PAGE1);
			break;
			case 2:
			Clear_Status &= Write_Display(SSD_PAGE2);
     ce8:	09 23       	and	r16, r25
			break;
     cea:	4f c0       	rjmp	.+158    	; 0xd8a <Clear_Display+0x12c>
     cec:	83 eb       	ldi	r24, 0xB3	; 179
     cee:	8b 8f       	std	Y+27, r24	; 0x1b
	
	return Setup_status;
}

inline unsigned char Write_Display(unsigned char Data_Byte){
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x80, &Data_Byte, 1);
     cf0:	21 e0       	ldi	r18, 0x01	; 1
     cf2:	ae 01       	movw	r20, r28
     cf4:	45 5e       	subi	r20, 0xE5	; 229
     cf6:	5f 4f       	sbci	r21, 0xFF	; 255
     cf8:	60 e8       	ldi	r22, 0x80	; 128
     cfa:	8c e3       	ldi	r24, 0x3C	; 60
     cfc:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
     d00:	91 e0       	ldi	r25, 0x01	; 1
     d02:	84 30       	cpi	r24, 0x04	; 4
     d04:	09 f0       	breq	.+2      	; 0xd08 <Clear_Display+0xaa>
     d06:	90 e0       	ldi	r25, 0x00	; 0
			break;
			case 2:
			Clear_Status &= Write_Display(SSD_PAGE2);
			break;
			case 3:
			Clear_Status &= Write_Display(SSD_PAGE3);
     d08:	09 23       	and	r16, r25
			break;
     d0a:	3f c0       	rjmp	.+126    	; 0xd8a <Clear_Display+0x12c>
     d0c:	84 eb       	ldi	r24, 0xB4	; 180
     d0e:	8a 8f       	std	Y+26, r24	; 0x1a
	
	return Setup_status;
}

inline unsigned char Write_Display(unsigned char Data_Byte){
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x80, &Data_Byte, 1);
     d10:	21 e0       	ldi	r18, 0x01	; 1
     d12:	ae 01       	movw	r20, r28
     d14:	46 5e       	subi	r20, 0xE6	; 230
     d16:	5f 4f       	sbci	r21, 0xFF	; 255
     d18:	60 e8       	ldi	r22, 0x80	; 128
     d1a:	8c e3       	ldi	r24, 0x3C	; 60
     d1c:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
     d20:	91 e0       	ldi	r25, 0x01	; 1
     d22:	84 30       	cpi	r24, 0x04	; 4
     d24:	09 f0       	breq	.+2      	; 0xd28 <Clear_Display+0xca>
     d26:	90 e0       	ldi	r25, 0x00	; 0
			break;
			case 3:
			Clear_Status &= Write_Display(SSD_PAGE3);
			break;
			case 4:
			Clear_Status &= Write_Display(SSD_PAGE4);
     d28:	09 23       	and	r16, r25
			break;
     d2a:	2f c0       	rjmp	.+94     	; 0xd8a <Clear_Display+0x12c>
     d2c:	85 eb       	ldi	r24, 0xB5	; 181
     d2e:	89 8f       	std	Y+25, r24	; 0x19
	
	return Setup_status;
}

inline unsigned char Write_Display(unsigned char Data_Byte){
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x80, &Data_Byte, 1);
     d30:	21 e0       	ldi	r18, 0x01	; 1
     d32:	ae 01       	movw	r20, r28
     d34:	47 5e       	subi	r20, 0xE7	; 231
     d36:	5f 4f       	sbci	r21, 0xFF	; 255
     d38:	60 e8       	ldi	r22, 0x80	; 128
     d3a:	8c e3       	ldi	r24, 0x3C	; 60
     d3c:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
     d40:	91 e0       	ldi	r25, 0x01	; 1
     d42:	84 30       	cpi	r24, 0x04	; 4
     d44:	09 f0       	breq	.+2      	; 0xd48 <Clear_Display+0xea>
     d46:	90 e0       	ldi	r25, 0x00	; 0
			break;
			case 4:
			Clear_Status &= Write_Display(SSD_PAGE4);
			break;
			case 5:
			Clear_Status &= Write_Display(SSD_PAGE5);
     d48:	09 23       	and	r16, r25
			break;
     d4a:	1f c0       	rjmp	.+62     	; 0xd8a <Clear_Display+0x12c>
     d4c:	86 eb       	ldi	r24, 0xB6	; 182
     d4e:	88 8f       	std	Y+24, r24	; 0x18
	
	return Setup_status;
}

inline unsigned char Write_Display(unsigned char Data_Byte){
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x80, &Data_Byte, 1);
     d50:	21 e0       	ldi	r18, 0x01	; 1
     d52:	ae 01       	movw	r20, r28
     d54:	48 5e       	subi	r20, 0xE8	; 232
     d56:	5f 4f       	sbci	r21, 0xFF	; 255
     d58:	60 e8       	ldi	r22, 0x80	; 128
     d5a:	8c e3       	ldi	r24, 0x3C	; 60
     d5c:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
     d60:	91 e0       	ldi	r25, 0x01	; 1
     d62:	84 30       	cpi	r24, 0x04	; 4
     d64:	09 f0       	breq	.+2      	; 0xd68 <Clear_Display+0x10a>
     d66:	90 e0       	ldi	r25, 0x00	; 0
			break;
			case 5:
			Clear_Status &= Write_Display(SSD_PAGE5);
			break;
			case 6:
			Clear_Status &= Write_Display(SSD_PAGE6);
     d68:	09 23       	and	r16, r25
			break;
     d6a:	0f c0       	rjmp	.+30     	; 0xd8a <Clear_Display+0x12c>
     d6c:	87 eb       	ldi	r24, 0xB7	; 183
     d6e:	8f 8b       	std	Y+23, r24	; 0x17
	
	return Setup_status;
}

inline unsigned char Write_Display(unsigned char Data_Byte){
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x80, &Data_Byte, 1);
     d70:	21 e0       	ldi	r18, 0x01	; 1
     d72:	ae 01       	movw	r20, r28
     d74:	49 5e       	subi	r20, 0xE9	; 233
     d76:	5f 4f       	sbci	r21, 0xFF	; 255
     d78:	60 e8       	ldi	r22, 0x80	; 128
     d7a:	8c e3       	ldi	r24, 0x3C	; 60
     d7c:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
     d80:	91 e0       	ldi	r25, 0x01	; 1
     d82:	84 30       	cpi	r24, 0x04	; 4
     d84:	09 f0       	breq	.+2      	; 0xd88 <Clear_Display+0x12a>
     d86:	90 e0       	ldi	r25, 0x00	; 0
			break;
			case 6:
			Clear_Status &= Write_Display(SSD_PAGE6);
			break;
			case 7:
			Clear_Status &= Write_Display(SSD_PAGE7);
     d88:	09 23       	and	r16, r25
			break;
			default:
			break;
		}
		page++;
     d8a:	f3 94       	inc	r15
		if (page > 8){break;}
     d8c:	88 e0       	ldi	r24, 0x08	; 8
     d8e:	8f 15       	cp	r24, r15
     d90:	80 f1       	brcs	.+96     	; 0xdf2 <Clear_Display+0x194>
     d92:	1d 8a       	std	Y+21, r1	; 0x15
	
	return Setup_status;
}

inline unsigned char Write_Display(unsigned char Data_Byte){
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x80, &Data_Byte, 1);
     d94:	21 e0       	ldi	r18, 0x01	; 1
     d96:	ae 01       	movw	r20, r28
     d98:	4b 5e       	subi	r20, 0xEB	; 235
     d9a:	5f 4f       	sbci	r21, 0xFF	; 255
     d9c:	60 e8       	ldi	r22, 0x80	; 128
     d9e:	8c e3       	ldi	r24, 0x3C	; 60
     da0:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
     da4:	91 e0       	ldi	r25, 0x01	; 1
     da6:	84 30       	cpi	r24, 0x04	; 4
     da8:	09 f0       	breq	.+2      	; 0xdac <Clear_Display+0x14e>
     daa:	90 e0       	ldi	r25, 0x00	; 0
			break;
		}
		page++;
		if (page > 8){break;}
		else{
			Clear_Status &= Write_Display(0x00);
     dac:	09 23       	and	r16, r25
     dae:	80 e1       	ldi	r24, 0x10	; 16
     db0:	8e 8b       	std	Y+22, r24	; 0x16
	
	return Setup_status;
}

inline unsigned char Write_Display(unsigned char Data_Byte){
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x80, &Data_Byte, 1);
     db2:	21 e0       	ldi	r18, 0x01	; 1
     db4:	ae 01       	movw	r20, r28
     db6:	4a 5e       	subi	r20, 0xEA	; 234
     db8:	5f 4f       	sbci	r21, 0xFF	; 255
     dba:	60 e8       	ldi	r22, 0x80	; 128
     dbc:	8c e3       	ldi	r24, 0x3C	; 60
     dbe:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
     dc2:	91 e0       	ldi	r25, 0x01	; 1
     dc4:	84 30       	cpi	r24, 0x04	; 4
     dc6:	09 f0       	breq	.+2      	; 0xdca <Clear_Display+0x16c>
     dc8:	90 e0       	ldi	r25, 0x00	; 0
		}
		page++;
		if (page > 8){break;}
		else{
			Clear_Status &= Write_Display(0x00);
			Clear_Status &= Write_Display(0x10);
     dca:	09 23       	and	r16, r25
			for (unsigned char j = 0;j<7;j++){
     dcc:	10 e0       	ldi	r17, 0x00	; 0
     dce:	0e c0       	rjmp	.+28     	; 0xdec <Clear_Display+0x18e>
				unsigned char input_data[20] = {0};
     dd0:	ae 01       	movw	r20, r28
     dd2:	4f 5f       	subi	r20, 0xFF	; 255
     dd4:	5f 4f       	sbci	r21, 0xFF	; 255
     dd6:	84 e1       	ldi	r24, 0x14	; 20
     dd8:	fa 01       	movw	r30, r20
     dda:	11 92       	st	Z+, r1
     ddc:	8a 95       	dec	r24
     dde:	e9 f7       	brne	.-6      	; 0xdda <Clear_Display+0x17c>
				(void)Write_TWI(SSD_ADR, 0x40, input_data, 20);
     de0:	24 e1       	ldi	r18, 0x14	; 20
     de2:	60 e4       	ldi	r22, 0x40	; 64
     de4:	8c e3       	ldi	r24, 0x3C	; 60
     de6:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
		page++;
		if (page > 8){break;}
		else{
			Clear_Status &= Write_Display(0x00);
			Clear_Status &= Write_Display(0x10);
			for (unsigned char j = 0;j<7;j++){
     dea:	1f 5f       	subi	r17, 0xFF	; 255
     dec:	17 30       	cpi	r17, 0x07	; 7
     dee:	80 f3       	brcs	.-32     	; 0xdd0 <Clear_Display+0x172>
     df0:	42 cf       	rjmp	.-380    	; 0xc76 <Clear_Display+0x18>
				(void)Write_TWI(SSD_ADR, 0x40, input_data, 20);
			}
		}
	}
	return Clear_Status;
}
     df2:	80 2f       	mov	r24, r16
     df4:	6e 96       	adiw	r28, 0x1e	; 30
     df6:	cd bf       	out	0x3d, r28	; 61
     df8:	de bf       	out	0x3e, r29	; 62
     dfa:	df 91       	pop	r29
     dfc:	cf 91       	pop	r28
     dfe:	1f 91       	pop	r17
     e00:	0f 91       	pop	r16
     e02:	ff 90       	pop	r15
     e04:	08 95       	ret

00000e06 <Setup_SSD>:
	free(buffer);
	return 0;
}

// SOLOMON SYSTECH DRIVER (SSD) 1306 CODE
unsigned char Setup_SSD(){
     e06:	1f 93       	push	r17
     e08:	cf 93       	push	r28
     e0a:	df 93       	push	r29
     e0c:	cd b7       	in	r28, 0x3d	; 61
     e0e:	de b7       	in	r29, 0x3e	; 62
     e10:	27 97       	sbiw	r28, 0x07	; 7
     e12:	cd bf       	out	0x3d, r28	; 61
     e14:	de bf       	out	0x3e, r29	; 62
	
	return (TWI_status == 4) ? 1 : 0;
}

inline unsigned char Write_Display_Double(unsigned char Address_Byte, unsigned char Data_Byte){
	unsigned char input_data[2] = {Address_Byte, Data_Byte};
     e16:	88 ea       	ldi	r24, 0xA8	; 168
     e18:	89 83       	std	Y+1, r24	; 0x01
     e1a:	8f e3       	ldi	r24, 0x3F	; 63
     e1c:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x00, input_data, 2);
     e1e:	22 e0       	ldi	r18, 0x02	; 2
     e20:	ae 01       	movw	r20, r28
     e22:	4f 5f       	subi	r20, 0xFF	; 255
     e24:	5f 4f       	sbci	r21, 0xFF	; 255
     e26:	60 e0       	ldi	r22, 0x00	; 0
     e28:	8c e3       	ldi	r24, 0x3C	; 60
     e2a:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
     e2e:	11 e0       	ldi	r17, 0x01	; 1
     e30:	84 30       	cpi	r24, 0x04	; 4
     e32:	09 f0       	breq	.+2      	; 0xe36 <Setup_SSD+0x30>
     e34:	10 e0       	ldi	r17, 0x00	; 0
	
	return (TWI_status == 4) ? 1 : 0;
}

inline unsigned char Write_Display_Double(unsigned char Address_Byte, unsigned char Data_Byte){
	unsigned char input_data[2] = {Address_Byte, Data_Byte};
     e36:	83 ed       	ldi	r24, 0xD3	; 211
     e38:	89 83       	std	Y+1, r24	; 0x01
     e3a:	1a 82       	std	Y+2, r1	; 0x02
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x00, input_data, 2);
     e3c:	22 e0       	ldi	r18, 0x02	; 2
     e3e:	ae 01       	movw	r20, r28
     e40:	4f 5f       	subi	r20, 0xFF	; 255
     e42:	5f 4f       	sbci	r21, 0xFF	; 255
     e44:	60 e0       	ldi	r22, 0x00	; 0
     e46:	8c e3       	ldi	r24, 0x3C	; 60
     e48:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
     e4c:	91 e0       	ldi	r25, 0x01	; 1
     e4e:	84 30       	cpi	r24, 0x04	; 4
     e50:	09 f0       	breq	.+2      	; 0xe54 <Setup_SSD+0x4e>
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	19 23       	and	r17, r25
     e56:	80 e4       	ldi	r24, 0x40	; 64
     e58:	8b 83       	std	Y+3, r24	; 0x03
	
	return Setup_status;
}

inline unsigned char Write_Display(unsigned char Data_Byte){
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x80, &Data_Byte, 1);
     e5a:	21 e0       	ldi	r18, 0x01	; 1
     e5c:	ae 01       	movw	r20, r28
     e5e:	4d 5f       	subi	r20, 0xFD	; 253
     e60:	5f 4f       	sbci	r21, 0xFF	; 255
     e62:	60 e8       	ldi	r22, 0x80	; 128
     e64:	8c e3       	ldi	r24, 0x3C	; 60
     e66:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
     e6a:	91 e0       	ldi	r25, 0x01	; 1
     e6c:	84 30       	cpi	r24, 0x04	; 4
     e6e:	09 f0       	breq	.+2      	; 0xe72 <Setup_SSD+0x6c>
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	19 23       	and	r17, r25
     e74:	80 ea       	ldi	r24, 0xA0	; 160
     e76:	8c 83       	std	Y+4, r24	; 0x04
	
	return Setup_status;
}

inline unsigned char Write_Display(unsigned char Data_Byte){
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x80, &Data_Byte, 1);
     e78:	21 e0       	ldi	r18, 0x01	; 1
     e7a:	ae 01       	movw	r20, r28
     e7c:	4c 5f       	subi	r20, 0xFC	; 252
     e7e:	5f 4f       	sbci	r21, 0xFF	; 255
     e80:	60 e8       	ldi	r22, 0x80	; 128
     e82:	8c e3       	ldi	r24, 0x3C	; 60
     e84:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
     e88:	91 e0       	ldi	r25, 0x01	; 1
     e8a:	84 30       	cpi	r24, 0x04	; 4
     e8c:	09 f0       	breq	.+2      	; 0xe90 <Setup_SSD+0x8a>
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	19 23       	and	r17, r25
     e92:	80 ec       	ldi	r24, 0xC0	; 192
     e94:	8d 83       	std	Y+5, r24	; 0x05
	
	return Setup_status;
}

inline unsigned char Write_Display(unsigned char Data_Byte){
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x80, &Data_Byte, 1);
     e96:	21 e0       	ldi	r18, 0x01	; 1
     e98:	ae 01       	movw	r20, r28
     e9a:	4b 5f       	subi	r20, 0xFB	; 251
     e9c:	5f 4f       	sbci	r21, 0xFF	; 255
     e9e:	60 e8       	ldi	r22, 0x80	; 128
     ea0:	8c e3       	ldi	r24, 0x3C	; 60
     ea2:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
     ea6:	91 e0       	ldi	r25, 0x01	; 1
     ea8:	84 30       	cpi	r24, 0x04	; 4
     eaa:	09 f0       	breq	.+2      	; 0xeae <Setup_SSD+0xa8>
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	19 23       	and	r17, r25
}

inline unsigned char Write_Display_Double(unsigned char Address_Byte, unsigned char Data_Byte){
	unsigned char input_data[2] = {Address_Byte, Data_Byte};
     eb0:	8a ed       	ldi	r24, 0xDA	; 218
     eb2:	89 83       	std	Y+1, r24	; 0x01
     eb4:	82 e0       	ldi	r24, 0x02	; 2
     eb6:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x00, input_data, 2);
     eb8:	22 e0       	ldi	r18, 0x02	; 2
     eba:	ae 01       	movw	r20, r28
     ebc:	4f 5f       	subi	r20, 0xFF	; 255
     ebe:	5f 4f       	sbci	r21, 0xFF	; 255
     ec0:	60 e0       	ldi	r22, 0x00	; 0
     ec2:	8c e3       	ldi	r24, 0x3C	; 60
     ec4:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
     ec8:	91 e0       	ldi	r25, 0x01	; 1
     eca:	84 30       	cpi	r24, 0x04	; 4
     ecc:	09 f0       	breq	.+2      	; 0xed0 <Setup_SSD+0xca>
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	19 23       	and	r17, r25
	
	return (TWI_status == 4) ? 1 : 0;
}

inline unsigned char Write_Display_Double(unsigned char Address_Byte, unsigned char Data_Byte){
	unsigned char input_data[2] = {Address_Byte, Data_Byte};
     ed2:	81 e8       	ldi	r24, 0x81	; 129
     ed4:	89 83       	std	Y+1, r24	; 0x01
     ed6:	8f e7       	ldi	r24, 0x7F	; 127
     ed8:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x00, input_data, 2);
     eda:	22 e0       	ldi	r18, 0x02	; 2
     edc:	ae 01       	movw	r20, r28
     ede:	4f 5f       	subi	r20, 0xFF	; 255
     ee0:	5f 4f       	sbci	r21, 0xFF	; 255
     ee2:	60 e0       	ldi	r22, 0x00	; 0
     ee4:	8c e3       	ldi	r24, 0x3C	; 60
     ee6:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
     eea:	91 e0       	ldi	r25, 0x01	; 1
     eec:	84 30       	cpi	r24, 0x04	; 4
     eee:	09 f0       	breq	.+2      	; 0xef2 <Setup_SSD+0xec>
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	19 23       	and	r17, r25
     ef4:	84 ea       	ldi	r24, 0xA4	; 164
     ef6:	8e 83       	std	Y+6, r24	; 0x06
	
	return Setup_status;
}

inline unsigned char Write_Display(unsigned char Data_Byte){
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x80, &Data_Byte, 1);
     ef8:	21 e0       	ldi	r18, 0x01	; 1
     efa:	ae 01       	movw	r20, r28
     efc:	4a 5f       	subi	r20, 0xFA	; 250
     efe:	5f 4f       	sbci	r21, 0xFF	; 255
     f00:	60 e8       	ldi	r22, 0x80	; 128
     f02:	8c e3       	ldi	r24, 0x3C	; 60
     f04:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
     f08:	91 e0       	ldi	r25, 0x01	; 1
     f0a:	84 30       	cpi	r24, 0x04	; 4
     f0c:	09 f0       	breq	.+2      	; 0xf10 <Setup_SSD+0x10a>
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	19 23       	and	r17, r25
     f12:	86 ea       	ldi	r24, 0xA6	; 166
     f14:	8f 83       	std	Y+7, r24	; 0x07
	
	return Setup_status;
}

inline unsigned char Write_Display(unsigned char Data_Byte){
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x80, &Data_Byte, 1);
     f16:	21 e0       	ldi	r18, 0x01	; 1
     f18:	ae 01       	movw	r20, r28
     f1a:	49 5f       	subi	r20, 0xF9	; 249
     f1c:	5f 4f       	sbci	r21, 0xFF	; 255
     f1e:	60 e8       	ldi	r22, 0x80	; 128
     f20:	8c e3       	ldi	r24, 0x3C	; 60
     f22:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
     f26:	91 e0       	ldi	r25, 0x01	; 1
     f28:	84 30       	cpi	r24, 0x04	; 4
     f2a:	09 f0       	breq	.+2      	; 0xf2e <Setup_SSD+0x128>
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	19 23       	and	r17, r25
}

inline unsigned char Write_Display_Double(unsigned char Address_Byte, unsigned char Data_Byte){
	unsigned char input_data[2] = {Address_Byte, Data_Byte};
     f30:	85 ed       	ldi	r24, 0xD5	; 213
     f32:	89 83       	std	Y+1, r24	; 0x01
     f34:	80 e8       	ldi	r24, 0x80	; 128
     f36:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x00, input_data, 2);
     f38:	22 e0       	ldi	r18, 0x02	; 2
     f3a:	ae 01       	movw	r20, r28
     f3c:	4f 5f       	subi	r20, 0xFF	; 255
     f3e:	5f 4f       	sbci	r21, 0xFF	; 255
     f40:	60 e0       	ldi	r22, 0x00	; 0
     f42:	8c e3       	ldi	r24, 0x3C	; 60
     f44:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
     f48:	91 e0       	ldi	r25, 0x01	; 1
     f4a:	84 30       	cpi	r24, 0x04	; 4
     f4c:	09 f0       	breq	.+2      	; 0xf50 <Setup_SSD+0x14a>
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	19 23       	and	r17, r25
	
	return (TWI_status == 4) ? 1 : 0;
}

inline unsigned char Write_Display_Double(unsigned char Address_Byte, unsigned char Data_Byte){
	unsigned char input_data[2] = {Address_Byte, Data_Byte};
     f52:	8d e8       	ldi	r24, 0x8D	; 141
     f54:	89 83       	std	Y+1, r24	; 0x01
     f56:	84 e1       	ldi	r24, 0x14	; 20
     f58:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x00, input_data, 2);
     f5a:	22 e0       	ldi	r18, 0x02	; 2
     f5c:	ae 01       	movw	r20, r28
     f5e:	4f 5f       	subi	r20, 0xFF	; 255
     f60:	5f 4f       	sbci	r21, 0xFF	; 255
     f62:	60 e0       	ldi	r22, 0x00	; 0
     f64:	8c e3       	ldi	r24, 0x3C	; 60
     f66:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
     f6a:	91 e0       	ldi	r25, 0x01	; 1
     f6c:	84 30       	cpi	r24, 0x04	; 4
     f6e:	09 f0       	breq	.+2      	; 0xf72 <Setup_SSD+0x16c>
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	19 23       	and	r17, r25
     f74:	8f ea       	ldi	r24, 0xAF	; 175
     f76:	89 83       	std	Y+1, r24	; 0x01
	
	return Setup_status;
}

inline unsigned char Write_Display(unsigned char Data_Byte){
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x80, &Data_Byte, 1);
     f78:	21 e0       	ldi	r18, 0x01	; 1
     f7a:	ae 01       	movw	r20, r28
     f7c:	4f 5f       	subi	r20, 0xFF	; 255
     f7e:	5f 4f       	sbci	r21, 0xFF	; 255
     f80:	60 e8       	ldi	r22, 0x80	; 128
     f82:	8c e3       	ldi	r24, 0x3C	; 60
     f84:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
     f88:	91 e0       	ldi	r25, 0x01	; 1
     f8a:	84 30       	cpi	r24, 0x04	; 4
     f8c:	09 f0       	breq	.+2      	; 0xf90 <Setup_SSD+0x18a>
     f8e:	90 e0       	ldi	r25, 0x00	; 0
	// 10. Set Oscillator Frequency -> 0xD5, 0x80
	Setup_status &= Write_Display_Double(SSD_OSC_FREQUENCY, 0x80);
	// 11. Enable charge pump regulator -> 0x8D, 0x14
	Setup_status &= Write_Display_Double(SSD_CHARGE_PUMP, 0x14);
	// 12. Display On -> 0xAF
	Setup_status &= Write_Display(SSD_DISPLAY_ON);
     f90:	19 23       	and	r17, r25

	Setup_status &= Clear_Display();
     f92:	0e 94 2f 06 	call	0xc5e	; 0xc5e <Clear_Display>
	
	return Setup_status;
}
     f96:	81 23       	and	r24, r17
     f98:	27 96       	adiw	r28, 0x07	; 7
     f9a:	cd bf       	out	0x3d, r28	; 61
     f9c:	de bf       	out	0x3e, r29	; 62
     f9e:	df 91       	pop	r29
     fa0:	cf 91       	pop	r28
     fa2:	1f 91       	pop	r17
     fa4:	08 95       	ret

00000fa6 <Print_Page>:
		}
	}
	return Clear_Status;
}

unsigned char Print_Page(unsigned char page, char *to_print, unsigned char length_to_print){
     fa6:	df 92       	push	r13
     fa8:	ef 92       	push	r14
     faa:	ff 92       	push	r15
     fac:	0f 93       	push	r16
     fae:	1f 93       	push	r17
     fb0:	cf 93       	push	r28
     fb2:	df 93       	push	r29
     fb4:	cd b7       	in	r28, 0x3d	; 61
     fb6:	de b7       	in	r29, 0x3e	; 62
     fb8:	2a 97       	sbiw	r28, 0x0a	; 10
     fba:	cd bf       	out	0x3d, r28	; 61
     fbc:	de bf       	out	0x3e, r29	; 62
     fbe:	08 2f       	mov	r16, r24
     fc0:	7b 01       	movw	r14, r22
     fc2:	d4 2e       	mov	r13, r20
     fc4:	19 86       	std	Y+9, r1	; 0x09
	
	return Setup_status;
}

inline unsigned char Write_Display(unsigned char Data_Byte){
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x80, &Data_Byte, 1);
     fc6:	21 e0       	ldi	r18, 0x01	; 1
     fc8:	ae 01       	movw	r20, r28
     fca:	47 5f       	subi	r20, 0xF7	; 247
     fcc:	5f 4f       	sbci	r21, 0xFF	; 255
     fce:	60 e8       	ldi	r22, 0x80	; 128
     fd0:	8c e3       	ldi	r24, 0x3C	; 60
     fd2:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
     fd6:	11 e0       	ldi	r17, 0x01	; 1
     fd8:	84 30       	cpi	r24, 0x04	; 4
     fda:	09 f0       	breq	.+2      	; 0xfde <Print_Page+0x38>
     fdc:	10 e0       	ldi	r17, 0x00	; 0
     fde:	80 e1       	ldi	r24, 0x10	; 16
     fe0:	8a 87       	std	Y+10, r24	; 0x0a
	
	return Setup_status;
}

inline unsigned char Write_Display(unsigned char Data_Byte){
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x80, &Data_Byte, 1);
     fe2:	21 e0       	ldi	r18, 0x01	; 1
     fe4:	ae 01       	movw	r20, r28
     fe6:	46 5f       	subi	r20, 0xF6	; 246
     fe8:	5f 4f       	sbci	r21, 0xFF	; 255
     fea:	60 e8       	ldi	r22, 0x80	; 128
     fec:	8c e3       	ldi	r24, 0x3C	; 60
     fee:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
     ff2:	91 e0       	ldi	r25, 0x01	; 1
     ff4:	84 30       	cpi	r24, 0x04	; 4
     ff6:	09 f0       	breq	.+2      	; 0xffa <Print_Page+0x54>
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	19 23       	and	r17, r25
	unsigned char 
		counter = 0,
		Print_status = 1;
	Print_status &= Write_Display(0x00);
	Print_status &= Write_Display(0x10);
	switch (page){
     ffc:	80 2f       	mov	r24, r16
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	fc 01       	movw	r30, r24
    1002:	31 97       	sbiw	r30, 0x01	; 1
    1004:	e7 30       	cpi	r30, 0x07	; 7
    1006:	f1 05       	cpc	r31, r1
    1008:	08 f0       	brcs	.+2      	; 0x100c <Print_Page+0x66>
    100a:	75 c0       	rjmp	.+234    	; 0x10f6 <Print_Page+0x150>
    100c:	ef 54       	subi	r30, 0x4F	; 79
    100e:	ff 4f       	sbci	r31, 0xFF	; 255
    1010:	0c 94 1c 26 	jmp	0x4c38	; 0x4c38 <__tablejump2__>
    1014:	81 eb       	ldi	r24, 0xB1	; 177
    1016:	88 87       	std	Y+8, r24	; 0x08
	
	return Setup_status;
}

inline unsigned char Write_Display(unsigned char Data_Byte){
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x80, &Data_Byte, 1);
    1018:	21 e0       	ldi	r18, 0x01	; 1
    101a:	ae 01       	movw	r20, r28
    101c:	48 5f       	subi	r20, 0xF8	; 248
    101e:	5f 4f       	sbci	r21, 0xFF	; 255
    1020:	60 e8       	ldi	r22, 0x80	; 128
    1022:	8c e3       	ldi	r24, 0x3C	; 60
    1024:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
    1028:	91 e0       	ldi	r25, 0x01	; 1
    102a:	84 30       	cpi	r24, 0x04	; 4
    102c:	09 f0       	breq	.+2      	; 0x1030 <Print_Page+0x8a>
    102e:	90 e0       	ldi	r25, 0x00	; 0
		Print_status = 1;
	Print_status &= Write_Display(0x00);
	Print_status &= Write_Display(0x10);
	switch (page){
		case 1:
		Print_status &= Write_Display(SSD_PAGE1);
    1030:	19 23       	and	r17, r25
		break;
    1032:	1f c0       	rjmp	.+62     	; 0x1072 <Print_Page+0xcc>
    1034:	82 eb       	ldi	r24, 0xB2	; 178
    1036:	8f 83       	std	Y+7, r24	; 0x07
	
	return Setup_status;
}

inline unsigned char Write_Display(unsigned char Data_Byte){
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x80, &Data_Byte, 1);
    1038:	21 e0       	ldi	r18, 0x01	; 1
    103a:	ae 01       	movw	r20, r28
    103c:	49 5f       	subi	r20, 0xF9	; 249
    103e:	5f 4f       	sbci	r21, 0xFF	; 255
    1040:	60 e8       	ldi	r22, 0x80	; 128
    1042:	8c e3       	ldi	r24, 0x3C	; 60
    1044:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
    1048:	91 e0       	ldi	r25, 0x01	; 1
    104a:	84 30       	cpi	r24, 0x04	; 4
    104c:	09 f0       	breq	.+2      	; 0x1050 <Print_Page+0xaa>
    104e:	90 e0       	ldi	r25, 0x00	; 0
	switch (page){
		case 1:
		Print_status &= Write_Display(SSD_PAGE1);
		break;
		case 2:
		Print_status &= Write_Display(SSD_PAGE2);
    1050:	19 23       	and	r17, r25
		break;
    1052:	0f c0       	rjmp	.+30     	; 0x1072 <Print_Page+0xcc>
    1054:	83 eb       	ldi	r24, 0xB3	; 179
    1056:	8e 83       	std	Y+6, r24	; 0x06
	
	return Setup_status;
}

inline unsigned char Write_Display(unsigned char Data_Byte){
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x80, &Data_Byte, 1);
    1058:	21 e0       	ldi	r18, 0x01	; 1
    105a:	ae 01       	movw	r20, r28
    105c:	4a 5f       	subi	r20, 0xFA	; 250
    105e:	5f 4f       	sbci	r21, 0xFF	; 255
    1060:	60 e8       	ldi	r22, 0x80	; 128
    1062:	8c e3       	ldi	r24, 0x3C	; 60
    1064:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
    1068:	91 e0       	ldi	r25, 0x01	; 1
    106a:	84 30       	cpi	r24, 0x04	; 4
    106c:	09 f0       	breq	.+2      	; 0x1070 <Print_Page+0xca>
    106e:	90 e0       	ldi	r25, 0x00	; 0
		break;
		case 2:
		Print_status &= Write_Display(SSD_PAGE2);
		break;
		case 3:
		Print_status &= Write_Display(SSD_PAGE3);
    1070:	19 23       	and	r17, r25
		}
	}
	return Clear_Status;
}

unsigned char Print_Page(unsigned char page, char *to_print, unsigned char length_to_print){
    1072:	00 e0       	ldi	r16, 0x00	; 0
    1074:	5c c0       	rjmp	.+184    	; 0x112e <Print_Page+0x188>
    1076:	84 eb       	ldi	r24, 0xB4	; 180
    1078:	8d 83       	std	Y+5, r24	; 0x05
	
	return Setup_status;
}

inline unsigned char Write_Display(unsigned char Data_Byte){
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x80, &Data_Byte, 1);
    107a:	21 e0       	ldi	r18, 0x01	; 1
    107c:	ae 01       	movw	r20, r28
    107e:	4b 5f       	subi	r20, 0xFB	; 251
    1080:	5f 4f       	sbci	r21, 0xFF	; 255
    1082:	60 e8       	ldi	r22, 0x80	; 128
    1084:	8c e3       	ldi	r24, 0x3C	; 60
    1086:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
    108a:	91 e0       	ldi	r25, 0x01	; 1
    108c:	84 30       	cpi	r24, 0x04	; 4
    108e:	09 f0       	breq	.+2      	; 0x1092 <Print_Page+0xec>
    1090:	90 e0       	ldi	r25, 0x00	; 0
		break;
		case 3:
		Print_status &= Write_Display(SSD_PAGE3);
		break;
		case 4:
		Print_status &= Write_Display(SSD_PAGE4);
    1092:	19 23       	and	r17, r25
		break;
    1094:	ee cf       	rjmp	.-36     	; 0x1072 <Print_Page+0xcc>
    1096:	85 eb       	ldi	r24, 0xB5	; 181
    1098:	8c 83       	std	Y+4, r24	; 0x04
	
	return Setup_status;
}

inline unsigned char Write_Display(unsigned char Data_Byte){
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x80, &Data_Byte, 1);
    109a:	21 e0       	ldi	r18, 0x01	; 1
    109c:	ae 01       	movw	r20, r28
    109e:	4c 5f       	subi	r20, 0xFC	; 252
    10a0:	5f 4f       	sbci	r21, 0xFF	; 255
    10a2:	60 e8       	ldi	r22, 0x80	; 128
    10a4:	8c e3       	ldi	r24, 0x3C	; 60
    10a6:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
    10aa:	91 e0       	ldi	r25, 0x01	; 1
    10ac:	84 30       	cpi	r24, 0x04	; 4
    10ae:	09 f0       	breq	.+2      	; 0x10b2 <Print_Page+0x10c>
    10b0:	90 e0       	ldi	r25, 0x00	; 0
		break;
		case 4:
		Print_status &= Write_Display(SSD_PAGE4);
		break;
		case 5:
		Print_status &= Write_Display(SSD_PAGE5);
    10b2:	19 23       	and	r17, r25
		break;
    10b4:	de cf       	rjmp	.-68     	; 0x1072 <Print_Page+0xcc>
    10b6:	86 eb       	ldi	r24, 0xB6	; 182
    10b8:	8b 83       	std	Y+3, r24	; 0x03
	
	return Setup_status;
}

inline unsigned char Write_Display(unsigned char Data_Byte){
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x80, &Data_Byte, 1);
    10ba:	21 e0       	ldi	r18, 0x01	; 1
    10bc:	ae 01       	movw	r20, r28
    10be:	4d 5f       	subi	r20, 0xFD	; 253
    10c0:	5f 4f       	sbci	r21, 0xFF	; 255
    10c2:	60 e8       	ldi	r22, 0x80	; 128
    10c4:	8c e3       	ldi	r24, 0x3C	; 60
    10c6:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
    10ca:	91 e0       	ldi	r25, 0x01	; 1
    10cc:	84 30       	cpi	r24, 0x04	; 4
    10ce:	09 f0       	breq	.+2      	; 0x10d2 <Print_Page+0x12c>
    10d0:	90 e0       	ldi	r25, 0x00	; 0
		break;
		case 5:
		Print_status &= Write_Display(SSD_PAGE5);
		break;
		case 6:
		Print_status &= Write_Display(SSD_PAGE6);
    10d2:	19 23       	and	r17, r25
		break;
    10d4:	ce cf       	rjmp	.-100    	; 0x1072 <Print_Page+0xcc>
    10d6:	87 eb       	ldi	r24, 0xB7	; 183
    10d8:	8a 83       	std	Y+2, r24	; 0x02
	
	return Setup_status;
}

inline unsigned char Write_Display(unsigned char Data_Byte){
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x80, &Data_Byte, 1);
    10da:	21 e0       	ldi	r18, 0x01	; 1
    10dc:	ae 01       	movw	r20, r28
    10de:	4e 5f       	subi	r20, 0xFE	; 254
    10e0:	5f 4f       	sbci	r21, 0xFF	; 255
    10e2:	60 e8       	ldi	r22, 0x80	; 128
    10e4:	8c e3       	ldi	r24, 0x3C	; 60
    10e6:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
    10ea:	91 e0       	ldi	r25, 0x01	; 1
    10ec:	84 30       	cpi	r24, 0x04	; 4
    10ee:	09 f0       	breq	.+2      	; 0x10f2 <Print_Page+0x14c>
    10f0:	90 e0       	ldi	r25, 0x00	; 0
		break;
		case 6:
		Print_status &= Write_Display(SSD_PAGE6);
		break;
		case 7:
		Print_status &= Write_Display(SSD_PAGE7);
    10f2:	19 23       	and	r17, r25
		break;
    10f4:	be cf       	rjmp	.-132    	; 0x1072 <Print_Page+0xcc>
    10f6:	80 eb       	ldi	r24, 0xB0	; 176
    10f8:	89 83       	std	Y+1, r24	; 0x01
	
	return Setup_status;
}

inline unsigned char Write_Display(unsigned char Data_Byte){
	unsigned char TWI_status = Write_TWI(SSD_ADR, 0x80, &Data_Byte, 1);
    10fa:	21 e0       	ldi	r18, 0x01	; 1
    10fc:	ae 01       	movw	r20, r28
    10fe:	4f 5f       	subi	r20, 0xFF	; 255
    1100:	5f 4f       	sbci	r21, 0xFF	; 255
    1102:	60 e8       	ldi	r22, 0x80	; 128
    1104:	8c e3       	ldi	r24, 0x3C	; 60
    1106:	0e 94 56 03 	call	0x6ac	; 0x6ac <Write_TWI>
	
	return (TWI_status == 4) ? 1 : 0;
    110a:	91 e0       	ldi	r25, 0x01	; 1
    110c:	84 30       	cpi	r24, 0x04	; 4
    110e:	09 f0       	breq	.+2      	; 0x1112 <Print_Page+0x16c>
    1110:	90 e0       	ldi	r25, 0x00	; 0
		break;
		case 7:
		Print_status &= Write_Display(SSD_PAGE7);
		break;
		default:
		Print_status &= Write_Display(SSD_PAGE0);
    1112:	19 23       	and	r17, r25
		break;
    1114:	ae cf       	rjmp	.-164    	; 0x1072 <Print_Page+0xcc>
	}
	while(counter <= length_to_print){
		Print_status &= Write_Character(to_print[counter]);
    1116:	f7 01       	movw	r30, r14
    1118:	e0 0f       	add	r30, r16
    111a:	f1 1d       	adc	r31, r1
    111c:	80 81       	ld	r24, Z
    111e:	0e 94 89 04 	call	0x912	; 0x912 <Write_Character>
    1122:	18 23       	and	r17, r24
		Print_status &= Write_Character(' ');
    1124:	80 e2       	ldi	r24, 0x20	; 32
    1126:	0e 94 89 04 	call	0x912	; 0x912 <Write_Character>
    112a:	18 23       	and	r17, r24
		counter++;
    112c:	0f 5f       	subi	r16, 0xFF	; 255
		break;
		default:
		Print_status &= Write_Display(SSD_PAGE0);
		break;
	}
	while(counter <= length_to_print){
    112e:	d0 16       	cp	r13, r16
    1130:	90 f7       	brcc	.-28     	; 0x1116 <Print_Page+0x170>
		Print_status &= Write_Character(to_print[counter]);
		Print_status &= Write_Character(' ');
		counter++;
	}
	return Print_status;
    1132:	81 2f       	mov	r24, r17
    1134:	2a 96       	adiw	r28, 0x0a	; 10
    1136:	cd bf       	out	0x3d, r28	; 61
    1138:	de bf       	out	0x3e, r29	; 62
    113a:	df 91       	pop	r29
    113c:	cf 91       	pop	r28
    113e:	1f 91       	pop	r17
    1140:	0f 91       	pop	r16
    1142:	ff 90       	pop	r15
    1144:	ef 90       	pop	r14
    1146:	df 90       	pop	r13
    1148:	08 95       	ret

0000114a <Run_Motors>:
// Outputs - Desired throttle command on each of 4 BLDC motors 

// ESC Interface - PPM (OneShot) control
// Inputs - Desired motor throttles (0-100)
// Outputs - 100 Hz, 1-2us waveform to ESC 
void Run_Motors(unsigned int Throttle_Commands[4]){
    114a:	cf 93       	push	r28
    114c:	df 93       	push	r29
    114e:	cd b7       	in	r28, 0x3d	; 61
    1150:	de b7       	in	r29, 0x3e	; 62
    1152:	28 97       	sbiw	r28, 0x08	; 8
    1154:	cd bf       	out	0x3d, r28	; 61
    1156:	de bf       	out	0x3e, r29	; 62
	// We want to map 0:1000 to 3000:6000 (1000:2000 us)
	static unsigned int motor_lookup[1001] = {0};
	// Build the lookup table if it hasn't been built yet, enable pins for output
	if (!(motor_lookup[0])){ 
    1158:	20 91 e2 41 	lds	r18, 0x41E2	; 0x8041e2 <__data_end>
    115c:	30 91 e3 41 	lds	r19, 0x41E3	; 0x8041e3 <__data_end+0x1>
    1160:	23 2b       	or	r18, r19
    1162:	89 f0       	breq	.+34     	; 0x1186 <Run_Motors+0x3c>
    1164:	1b c0       	rjmp	.+54     	; 0x119c <Run_Motors+0x52>
		for (unsigned int i=0;i<1001;i++){
			motor_lookup[i] = 3*i + 3000;
    1166:	a9 01       	movw	r20, r18
    1168:	44 0f       	add	r20, r20
    116a:	55 1f       	adc	r21, r21
    116c:	ba 01       	movw	r22, r20
    116e:	62 0f       	add	r22, r18
    1170:	73 1f       	adc	r23, r19
    1172:	68 54       	subi	r22, 0x48	; 72
    1174:	74 4f       	sbci	r23, 0xF4	; 244
    1176:	fa 01       	movw	r30, r20
    1178:	ee 51       	subi	r30, 0x1E	; 30
    117a:	fe 4b       	sbci	r31, 0xBE	; 190
    117c:	60 83       	st	Z, r22
    117e:	71 83       	std	Z+1, r23	; 0x01
void Run_Motors(unsigned int Throttle_Commands[4]){
	// We want to map 0:1000 to 3000:6000 (1000:2000 us)
	static unsigned int motor_lookup[1001] = {0};
	// Build the lookup table if it hasn't been built yet, enable pins for output
	if (!(motor_lookup[0])){ 
		for (unsigned int i=0;i<1001;i++){
    1180:	2f 5f       	subi	r18, 0xFF	; 255
    1182:	3f 4f       	sbci	r19, 0xFF	; 255
    1184:	02 c0       	rjmp	.+4      	; 0x118a <Run_Motors+0x40>
    1186:	20 e0       	ldi	r18, 0x00	; 0
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	29 3e       	cpi	r18, 0xE9	; 233
    118c:	43 e0       	ldi	r20, 0x03	; 3
    118e:	34 07       	cpc	r19, r20
    1190:	50 f3       	brcs	.-44     	; 0x1166 <Run_Motors+0x1c>
			motor_lookup[i] = 3*i + 3000;
		}
		PORTD_DIR |= PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm; 
    1192:	e0 e6       	ldi	r30, 0x60	; 96
    1194:	f4 e0       	ldi	r31, 0x04	; 4
    1196:	20 81       	ld	r18, Z
    1198:	2f 60       	ori	r18, 0x0F	; 15
    119a:	20 83       	st	Z, r18
	}
	unsigned int mapped_throttle_commands[4] = {0};
    119c:	fe 01       	movw	r30, r28
    119e:	31 96       	adiw	r30, 0x01	; 1
    11a0:	28 e0       	ldi	r18, 0x08	; 8
    11a2:	df 01       	movw	r26, r30
    11a4:	1d 92       	st	X+, r1
    11a6:	2a 95       	dec	r18
    11a8:	e9 f7       	brne	.-6      	; 0x11a4 <Run_Motors+0x5a>
	// Map commands, saturate if out of bounds
	for (unsigned char i=0;i<4;i++){
    11aa:	60 e0       	ldi	r22, 0x00	; 0
    11ac:	25 c0       	rjmp	.+74     	; 0x11f8 <Run_Motors+0xae>
		Throttle_Commands[i] = (Throttle_Commands[i]>1000)?1000:Throttle_Commands[i];
    11ae:	e6 2f       	mov	r30, r22
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	ee 0f       	add	r30, r30
    11b4:	ff 1f       	adc	r31, r31
    11b6:	e8 0f       	add	r30, r24
    11b8:	f9 1f       	adc	r31, r25
    11ba:	20 81       	ld	r18, Z
    11bc:	31 81       	ldd	r19, Z+1	; 0x01
    11be:	29 3e       	cpi	r18, 0xE9	; 233
    11c0:	b3 e0       	ldi	r27, 0x03	; 3
    11c2:	3b 07       	cpc	r19, r27
    11c4:	10 f0       	brcs	.+4      	; 0x11ca <Run_Motors+0x80>
    11c6:	28 ee       	ldi	r18, 0xE8	; 232
    11c8:	33 e0       	ldi	r19, 0x03	; 3
    11ca:	20 83       	st	Z, r18
    11cc:	31 83       	std	Z+1, r19	; 0x01
		mapped_throttle_commands[i] = motor_lookup[Throttle_Commands[i]];
    11ce:	46 2f       	mov	r20, r22
    11d0:	50 e0       	ldi	r21, 0x00	; 0
    11d2:	22 0f       	add	r18, r18
    11d4:	33 1f       	adc	r19, r19
    11d6:	f9 01       	movw	r30, r18
    11d8:	ee 51       	subi	r30, 0x1E	; 30
    11da:	fe 4b       	sbci	r31, 0xBE	; 190
    11dc:	20 81       	ld	r18, Z
    11de:	31 81       	ldd	r19, Z+1	; 0x01
    11e0:	fa 01       	movw	r30, r20
    11e2:	ee 0f       	add	r30, r30
    11e4:	ff 1f       	adc	r31, r31
    11e6:	41 e0       	ldi	r20, 0x01	; 1
    11e8:	50 e0       	ldi	r21, 0x00	; 0
    11ea:	4c 0f       	add	r20, r28
    11ec:	5d 1f       	adc	r21, r29
    11ee:	e4 0f       	add	r30, r20
    11f0:	f5 1f       	adc	r31, r21
    11f2:	20 83       	st	Z, r18
    11f4:	31 83       	std	Z+1, r19	; 0x01
		}
		PORTD_DIR |= PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm; 
	}
	unsigned int mapped_throttle_commands[4] = {0};
	// Map commands, saturate if out of bounds
	for (unsigned char i=0;i<4;i++){
    11f6:	6f 5f       	subi	r22, 0xFF	; 255
    11f8:	64 30       	cpi	r22, 0x04	; 4
    11fa:	c8 f2       	brcs	.-78     	; 0x11ae <Run_Motors+0x64>
		Throttle_Commands[i] = (Throttle_Commands[i]>1000)?1000:Throttle_Commands[i];
		mapped_throttle_commands[i] = motor_lookup[Throttle_Commands[i]];
	}
	// Set motor throttles
	TCA0_SINGLE_CMP0 = mapped_throttle_commands[0]; // Motor 1, back
    11fc:	89 81       	ldd	r24, Y+1	; 0x01
    11fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1200:	80 93 28 0a 	sts	0x0A28, r24	; 0x800a28 <__TEXT_REGION_LENGTH__+0x7e0a28>
    1204:	90 93 29 0a 	sts	0x0A29, r25	; 0x800a29 <__TEXT_REGION_LENGTH__+0x7e0a29>
	//TCA0_SINGLE_CMP1 = mapped_throttle_commands[1]; // Motor 2, left
	//TCA0_SINGLE_CMP2 = mapped_throttle_commands[2]; // Motor 3, front
	//TCA1_SINGLE_CMP0 = mapped_throttle_commands[3]; // Motor 4, right
	// Reset timer counts
	TCA0_SINGLE_CNT = 0;
    1208:	10 92 20 0a 	sts	0x0A20, r1	; 0x800a20 <__TEXT_REGION_LENGTH__+0x7e0a20>
    120c:	10 92 21 0a 	sts	0x0A21, r1	; 0x800a21 <__TEXT_REGION_LENGTH__+0x7e0a21>
	//TCA1_SINGLE_CNT = 0;
	// Set pins high
	PORTD_OUT |= PIN0_bm; // | PIN1_bm | PIN2_bm | PIN3_bm;
    1210:	e4 e6       	ldi	r30, 0x64	; 100
    1212:	f4 e0       	ldi	r31, 0x04	; 4
    1214:	80 81       	ld	r24, Z
    1216:	81 60       	ori	r24, 0x01	; 1
    1218:	80 83       	st	Z, r24
	// Start Timers
	TCA0_SINGLE_CTRLA |= TCA_SINGLE_ENABLE_bm;
    121a:	e0 e0       	ldi	r30, 0x00	; 0
    121c:	fa e0       	ldi	r31, 0x0A	; 10
    121e:	80 81       	ld	r24, Z
    1220:	81 60       	ori	r24, 0x01	; 1
    1222:	80 83       	st	Z, r24
	// TCA1_SINGLE_CTRLA |= TCA_SINGLE_ENABLE_bm;
}
    1224:	28 96       	adiw	r28, 0x08	; 8
    1226:	cd bf       	out	0x3d, r28	; 61
    1228:	de bf       	out	0x3e, r29	; 62
    122a:	df 91       	pop	r29
    122c:	cf 91       	pop	r28
    122e:	08 95       	ret

00001230 <__vector_11>:

ISR(TCA0_CMP0_vect){
    1230:	1f 92       	push	r1
    1232:	0f 92       	push	r0
    1234:	0f b6       	in	r0, 0x3f	; 63
    1236:	0f 92       	push	r0
    1238:	11 24       	eor	r1, r1
    123a:	0b b6       	in	r0, 0x3b	; 59
    123c:	0f 92       	push	r0
    123e:	8f 93       	push	r24
    1240:	9f 93       	push	r25
    1242:	af 93       	push	r26
    1244:	bf 93       	push	r27
    1246:	ef 93       	push	r30
    1248:	ff 93       	push	r31
	// Set pin low
	PORTD_OUT &= ~PIN0_bm;
    124a:	e4 e6       	ldi	r30, 0x64	; 100
    124c:	f4 e0       	ldi	r31, 0x04	; 4
    124e:	80 81       	ld	r24, Z
    1250:	8e 7f       	andi	r24, 0xFE	; 254
    1252:	80 83       	st	Z, r24
	// Clear int flag
	TCA0_SINGLE_INTFLAGS |= TCA_SINGLE_CMP0_bm;
    1254:	ab e0       	ldi	r26, 0x0B	; 11
    1256:	ba e0       	ldi	r27, 0x0A	; 10
    1258:	8c 91       	ld	r24, X
    125a:	80 61       	ori	r24, 0x10	; 16
    125c:	8c 93       	st	X, r24
	// If the three motors using TCA0 are updated, disable timer
	if (!(PORTD_OUT & ~MOTOR_TCA0_bm)) 	TCA0_SINGLE_CTRLA &= ~TCA_SINGLE_ENABLE_bm;
    125e:	80 81       	ld	r24, Z
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	88 7f       	andi	r24, 0xF8	; 248
    1264:	89 2b       	or	r24, r25
    1266:	29 f4       	brne	.+10     	; 0x1272 <__vector_11+0x42>
    1268:	e0 e0       	ldi	r30, 0x00	; 0
    126a:	fa e0       	ldi	r31, 0x0A	; 10
    126c:	80 81       	ld	r24, Z
    126e:	8e 7f       	andi	r24, 0xFE	; 254
    1270:	80 83       	st	Z, r24
}
    1272:	ff 91       	pop	r31
    1274:	ef 91       	pop	r30
    1276:	bf 91       	pop	r27
    1278:	af 91       	pop	r26
    127a:	9f 91       	pop	r25
    127c:	8f 91       	pop	r24
    127e:	0f 90       	pop	r0
    1280:	0b be       	out	0x3b, r0	; 59
    1282:	0f 90       	pop	r0
    1284:	0f be       	out	0x3f, r0	; 63
    1286:	0f 90       	pop	r0
    1288:	1f 90       	pop	r1
    128a:	18 95       	reti

0000128c <__vector_12>:

ISR(TCA0_CMP1_vect){
    128c:	1f 92       	push	r1
    128e:	0f 92       	push	r0
    1290:	0f b6       	in	r0, 0x3f	; 63
    1292:	0f 92       	push	r0
    1294:	11 24       	eor	r1, r1
    1296:	0b b6       	in	r0, 0x3b	; 59
    1298:	0f 92       	push	r0
    129a:	8f 93       	push	r24
    129c:	9f 93       	push	r25
    129e:	af 93       	push	r26
    12a0:	bf 93       	push	r27
    12a2:	ef 93       	push	r30
    12a4:	ff 93       	push	r31
	// Set pin low
	PORTD_OUT &= ~PIN1_bm;
    12a6:	e4 e6       	ldi	r30, 0x64	; 100
    12a8:	f4 e0       	ldi	r31, 0x04	; 4
    12aa:	80 81       	ld	r24, Z
    12ac:	8d 7f       	andi	r24, 0xFD	; 253
    12ae:	80 83       	st	Z, r24
	// Clear int flag
	TCA0_SINGLE_INTFLAGS |= TCA_SINGLE_CMP1_bm;
    12b0:	ab e0       	ldi	r26, 0x0B	; 11
    12b2:	ba e0       	ldi	r27, 0x0A	; 10
    12b4:	8c 91       	ld	r24, X
    12b6:	80 62       	ori	r24, 0x20	; 32
    12b8:	8c 93       	st	X, r24
	// If the three motors using TCA0 are updated, disable timer
	if (!(PORTD_OUT & ~MOTOR_TCA0_bm)) 	TCA0_SINGLE_CTRLA &= ~TCA_SINGLE_ENABLE_bm;
    12ba:	80 81       	ld	r24, Z
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	88 7f       	andi	r24, 0xF8	; 248
    12c0:	89 2b       	or	r24, r25
    12c2:	29 f4       	brne	.+10     	; 0x12ce <__vector_12+0x42>
    12c4:	e0 e0       	ldi	r30, 0x00	; 0
    12c6:	fa e0       	ldi	r31, 0x0A	; 10
    12c8:	80 81       	ld	r24, Z
    12ca:	8e 7f       	andi	r24, 0xFE	; 254
    12cc:	80 83       	st	Z, r24
}
    12ce:	ff 91       	pop	r31
    12d0:	ef 91       	pop	r30
    12d2:	bf 91       	pop	r27
    12d4:	af 91       	pop	r26
    12d6:	9f 91       	pop	r25
    12d8:	8f 91       	pop	r24
    12da:	0f 90       	pop	r0
    12dc:	0b be       	out	0x3b, r0	; 59
    12de:	0f 90       	pop	r0
    12e0:	0f be       	out	0x3f, r0	; 63
    12e2:	0f 90       	pop	r0
    12e4:	1f 90       	pop	r1
    12e6:	18 95       	reti

000012e8 <__vector_13>:

ISR(TCA0_CMP2_vect){
    12e8:	1f 92       	push	r1
    12ea:	0f 92       	push	r0
    12ec:	0f b6       	in	r0, 0x3f	; 63
    12ee:	0f 92       	push	r0
    12f0:	11 24       	eor	r1, r1
    12f2:	0b b6       	in	r0, 0x3b	; 59
    12f4:	0f 92       	push	r0
    12f6:	8f 93       	push	r24
    12f8:	9f 93       	push	r25
    12fa:	af 93       	push	r26
    12fc:	bf 93       	push	r27
    12fe:	ef 93       	push	r30
    1300:	ff 93       	push	r31
	// Set pin low
	PORTD_OUT &= ~PIN2_bm;
    1302:	e4 e6       	ldi	r30, 0x64	; 100
    1304:	f4 e0       	ldi	r31, 0x04	; 4
    1306:	80 81       	ld	r24, Z
    1308:	8b 7f       	andi	r24, 0xFB	; 251
    130a:	80 83       	st	Z, r24
	// Clear int flag
	TCA0_SINGLE_INTFLAGS |= TCA_SINGLE_CMP2_bm;
    130c:	ab e0       	ldi	r26, 0x0B	; 11
    130e:	ba e0       	ldi	r27, 0x0A	; 10
    1310:	8c 91       	ld	r24, X
    1312:	80 64       	ori	r24, 0x40	; 64
    1314:	8c 93       	st	X, r24
	// If the three motors using TCA0 are updated, disable timer
	if (!(PORTD_OUT & ~MOTOR_TCA0_bm)) 	TCA0_SINGLE_CTRLA &= ~TCA_SINGLE_ENABLE_bm;
    1316:	80 81       	ld	r24, Z
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	88 7f       	andi	r24, 0xF8	; 248
    131c:	89 2b       	or	r24, r25
    131e:	29 f4       	brne	.+10     	; 0x132a <__vector_13+0x42>
    1320:	e0 e0       	ldi	r30, 0x00	; 0
    1322:	fa e0       	ldi	r31, 0x0A	; 10
    1324:	80 81       	ld	r24, Z
    1326:	8e 7f       	andi	r24, 0xFE	; 254
    1328:	80 83       	st	Z, r24
}
    132a:	ff 91       	pop	r31
    132c:	ef 91       	pop	r30
    132e:	bf 91       	pop	r27
    1330:	af 91       	pop	r26
    1332:	9f 91       	pop	r25
    1334:	8f 91       	pop	r24
    1336:	0f 90       	pop	r0
    1338:	0b be       	out	0x3b, r0	; 59
    133a:	0f 90       	pop	r0
    133c:	0f be       	out	0x3f, r0	; 63
    133e:	0f 90       	pop	r0
    1340:	1f 90       	pop	r1
    1342:	18 95       	reti

00001344 <__vector_49>:

ISR(TCA1_CMP0_vect){
    1344:	1f 92       	push	r1
    1346:	0f 92       	push	r0
    1348:	0f b6       	in	r0, 0x3f	; 63
    134a:	0f 92       	push	r0
    134c:	11 24       	eor	r1, r1
    134e:	0b b6       	in	r0, 0x3b	; 59
    1350:	0f 92       	push	r0
    1352:	8f 93       	push	r24
    1354:	ef 93       	push	r30
    1356:	ff 93       	push	r31
	// Set pin low
	PORTD_OUT &= ~PIN3_bm;
    1358:	e4 e6       	ldi	r30, 0x64	; 100
    135a:	f4 e0       	ldi	r31, 0x04	; 4
    135c:	80 81       	ld	r24, Z
    135e:	87 7f       	andi	r24, 0xF7	; 247
    1360:	80 83       	st	Z, r24
	// Clear int flag
	TCA1_SINGLE_INTFLAGS |= TCA_SINGLE_CMP0_bm;
    1362:	eb e4       	ldi	r30, 0x4B	; 75
    1364:	fa e0       	ldi	r31, 0x0A	; 10
    1366:	80 81       	ld	r24, Z
    1368:	80 61       	ori	r24, 0x10	; 16
    136a:	80 83       	st	Z, r24
	// Only motor 4 uses TCA1, so disable timer
	TCA1_SINGLE_CTRLA &= ~TCA_SINGLE_ENABLE_bm;
    136c:	e0 e4       	ldi	r30, 0x40	; 64
    136e:	fa e0       	ldi	r31, 0x0A	; 10
    1370:	80 81       	ld	r24, Z
    1372:	8e 7f       	andi	r24, 0xFE	; 254
    1374:	80 83       	st	Z, r24
    1376:	ff 91       	pop	r31
    1378:	ef 91       	pop	r30
    137a:	8f 91       	pop	r24
    137c:	0f 90       	pop	r0
    137e:	0b be       	out	0x3b, r0	; 59
    1380:	0f 90       	pop	r0
    1382:	0f be       	out	0x3f, r0	; 63
    1384:	0f 90       	pop	r0
    1386:	1f 90       	pop	r1
    1388:	18 95       	reti

0000138a <Setup_Timers>:
	return Setup_Bitmask;
}

void Setup_Timers(){
	//-Setup Real Time Clock for keeping track of total run time-//
	RTC_CTRLA |= RTC_CORREN_bm | RTC_RTCEN_bm;
    138a:	e0 e4       	ldi	r30, 0x40	; 64
    138c:	f1 e0       	ldi	r31, 0x01	; 1
    138e:	80 81       	ld	r24, Z
    1390:	85 60       	ori	r24, 0x05	; 5
    1392:	80 83       	st	Z, r24
	RTC_INTCTRL |= RTC_CMP_bm;
    1394:	e2 e4       	ldi	r30, 0x42	; 66
    1396:	f1 e0       	ldi	r31, 0x01	; 1
    1398:	80 81       	ld	r24, Z
    139a:	82 60       	ori	r24, 0x02	; 2
    139c:	80 83       	st	Z, r24
	RTC_CMP = 32768;
    139e:	80 e0       	ldi	r24, 0x00	; 0
    13a0:	90 e8       	ldi	r25, 0x80	; 128
    13a2:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x7e014c>
    13a6:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x7e014d>
	//----------------------------------------------------------//
	//--------Setup Timer/Counter A0 for output compare---------//
	// Is triggered every 10 ms, is used by:
	//  -> Motors
	TCA0_SINGLE_CTRLA |= TCA_SINGLE_CLKSEL_DIV8_gc;
    13aa:	e0 e0       	ldi	r30, 0x00	; 0
    13ac:	fa e0       	ldi	r31, 0x0A	; 10
    13ae:	80 81       	ld	r24, Z
    13b0:	86 60       	ori	r24, 0x06	; 6
    13b2:	80 83       	st	Z, r24
	TCA0_SINGLE_INTCTRL |= TCA_SINGLE_CMP0_bm;
    13b4:	ea e0       	ldi	r30, 0x0A	; 10
    13b6:	fa e0       	ldi	r31, 0x0A	; 10
    13b8:	80 81       	ld	r24, Z
    13ba:	80 61       	ori	r24, 0x10	; 16
    13bc:	80 83       	st	Z, r24
	//  -> Motors running at 100 Hz
	//	-> Magnetometer running at 100 Hz
	//  -> Barometer running at 75 Hz
	//	-> Attitude observer running at 25 Hz
	//	-> Print statements, variable frequency
	TCB0_CTRLA |= TCB_ENABLE_bm | TCB_CLKSEL_DIV2_gc; // Enables timer, uses main clock with a prescaler of two
    13be:	e0 e0       	ldi	r30, 0x00	; 0
    13c0:	fb e0       	ldi	r31, 0x0B	; 11
    13c2:	80 81       	ld	r24, Z
    13c4:	83 60       	ori	r24, 0x03	; 3
    13c6:	80 83       	st	Z, r24
	TCB0_INTCTRL |= TCB_CAPT_bm; // Enables interrupt on capture
    13c8:	e5 e0       	ldi	r30, 0x05	; 5
    13ca:	fb e0       	ldi	r31, 0x0B	; 11
    13cc:	80 81       	ld	r24, Z
    13ce:	81 60       	ori	r24, 0x01	; 1
    13d0:	80 83       	st	Z, r24
	TCB0_CCMP = 60000; // Value at which timer generates interrupt and resets
    13d2:	80 e6       	ldi	r24, 0x60	; 96
    13d4:	9a ee       	ldi	r25, 0xEA	; 234
    13d6:	80 93 0c 0b 	sts	0x0B0C, r24	; 0x800b0c <__TEXT_REGION_LENGTH__+0x7e0b0c>
    13da:	90 93 0d 0b 	sts	0x0B0D, r25	; 0x800b0d <__TEXT_REGION_LENGTH__+0x7e0b0d>
	//--------------------------------------------------------//
	//-------Setup Timer/Counter B1 for output compare--------//
	// Generates an interrupt every 4.807 ms, is used by:
	//	-> IMU running at 208 Hz
	TCB1_CTRLA |= TCB_ENABLE_bm | TCB_CLKSEL_DIV2_gc;
    13de:	e0 e1       	ldi	r30, 0x10	; 16
    13e0:	fb e0       	ldi	r31, 0x0B	; 11
    13e2:	80 81       	ld	r24, Z
    13e4:	83 60       	ori	r24, 0x03	; 3
    13e6:	80 83       	st	Z, r24
	TCB1_INTCTRL |= TCB_CAPT_bm;
    13e8:	e5 e1       	ldi	r30, 0x15	; 21
    13ea:	fb e0       	ldi	r31, 0x0B	; 11
    13ec:	80 81       	ld	r24, Z
    13ee:	81 60       	ori	r24, 0x01	; 1
    13f0:	80 83       	st	Z, r24
	TCB1_CCMP = 57693;
    13f2:	8d e5       	ldi	r24, 0x5D	; 93
    13f4:	91 ee       	ldi	r25, 0xE1	; 225
    13f6:	80 93 1c 0b 	sts	0x0B1C, r24	; 0x800b1c <__TEXT_REGION_LENGTH__+0x7e0b1c>
    13fa:	90 93 1d 0b 	sts	0x0B1D, r25	; 0x800b1d <__TEXT_REGION_LENGTH__+0x7e0b1d>
    13fe:	08 95       	ret

00001400 <Setup_ADC>:
}

void Setup_ADC(){
	// Current sensor is on PD6, AIN6
	// Set voltage reference
	VREF_ADC0REF |= VREF_REFSEL_VDD_gc;
    1400:	e0 eb       	ldi	r30, 0xB0	; 176
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	80 81       	ld	r24, Z
    1406:	85 60       	ori	r24, 0x05	; 5
    1408:	80 83       	st	Z, r24
	// Enable ADC
	ADC0_CTRLA |= ADC_ENABLE_bm;
    140a:	e0 e0       	ldi	r30, 0x00	; 0
    140c:	f6 e0       	ldi	r31, 0x06	; 6
    140e:	80 81       	ld	r24, Z
    1410:	81 60       	ori	r24, 0x01	; 1
    1412:	80 83       	st	Z, r24
	// Connect AIN6 to positive input of ADC
	ADC0_MUXPOS |= ADC_MUXPOS_AIN6_gc;
    1414:	e8 e0       	ldi	r30, 0x08	; 8
    1416:	f6 e0       	ldi	r31, 0x06	; 6
    1418:	80 81       	ld	r24, Z
    141a:	86 60       	ori	r24, 0x06	; 6
    141c:	80 83       	st	Z, r24
	// Connect ground to negative input of ADC
	ADC0_MUXNEG |= ADC_MUXNEG_GND_gc;
    141e:	e9 e0       	ldi	r30, 0x09	; 9
    1420:	f6 e0       	ldi	r31, 0x06	; 6
    1422:	80 81       	ld	r24, Z
    1424:	80 64       	ori	r24, 0x40	; 64
    1426:	80 83       	st	Z, r24
	// Enable interrupt on result ready
	ADC0_INTCTRL |= ADC_RESRDY_bm; 
    1428:	ec e0       	ldi	r30, 0x0C	; 12
    142a:	f6 e0       	ldi	r31, 0x06	; 6
    142c:	80 81       	ld	r24, Z
    142e:	81 60       	ori	r24, 0x01	; 1
    1430:	80 83       	st	Z, r24
    1432:	08 95       	ret

00001434 <__vector_26>:
}

ISR(ADC0_RESRDY_vect){
    1434:	1f 92       	push	r1
    1436:	0f 92       	push	r0
    1438:	0f b6       	in	r0, 0x3f	; 63
    143a:	0f 92       	push	r0
    143c:	11 24       	eor	r1, r1
    143e:	8f 93       	push	r24
    1440:	9f 93       	push	r25
	g_esc_current = ADC0_RES;
    1442:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x7e0610>
    1446:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x7e0611>
    144a:	80 93 79 4a 	sts	0x4A79, r24	; 0x804a79 <g_esc_current>
    144e:	90 93 7a 4a 	sts	0x4A7A, r25	; 0x804a7a <g_esc_current+0x1>
}
    1452:	9f 91       	pop	r25
    1454:	8f 91       	pop	r24
    1456:	0f 90       	pop	r0
    1458:	0f be       	out	0x3f, r0	; 63
    145a:	0f 90       	pop	r0
    145c:	1f 90       	pop	r1
    145e:	18 95       	reti

00001460 <Run>:

void Run(unsigned char Setup_Bitmask){
    1460:	4f 92       	push	r4
    1462:	5f 92       	push	r5
    1464:	6f 92       	push	r6
    1466:	7f 92       	push	r7
    1468:	8f 92       	push	r8
    146a:	9f 92       	push	r9
    146c:	af 92       	push	r10
    146e:	bf 92       	push	r11
    1470:	cf 92       	push	r12
    1472:	df 92       	push	r13
    1474:	ef 92       	push	r14
    1476:	ff 92       	push	r15
    1478:	0f 93       	push	r16
    147a:	1f 93       	push	r17
    147c:	cf 93       	push	r28
    147e:	df 93       	push	r29
    1480:	cd b7       	in	r28, 0x3d	; 61
    1482:	de b7       	in	r29, 0x3e	; 62
    1484:	e2 97       	sbiw	r28, 0x32	; 50
    1486:	cd bf       	out	0x3d, r28	; 61
    1488:	de bf       	out	0x3e, r29	; 62
    148a:	18 2f       	mov	r17, r24
	static unsigned char Navigation_Bitmask = 0;
	// This section handles all sensor timing and reading, will populate a bit mask of the sensor statuses for guidance and control functions
	// [7]		[6]		[5]		[4]		[3]		[2]		[1]		[0]
	//				           LoRa	    MAG		IMU		BAR		GPS

	if (g_GPS_Read_Flag){
    148c:	80 91 cd 4b 	lds	r24, 0x4BCD	; 0x804bcd <g_GPS_Read_Flag>
    1490:	88 23       	and	r24, r24
    1492:	91 f0       	breq	.+36     	; 0x14b8 <Run+0x58>
		g_GPS_Read_Flag = 0;
    1494:	10 92 cd 4b 	sts	0x4BCD, r1	; 0x804bcd <g_GPS_Read_Flag>
		unsigned char GPS_status = Read_GPS(&Drone);
    1498:	89 e1       	ldi	r24, 0x19	; 25
    149a:	9a e4       	ldi	r25, 0x4A	; 74
    149c:	0e 94 c8 13 	call	0x2790	; 0x2790 <Read_GPS>
		Navigation_Bitmask = SET_BIT(Navigation_Bitmask, NAV_GPS_bp, GPS_status);
    14a0:	81 11       	cpse	r24, r1
    14a2:	05 c0       	rjmp	.+10     	; 0x14ae <Run+0x4e>
    14a4:	80 95       	com	r24
    14a6:	90 91 18 4a 	lds	r25, 0x4A18	; 0x804a18 <Navigation_Bitmask.4877>
    14aa:	89 23       	and	r24, r25
    14ac:	03 c0       	rjmp	.+6      	; 0x14b4 <Run+0x54>
    14ae:	90 91 18 4a 	lds	r25, 0x4A18	; 0x804a18 <Navigation_Bitmask.4877>
    14b2:	89 2b       	or	r24, r25
    14b4:	80 93 18 4a 	sts	0x4A18, r24	; 0x804a18 <Navigation_Bitmask.4877>
	}
	
	if (g_BAR_Read_Flag >= 3){
    14b8:	80 91 7f 4a 	lds	r24, 0x4A7F	; 0x804a7f <g_BAR_Read_Flag>
    14bc:	83 30       	cpi	r24, 0x03	; 3
    14be:	b0 f0       	brcs	.+44     	; 0x14ec <Run+0x8c>
		g_BAR_Read_Flag = 0;
    14c0:	10 92 7f 4a 	sts	0x4A7F, r1	; 0x804a7f <g_BAR_Read_Flag>
		unsigned char BAR_status = Read_Bar(&Drone);
    14c4:	89 e1       	ldi	r24, 0x19	; 25
    14c6:	9a e4       	ldi	r25, 0x4A	; 74
    14c8:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <Read_Bar>
		Navigation_Bitmask = SET_BIT(Navigation_Bitmask, NAV_BAR_bp, BAR_status);
    14cc:	81 11       	cpse	r24, r1
    14ce:	06 c0       	rjmp	.+12     	; 0x14dc <Run+0x7c>
    14d0:	88 0f       	add	r24, r24
    14d2:	80 95       	com	r24
    14d4:	90 91 18 4a 	lds	r25, 0x4A18	; 0x804a18 <Navigation_Bitmask.4877>
    14d8:	89 23       	and	r24, r25
    14da:	06 c0       	rjmp	.+12     	; 0x14e8 <Run+0x88>
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	88 0f       	add	r24, r24
    14e0:	99 1f       	adc	r25, r25
    14e2:	90 91 18 4a 	lds	r25, 0x4A18	; 0x804a18 <Navigation_Bitmask.4877>
    14e6:	89 2b       	or	r24, r25
    14e8:	80 93 18 4a 	sts	0x4A18, r24	; 0x804a18 <Navigation_Bitmask.4877>
	}
	
	if (g_MAG_Read_Flag >= 2){
    14ec:	80 91 80 4a 	lds	r24, 0x4A80	; 0x804a80 <g_MAG_Read_Flag>
    14f0:	82 30       	cpi	r24, 0x02	; 2
    14f2:	e0 f0       	brcs	.+56     	; 0x152c <Run+0xcc>
		g_MAG_Read_Flag = 0;
    14f4:	10 92 80 4a 	sts	0x4A80, r1	; 0x804a80 <g_MAG_Read_Flag>
		unsigned char MAG_status = Read_Mag(&Drone);
    14f8:	89 e1       	ldi	r24, 0x19	; 25
    14fa:	9a e4       	ldi	r25, 0x4A	; 74
    14fc:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <Read_Mag>
		Navigation_Bitmask = SET_BIT(Navigation_Bitmask, NAV_MAG_bp, MAG_status);
    1500:	81 11       	cpse	r24, r1
    1502:	08 c0       	rjmp	.+16     	; 0x1514 <Run+0xb4>
    1504:	88 0f       	add	r24, r24
    1506:	88 0f       	add	r24, r24
    1508:	88 0f       	add	r24, r24
    150a:	80 95       	com	r24
    150c:	90 91 18 4a 	lds	r25, 0x4A18	; 0x804a18 <Navigation_Bitmask.4877>
    1510:	89 23       	and	r24, r25
    1512:	0a c0       	rjmp	.+20     	; 0x1528 <Run+0xc8>
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	88 0f       	add	r24, r24
    1518:	99 1f       	adc	r25, r25
    151a:	88 0f       	add	r24, r24
    151c:	99 1f       	adc	r25, r25
    151e:	88 0f       	add	r24, r24
    1520:	99 1f       	adc	r25, r25
    1522:	90 91 18 4a 	lds	r25, 0x4A18	; 0x804a18 <Navigation_Bitmask.4877>
    1526:	89 2b       	or	r24, r25
    1528:	80 93 18 4a 	sts	0x4A18, r24	; 0x804a18 <Navigation_Bitmask.4877>
	}
	
	if (g_IMU_Read_Flag){
    152c:	80 91 7c 4a 	lds	r24, 0x4A7C	; 0x804a7c <g_IMU_Read_Flag>
    1530:	88 23       	and	r24, r24
    1532:	c9 f0       	breq	.+50     	; 0x1566 <Run+0x106>
		g_IMU_Read_Flag = 0;
    1534:	10 92 7c 4a 	sts	0x4A7C, r1	; 0x804a7c <g_IMU_Read_Flag>
		unsigned char IMU_status = Read_IMU(&Drone);
    1538:	89 e1       	ldi	r24, 0x19	; 25
    153a:	9a e4       	ldi	r25, 0x4A	; 74
    153c:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <Read_IMU>
		Navigation_Bitmask = SET_BIT(Navigation_Bitmask, NAV_IMU_bp, IMU_status);
    1540:	81 11       	cpse	r24, r1
    1542:	07 c0       	rjmp	.+14     	; 0x1552 <Run+0xf2>
    1544:	88 0f       	add	r24, r24
    1546:	88 0f       	add	r24, r24
    1548:	80 95       	com	r24
    154a:	90 91 18 4a 	lds	r25, 0x4A18	; 0x804a18 <Navigation_Bitmask.4877>
    154e:	89 23       	and	r24, r25
    1550:	08 c0       	rjmp	.+16     	; 0x1562 <Run+0x102>
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	88 0f       	add	r24, r24
    1556:	99 1f       	adc	r25, r25
    1558:	88 0f       	add	r24, r24
    155a:	99 1f       	adc	r25, r25
    155c:	90 91 18 4a 	lds	r25, 0x4A18	; 0x804a18 <Navigation_Bitmask.4877>
    1560:	89 2b       	or	r24, r25
    1562:	80 93 18 4a 	sts	0x4A18, r24	; 0x804a18 <Navigation_Bitmask.4877>
	}
	
	if (g_Attitude_Observer_Run_Flag >= 8){
    1566:	80 91 7e 4a 	lds	r24, 0x4A7E	; 0x804a7e <g_Attitude_Observer_Run_Flag>
    156a:	88 30       	cpi	r24, 0x08	; 8
    156c:	30 f0       	brcs	.+12     	; 0x157a <Run+0x11a>
		g_Attitude_Observer_Run_Flag = 0;
    156e:	10 92 7e 4a 	sts	0x4A7E, r1	; 0x804a7e <g_Attitude_Observer_Run_Flag>
		Observer(&Drone);
    1572:	89 e1       	ldi	r24, 0x19	; 25
    1574:	9a e4       	ldi	r25, 0x4A	; 74
    1576:	0e 94 91 1a 	call	0x3522	; 0x3522 <Observer>
	}
	
	if (g_LoRa_Flag){
    157a:	80 91 7b 4a 	lds	r24, 0x4A7B	; 0x804a7b <g_LoRa_Flag>
    157e:	88 23       	and	r24, r24
    1580:	79 f0       	breq	.+30     	; 0x15a0 <Run+0x140>
		g_LoRa_Flag = 0;
    1582:	10 92 7b 4a 	sts	0x4A7B, r1	; 0x804a7b <g_LoRa_Flag>
		motor_throttles[0] = Read_LoRa(&Reference);
    1586:	8c eb       	ldi	r24, 0xBC	; 188
    1588:	99 e4       	ldi	r25, 0x49	; 73
    158a:	0e 94 2d 04 	call	0x85a	; 0x85a <Read_LoRa>
    158e:	80 93 b4 49 	sts	0x49B4, r24	; 0x8049b4 <motor_throttles.4876>
    1592:	90 93 b5 49 	sts	0x49B5, r25	; 0x8049b5 <motor_throttles.4876+0x1>
		ADC0_COMMAND |= ADC_STCONV_bm;
    1596:	ea e0       	ldi	r30, 0x0A	; 10
    1598:	f6 e0       	ldi	r31, 0x06	; 6
    159a:	80 81       	ld	r24, Z
    159c:	81 60       	ori	r24, 0x01	; 1
    159e:	80 83       	st	Z, r24
		//Navigation_Bitmask = SET_BIT(Navigation_Bitmask, NAV_LORA_bp, LoRa_status);
	}
	
	if ((g_Print_Flag >= 50)&&(Setup_Bitmask & (1<<SU_SSD_bp))){
    15a0:	80 91 7d 4a 	lds	r24, 0x4A7D	; 0x804a7d <g_Print_Flag>
    15a4:	82 33       	cpi	r24, 0x32	; 50
    15a6:	08 f4       	brcc	.+2      	; 0x15aa <Run+0x14a>
    15a8:	8d c0       	rjmp	.+282    	; 0x16c4 <Run+0x264>
    15aa:	15 ff       	sbrs	r17, 5
    15ac:	8b c0       	rjmp	.+278    	; 0x16c4 <Run+0x264>
		g_Print_Flag = 0;
    15ae:	10 92 7d 4a 	sts	0x4A7D, r1	; 0x804a7d <g_Print_Flag>
		char buffer0[10] = {0};
    15b2:	0f 2e       	mov	r0, r31
    15b4:	fa e0       	ldi	r31, 0x0A	; 10
    15b6:	4f 2e       	mov	r4, r31
    15b8:	f0 2d       	mov	r31, r0
    15ba:	3e 01       	movw	r6, r28
    15bc:	29 e2       	ldi	r18, 0x29	; 41
    15be:	62 0e       	add	r6, r18
    15c0:	71 1c       	adc	r7, r1
    15c2:	f3 01       	movw	r30, r6
    15c4:	24 2d       	mov	r18, r4
    15c6:	11 92       	st	Z+, r1
    15c8:	2a 95       	dec	r18
    15ca:	e9 f7       	brne	.-6      	; 0x15c6 <Run+0x166>
		char buffer1[10] = {0};
    15cc:	6e 01       	movw	r12, r28
    15ce:	3f e1       	ldi	r19, 0x1F	; 31
    15d0:	c3 0e       	add	r12, r19
    15d2:	d1 1c       	adc	r13, r1
    15d4:	f6 01       	movw	r30, r12
    15d6:	24 2d       	mov	r18, r4
    15d8:	11 92       	st	Z+, r1
    15da:	2a 95       	dec	r18
    15dc:	e9 f7       	brne	.-6      	; 0x15d8 <Run+0x178>
		char buffer2[15] = {0};
    15de:	0f 2e       	mov	r0, r31
    15e0:	ff e0       	ldi	r31, 0x0F	; 15
    15e2:	5f 2e       	mov	r5, r31
    15e4:	f0 2d       	mov	r31, r0
    15e6:	7e 01       	movw	r14, r28
    15e8:	30 e1       	ldi	r19, 0x10	; 16
    15ea:	e3 0e       	add	r14, r19
    15ec:	f1 1c       	adc	r15, r1
    15ee:	f7 01       	movw	r30, r14
    15f0:	25 2d       	mov	r18, r5
    15f2:	11 92       	st	Z+, r1
    15f4:	2a 95       	dec	r18
    15f6:	e9 f7       	brne	.-6      	; 0x15f2 <Run+0x192>
		char buffer3[15] = {0};
    15f8:	ce 01       	movw	r24, r28
    15fa:	01 96       	adiw	r24, 0x01	; 1
    15fc:	4c 01       	movw	r8, r24
    15fe:	fc 01       	movw	r30, r24
    1600:	25 2d       	mov	r18, r5
    1602:	11 92       	st	Z+, r1
    1604:	2a 95       	dec	r18
    1606:	e9 f7       	brne	.-6      	; 0x1602 <Run+0x1a2>
		unsigned char length_to_print = snprintf(buffer0, sizeof(buffer0), "%3.2f", Drone.Euler[0]);
    1608:	09 e1       	ldi	r16, 0x19	; 25
    160a:	1a e4       	ldi	r17, 0x4A	; 74
    160c:	f8 01       	movw	r30, r16
    160e:	84 a1       	ldd	r24, Z+36	; 0x24
    1610:	95 a1       	ldd	r25, Z+37	; 0x25
    1612:	26 a1       	ldd	r18, Z+38	; 0x26
    1614:	37 a1       	ldd	r19, Z+39	; 0x27
    1616:	3f 93       	push	r19
    1618:	2f 93       	push	r18
    161a:	9f 93       	push	r25
    161c:	8f 93       	push	r24
    161e:	0f 2e       	mov	r0, r31
    1620:	f6 ed       	ldi	r31, 0xD6	; 214
    1622:	af 2e       	mov	r10, r31
    1624:	f1 e4       	ldi	r31, 0x41	; 65
    1626:	bf 2e       	mov	r11, r31
    1628:	f0 2d       	mov	r31, r0
    162a:	bf 92       	push	r11
    162c:	af 92       	push	r10
    162e:	1f 92       	push	r1
    1630:	4f 92       	push	r4
    1632:	7f 92       	push	r7
    1634:	6f 92       	push	r6
    1636:	0e 94 a5 2a 	call	0x554a	; 0x554a <snprintf>
		Print_Page(0, buffer0, length_to_print);
    163a:	48 2f       	mov	r20, r24
    163c:	b3 01       	movw	r22, r6
    163e:	80 e0       	ldi	r24, 0x00	; 0
    1640:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <Print_Page>
		length_to_print = snprintf(buffer1, sizeof(buffer1), "%3.2f", Drone.Euler[1]);
    1644:	f8 01       	movw	r30, r16
    1646:	80 a5       	ldd	r24, Z+40	; 0x28
    1648:	91 a5       	ldd	r25, Z+41	; 0x29
    164a:	22 a5       	ldd	r18, Z+42	; 0x2a
    164c:	33 a5       	ldd	r19, Z+43	; 0x2b
    164e:	3f 93       	push	r19
    1650:	2f 93       	push	r18
    1652:	9f 93       	push	r25
    1654:	8f 93       	push	r24
    1656:	bf 92       	push	r11
    1658:	af 92       	push	r10
    165a:	1f 92       	push	r1
    165c:	4f 92       	push	r4
    165e:	df 92       	push	r13
    1660:	cf 92       	push	r12
    1662:	0e 94 a5 2a 	call	0x554a	; 0x554a <snprintf>
		Print_Page(1, buffer1, length_to_print);
    1666:	48 2f       	mov	r20, r24
    1668:	b6 01       	movw	r22, r12
    166a:	81 e0       	ldi	r24, 0x01	; 1
    166c:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <Print_Page>
		length_to_print = snprintf(buffer2, sizeof(buffer2), "%d", g_esc_current);
    1670:	80 91 79 4a 	lds	r24, 0x4A79	; 0x804a79 <g_esc_current>
    1674:	90 91 7a 4a 	lds	r25, 0x4A7A	; 0x804a7a <g_esc_current+0x1>
    1678:	9f 93       	push	r25
    167a:	8f 93       	push	r24
    167c:	0c ed       	ldi	r16, 0xDC	; 220
    167e:	11 e4       	ldi	r17, 0x41	; 65
    1680:	1f 93       	push	r17
    1682:	0f 93       	push	r16
    1684:	1f 92       	push	r1
    1686:	5f 92       	push	r5
    1688:	ff 92       	push	r15
    168a:	ef 92       	push	r14
    168c:	0e 94 a5 2a 	call	0x554a	; 0x554a <snprintf>
		Print_Page(2, buffer2, length_to_print);
    1690:	48 2f       	mov	r20, r24
    1692:	b7 01       	movw	r22, r14
    1694:	82 e0       	ldi	r24, 0x02	; 2
    1696:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <Print_Page>
		length_to_print = snprintf(buffer3, sizeof(buffer3), "%d", motor_throttles[0]);
    169a:	e4 eb       	ldi	r30, 0xB4	; 180
    169c:	f9 e4       	ldi	r31, 0x49	; 73
    169e:	81 81       	ldd	r24, Z+1	; 0x01
    16a0:	8f 93       	push	r24
    16a2:	80 81       	ld	r24, Z
    16a4:	8f 93       	push	r24
    16a6:	1f 93       	push	r17
    16a8:	0f 93       	push	r16
    16aa:	1f 92       	push	r1
    16ac:	5f 92       	push	r5
    16ae:	9f 92       	push	r9
    16b0:	8f 92       	push	r8
    16b2:	0e 94 a5 2a 	call	0x554a	; 0x554a <snprintf>
		Print_Page(3, buffer3, length_to_print);
    16b6:	cd bf       	out	0x3d, r28	; 61
    16b8:	de bf       	out	0x3e, r29	; 62
    16ba:	48 2f       	mov	r20, r24
    16bc:	b4 01       	movw	r22, r8
    16be:	83 e0       	ldi	r24, 0x03	; 3
    16c0:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <Print_Page>
		
	}
	
	// CONTROL //
	//if (Navigation_Bitmask & NAV_SENSORS_bm){
		if (g_Motor_Run_Flag >= 2){
    16c4:	80 91 81 4a 	lds	r24, 0x4A81	; 0x804a81 <g_Motor_Run_Flag>
    16c8:	82 30       	cpi	r24, 0x02	; 2
    16ca:	30 f0       	brcs	.+12     	; 0x16d8 <Run+0x278>
			g_Motor_Run_Flag = 0;
    16cc:	10 92 81 4a 	sts	0x4A81, r1	; 0x804a81 <g_Motor_Run_Flag>
			Run_Motors(motor_throttles);
    16d0:	84 eb       	ldi	r24, 0xB4	; 180
    16d2:	99 e4       	ldi	r25, 0x49	; 73
    16d4:	0e 94 a5 08 	call	0x114a	; 0x114a <Run_Motors>
		}
	//}
}
    16d8:	e2 96       	adiw	r28, 0x32	; 50
    16da:	cd bf       	out	0x3d, r28	; 61
    16dc:	de bf       	out	0x3e, r29	; 62
    16de:	df 91       	pop	r29
    16e0:	cf 91       	pop	r28
    16e2:	1f 91       	pop	r17
    16e4:	0f 91       	pop	r16
    16e6:	ff 90       	pop	r15
    16e8:	ef 90       	pop	r14
    16ea:	df 90       	pop	r13
    16ec:	cf 90       	pop	r12
    16ee:	bf 90       	pop	r11
    16f0:	af 90       	pop	r10
    16f2:	9f 90       	pop	r9
    16f4:	8f 90       	pop	r8
    16f6:	7f 90       	pop	r7
    16f8:	6f 90       	pop	r6
    16fa:	5f 90       	pop	r5
    16fc:	4f 90       	pop	r4
    16fe:	08 95       	ret

00001700 <Delay>:

void Delay(unsigned long long length){
    1700:	5f 92       	push	r5
    1702:	6f 92       	push	r6
    1704:	7f 92       	push	r7
    1706:	8f 92       	push	r8
    1708:	9f 92       	push	r9
    170a:	af 92       	push	r10
    170c:	bf 92       	push	r11
    170e:	cf 92       	push	r12
    1710:	df 92       	push	r13
    1712:	ef 92       	push	r14
    1714:	ff 92       	push	r15
    1716:	0f 93       	push	r16
    1718:	1f 93       	push	r17
    171a:	cf 93       	push	r28
    171c:	df 93       	push	r29
    171e:	cd b7       	in	r28, 0x3d	; 61
    1720:	de b7       	in	r29, 0x3e	; 62
    1722:	28 97       	sbiw	r28, 0x08	; 8
    1724:	cd bf       	out	0x3d, r28	; 61
    1726:	de bf       	out	0x3e, r29	; 62
    1728:	52 2e       	mov	r5, r18
    172a:	63 2e       	mov	r6, r19
    172c:	74 2e       	mov	r7, r20
    172e:	85 2e       	mov	r8, r21
    1730:	96 2e       	mov	r9, r22
    1732:	b7 2f       	mov	r27, r23
    1734:	f8 2f       	mov	r31, r24
    1736:	e9 2f       	mov	r30, r25
	volatile unsigned long long i = 0;
    1738:	19 82       	std	Y+1, r1	; 0x01
    173a:	1a 82       	std	Y+2, r1	; 0x02
    173c:	1b 82       	std	Y+3, r1	; 0x03
    173e:	1c 82       	std	Y+4, r1	; 0x04
    1740:	1d 82       	std	Y+5, r1	; 0x05
    1742:	1e 82       	std	Y+6, r1	; 0x06
    1744:	1f 82       	std	Y+7, r1	; 0x07
    1746:	18 86       	std	Y+8, r1	; 0x08
	while (++i<length);
    1748:	29 81       	ldd	r18, Y+1	; 0x01
    174a:	3a 81       	ldd	r19, Y+2	; 0x02
    174c:	4b 81       	ldd	r20, Y+3	; 0x03
    174e:	5c 81       	ldd	r21, Y+4	; 0x04
    1750:	6d 81       	ldd	r22, Y+5	; 0x05
    1752:	7e 81       	ldd	r23, Y+6	; 0x06
    1754:	8f 81       	ldd	r24, Y+7	; 0x07
    1756:	98 85       	ldd	r25, Y+8	; 0x08
    1758:	a1 e0       	ldi	r26, 0x01	; 1
    175a:	0e 94 57 26 	call	0x4cae	; 0x4cae <__adddi3_s8>
    175e:	29 83       	std	Y+1, r18	; 0x01
    1760:	3a 83       	std	Y+2, r19	; 0x02
    1762:	4b 83       	std	Y+3, r20	; 0x03
    1764:	5c 83       	std	Y+4, r21	; 0x04
    1766:	6d 83       	std	Y+5, r22	; 0x05
    1768:	7e 83       	std	Y+6, r23	; 0x06
    176a:	8f 83       	std	Y+7, r24	; 0x07
    176c:	98 87       	std	Y+8, r25	; 0x08
    176e:	a5 2c       	mov	r10, r5
    1770:	b6 2c       	mov	r11, r6
    1772:	c7 2c       	mov	r12, r7
    1774:	d8 2c       	mov	r13, r8
    1776:	e9 2c       	mov	r14, r9
    1778:	fb 2e       	mov	r15, r27
    177a:	0f 2f       	mov	r16, r31
    177c:	1e 2f       	mov	r17, r30
    177e:	0e 94 63 26 	call	0x4cc6	; 0x4cc6 <__cmpdi2>
    1782:	10 f3       	brcs	.-60     	; 0x1748 <Delay+0x48>
}
    1784:	28 96       	adiw	r28, 0x08	; 8
    1786:	cd bf       	out	0x3d, r28	; 61
    1788:	de bf       	out	0x3e, r29	; 62
    178a:	df 91       	pop	r29
    178c:	cf 91       	pop	r28
    178e:	1f 91       	pop	r17
    1790:	0f 91       	pop	r16
    1792:	ff 90       	pop	r15
    1794:	ef 90       	pop	r14
    1796:	df 90       	pop	r13
    1798:	cf 90       	pop	r12
    179a:	bf 90       	pop	r11
    179c:	af 90       	pop	r10
    179e:	9f 90       	pop	r9
    17a0:	8f 90       	pop	r8
    17a2:	7f 90       	pop	r7
    17a4:	6f 90       	pop	r6
    17a6:	5f 90       	pop	r5
    17a8:	08 95       	ret

000017aa <Setup>:
	return 0;
}

// Function Definitions

unsigned char Setup(){
    17aa:	ff 92       	push	r15
    17ac:	0f 93       	push	r16
    17ae:	1f 93       	push	r17
    17b0:	cf 93       	push	r28
    17b2:	df 93       	push	r29
	if (RSTCTRL_RSTFR & RSTCTRL_PORF_bm){Delay(100000);} // Necessary to stabilize IC's on a cold start
    17b4:	80 91 40 00 	lds	r24, 0x0040	; 0x800040 <__TEXT_REGION_LENGTH__+0x7e0040>
    17b8:	80 ff       	sbrs	r24, 0
    17ba:	0a c0       	rjmp	.+20     	; 0x17d0 <Setup+0x26>
    17bc:	20 ea       	ldi	r18, 0xA0	; 160
    17be:	36 e8       	ldi	r19, 0x86	; 134
    17c0:	41 e0       	ldi	r20, 0x01	; 1
    17c2:	50 e0       	ldi	r21, 0x00	; 0
    17c4:	60 e0       	ldi	r22, 0x00	; 0
    17c6:	70 e0       	ldi	r23, 0x00	; 0
    17c8:	80 e0       	ldi	r24, 0x00	; 0
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	0e 94 80 0b 	call	0x1700	; 0x1700 <Delay>
	unsigned char Setup_Bitmask = 0;
	// [7]		[6]		[5]		[4]		[3]		[2]		[1]		[0]
	//					SSD	   LoRa	    MAG		IMU		BAR		GPS
	
	_PROTECTED_WRITE (CLKCTRL_OSCHFCTRLA, CLKCTRL_FRQSEL_24M_gc); // Sets CPU clock to 24 MHz
    17d0:	94 e2       	ldi	r25, 0x24	; 36
    17d2:	88 ed       	ldi	r24, 0xD8	; 216
    17d4:	84 bf       	out	0x34, r24	; 52
    17d6:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
	while(!(CLKCTRL_MCLKSTATUS & CLKCTRL_OSCHFS_bm)); // Wait for clock to stabilize
    17da:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
    17de:	81 ff       	sbrs	r24, 1
    17e0:	fc cf       	rjmp	.-8      	; 0x17da <Setup+0x30>
	unsigned char GPS_setup_status = Setup_GPS();
    17e2:	0e 94 9a 18 	call	0x3134	; 0x3134 <Setup_GPS>
    17e6:	08 2f       	mov	r16, r24
	Setup_SPI();
    17e8:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <Setup_SPI>
	Setup_TWI();
    17ec:	0e 94 39 03 	call	0x672	; 0x672 <Setup_TWI>
	unsigned char LoRa_setup_status = Setup_LoRa();
    17f0:	0e 94 e6 03 	call	0x7cc	; 0x7cc <Setup_LoRa>
    17f4:	f8 2e       	mov	r15, r24
	unsigned char MAG_setup_status = Setup_Mag();
    17f6:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <Setup_Mag>
    17fa:	c8 2f       	mov	r28, r24
	unsigned char IMU_setup_status = Setup_IMU();
    17fc:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <Setup_IMU>
    1800:	d8 2f       	mov	r29, r24
	unsigned char BAR_setup_status = Setup_Bar();
    1802:	0e 94 aa 0c 	call	0x1954	; 0x1954 <Setup_Bar>
    1806:	18 2f       	mov	r17, r24
	unsigned char SSD_setup_status = Setup_SSD();
    1808:	0e 94 03 07 	call	0xe06	; 0xe06 <Setup_SSD>
	Setup_Bitmask |= (GPS_setup_status<<NAV_GPS_bp) | (BAR_setup_status<<NAV_BAR_bp) | (IMU_setup_status<<NAV_IMU_bp) | (MAG_setup_status<<NAV_MAG_bp)
    180c:	61 2f       	mov	r22, r17
    180e:	70 e0       	ldi	r23, 0x00	; 0
    1810:	66 0f       	add	r22, r22
    1812:	77 1f       	adc	r23, r23
    1814:	4d 2f       	mov	r20, r29
    1816:	50 e0       	ldi	r21, 0x00	; 0
    1818:	44 0f       	add	r20, r20
    181a:	55 1f       	adc	r21, r21
    181c:	44 0f       	add	r20, r20
    181e:	55 1f       	adc	r21, r21
    1820:	2c 2f       	mov	r18, r28
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	22 0f       	add	r18, r18
    1826:	33 1f       	adc	r19, r19
    1828:	22 0f       	add	r18, r18
    182a:	33 1f       	adc	r19, r19
    182c:	22 0f       	add	r18, r18
    182e:	33 1f       	adc	r19, r19
					 | (LoRa_setup_status<<NAV_LORA_bp) | (SSD_setup_status<<SU_SSD_bp);
    1830:	90 e1       	ldi	r25, 0x10	; 16
    1832:	f9 9e       	mul	r15, r25
    1834:	f0 01       	movw	r30, r0
    1836:	11 24       	eor	r1, r1
    1838:	a0 e2       	ldi	r26, 0x20	; 32
    183a:	8a 9f       	mul	r24, r26
    183c:	c0 01       	movw	r24, r0
    183e:	11 24       	eor	r1, r1
	unsigned char LoRa_setup_status = Setup_LoRa();
	unsigned char MAG_setup_status = Setup_Mag();
	unsigned char IMU_setup_status = Setup_IMU();
	unsigned char BAR_setup_status = Setup_Bar();
	unsigned char SSD_setup_status = Setup_SSD();
	Setup_Bitmask |= (GPS_setup_status<<NAV_GPS_bp) | (BAR_setup_status<<NAV_BAR_bp) | (IMU_setup_status<<NAV_IMU_bp) | (MAG_setup_status<<NAV_MAG_bp)
    1840:	60 2b       	or	r22, r16
    1842:	46 2b       	or	r20, r22
    1844:	24 2b       	or	r18, r20
    1846:	2e 2b       	or	r18, r30
    1848:	c2 2f       	mov	r28, r18
    184a:	c8 2b       	or	r28, r24
					 | (LoRa_setup_status<<NAV_LORA_bp) | (SSD_setup_status<<SU_SSD_bp);
	Setup_Timers();
    184c:	0e 94 c5 09 	call	0x138a	; 0x138a <Setup_Timers>
	Setup_ADC();
    1850:	0e 94 00 0a 	call	0x1400	; 0x1400 <Setup_ADC>
	sei();
    1854:	78 94       	sei
	return Setup_Bitmask;
}
    1856:	8c 2f       	mov	r24, r28
    1858:	df 91       	pop	r29
    185a:	cf 91       	pop	r28
    185c:	1f 91       	pop	r17
    185e:	0f 91       	pop	r16
    1860:	ff 90       	pop	r15
    1862:	08 95       	ret

00001864 <main>:
volatile unsigned int
	g_esc_current = 0;
volatile unsigned long 
	g_seconds = 0;

int main(){
    1864:	cf 93       	push	r28
	unsigned char Setup_Bitmask = Setup();
    1866:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <Setup>
    186a:	c8 2f       	mov	r28, r24
	if ((Setup_Bitmask & NAV_SENSORS_bm) == NAV_SENSORS_bm){
    186c:	8f 71       	andi	r24, 0x1F	; 31
    186e:	8f 31       	cpi	r24, 0x1F	; 31
    1870:	21 f4       	brne	.+8      	; 0x187a <main+0x16>
		while(1){
			Run(Setup_Bitmask);
    1872:	8c 2f       	mov	r24, r28
    1874:	0e 94 30 0a 	call	0x1460	; 0x1460 <Run>
    1878:	fc cf       	rjmp	.-8      	; 0x1872 <main+0xe>
		}
	}
	
	return 0;
}
    187a:	80 e0       	ldi	r24, 0x00	; 0
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	cf 91       	pop	r28
    1880:	08 95       	ret

00001882 <__vector_5>:
void Delay(unsigned long long length){
	volatile unsigned long long i = 0;
	while (++i<length);
}

ISR(RTC_CNT_vect){
    1882:	1f 92       	push	r1
    1884:	0f 92       	push	r0
    1886:	0f b6       	in	r0, 0x3f	; 63
    1888:	0f 92       	push	r0
    188a:	11 24       	eor	r1, r1
    188c:	8f 93       	push	r24
    188e:	9f 93       	push	r25
    1890:	af 93       	push	r26
    1892:	bf 93       	push	r27
	++g_seconds;
    1894:	80 91 75 4a 	lds	r24, 0x4A75	; 0x804a75 <g_seconds>
    1898:	90 91 76 4a 	lds	r25, 0x4A76	; 0x804a76 <g_seconds+0x1>
    189c:	a0 91 77 4a 	lds	r26, 0x4A77	; 0x804a77 <g_seconds+0x2>
    18a0:	b0 91 78 4a 	lds	r27, 0x4A78	; 0x804a78 <g_seconds+0x3>
    18a4:	01 96       	adiw	r24, 0x01	; 1
    18a6:	a1 1d       	adc	r26, r1
    18a8:	b1 1d       	adc	r27, r1
    18aa:	80 93 75 4a 	sts	0x4A75, r24	; 0x804a75 <g_seconds>
    18ae:	90 93 76 4a 	sts	0x4A76, r25	; 0x804a76 <g_seconds+0x1>
    18b2:	a0 93 77 4a 	sts	0x4A77, r26	; 0x804a77 <g_seconds+0x2>
    18b6:	b0 93 78 4a 	sts	0x4A78, r27	; 0x804a78 <g_seconds+0x3>
	++g_LoRa_Flag;
    18ba:	80 91 7b 4a 	lds	r24, 0x4A7B	; 0x804a7b <g_LoRa_Flag>
    18be:	8f 5f       	subi	r24, 0xFF	; 255
    18c0:	80 93 7b 4a 	sts	0x4A7B, r24	; 0x804a7b <g_LoRa_Flag>
	RTC_INTFLAGS = RTC_CMP_bm;
    18c4:	82 e0       	ldi	r24, 0x02	; 2
    18c6:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x7e0143>
}
    18ca:	bf 91       	pop	r27
    18cc:	af 91       	pop	r26
    18ce:	9f 91       	pop	r25
    18d0:	8f 91       	pop	r24
    18d2:	0f 90       	pop	r0
    18d4:	0f be       	out	0x3f, r0	; 63
    18d6:	0f 90       	pop	r0
    18d8:	1f 90       	pop	r1
    18da:	18 95       	reti

000018dc <__vector_14>:

ISR(TCB0_INT_vect){
    18dc:	1f 92       	push	r1
    18de:	0f 92       	push	r0
    18e0:	0f b6       	in	r0, 0x3f	; 63
    18e2:	0f 92       	push	r0
    18e4:	11 24       	eor	r1, r1
    18e6:	8f 93       	push	r24
	++g_Motor_Run_Flag;
    18e8:	80 91 81 4a 	lds	r24, 0x4A81	; 0x804a81 <g_Motor_Run_Flag>
    18ec:	8f 5f       	subi	r24, 0xFF	; 255
    18ee:	80 93 81 4a 	sts	0x4A81, r24	; 0x804a81 <g_Motor_Run_Flag>
	++g_Print_Flag;
    18f2:	80 91 7d 4a 	lds	r24, 0x4A7D	; 0x804a7d <g_Print_Flag>
    18f6:	8f 5f       	subi	r24, 0xFF	; 255
    18f8:	80 93 7d 4a 	sts	0x4A7D, r24	; 0x804a7d <g_Print_Flag>
	++g_BAR_Read_Flag;
    18fc:	80 91 7f 4a 	lds	r24, 0x4A7F	; 0x804a7f <g_BAR_Read_Flag>
    1900:	8f 5f       	subi	r24, 0xFF	; 255
    1902:	80 93 7f 4a 	sts	0x4A7F, r24	; 0x804a7f <g_BAR_Read_Flag>
	++g_Attitude_Observer_Run_Flag;
    1906:	80 91 7e 4a 	lds	r24, 0x4A7E	; 0x804a7e <g_Attitude_Observer_Run_Flag>
    190a:	8f 5f       	subi	r24, 0xFF	; 255
    190c:	80 93 7e 4a 	sts	0x4A7E, r24	; 0x804a7e <g_Attitude_Observer_Run_Flag>
	++g_MAG_Read_Flag;
    1910:	80 91 80 4a 	lds	r24, 0x4A80	; 0x804a80 <g_MAG_Read_Flag>
    1914:	8f 5f       	subi	r24, 0xFF	; 255
    1916:	80 93 80 4a 	sts	0x4A80, r24	; 0x804a80 <g_MAG_Read_Flag>
	TCB0_INTFLAGS = TCB_CAPT_bm;
    191a:	81 e0       	ldi	r24, 0x01	; 1
    191c:	80 93 06 0b 	sts	0x0B06, r24	; 0x800b06 <__TEXT_REGION_LENGTH__+0x7e0b06>
}
    1920:	8f 91       	pop	r24
    1922:	0f 90       	pop	r0
    1924:	0f be       	out	0x3f, r0	; 63
    1926:	0f 90       	pop	r0
    1928:	1f 90       	pop	r1
    192a:	18 95       	reti

0000192c <__vector_15>:

ISR(TCB1_INT_vect){
    192c:	1f 92       	push	r1
    192e:	0f 92       	push	r0
    1930:	0f b6       	in	r0, 0x3f	; 63
    1932:	0f 92       	push	r0
    1934:	11 24       	eor	r1, r1
    1936:	8f 93       	push	r24
	++g_IMU_Read_Flag;
    1938:	80 91 7c 4a 	lds	r24, 0x4A7C	; 0x804a7c <g_IMU_Read_Flag>
    193c:	8f 5f       	subi	r24, 0xFF	; 255
    193e:	80 93 7c 4a 	sts	0x4A7C, r24	; 0x804a7c <g_IMU_Read_Flag>
	TCB1_INTFLAGS = TCB_CAPT_bm;
    1942:	81 e0       	ldi	r24, 0x01	; 1
    1944:	80 93 16 0b 	sts	0x0B16, r24	; 0x800b16 <__TEXT_REGION_LENGTH__+0x7e0b16>
    1948:	8f 91       	pop	r24
    194a:	0f 90       	pop	r0
    194c:	0f be       	out	0x3f, r0	; 63
    194e:	0f 90       	pop	r0
    1950:	1f 90       	pop	r1
    1952:	18 95       	reti

00001954 <Setup_Bar>:
#include "main.h"
// BAROMETER CODE
// Bar -> 0 is a write, 1 is a read

unsigned char Setup_Bar(){
    1954:	0f 93       	push	r16
    1956:	1f 93       	push	r17
    1958:	cf 93       	push	r28
    195a:	df 93       	push	r29
    195c:	1f 92       	push	r1
    195e:	cd b7       	in	r28, 0x3d	; 61
    1960:	de b7       	in	r29, 0x3e	; 62
	unsigned char BAR_ID = 0;
    1962:	19 82       	std	Y+1, r1	; 0x01
	unsigned char BAR_status = 2;
	
	BAR_status &= Read_SPI(PORT_BAR,CS_BAR,(BAR_WHO_AM_I|0x80),&BAR_ID,1);
    1964:	01 e0       	ldi	r16, 0x01	; 1
    1966:	9e 01       	movw	r18, r28
    1968:	2f 5f       	subi	r18, 0xFF	; 255
    196a:	3f 4f       	sbci	r19, 0xFF	; 255
    196c:	4f e8       	ldi	r20, 0x8F	; 143
    196e:	67 e0       	ldi	r22, 0x07	; 7
    1970:	81 e4       	ldi	r24, 0x41	; 65
    1972:	0e 94 0f 02 	call	0x41e	; 0x41e <Read_SPI>
    1976:	18 2f       	mov	r17, r24
    1978:	12 70       	andi	r17, 0x02	; 2
	BAR_status &= Write_SPI(PORT_BAR,CS_BAR,BAR_IF_CTRL,0b00000111); // Disables unused interfaces
    197a:	27 e0       	ldi	r18, 0x07	; 7
    197c:	4e e0       	ldi	r20, 0x0E	; 14
    197e:	67 e0       	ldi	r22, 0x07	; 7
    1980:	81 e4       	ldi	r24, 0x41	; 65
    1982:	0e 94 af 02 	call	0x55e	; 0x55e <Write_SPI>
    1986:	18 23       	and	r17, r24
	BAR_status &= Write_SPI(PORT_BAR,CS_BAR,BAR_CTRL_REG1,0b01011100); // Sets ODR to 75Hz, enables LPF
    1988:	2c e5       	ldi	r18, 0x5C	; 92
    198a:	40 e1       	ldi	r20, 0x10	; 16
    198c:	67 e0       	ldi	r22, 0x07	; 7
    198e:	81 e4       	ldi	r24, 0x41	; 65
    1990:	0e 94 af 02 	call	0x55e	; 0x55e <Write_SPI>
    1994:	18 23       	and	r17, r24
	BAR_status &= Write_SPI(PORT_BAR,CS_BAR,BAR_CTRL_REG2,0b00010010); // Enables low noise mode, maximum ODR for this mode is 75 Hz
    1996:	22 e1       	ldi	r18, 0x12	; 18
    1998:	41 e1       	ldi	r20, 0x11	; 17
    199a:	67 e0       	ldi	r22, 0x07	; 7
    199c:	81 e4       	ldi	r24, 0x41	; 65
    199e:	0e 94 af 02 	call	0x55e	; 0x55e <Write_SPI>
    19a2:	81 23       	and	r24, r17
	
	if (BAR_status != 2){return 0;}
    19a4:	82 30       	cpi	r24, 0x02	; 2
    19a6:	11 f0       	breq	.+4      	; 0x19ac <Setup_Bar+0x58>
    19a8:	80 e0       	ldi	r24, 0x00	; 0
    19aa:	01 c0       	rjmp	.+2      	; 0x19ae <Setup_Bar+0x5a>
	return 1;
    19ac:	81 e0       	ldi	r24, 0x01	; 1
}
    19ae:	0f 90       	pop	r0
    19b0:	df 91       	pop	r29
    19b2:	cf 91       	pop	r28
    19b4:	1f 91       	pop	r17
    19b6:	0f 91       	pop	r16
    19b8:	08 95       	ret

000019ba <Height_Bar>:

float Height_Bar(unsigned long pressure_LSB){
	const float c1 = BAR_TB/BAR_LB;
	const float c2 = (-BAR_R*BAR_LB)/(BAR_G*BAR_M);
	
	float pressure_Pa = ((float)pressure_LSB)*BAR_SENS;
    19ba:	0e 94 ed 1e 	call	0x3dda	; 0x3dda <__floatunsisf>
    19be:	2a e0       	ldi	r18, 0x0A	; 10
    19c0:	37 ed       	ldi	r19, 0xD7	; 215
    19c2:	43 e2       	ldi	r20, 0x23	; 35
    19c4:	52 e4       	ldi	r21, 0x42	; 66
    19c6:	0e 94 45 1e 	call	0x3c8a	; 0x3c8a <__divsf3>
	float height = c1*(pow(pressure_Pa/BAR_PB,c2)-1.0);
    19ca:	20 e8       	ldi	r18, 0x80	; 128
    19cc:	36 ee       	ldi	r19, 0xE6	; 230
    19ce:	45 ec       	ldi	r20, 0xC5	; 197
    19d0:	57 e4       	ldi	r21, 0x47	; 71
    19d2:	0e 94 45 1e 	call	0x3c8a	; 0x3c8a <__divsf3>
    19d6:	2f e1       	ldi	r18, 0x1F	; 31
    19d8:	35 ed       	ldi	r19, 0xD5	; 213
    19da:	42 e4       	ldi	r20, 0x42	; 66
    19dc:	5e e3       	ldi	r21, 0x3E	; 62
    19de:	0e 94 7f 20 	call	0x40fe	; 0x40fe <pow>
    19e2:	20 e0       	ldi	r18, 0x00	; 0
    19e4:	30 e0       	ldi	r19, 0x00	; 0
    19e6:	40 e8       	ldi	r20, 0x80	; 128
    19e8:	5f e3       	ldi	r21, 0x3F	; 63
    19ea:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <__subsf3>
    19ee:	24 ec       	ldi	r18, 0xC4	; 196
    19f0:	3a e2       	ldi	r19, 0x2A	; 42
    19f2:	4d e2       	ldi	r20, 0x2D	; 45
    19f4:	57 ec       	ldi	r21, 0xC7	; 199
    19f6:	0e 94 12 20 	call	0x4024	; 0x4024 <__mulsf3>
	return height;
}
    19fa:	08 95       	ret

000019fc <Read_Bar>:
	
	if (BAR_status != 2){return 0;}
	return 1;
}

unsigned char Read_Bar(States *Drone){
    19fc:	ef 92       	push	r14
    19fe:	ff 92       	push	r15
    1a00:	0f 93       	push	r16
    1a02:	1f 93       	push	r17
    1a04:	cf 93       	push	r28
    1a06:	df 93       	push	r29
    1a08:	cd b7       	in	r28, 0x3d	; 61
    1a0a:	de b7       	in	r29, 0x3e	; 62
    1a0c:	27 97       	sbiw	r28, 0x07	; 7
    1a0e:	cd bf       	out	0x3d, r28	; 61
    1a10:	de bf       	out	0x3e, r29	; 62
    1a12:	7c 01       	movw	r14, r24
	static unsigned long pressure_window[BAR_WINDOW_SIZE];
	static unsigned char window_counter;
	unsigned char Read_status = 0;
	unsigned char Data[3] = {0};
    1a14:	19 82       	std	Y+1, r1	; 0x01
    1a16:	1a 82       	std	Y+2, r1	; 0x02
    1a18:	1b 82       	std	Y+3, r1	; 0x03
	Read_status = Read_SPI(PORT_BAR, CS_BAR, (BAR_DATA_START|0x80), Data, sizeof(Data));
    1a1a:	03 e0       	ldi	r16, 0x03	; 3
    1a1c:	9e 01       	movw	r18, r28
    1a1e:	2f 5f       	subi	r18, 0xFF	; 255
    1a20:	3f 4f       	sbci	r19, 0xFF	; 255
    1a22:	48 ea       	ldi	r20, 0xA8	; 168
    1a24:	67 e0       	ldi	r22, 0x07	; 7
    1a26:	81 e4       	ldi	r24, 0x41	; 65
    1a28:	0e 94 0f 02 	call	0x41e	; 0x41e <Read_SPI>
	
	if (Read_status != 2){return 0;}
    1a2c:	82 30       	cpi	r24, 0x02	; 2
    1a2e:	09 f0       	breq	.+2      	; 0x1a32 <Read_Bar+0x36>
    1a30:	68 c0       	rjmp	.+208    	; 0x1b02 <Read_Bar+0x106>
	
	unsigned long pressure_LSB = (((unsigned long)Data[2])<<16);
    1a32:	8b 81       	ldd	r24, Y+3	; 0x03
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	a0 e0       	ldi	r26, 0x00	; 0
    1a38:	b0 e0       	ldi	r27, 0x00	; 0
    1a3a:	dc 01       	movw	r26, r24
    1a3c:	99 27       	eor	r25, r25
    1a3e:	88 27       	eor	r24, r24
	pressure_LSB += (((unsigned int)Data[1])<<8);
    1a40:	2a 81       	ldd	r18, Y+2	; 0x02
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	32 2f       	mov	r19, r18
    1a46:	22 27       	eor	r18, r18
    1a48:	82 0f       	add	r24, r18
    1a4a:	93 1f       	adc	r25, r19
    1a4c:	a1 1d       	adc	r26, r1
    1a4e:	b1 1d       	adc	r27, r1
	pressure_LSB += Data[0];
    1a50:	29 81       	ldd	r18, Y+1	; 0x01
    1a52:	82 0f       	add	r24, r18
    1a54:	91 1d       	adc	r25, r1
    1a56:	a1 1d       	adc	r26, r1
    1a58:	b1 1d       	adc	r27, r1
	
	pressure_window[window_counter++] = pressure_LSB;
    1a5a:	e0 91 cc 4b 	lds	r30, 0x4BCC	; 0x804bcc <window_counter.4843>
    1a5e:	21 e0       	ldi	r18, 0x01	; 1
    1a60:	2e 0f       	add	r18, r30
    1a62:	20 93 cc 4b 	sts	0x4BCC, r18	; 0x804bcc <window_counter.4843>
    1a66:	f0 e0       	ldi	r31, 0x00	; 0
    1a68:	ee 0f       	add	r30, r30
    1a6a:	ff 1f       	adc	r31, r31
    1a6c:	ee 0f       	add	r30, r30
    1a6e:	ff 1f       	adc	r31, r31
    1a70:	e4 57       	subi	r30, 0x74	; 116
    1a72:	f4 4b       	sbci	r31, 0xB4	; 180
    1a74:	80 83       	st	Z, r24
    1a76:	91 83       	std	Z+1, r25	; 0x01
    1a78:	a2 83       	std	Z+2, r26	; 0x02
    1a7a:	b3 83       	std	Z+3, r27	; 0x03
	
	if (window_counter >= BAR_WINDOW_SIZE){
    1a7c:	20 31       	cpi	r18, 0x10	; 16
    1a7e:	08 f4       	brcc	.+2      	; 0x1a82 <Read_Bar+0x86>
    1a80:	42 c0       	rjmp	.+132    	; 0x1b06 <Read_Bar+0x10a>
		volatile unsigned long pressure_oversampled = 0;
    1a82:	1c 82       	std	Y+4, r1	; 0x04
    1a84:	1d 82       	std	Y+5, r1	; 0x05
    1a86:	1e 82       	std	Y+6, r1	; 0x06
    1a88:	1f 82       	std	Y+7, r1	; 0x07
		for (unsigned char i=0;i<BAR_WINDOW_SIZE;i++){
    1a8a:	80 e0       	ldi	r24, 0x00	; 0
    1a8c:	19 c0       	rjmp	.+50     	; 0x1ac0 <Read_Bar+0xc4>
			pressure_oversampled += pressure_window[i];
    1a8e:	e8 2f       	mov	r30, r24
    1a90:	f0 e0       	ldi	r31, 0x00	; 0
    1a92:	ee 0f       	add	r30, r30
    1a94:	ff 1f       	adc	r31, r31
    1a96:	ee 0f       	add	r30, r30
    1a98:	ff 1f       	adc	r31, r31
    1a9a:	e4 57       	subi	r30, 0x74	; 116
    1a9c:	f4 4b       	sbci	r31, 0xB4	; 180
    1a9e:	00 81       	ld	r16, Z
    1aa0:	11 81       	ldd	r17, Z+1	; 0x01
    1aa2:	22 81       	ldd	r18, Z+2	; 0x02
    1aa4:	33 81       	ldd	r19, Z+3	; 0x03
    1aa6:	4c 81       	ldd	r20, Y+4	; 0x04
    1aa8:	5d 81       	ldd	r21, Y+5	; 0x05
    1aaa:	6e 81       	ldd	r22, Y+6	; 0x06
    1aac:	7f 81       	ldd	r23, Y+7	; 0x07
    1aae:	40 0f       	add	r20, r16
    1ab0:	51 1f       	adc	r21, r17
    1ab2:	62 1f       	adc	r22, r18
    1ab4:	73 1f       	adc	r23, r19
    1ab6:	4c 83       	std	Y+4, r20	; 0x04
    1ab8:	5d 83       	std	Y+5, r21	; 0x05
    1aba:	6e 83       	std	Y+6, r22	; 0x06
    1abc:	7f 83       	std	Y+7, r23	; 0x07
	
	pressure_window[window_counter++] = pressure_LSB;
	
	if (window_counter >= BAR_WINDOW_SIZE){
		volatile unsigned long pressure_oversampled = 0;
		for (unsigned char i=0;i<BAR_WINDOW_SIZE;i++){
    1abe:	8f 5f       	subi	r24, 0xFF	; 255
    1ac0:	80 31       	cpi	r24, 0x10	; 16
    1ac2:	28 f3       	brcs	.-54     	; 0x1a8e <Read_Bar+0x92>
			pressure_oversampled += pressure_window[i];
		}
		pressure_oversampled >>= 4;
    1ac4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ac6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ac8:	ae 81       	ldd	r26, Y+6	; 0x06
    1aca:	bf 81       	ldd	r27, Y+7	; 0x07
    1acc:	68 94       	set
    1ace:	13 f8       	bld	r1, 3
    1ad0:	b6 95       	lsr	r27
    1ad2:	a7 95       	ror	r26
    1ad4:	97 95       	ror	r25
    1ad6:	87 95       	ror	r24
    1ad8:	16 94       	lsr	r1
    1ada:	d1 f7       	brne	.-12     	; 0x1ad0 <Read_Bar+0xd4>
    1adc:	8c 83       	std	Y+4, r24	; 0x04
    1ade:	9d 83       	std	Y+5, r25	; 0x05
    1ae0:	ae 83       	std	Y+6, r26	; 0x06
    1ae2:	bf 83       	std	Y+7, r27	; 0x07
		Drone->pressure_altitude = Height_Bar(pressure_oversampled);
    1ae4:	6c 81       	ldd	r22, Y+4	; 0x04
    1ae6:	7d 81       	ldd	r23, Y+5	; 0x05
    1ae8:	8e 81       	ldd	r24, Y+6	; 0x06
    1aea:	9f 81       	ldd	r25, Y+7	; 0x07
    1aec:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <Height_Bar>
    1af0:	f7 01       	movw	r30, r14
    1af2:	60 ab       	std	Z+48, r22	; 0x30
    1af4:	71 ab       	std	Z+49, r23	; 0x31
    1af6:	82 ab       	std	Z+50, r24	; 0x32
    1af8:	93 ab       	std	Z+51, r25	; 0x33
		window_counter = 0;
    1afa:	10 92 cc 4b 	sts	0x4BCC, r1	; 0x804bcc <window_counter.4843>
	}
	
	return 1;
    1afe:	81 e0       	ldi	r24, 0x01	; 1
    1b00:	03 c0       	rjmp	.+6      	; 0x1b08 <Read_Bar+0x10c>
	static unsigned char window_counter;
	unsigned char Read_status = 0;
	unsigned char Data[3] = {0};
	Read_status = Read_SPI(PORT_BAR, CS_BAR, (BAR_DATA_START|0x80), Data, sizeof(Data));
	
	if (Read_status != 2){return 0;}
    1b02:	80 e0       	ldi	r24, 0x00	; 0
    1b04:	01 c0       	rjmp	.+2      	; 0x1b08 <Read_Bar+0x10c>
		pressure_oversampled >>= 4;
		Drone->pressure_altitude = Height_Bar(pressure_oversampled);
		window_counter = 0;
	}
	
	return 1;
    1b06:	81 e0       	ldi	r24, 0x01	; 1
}
    1b08:	27 96       	adiw	r28, 0x07	; 7
    1b0a:	cd bf       	out	0x3d, r28	; 61
    1b0c:	de bf       	out	0x3e, r29	; 62
    1b0e:	df 91       	pop	r29
    1b10:	cf 91       	pop	r28
    1b12:	1f 91       	pop	r17
    1b14:	0f 91       	pop	r16
    1b16:	ff 90       	pop	r15
    1b18:	ef 90       	pop	r14
    1b1a:	08 95       	ret

00001b1c <Setup_IMU>:
	float height = c1*(pow(pressure_Pa/BAR_PB,c2)-1.0);
	return height;
}
// IMU CODE
// IMU -> 0 is a write, 1 is a read
unsigned char Setup_IMU(){
    1b1c:	0f 93       	push	r16
    1b1e:	1f 93       	push	r17
    1b20:	cf 93       	push	r28
    1b22:	df 93       	push	r29
    1b24:	1f 92       	push	r1
    1b26:	cd b7       	in	r28, 0x3d	; 61
    1b28:	de b7       	in	r29, 0x3e	; 62
	// Configure IMU
	unsigned char IMU_status = 2;
	unsigned char IMU_ID = 0;
    1b2a:	19 82       	std	Y+1, r1	; 0x01
	
	IMU_status &= Read_SPI(PORT_IMU, CS_IMU, (IMU_WHO_AM_I|0x80), &IMU_ID, 1);
    1b2c:	01 e0       	ldi	r16, 0x01	; 1
    1b2e:	9e 01       	movw	r18, r28
    1b30:	2f 5f       	subi	r18, 0xFF	; 255
    1b32:	3f 4f       	sbci	r19, 0xFF	; 255
    1b34:	4f e8       	ldi	r20, 0x8F	; 143
    1b36:	66 e0       	ldi	r22, 0x06	; 6
    1b38:	81 e4       	ldi	r24, 0x41	; 65
    1b3a:	0e 94 0f 02 	call	0x41e	; 0x41e <Read_SPI>
    1b3e:	18 2f       	mov	r17, r24
    1b40:	12 70       	andi	r17, 0x02	; 2
	IMU_status &= Write_SPI(PORT_IMU, CS_IMU, IMU_CTRL1_XL, 0b01010000); // Sets Accelerometer ODR to 208 Hz, range to +-2g
    1b42:	20 e5       	ldi	r18, 0x50	; 80
    1b44:	40 e1       	ldi	r20, 0x10	; 16
    1b46:	66 e0       	ldi	r22, 0x06	; 6
    1b48:	81 e4       	ldi	r24, 0x41	; 65
    1b4a:	0e 94 af 02 	call	0x55e	; 0x55e <Write_SPI>
    1b4e:	18 23       	and	r17, r24
	IMU_status &= Write_SPI(PORT_IMU, CS_IMU, IMU_CTRL2_G, 0b01010100); // Sets Gyro ODR to 208 Hz, range to +-500dps
    1b50:	24 e5       	ldi	r18, 0x54	; 84
    1b52:	41 e1       	ldi	r20, 0x11	; 17
    1b54:	66 e0       	ldi	r22, 0x06	; 6
    1b56:	81 e4       	ldi	r24, 0x41	; 65
    1b58:	0e 94 af 02 	call	0x55e	; 0x55e <Write_SPI>
    1b5c:	18 23       	and	r17, r24
	IMU_status &= Write_SPI(PORT_IMU, CS_IMU, IMU_CTRL8_XL, 0b11001000); // Sets Accelerometer LPF to ODR/9, low noise
    1b5e:	28 ec       	ldi	r18, 0xC8	; 200
    1b60:	47 e1       	ldi	r20, 0x17	; 23
    1b62:	66 e0       	ldi	r22, 0x06	; 6
    1b64:	81 e4       	ldi	r24, 0x41	; 65
    1b66:	0e 94 af 02 	call	0x55e	; 0x55e <Write_SPI>
    1b6a:	81 23       	and	r24, r17
	
	if(IMU_status != 2){return 0;}
    1b6c:	82 30       	cpi	r24, 0x02	; 2
    1b6e:	11 f0       	breq	.+4      	; 0x1b74 <Setup_IMU+0x58>
    1b70:	80 e0       	ldi	r24, 0x00	; 0
    1b72:	01 c0       	rjmp	.+2      	; 0x1b76 <Setup_IMU+0x5a>
	return 1;
    1b74:	81 e0       	ldi	r24, 0x01	; 1
}
    1b76:	0f 90       	pop	r0
    1b78:	df 91       	pop	r29
    1b7a:	cf 91       	pop	r28
    1b7c:	1f 91       	pop	r17
    1b7e:	0f 91       	pop	r16
    1b80:	08 95       	ret

00001b82 <Read_IMU>:

unsigned char Read_IMU(States *Drone){
    1b82:	8f 92       	push	r8
    1b84:	9f 92       	push	r9
    1b86:	af 92       	push	r10
    1b88:	bf 92       	push	r11
    1b8a:	ef 92       	push	r14
    1b8c:	ff 92       	push	r15
    1b8e:	0f 93       	push	r16
    1b90:	1f 93       	push	r17
    1b92:	cf 93       	push	r28
    1b94:	df 93       	push	r29
    1b96:	cd b7       	in	r28, 0x3d	; 61
    1b98:	de b7       	in	r29, 0x3e	; 62
    1b9a:	aa 97       	sbiw	r28, 0x2a	; 42
    1b9c:	cd bf       	out	0x3d, r28	; 61
    1b9e:	de bf       	out	0x3e, r29	; 62
    1ba0:	7c 01       	movw	r14, r24
		w_xyz_window[3][IMU_WINDOW_SIZE],
		w_bias[3];
	static unsigned char window_counter = 0;
	unsigned char Read_status = 0;
	
	unsigned char Data[12] = {0};
    1ba2:	9e 01       	movw	r18, r28
    1ba4:	2f 5f       	subi	r18, 0xFF	; 255
    1ba6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ba8:	8c e0       	ldi	r24, 0x0C	; 12
    1baa:	d9 01       	movw	r26, r18
    1bac:	1d 92       	st	X+, r1
    1bae:	8a 95       	dec	r24
    1bb0:	e9 f7       	brne	.-6      	; 0x1bac <Read_IMU+0x2a>
	Read_status = Read_SPI(PORT_IMU, CS_IMU, (IMU_DATA_START|0x80), Data, sizeof(Data));
    1bb2:	0c e0       	ldi	r16, 0x0C	; 12
    1bb4:	42 ea       	ldi	r20, 0xA2	; 162
    1bb6:	66 e0       	ldi	r22, 0x06	; 6
    1bb8:	81 e4       	ldi	r24, 0x41	; 65
    1bba:	0e 94 0f 02 	call	0x41e	; 0x41e <Read_SPI>
	if (Read_status != 2){return 0;}
    1bbe:	82 30       	cpi	r24, 0x02	; 2
    1bc0:	09 f0       	breq	.+2      	; 0x1bc4 <Read_IMU+0x42>
    1bc2:	aa c1       	rjmp	.+852    	; 0x1f18 <Read_IMU+0x396>
    1bc4:	60 e0       	ldi	r22, 0x00	; 0
    1bc6:	43 c0       	rjmp	.+134    	; 0x1c4e <Read_IMU+0xcc>
	
	for (unsigned char i=0;i<3;i++){
		a_xyz_window[i][window_counter] = (((signed int)Data[2*i+7])<<8) + Data[2*i+6];
    1bc8:	70 91 8b 4b 	lds	r23, 0x4B8B	; 0x804b8b <window_counter.4869>
    1bcc:	86 2f       	mov	r24, r22
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	ac 01       	movw	r20, r24
    1bd2:	44 0f       	add	r20, r20
    1bd4:	55 1f       	adc	r21, r21
    1bd6:	fa 01       	movw	r30, r20
    1bd8:	37 96       	adiw	r30, 0x07	; 7
    1bda:	21 e0       	ldi	r18, 0x01	; 1
    1bdc:	30 e0       	ldi	r19, 0x00	; 0
    1bde:	2c 0f       	add	r18, r28
    1be0:	3d 1f       	adc	r19, r29
    1be2:	e2 0f       	add	r30, r18
    1be4:	f3 1f       	adc	r31, r19
    1be6:	20 81       	ld	r18, Z
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	32 2f       	mov	r19, r18
    1bec:	22 27       	eor	r18, r18
    1bee:	fc 01       	movw	r30, r24
    1bf0:	33 96       	adiw	r30, 0x03	; 3
    1bf2:	ee 0f       	add	r30, r30
    1bf4:	ff 1f       	adc	r31, r31
    1bf6:	a1 e0       	ldi	r26, 0x01	; 1
    1bf8:	b0 e0       	ldi	r27, 0x00	; 0
    1bfa:	ac 0f       	add	r26, r28
    1bfc:	bd 1f       	adc	r27, r29
    1bfe:	ea 0f       	add	r30, r26
    1c00:	fb 1f       	adc	r31, r27
    1c02:	e0 81       	ld	r30, Z
    1c04:	2e 0f       	add	r18, r30
    1c06:	31 1d       	adc	r19, r1
    1c08:	88 0f       	add	r24, r24
    1c0a:	99 1f       	adc	r25, r25
    1c0c:	88 0f       	add	r24, r24
    1c0e:	99 1f       	adc	r25, r25
    1c10:	88 0f       	add	r24, r24
    1c12:	99 1f       	adc	r25, r25
    1c14:	87 0f       	add	r24, r23
    1c16:	91 1d       	adc	r25, r1
    1c18:	88 0f       	add	r24, r24
    1c1a:	99 1f       	adc	r25, r25
    1c1c:	fc 01       	movw	r30, r24
    1c1e:	e5 5a       	subi	r30, 0xA5	; 165
    1c20:	f4 4b       	sbci	r31, 0xB4	; 180
    1c22:	20 83       	st	Z, r18
    1c24:	31 83       	std	Z+1, r19	; 0x01
		w_xyz_window[i][window_counter] = (((signed int)Data[2*i+1])<<8) + Data[2*i];
    1c26:	fa 01       	movw	r30, r20
    1c28:	31 96       	adiw	r30, 0x01	; 1
    1c2a:	ea 0f       	add	r30, r26
    1c2c:	fb 1f       	adc	r31, r27
    1c2e:	20 81       	ld	r18, Z
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	32 2f       	mov	r19, r18
    1c34:	22 27       	eor	r18, r18
    1c36:	fd 01       	movw	r30, r26
    1c38:	e4 0f       	add	r30, r20
    1c3a:	f5 1f       	adc	r31, r21
    1c3c:	40 81       	ld	r20, Z
    1c3e:	24 0f       	add	r18, r20
    1c40:	31 1d       	adc	r19, r1
    1c42:	fc 01       	movw	r30, r24
    1c44:	e5 5d       	subi	r30, 0xD5	; 213
    1c46:	f4 4b       	sbci	r31, 0xB4	; 180
    1c48:	20 83       	st	Z, r18
    1c4a:	31 83       	std	Z+1, r19	; 0x01
	
	unsigned char Data[12] = {0};
	Read_status = Read_SPI(PORT_IMU, CS_IMU, (IMU_DATA_START|0x80), Data, sizeof(Data));
	if (Read_status != 2){return 0;}
	
	for (unsigned char i=0;i<3;i++){
    1c4c:	6f 5f       	subi	r22, 0xFF	; 255
    1c4e:	63 30       	cpi	r22, 0x03	; 3
    1c50:	08 f4       	brcc	.+2      	; 0x1c54 <Read_IMU+0xd2>
    1c52:	ba cf       	rjmp	.-140    	; 0x1bc8 <Read_IMU+0x46>
		a_xyz_window[i][window_counter] = (((signed int)Data[2*i+7])<<8) + Data[2*i+6];
		w_xyz_window[i][window_counter] = (((signed int)Data[2*i+1])<<8) + Data[2*i];
	}
	window_counter++;
    1c54:	80 91 8b 4b 	lds	r24, 0x4B8B	; 0x804b8b <window_counter.4869>
    1c58:	8f 5f       	subi	r24, 0xFF	; 255
    1c5a:	80 93 8b 4b 	sts	0x4B8B, r24	; 0x804b8b <window_counter.4869>
	
	if (window_counter >= IMU_WINDOW_SIZE){
    1c5e:	88 30       	cpi	r24, 0x08	; 8
    1c60:	08 f4       	brcc	.+2      	; 0x1c64 <Read_IMU+0xe2>
    1c62:	5c c1       	rjmp	.+696    	; 0x1f1c <Read_IMU+0x39a>
		window_counter = 0;
    1c64:	10 92 8b 4b 	sts	0x4B8B, r1	; 0x804b8b <window_counter.4869>
		volatile signed long a_xyz_FIR[3] = {0};
    1c68:	8c e0       	ldi	r24, 0x0C	; 12
    1c6a:	fe 01       	movw	r30, r28
    1c6c:	79 96       	adiw	r30, 0x19	; 25
    1c6e:	df 01       	movw	r26, r30
    1c70:	28 2f       	mov	r18, r24
    1c72:	1d 92       	st	X+, r1
    1c74:	2a 95       	dec	r18
    1c76:	e9 f7       	brne	.-6      	; 0x1c72 <Read_IMU+0xf0>
		volatile signed long w_xyz_FIR[3] = {0};
    1c78:	3c 97       	sbiw	r30, 0x0c	; 12
    1c7a:	df 01       	movw	r26, r30
    1c7c:	1d 92       	st	X+, r1
    1c7e:	8a 95       	dec	r24
    1c80:	e9 f7       	brne	.-6      	; 0x1c7c <Read_IMU+0xfa>
		for (unsigned char i=0;i<3;i++){
    1c82:	30 e0       	ldi	r19, 0x00	; 0
    1c84:	74 c0       	rjmp	.+232    	; 0x1d6e <Read_IMU+0x1ec>
			for (unsigned char j=0;j<IMU_WINDOW_SIZE;j++){
				a_xyz_FIR[i] += a_xyz_window[i][j];
    1c86:	83 2f       	mov	r24, r19
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	fc 01       	movw	r30, r24
    1c8c:	ee 0f       	add	r30, r30
    1c8e:	ff 1f       	adc	r31, r31
    1c90:	ee 0f       	add	r30, r30
    1c92:	ff 1f       	adc	r31, r31
    1c94:	41 e0       	ldi	r20, 0x01	; 1
    1c96:	50 e0       	ldi	r21, 0x00	; 0
    1c98:	4c 0f       	add	r20, r28
    1c9a:	5d 1f       	adc	r21, r29
    1c9c:	e4 0f       	add	r30, r20
    1c9e:	f5 1f       	adc	r31, r21
    1ca0:	80 8c       	ldd	r8, Z+24	; 0x18
    1ca2:	91 8c       	ldd	r9, Z+25	; 0x19
    1ca4:	a2 8c       	ldd	r10, Z+26	; 0x1a
    1ca6:	b3 8c       	ldd	r11, Z+27	; 0x1b
    1ca8:	88 0f       	add	r24, r24
    1caa:	99 1f       	adc	r25, r25
    1cac:	88 0f       	add	r24, r24
    1cae:	99 1f       	adc	r25, r25
    1cb0:	88 0f       	add	r24, r24
    1cb2:	99 1f       	adc	r25, r25
    1cb4:	82 0f       	add	r24, r18
    1cb6:	91 1d       	adc	r25, r1
    1cb8:	88 0f       	add	r24, r24
    1cba:	99 1f       	adc	r25, r25
    1cbc:	dc 01       	movw	r26, r24
    1cbe:	a5 5a       	subi	r26, 0xA5	; 165
    1cc0:	b4 4b       	sbci	r27, 0xB4	; 180
    1cc2:	4d 91       	ld	r20, X+
    1cc4:	5c 91       	ld	r21, X
    1cc6:	05 2e       	mov	r0, r21
    1cc8:	00 0c       	add	r0, r0
    1cca:	66 0b       	sbc	r22, r22
    1ccc:	77 0b       	sbc	r23, r23
    1cce:	48 0d       	add	r20, r8
    1cd0:	59 1d       	adc	r21, r9
    1cd2:	6a 1d       	adc	r22, r10
    1cd4:	7b 1d       	adc	r23, r11
    1cd6:	40 8f       	std	Z+24, r20	; 0x18
    1cd8:	51 8f       	std	Z+25, r21	; 0x19
    1cda:	62 8f       	std	Z+26, r22	; 0x1a
    1cdc:	73 8f       	std	Z+27, r23	; 0x1b
				w_xyz_FIR[i] += w_xyz_window[i][j];
    1cde:	44 85       	ldd	r20, Z+12	; 0x0c
    1ce0:	55 85       	ldd	r21, Z+13	; 0x0d
    1ce2:	66 85       	ldd	r22, Z+14	; 0x0e
    1ce4:	77 85       	ldd	r23, Z+15	; 0x0f
    1ce6:	dc 01       	movw	r26, r24
    1ce8:	a5 5d       	subi	r26, 0xD5	; 213
    1cea:	b4 4b       	sbci	r27, 0xB4	; 180
    1cec:	8d 91       	ld	r24, X+
    1cee:	9c 91       	ld	r25, X
    1cf0:	09 2e       	mov	r0, r25
    1cf2:	00 0c       	add	r0, r0
    1cf4:	aa 0b       	sbc	r26, r26
    1cf6:	bb 0b       	sbc	r27, r27
    1cf8:	84 0f       	add	r24, r20
    1cfa:	95 1f       	adc	r25, r21
    1cfc:	a6 1f       	adc	r26, r22
    1cfe:	b7 1f       	adc	r27, r23
    1d00:	84 87       	std	Z+12, r24	; 0x0c
    1d02:	95 87       	std	Z+13, r25	; 0x0d
    1d04:	a6 87       	std	Z+14, r26	; 0x0e
    1d06:	b7 87       	std	Z+15, r27	; 0x0f
	if (window_counter >= IMU_WINDOW_SIZE){
		window_counter = 0;
		volatile signed long a_xyz_FIR[3] = {0};
		volatile signed long w_xyz_FIR[3] = {0};
		for (unsigned char i=0;i<3;i++){
			for (unsigned char j=0;j<IMU_WINDOW_SIZE;j++){
    1d08:	2f 5f       	subi	r18, 0xFF	; 255
    1d0a:	01 c0       	rjmp	.+2      	; 0x1d0e <Read_IMU+0x18c>
    1d0c:	20 e0       	ldi	r18, 0x00	; 0
    1d0e:	28 30       	cpi	r18, 0x08	; 8
    1d10:	08 f4       	brcc	.+2      	; 0x1d14 <Read_IMU+0x192>
    1d12:	b9 cf       	rjmp	.-142    	; 0x1c86 <Read_IMU+0x104>
				a_xyz_FIR[i] += a_xyz_window[i][j];
				w_xyz_FIR[i] += w_xyz_window[i][j];
			}
			a_xyz_FIR[i] >>= 3;
    1d14:	e3 2f       	mov	r30, r19
    1d16:	f0 e0       	ldi	r31, 0x00	; 0
    1d18:	ee 0f       	add	r30, r30
    1d1a:	ff 1f       	adc	r31, r31
    1d1c:	ee 0f       	add	r30, r30
    1d1e:	ff 1f       	adc	r31, r31
    1d20:	81 e0       	ldi	r24, 0x01	; 1
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	8c 0f       	add	r24, r28
    1d26:	9d 1f       	adc	r25, r29
    1d28:	e8 0f       	add	r30, r24
    1d2a:	f9 1f       	adc	r31, r25
    1d2c:	80 8d       	ldd	r24, Z+24	; 0x18
    1d2e:	91 8d       	ldd	r25, Z+25	; 0x19
    1d30:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1d32:	b3 8d       	ldd	r27, Z+27	; 0x1b
    1d34:	68 94       	set
    1d36:	12 f8       	bld	r1, 2
    1d38:	b5 95       	asr	r27
    1d3a:	a7 95       	ror	r26
    1d3c:	97 95       	ror	r25
    1d3e:	87 95       	ror	r24
    1d40:	16 94       	lsr	r1
    1d42:	d1 f7       	brne	.-12     	; 0x1d38 <Read_IMU+0x1b6>
    1d44:	80 8f       	std	Z+24, r24	; 0x18
    1d46:	91 8f       	std	Z+25, r25	; 0x19
    1d48:	a2 8f       	std	Z+26, r26	; 0x1a
    1d4a:	b3 8f       	std	Z+27, r27	; 0x1b
			w_xyz_FIR[i] >>= 3;
    1d4c:	84 85       	ldd	r24, Z+12	; 0x0c
    1d4e:	95 85       	ldd	r25, Z+13	; 0x0d
    1d50:	a6 85       	ldd	r26, Z+14	; 0x0e
    1d52:	b7 85       	ldd	r27, Z+15	; 0x0f
    1d54:	68 94       	set
    1d56:	12 f8       	bld	r1, 2
    1d58:	b5 95       	asr	r27
    1d5a:	a7 95       	ror	r26
    1d5c:	97 95       	ror	r25
    1d5e:	87 95       	ror	r24
    1d60:	16 94       	lsr	r1
    1d62:	d1 f7       	brne	.-12     	; 0x1d58 <Read_IMU+0x1d6>
    1d64:	84 87       	std	Z+12, r24	; 0x0c
    1d66:	95 87       	std	Z+13, r25	; 0x0d
    1d68:	a6 87       	std	Z+14, r26	; 0x0e
    1d6a:	b7 87       	std	Z+15, r27	; 0x0f
	
	if (window_counter >= IMU_WINDOW_SIZE){
		window_counter = 0;
		volatile signed long a_xyz_FIR[3] = {0};
		volatile signed long w_xyz_FIR[3] = {0};
		for (unsigned char i=0;i<3;i++){
    1d6c:	3f 5f       	subi	r19, 0xFF	; 255
    1d6e:	33 30       	cpi	r19, 0x03	; 3
    1d70:	68 f2       	brcs	.-102    	; 0x1d0c <Read_IMU+0x18a>
			}
			a_xyz_FIR[i] >>= 3;
			w_xyz_FIR[i] >>= 3;
		}
		// Flip positive directions on Gyro x and z axis and Accelerometer y axis to align with Forward-Right-Down coordinate system (aligns with NED when not rotated)
		if (g_seconds < 1){
    1d72:	80 91 75 4a 	lds	r24, 0x4A75	; 0x804a75 <g_seconds>
    1d76:	90 91 76 4a 	lds	r25, 0x4A76	; 0x804a76 <g_seconds+0x1>
    1d7a:	a0 91 77 4a 	lds	r26, 0x4A77	; 0x804a77 <g_seconds+0x2>
    1d7e:	b0 91 78 4a 	lds	r27, 0x4A78	; 0x804a78 <g_seconds+0x3>
    1d82:	89 2b       	or	r24, r25
    1d84:	8a 2b       	or	r24, r26
    1d86:	8b 2b       	or	r24, r27
    1d88:	d1 f4       	brne	.+52     	; 0x1dbe <Read_IMU+0x23c>
			w_bias[0] = -w_xyz_FIR[0];
    1d8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d8c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d8e:	af 85       	ldd	r26, Y+15	; 0x0f
    1d90:	b8 89       	ldd	r27, Y+16	; 0x10
    1d92:	e5 e2       	ldi	r30, 0x25	; 37
    1d94:	fb e4       	ldi	r31, 0x4B	; 75
    1d96:	91 95       	neg	r25
    1d98:	81 95       	neg	r24
    1d9a:	91 09       	sbc	r25, r1
    1d9c:	80 83       	st	Z, r24
    1d9e:	91 83       	std	Z+1, r25	; 0x01
			w_bias[1] = w_xyz_FIR[1];
    1da0:	89 89       	ldd	r24, Y+17	; 0x11
    1da2:	9a 89       	ldd	r25, Y+18	; 0x12
    1da4:	ab 89       	ldd	r26, Y+19	; 0x13
    1da6:	bc 89       	ldd	r27, Y+20	; 0x14
    1da8:	82 83       	std	Z+2, r24	; 0x02
    1daa:	93 83       	std	Z+3, r25	; 0x03
			w_bias[2] = -w_xyz_FIR[2];
    1dac:	8d 89       	ldd	r24, Y+21	; 0x15
    1dae:	9e 89       	ldd	r25, Y+22	; 0x16
    1db0:	af 89       	ldd	r26, Y+23	; 0x17
    1db2:	b8 8d       	ldd	r27, Y+24	; 0x18
    1db4:	91 95       	neg	r25
    1db6:	81 95       	neg	r24
    1db8:	91 09       	sbc	r25, r1
    1dba:	84 83       	std	Z+4, r24	; 0x04
    1dbc:	95 83       	std	Z+5, r25	; 0x05
		}
		signed int w_diff[3] = {-w_xyz_FIR[0]-w_bias[0], w_xyz_FIR[1]-w_bias[1], -w_xyz_FIR[2]-w_bias[2]};
    1dbe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dc0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dc2:	af 85       	ldd	r26, Y+15	; 0x0f
    1dc4:	b8 89       	ldd	r27, Y+16	; 0x10
    1dc6:	e5 e2       	ldi	r30, 0x25	; 37
    1dc8:	fb e4       	ldi	r31, 0x4B	; 75
    1dca:	20 81       	ld	r18, Z
    1dcc:	31 81       	ldd	r19, Z+1	; 0x01
    1dce:	91 95       	neg	r25
    1dd0:	81 95       	neg	r24
    1dd2:	91 09       	sbc	r25, r1
    1dd4:	82 1b       	sub	r24, r18
    1dd6:	93 0b       	sbc	r25, r19
    1dd8:	8d a3       	std	Y+37, r24	; 0x25
    1dda:	9e a3       	std	Y+38, r25	; 0x26
    1ddc:	89 89       	ldd	r24, Y+17	; 0x11
    1dde:	9a 89       	ldd	r25, Y+18	; 0x12
    1de0:	ab 89       	ldd	r26, Y+19	; 0x13
    1de2:	bc 89       	ldd	r27, Y+20	; 0x14
    1de4:	22 81       	ldd	r18, Z+2	; 0x02
    1de6:	33 81       	ldd	r19, Z+3	; 0x03
    1de8:	82 1b       	sub	r24, r18
    1dea:	93 0b       	sbc	r25, r19
    1dec:	8f a3       	std	Y+39, r24	; 0x27
    1dee:	98 a7       	std	Y+40, r25	; 0x28
    1df0:	8d 89       	ldd	r24, Y+21	; 0x15
    1df2:	9e 89       	ldd	r25, Y+22	; 0x16
    1df4:	af 89       	ldd	r26, Y+23	; 0x17
    1df6:	b8 8d       	ldd	r27, Y+24	; 0x18
    1df8:	24 81       	ldd	r18, Z+4	; 0x04
    1dfa:	35 81       	ldd	r19, Z+5	; 0x05
    1dfc:	91 95       	neg	r25
    1dfe:	81 95       	neg	r24
    1e00:	91 09       	sbc	r25, r1
    1e02:	82 1b       	sub	r24, r18
    1e04:	93 0b       	sbc	r25, r19
    1e06:	89 a7       	std	Y+41, r24	; 0x29
    1e08:	9a a7       	std	Y+42, r25	; 0x2a
		for (unsigned char i=0;i<3;i++){
    1e0a:	10 e0       	ldi	r17, 0x00	; 0
    1e0c:	37 c0       	rjmp	.+110    	; 0x1e7c <Read_IMU+0x2fa>
			Drone->w[i] = ((float)w_diff[i])*GYRO_SENS*D2R;
    1e0e:	a1 2e       	mov	r10, r17
    1e10:	b1 2c       	mov	r11, r1
    1e12:	f5 01       	movw	r30, r10
    1e14:	ee 0f       	add	r30, r30
    1e16:	ff 1f       	adc	r31, r31
    1e18:	a1 e0       	ldi	r26, 0x01	; 1
    1e1a:	b0 e0       	ldi	r27, 0x00	; 0
    1e1c:	ac 0f       	add	r26, r28
    1e1e:	bd 1f       	adc	r27, r29
    1e20:	ea 0f       	add	r30, r26
    1e22:	fb 1f       	adc	r31, r27
    1e24:	64 a1       	ldd	r22, Z+36	; 0x24
    1e26:	75 a1       	ldd	r23, Z+37	; 0x25
    1e28:	07 2e       	mov	r0, r23
    1e2a:	00 0c       	add	r0, r0
    1e2c:	88 0b       	sbc	r24, r24
    1e2e:	99 0b       	sbc	r25, r25
    1e30:	0e 94 ef 1e 	call	0x3dde	; 0x3dde <__floatsisf>
    1e34:	20 e0       	ldi	r18, 0x00	; 0
    1e36:	30 e0       	ldi	r19, 0x00	; 0
    1e38:	4a ef       	ldi	r20, 0xFA	; 250
    1e3a:	53 e4       	ldi	r21, 0x43	; 67
    1e3c:	0e 94 12 20 	call	0x4024	; 0x4024 <__mulsf3>
    1e40:	20 e0       	ldi	r18, 0x00	; 0
    1e42:	30 e0       	ldi	r19, 0x00	; 0
    1e44:	40 e0       	ldi	r20, 0x00	; 0
    1e46:	58 e3       	ldi	r21, 0x38	; 56
    1e48:	0e 94 12 20 	call	0x4024	; 0x4024 <__mulsf3>
    1e4c:	2b ed       	ldi	r18, 0xDB	; 219
    1e4e:	3f e0       	ldi	r19, 0x0F	; 15
    1e50:	49 e4       	ldi	r20, 0x49	; 73
    1e52:	50 e4       	ldi	r21, 0x40	; 64
    1e54:	0e 94 12 20 	call	0x4024	; 0x4024 <__mulsf3>
    1e58:	20 e0       	ldi	r18, 0x00	; 0
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	44 e3       	ldi	r20, 0x34	; 52
    1e5e:	53 e4       	ldi	r21, 0x43	; 67
    1e60:	0e 94 45 1e 	call	0x3c8a	; 0x3c8a <__divsf3>
    1e64:	aa 0c       	add	r10, r10
    1e66:	bb 1c       	adc	r11, r11
    1e68:	aa 0c       	add	r10, r10
    1e6a:	bb 1c       	adc	r11, r11
    1e6c:	f7 01       	movw	r30, r14
    1e6e:	ea 0d       	add	r30, r10
    1e70:	fb 1d       	adc	r31, r11
    1e72:	60 83       	st	Z, r22
    1e74:	71 83       	std	Z+1, r23	; 0x01
    1e76:	82 83       	std	Z+2, r24	; 0x02
    1e78:	93 83       	std	Z+3, r25	; 0x03
			w_bias[0] = -w_xyz_FIR[0];
			w_bias[1] = w_xyz_FIR[1];
			w_bias[2] = -w_xyz_FIR[2];
		}
		signed int w_diff[3] = {-w_xyz_FIR[0]-w_bias[0], w_xyz_FIR[1]-w_bias[1], -w_xyz_FIR[2]-w_bias[2]};
		for (unsigned char i=0;i<3;i++){
    1e7a:	1f 5f       	subi	r17, 0xFF	; 255
    1e7c:	13 30       	cpi	r17, 0x03	; 3
    1e7e:	38 f2       	brcs	.-114    	; 0x1e0e <Read_IMU+0x28c>
			Drone->w[i] = ((float)w_diff[i])*GYRO_SENS*D2R;
		}
		Drone->g_vec[0] = ((float)a_xyz_FIR[0])*ACCEL_SENS;
    1e80:	69 8d       	ldd	r22, Y+25	; 0x19
    1e82:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e84:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e86:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e88:	0e 94 ef 1e 	call	0x3dde	; 0x3dde <__floatsisf>
    1e8c:	9b 01       	movw	r18, r22
    1e8e:	ac 01       	movw	r20, r24
    1e90:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <__addsf3>
    1e94:	20 e0       	ldi	r18, 0x00	; 0
    1e96:	30 e0       	ldi	r19, 0x00	; 0
    1e98:	40 e0       	ldi	r20, 0x00	; 0
    1e9a:	58 e3       	ldi	r21, 0x38	; 56
    1e9c:	0e 94 12 20 	call	0x4024	; 0x4024 <__mulsf3>
    1ea0:	f7 01       	movw	r30, r14
    1ea2:	64 87       	std	Z+12, r22	; 0x0c
    1ea4:	75 87       	std	Z+13, r23	; 0x0d
    1ea6:	86 87       	std	Z+14, r24	; 0x0e
    1ea8:	97 87       	std	Z+15, r25	; 0x0f
		Drone->g_vec[1] = ((float)-a_xyz_FIR[1])*ACCEL_SENS;
    1eaa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1eac:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1eae:	af 8d       	ldd	r26, Y+31	; 0x1f
    1eb0:	b8 a1       	ldd	r27, Y+32	; 0x20
    1eb2:	9c 01       	movw	r18, r24
    1eb4:	ad 01       	movw	r20, r26
    1eb6:	66 27       	eor	r22, r22
    1eb8:	77 27       	eor	r23, r23
    1eba:	cb 01       	movw	r24, r22
    1ebc:	62 1b       	sub	r22, r18
    1ebe:	73 0b       	sbc	r23, r19
    1ec0:	84 0b       	sbc	r24, r20
    1ec2:	95 0b       	sbc	r25, r21
    1ec4:	0e 94 ef 1e 	call	0x3dde	; 0x3dde <__floatsisf>
    1ec8:	9b 01       	movw	r18, r22
    1eca:	ac 01       	movw	r20, r24
    1ecc:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <__addsf3>
    1ed0:	20 e0       	ldi	r18, 0x00	; 0
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	40 e0       	ldi	r20, 0x00	; 0
    1ed6:	58 e3       	ldi	r21, 0x38	; 56
    1ed8:	0e 94 12 20 	call	0x4024	; 0x4024 <__mulsf3>
    1edc:	d7 01       	movw	r26, r14
    1ede:	50 96       	adiw	r26, 0x10	; 16
    1ee0:	6d 93       	st	X+, r22
    1ee2:	7d 93       	st	X+, r23
    1ee4:	8d 93       	st	X+, r24
    1ee6:	9c 93       	st	X, r25
    1ee8:	53 97       	sbiw	r26, 0x13	; 19
		Drone->g_vec[2] = ((float)a_xyz_FIR[2])*ACCEL_SENS;
    1eea:	69 a1       	ldd	r22, Y+33	; 0x21
    1eec:	7a a1       	ldd	r23, Y+34	; 0x22
    1eee:	8b a1       	ldd	r24, Y+35	; 0x23
    1ef0:	9c a1       	ldd	r25, Y+36	; 0x24
    1ef2:	0e 94 ef 1e 	call	0x3dde	; 0x3dde <__floatsisf>
    1ef6:	9b 01       	movw	r18, r22
    1ef8:	ac 01       	movw	r20, r24
    1efa:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <__addsf3>
    1efe:	20 e0       	ldi	r18, 0x00	; 0
    1f00:	30 e0       	ldi	r19, 0x00	; 0
    1f02:	40 e0       	ldi	r20, 0x00	; 0
    1f04:	58 e3       	ldi	r21, 0x38	; 56
    1f06:	0e 94 12 20 	call	0x4024	; 0x4024 <__mulsf3>
    1f0a:	f7 01       	movw	r30, r14
    1f0c:	64 8b       	std	Z+20, r22	; 0x14
    1f0e:	75 8b       	std	Z+21, r23	; 0x15
    1f10:	86 8b       	std	Z+22, r24	; 0x16
    1f12:	97 8b       	std	Z+23, r25	; 0x17
	}
	
	return 1;
    1f14:	81 e0       	ldi	r24, 0x01	; 1
    1f16:	03 c0       	rjmp	.+6      	; 0x1f1e <Read_IMU+0x39c>
	static unsigned char window_counter = 0;
	unsigned char Read_status = 0;
	
	unsigned char Data[12] = {0};
	Read_status = Read_SPI(PORT_IMU, CS_IMU, (IMU_DATA_START|0x80), Data, sizeof(Data));
	if (Read_status != 2){return 0;}
    1f18:	80 e0       	ldi	r24, 0x00	; 0
    1f1a:	01 c0       	rjmp	.+2      	; 0x1f1e <Read_IMU+0x39c>
		Drone->g_vec[0] = ((float)a_xyz_FIR[0])*ACCEL_SENS;
		Drone->g_vec[1] = ((float)-a_xyz_FIR[1])*ACCEL_SENS;
		Drone->g_vec[2] = ((float)a_xyz_FIR[2])*ACCEL_SENS;
	}
	
	return 1;
    1f1c:	81 e0       	ldi	r24, 0x01	; 1
}
    1f1e:	aa 96       	adiw	r28, 0x2a	; 42
    1f20:	cd bf       	out	0x3d, r28	; 61
    1f22:	de bf       	out	0x3e, r29	; 62
    1f24:	df 91       	pop	r29
    1f26:	cf 91       	pop	r28
    1f28:	1f 91       	pop	r17
    1f2a:	0f 91       	pop	r16
    1f2c:	ff 90       	pop	r15
    1f2e:	ef 90       	pop	r14
    1f30:	bf 90       	pop	r11
    1f32:	af 90       	pop	r10
    1f34:	9f 90       	pop	r9
    1f36:	8f 90       	pop	r8
    1f38:	08 95       	ret

00001f3a <Setup_Mag>:

// MAGNETOMETER CODE
// Mag -> 0 is a write, 1 is a read
unsigned char  Setup_Mag(){
    1f3a:	0f 93       	push	r16
    1f3c:	1f 93       	push	r17
    1f3e:	cf 93       	push	r28
    1f40:	df 93       	push	r29
    1f42:	1f 92       	push	r1
    1f44:	cd b7       	in	r28, 0x3d	; 61
    1f46:	de b7       	in	r29, 0x3e	; 62
	unsigned char MAG_status = 2;
	unsigned char Mag_ID = 0;
    1f48:	19 82       	std	Y+1, r1	; 0x01
	
	MAG_status &= Write_SPI(PORT_MAG, CS_MAG, MAG_CFG_REG_C, 0b00110100); // Enables 4 wire SPI, disables I2C
    1f4a:	24 e3       	ldi	r18, 0x34	; 52
    1f4c:	42 e6       	ldi	r20, 0x62	; 98
    1f4e:	63 e0       	ldi	r22, 0x03	; 3
    1f50:	82 e4       	ldi	r24, 0x42	; 66
    1f52:	0e 94 af 02 	call	0x55e	; 0x55e <Write_SPI>
    1f56:	18 2f       	mov	r17, r24
    1f58:	12 70       	andi	r17, 0x02	; 2
	MAG_status &= Read_SPI(PORT_MAG, CS_MAG, (MAG_WHO_AM_I|0x80), &Mag_ID, 1);
    1f5a:	01 e0       	ldi	r16, 0x01	; 1
    1f5c:	9e 01       	movw	r18, r28
    1f5e:	2f 5f       	subi	r18, 0xFF	; 255
    1f60:	3f 4f       	sbci	r19, 0xFF	; 255
    1f62:	4f ec       	ldi	r20, 0xCF	; 207
    1f64:	63 e0       	ldi	r22, 0x03	; 3
    1f66:	82 e4       	ldi	r24, 0x42	; 66
    1f68:	0e 94 0f 02 	call	0x41e	; 0x41e <Read_SPI>
    1f6c:	18 23       	and	r17, r24
	MAG_status &= Write_SPI(PORT_MAG, CS_MAG, MAG_CFG_REG_A, 0b10001100); // Sets continuous mode, 100 Hz ODR, temp compensation enabled
    1f6e:	2c e8       	ldi	r18, 0x8C	; 140
    1f70:	40 e6       	ldi	r20, 0x60	; 96
    1f72:	63 e0       	ldi	r22, 0x03	; 3
    1f74:	82 e4       	ldi	r24, 0x42	; 66
    1f76:	0e 94 af 02 	call	0x55e	; 0x55e <Write_SPI>
    1f7a:	18 23       	and	r17, r24
	MAG_status &= Write_SPI(PORT_MAG, CS_MAG, MAG_CFG_REG_B, 0b00000001); // Enables LPF
    1f7c:	21 e0       	ldi	r18, 0x01	; 1
    1f7e:	41 e6       	ldi	r20, 0x61	; 97
    1f80:	63 e0       	ldi	r22, 0x03	; 3
    1f82:	82 e4       	ldi	r24, 0x42	; 66
    1f84:	0e 94 af 02 	call	0x55e	; 0x55e <Write_SPI>
    1f88:	81 23       	and	r24, r17
	
	if (MAG_status != 2){return 0;}
    1f8a:	82 30       	cpi	r24, 0x02	; 2
    1f8c:	11 f0       	breq	.+4      	; 0x1f92 <Setup_Mag+0x58>
    1f8e:	80 e0       	ldi	r24, 0x00	; 0
    1f90:	01 c0       	rjmp	.+2      	; 0x1f94 <Setup_Mag+0x5a>
	return 1;
    1f92:	81 e0       	ldi	r24, 0x01	; 1
}
    1f94:	0f 90       	pop	r0
    1f96:	df 91       	pop	r29
    1f98:	cf 91       	pop	r28
    1f9a:	1f 91       	pop	r17
    1f9c:	0f 91       	pop	r16
    1f9e:	08 95       	ret

00001fa0 <Read_Mag>:

unsigned char Read_Mag(States *Drone){
    1fa0:	4f 92       	push	r4
    1fa2:	5f 92       	push	r5
    1fa4:	6f 92       	push	r6
    1fa6:	7f 92       	push	r7
    1fa8:	8f 92       	push	r8
    1faa:	9f 92       	push	r9
    1fac:	af 92       	push	r10
    1fae:	bf 92       	push	r11
    1fb0:	ef 92       	push	r14
    1fb2:	ff 92       	push	r15
    1fb4:	0f 93       	push	r16
    1fb6:	1f 93       	push	r17
    1fb8:	cf 93       	push	r28
    1fba:	df 93       	push	r29
    1fbc:	cd b7       	in	r28, 0x3d	; 61
    1fbe:	de b7       	in	r29, 0x3e	; 62
    1fc0:	62 97       	sbiw	r28, 0x12	; 18
    1fc2:	cd bf       	out	0x3d, r28	; 61
    1fc4:	de bf       	out	0x3e, r29	; 62
    1fc6:	7c 01       	movw	r14, r24
		m_min[3],
		hard_iron[3];
	static unsigned char window_counter;
	unsigned char Read_status = 0;
	
	unsigned char Data[6] = {0};
    1fc8:	9e 01       	movw	r18, r28
    1fca:	2f 5f       	subi	r18, 0xFF	; 255
    1fcc:	3f 4f       	sbci	r19, 0xFF	; 255
    1fce:	86 e0       	ldi	r24, 0x06	; 6
    1fd0:	d9 01       	movw	r26, r18
    1fd2:	1d 92       	st	X+, r1
    1fd4:	8a 95       	dec	r24
    1fd6:	e9 f7       	brne	.-6      	; 0x1fd2 <Read_Mag+0x32>
	Read_status = Read_SPI(PORT_MAG, CS_MAG, (MAG_DATA_START|0x80), Data, 6);
    1fd8:	06 e0       	ldi	r16, 0x06	; 6
    1fda:	48 ee       	ldi	r20, 0xE8	; 232
    1fdc:	63 e0       	ldi	r22, 0x03	; 3
    1fde:	82 e4       	ldi	r24, 0x42	; 66
    1fe0:	0e 94 0f 02 	call	0x41e	; 0x41e <Read_SPI>
	if (Read_status != 2){return 0;}
    1fe4:	82 30       	cpi	r24, 0x02	; 2
    1fe6:	09 f0       	breq	.+2      	; 0x1fea <Read_Mag+0x4a>
    1fe8:	f2 c1       	rjmp	.+996    	; 0x23ce <Read_Mag+0x42e>
    1fea:	60 e0       	ldi	r22, 0x00	; 0
    1fec:	2c c0       	rjmp	.+88     	; 0x2046 <Read_Mag+0xa6>
	
	for (unsigned char i=0;i<3;i++){
		m_xyz_window[i][window_counter] = (((signed int)Data[2*i+1])<<8) + Data[2*i];
    1fee:	70 91 24 4b 	lds	r23, 0x4B24	; 0x804b24 <window_counter.4902>
    1ff2:	86 2f       	mov	r24, r22
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	ac 01       	movw	r20, r24
    1ff8:	44 0f       	add	r20, r20
    1ffa:	55 1f       	adc	r21, r21
    1ffc:	fa 01       	movw	r30, r20
    1ffe:	31 96       	adiw	r30, 0x01	; 1
    2000:	21 e0       	ldi	r18, 0x01	; 1
    2002:	30 e0       	ldi	r19, 0x00	; 0
    2004:	2c 0f       	add	r18, r28
    2006:	3d 1f       	adc	r19, r29
    2008:	e2 0f       	add	r30, r18
    200a:	f3 1f       	adc	r31, r19
    200c:	20 81       	ld	r18, Z
    200e:	30 e0       	ldi	r19, 0x00	; 0
    2010:	32 2f       	mov	r19, r18
    2012:	22 27       	eor	r18, r18
    2014:	e1 e0       	ldi	r30, 0x01	; 1
    2016:	f0 e0       	ldi	r31, 0x00	; 0
    2018:	ec 0f       	add	r30, r28
    201a:	fd 1f       	adc	r31, r29
    201c:	e4 0f       	add	r30, r20
    201e:	f5 1f       	adc	r31, r21
    2020:	40 81       	ld	r20, Z
    2022:	24 0f       	add	r18, r20
    2024:	31 1d       	adc	r19, r1
    2026:	fc 01       	movw	r30, r24
    2028:	e2 95       	swap	r30
    202a:	f2 95       	swap	r31
    202c:	f0 7f       	andi	r31, 0xF0	; 240
    202e:	fe 27       	eor	r31, r30
    2030:	e0 7f       	andi	r30, 0xF0	; 240
    2032:	fe 27       	eor	r31, r30
    2034:	e7 0f       	add	r30, r23
    2036:	f1 1d       	adc	r31, r1
    2038:	ee 0f       	add	r30, r30
    203a:	ff 1f       	adc	r31, r31
    203c:	ec 53       	subi	r30, 0x3C	; 60
    203e:	f5 4b       	sbci	r31, 0xB5	; 181
    2040:	20 83       	st	Z, r18
    2042:	31 83       	std	Z+1, r19	; 0x01
	
	unsigned char Data[6] = {0};
	Read_status = Read_SPI(PORT_MAG, CS_MAG, (MAG_DATA_START|0x80), Data, 6);
	if (Read_status != 2){return 0;}
	
	for (unsigned char i=0;i<3;i++){
    2044:	6f 5f       	subi	r22, 0xFF	; 255
    2046:	63 30       	cpi	r22, 0x03	; 3
    2048:	90 f2       	brcs	.-92     	; 0x1fee <Read_Mag+0x4e>
		m_xyz_window[i][window_counter] = (((signed int)Data[2*i+1])<<8) + Data[2*i];
	}
	window_counter++;
    204a:	80 91 24 4b 	lds	r24, 0x4B24	; 0x804b24 <window_counter.4902>
    204e:	8f 5f       	subi	r24, 0xFF	; 255
    2050:	80 93 24 4b 	sts	0x4B24, r24	; 0x804b24 <window_counter.4902>
	if (window_counter >= MAG_WINDOW_SIZE){
    2054:	80 31       	cpi	r24, 0x10	; 16
    2056:	08 f4       	brcc	.+2      	; 0x205a <Read_Mag+0xba>
    2058:	bc c1       	rjmp	.+888    	; 0x23d2 <Read_Mag+0x432>
		window_counter = 0;
    205a:	10 92 24 4b 	sts	0x4B24, r1	; 0x804b24 <window_counter.4902>
		volatile signed long m_xyz_FIP[3] = {0};
    205e:	fe 01       	movw	r30, r28
    2060:	37 96       	adiw	r30, 0x07	; 7
    2062:	8c e0       	ldi	r24, 0x0C	; 12
    2064:	df 01       	movw	r26, r30
    2066:	1d 92       	st	X+, r1
    2068:	8a 95       	dec	r24
    206a:	e9 f7       	brne	.-6      	; 0x2066 <Read_Mag+0xc6>
		for (unsigned char i=0;i<3;i++){
    206c:	30 e0       	ldi	r19, 0x00	; 0
    206e:	19 c1       	rjmp	.+562    	; 0x22a2 <Read_Mag+0x302>
			for (unsigned char j=0;j<MAG_WINDOW_SIZE;j++){
				m_xyz_FIP[i] += m_xyz_window[i][j];
    2070:	83 2f       	mov	r24, r19
    2072:	90 e0       	ldi	r25, 0x00	; 0
    2074:	dc 01       	movw	r26, r24
    2076:	aa 0f       	add	r26, r26
    2078:	bb 1f       	adc	r27, r27
    207a:	aa 0f       	add	r26, r26
    207c:	bb 1f       	adc	r27, r27
    207e:	e1 e0       	ldi	r30, 0x01	; 1
    2080:	f0 e0       	ldi	r31, 0x00	; 0
    2082:	ec 0f       	add	r30, r28
    2084:	fd 1f       	adc	r31, r29
    2086:	ae 0f       	add	r26, r30
    2088:	bf 1f       	adc	r27, r31
    208a:	16 96       	adiw	r26, 0x06	; 6
    208c:	8d 90       	ld	r8, X+
    208e:	9d 90       	ld	r9, X+
    2090:	ad 90       	ld	r10, X+
    2092:	bc 90       	ld	r11, X
    2094:	19 97       	sbiw	r26, 0x09	; 9
    2096:	fc 01       	movw	r30, r24
    2098:	e2 95       	swap	r30
    209a:	f2 95       	swap	r31
    209c:	f0 7f       	andi	r31, 0xF0	; 240
    209e:	fe 27       	eor	r31, r30
    20a0:	e0 7f       	andi	r30, 0xF0	; 240
    20a2:	fe 27       	eor	r31, r30
    20a4:	e2 0f       	add	r30, r18
    20a6:	f1 1d       	adc	r31, r1
    20a8:	ee 0f       	add	r30, r30
    20aa:	ff 1f       	adc	r31, r31
    20ac:	ec 53       	subi	r30, 0x3C	; 60
    20ae:	f5 4b       	sbci	r31, 0xB5	; 181
    20b0:	40 81       	ld	r20, Z
    20b2:	51 81       	ldd	r21, Z+1	; 0x01
    20b4:	05 2e       	mov	r0, r21
    20b6:	00 0c       	add	r0, r0
    20b8:	66 0b       	sbc	r22, r22
    20ba:	77 0b       	sbc	r23, r23
    20bc:	48 0d       	add	r20, r8
    20be:	59 1d       	adc	r21, r9
    20c0:	6a 1d       	adc	r22, r10
    20c2:	7b 1d       	adc	r23, r11
    20c4:	16 96       	adiw	r26, 0x06	; 6
    20c6:	4d 93       	st	X+, r20
    20c8:	5d 93       	st	X+, r21
    20ca:	6d 93       	st	X+, r22
    20cc:	7c 93       	st	X, r23
    20ce:	19 97       	sbiw	r26, 0x09	; 9
	window_counter++;
	if (window_counter >= MAG_WINDOW_SIZE){
		window_counter = 0;
		volatile signed long m_xyz_FIP[3] = {0};
		for (unsigned char i=0;i<3;i++){
			for (unsigned char j=0;j<MAG_WINDOW_SIZE;j++){
    20d0:	2f 5f       	subi	r18, 0xFF	; 255
    20d2:	01 c0       	rjmp	.+2      	; 0x20d6 <Read_Mag+0x136>
    20d4:	20 e0       	ldi	r18, 0x00	; 0
    20d6:	20 31       	cpi	r18, 0x10	; 16
    20d8:	58 f2       	brcs	.-106    	; 0x2070 <Read_Mag+0xd0>
				m_xyz_FIP[i] += m_xyz_window[i][j];
			}
			m_xyz_FIP[i] >>= 4;
    20da:	83 2f       	mov	r24, r19
    20dc:	90 e0       	ldi	r25, 0x00	; 0
    20de:	fc 01       	movw	r30, r24
    20e0:	ee 0f       	add	r30, r30
    20e2:	ff 1f       	adc	r31, r31
    20e4:	ee 0f       	add	r30, r30
    20e6:	ff 1f       	adc	r31, r31
    20e8:	41 e0       	ldi	r20, 0x01	; 1
    20ea:	50 e0       	ldi	r21, 0x00	; 0
    20ec:	4c 0f       	add	r20, r28
    20ee:	5d 1f       	adc	r21, r29
    20f0:	e4 0f       	add	r30, r20
    20f2:	f5 1f       	adc	r31, r21
    20f4:	46 81       	ldd	r20, Z+6	; 0x06
    20f6:	57 81       	ldd	r21, Z+7	; 0x07
    20f8:	60 85       	ldd	r22, Z+8	; 0x08
    20fa:	71 85       	ldd	r23, Z+9	; 0x09
    20fc:	68 94       	set
    20fe:	13 f8       	bld	r1, 3
    2100:	75 95       	asr	r23
    2102:	67 95       	ror	r22
    2104:	57 95       	ror	r21
    2106:	47 95       	ror	r20
    2108:	16 94       	lsr	r1
    210a:	d1 f7       	brne	.-12     	; 0x2100 <Read_Mag+0x160>
    210c:	46 83       	std	Z+6, r20	; 0x06
    210e:	57 83       	std	Z+7, r21	; 0x07
    2110:	60 87       	std	Z+8, r22	; 0x08
    2112:	71 87       	std	Z+9, r23	; 0x09
			if (m_xyz_FIP[i] > m_max[i]){
    2114:	46 80       	ldd	r4, Z+6	; 0x06
    2116:	57 80       	ldd	r5, Z+7	; 0x07
    2118:	60 84       	ldd	r6, Z+8	; 0x08
    211a:	71 84       	ldd	r7, Z+9	; 0x09
    211c:	fc 01       	movw	r30, r24
    211e:	ee 0f       	add	r30, r30
    2120:	ff 1f       	adc	r31, r31
    2122:	e2 54       	subi	r30, 0x42	; 66
    2124:	f5 4b       	sbci	r31, 0xB5	; 181
    2126:	40 81       	ld	r20, Z
    2128:	51 81       	ldd	r21, Z+1	; 0x01
    212a:	4a 01       	movw	r8, r20
    212c:	05 2e       	mov	r0, r21
    212e:	00 0c       	add	r0, r0
    2130:	aa 08       	sbc	r10, r10
    2132:	bb 08       	sbc	r11, r11
    2134:	84 14       	cp	r8, r4
    2136:	95 04       	cpc	r9, r5
    2138:	a6 04       	cpc	r10, r6
    213a:	b7 04       	cpc	r11, r7
    213c:	0c f0       	brlt	.+2      	; 0x2140 <Read_Mag+0x1a0>
    213e:	4e c0       	rjmp	.+156    	; 0x21dc <Read_Mag+0x23c>
				m_max[i] = m_xyz_FIP[i];
    2140:	fc 01       	movw	r30, r24
    2142:	ee 0f       	add	r30, r30
    2144:	ff 1f       	adc	r31, r31
    2146:	ee 0f       	add	r30, r30
    2148:	ff 1f       	adc	r31, r31
    214a:	61 e0       	ldi	r22, 0x01	; 1
    214c:	70 e0       	ldi	r23, 0x00	; 0
    214e:	6c 0f       	add	r22, r28
    2150:	7d 1f       	adc	r23, r29
    2152:	e6 0f       	add	r30, r22
    2154:	f7 1f       	adc	r31, r23
    2156:	46 81       	ldd	r20, Z+6	; 0x06
    2158:	57 81       	ldd	r21, Z+7	; 0x07
    215a:	60 85       	ldd	r22, Z+8	; 0x08
    215c:	71 85       	ldd	r23, Z+9	; 0x09
    215e:	fc 01       	movw	r30, r24
    2160:	ee 0f       	add	r30, r30
    2162:	ff 1f       	adc	r31, r31
    2164:	e2 54       	subi	r30, 0x42	; 66
    2166:	f5 4b       	sbci	r31, 0xB5	; 181
    2168:	40 83       	st	Z, r20
    216a:	51 83       	std	Z+1, r21	; 0x01
				if (abs(m_max[i])<abs(m_min[i])){
    216c:	da 01       	movw	r26, r20
    216e:	55 23       	and	r21, r21
    2170:	24 f4       	brge	.+8      	; 0x217a <Read_Mag+0x1da>
    2172:	aa 27       	eor	r26, r26
    2174:	bb 27       	eor	r27, r27
    2176:	a4 1b       	sub	r26, r20
    2178:	b5 0b       	sbc	r27, r21
    217a:	fc 01       	movw	r30, r24
    217c:	ee 0f       	add	r30, r30
    217e:	ff 1f       	adc	r31, r31
    2180:	e8 54       	subi	r30, 0x48	; 72
    2182:	f5 4b       	sbci	r31, 0xB5	; 181
    2184:	01 90       	ld	r0, Z+
    2186:	f0 81       	ld	r31, Z
    2188:	e0 2d       	mov	r30, r0
    218a:	5f 01       	movw	r10, r30
    218c:	ff 23       	and	r31, r31
    218e:	24 f4       	brge	.+8      	; 0x2198 <Read_Mag+0x1f8>
    2190:	aa 24       	eor	r10, r10
    2192:	bb 24       	eor	r11, r11
    2194:	ae 1a       	sub	r10, r30
    2196:	bf 0a       	sbc	r11, r31
    2198:	aa 15       	cp	r26, r10
    219a:	bb 05       	cpc	r27, r11
    219c:	54 f4       	brge	.+20     	; 0x21b2 <Read_Mag+0x212>
					hard_iron[i] = m_min[i]-m_max[i];
    219e:	e4 1b       	sub	r30, r20
    21a0:	f5 0b       	sbc	r31, r21
    21a2:	dc 01       	movw	r26, r24
    21a4:	aa 0f       	add	r26, r26
    21a6:	bb 1f       	adc	r27, r27
    21a8:	ae 54       	subi	r26, 0x4E	; 78
    21aa:	b5 4b       	sbci	r27, 0xB5	; 181
    21ac:	ed 93       	st	X+, r30
    21ae:	fc 93       	st	X, r31
    21b0:	09 c0       	rjmp	.+18     	; 0x21c4 <Read_Mag+0x224>
				}
				else{
					hard_iron[i] = m_max[i]-m_min[i];
    21b2:	4e 1b       	sub	r20, r30
    21b4:	5f 0b       	sbc	r21, r31
    21b6:	fc 01       	movw	r30, r24
    21b8:	ee 0f       	add	r30, r30
    21ba:	ff 1f       	adc	r31, r31
    21bc:	ee 54       	subi	r30, 0x4E	; 78
    21be:	f5 4b       	sbci	r31, 0xB5	; 181
    21c0:	40 83       	st	Z, r20
    21c2:	51 83       	std	Z+1, r21	; 0x01
				}
				hard_iron[i] >>= 1;
    21c4:	88 0f       	add	r24, r24
    21c6:	99 1f       	adc	r25, r25
    21c8:	fc 01       	movw	r30, r24
    21ca:	ee 54       	subi	r30, 0x4E	; 78
    21cc:	f5 4b       	sbci	r31, 0xB5	; 181
    21ce:	80 81       	ld	r24, Z
    21d0:	91 81       	ldd	r25, Z+1	; 0x01
    21d2:	95 95       	asr	r25
    21d4:	87 95       	ror	r24
    21d6:	80 83       	st	Z, r24
    21d8:	91 83       	std	Z+1, r25	; 0x01
    21da:	62 c0       	rjmp	.+196    	; 0x22a0 <Read_Mag+0x300>
			}
			else if (m_xyz_FIP[i] < m_min[i]){
    21dc:	fc 01       	movw	r30, r24
    21de:	ee 0f       	add	r30, r30
    21e0:	ff 1f       	adc	r31, r31
    21e2:	ee 0f       	add	r30, r30
    21e4:	ff 1f       	adc	r31, r31
    21e6:	a1 e0       	ldi	r26, 0x01	; 1
    21e8:	b0 e0       	ldi	r27, 0x00	; 0
    21ea:	ac 0f       	add	r26, r28
    21ec:	bd 1f       	adc	r27, r29
    21ee:	ea 0f       	add	r30, r26
    21f0:	fb 1f       	adc	r31, r27
    21f2:	46 80       	ldd	r4, Z+6	; 0x06
    21f4:	57 80       	ldd	r5, Z+7	; 0x07
    21f6:	60 84       	ldd	r6, Z+8	; 0x08
    21f8:	71 84       	ldd	r7, Z+9	; 0x09
    21fa:	fc 01       	movw	r30, r24
    21fc:	ee 0f       	add	r30, r30
    21fe:	ff 1f       	adc	r31, r31
    2200:	e8 54       	subi	r30, 0x48	; 72
    2202:	f5 4b       	sbci	r31, 0xB5	; 181
    2204:	80 80       	ld	r8, Z
    2206:	91 80       	ldd	r9, Z+1	; 0x01
    2208:	09 2c       	mov	r0, r9
    220a:	00 0c       	add	r0, r0
    220c:	aa 08       	sbc	r10, r10
    220e:	bb 08       	sbc	r11, r11
    2210:	48 14       	cp	r4, r8
    2212:	59 04       	cpc	r5, r9
    2214:	6a 04       	cpc	r6, r10
    2216:	7b 04       	cpc	r7, r11
    2218:	0c f0       	brlt	.+2      	; 0x221c <Read_Mag+0x27c>
    221a:	42 c0       	rjmp	.+132    	; 0x22a0 <Read_Mag+0x300>
				m_min[i] = m_xyz_FIP[i];
    221c:	fc 01       	movw	r30, r24
    221e:	ee 0f       	add	r30, r30
    2220:	ff 1f       	adc	r31, r31
    2222:	ee 0f       	add	r30, r30
    2224:	ff 1f       	adc	r31, r31
    2226:	ea 0f       	add	r30, r26
    2228:	fb 1f       	adc	r31, r27
    222a:	86 80       	ldd	r8, Z+6	; 0x06
    222c:	97 80       	ldd	r9, Z+7	; 0x07
    222e:	a0 84       	ldd	r10, Z+8	; 0x08
    2230:	b1 84       	ldd	r11, Z+9	; 0x09
    2232:	f4 01       	movw	r30, r8
    2234:	dc 01       	movw	r26, r24
    2236:	aa 0f       	add	r26, r26
    2238:	bb 1f       	adc	r27, r27
    223a:	a8 54       	subi	r26, 0x48	; 72
    223c:	b5 4b       	sbci	r27, 0xB5	; 181
    223e:	8d 92       	st	X+, r8
    2240:	9c 92       	st	X, r9
				if (abs(m_max[i])<abs(m_min[i])){
    2242:	ba 01       	movw	r22, r20
    2244:	55 23       	and	r21, r21
    2246:	24 f4       	brge	.+8      	; 0x2250 <Read_Mag+0x2b0>
    2248:	66 27       	eor	r22, r22
    224a:	77 27       	eor	r23, r23
    224c:	64 1b       	sub	r22, r20
    224e:	75 0b       	sbc	r23, r21
    2250:	d4 01       	movw	r26, r8
    2252:	ff 23       	and	r31, r31
    2254:	24 f4       	brge	.+8      	; 0x225e <Read_Mag+0x2be>
    2256:	aa 27       	eor	r26, r26
    2258:	bb 27       	eor	r27, r27
    225a:	a8 19       	sub	r26, r8
    225c:	b9 09       	sbc	r27, r9
    225e:	6a 17       	cp	r22, r26
    2260:	7b 07       	cpc	r23, r27
    2262:	54 f4       	brge	.+20     	; 0x2278 <Read_Mag+0x2d8>
					hard_iron[i] = m_min[i]-m_max[i];
    2264:	84 1a       	sub	r8, r20
    2266:	95 0a       	sbc	r9, r21
    2268:	fc 01       	movw	r30, r24
    226a:	ee 0f       	add	r30, r30
    226c:	ff 1f       	adc	r31, r31
    226e:	ee 54       	subi	r30, 0x4E	; 78
    2270:	f5 4b       	sbci	r31, 0xB5	; 181
    2272:	80 82       	st	Z, r8
    2274:	91 82       	std	Z+1, r9	; 0x01
    2276:	09 c0       	rjmp	.+18     	; 0x228a <Read_Mag+0x2ea>
				}
				else{
					hard_iron[i] = m_max[i]-m_min[i];
    2278:	48 19       	sub	r20, r8
    227a:	59 09       	sbc	r21, r9
    227c:	fc 01       	movw	r30, r24
    227e:	ee 0f       	add	r30, r30
    2280:	ff 1f       	adc	r31, r31
    2282:	ee 54       	subi	r30, 0x4E	; 78
    2284:	f5 4b       	sbci	r31, 0xB5	; 181
    2286:	40 83       	st	Z, r20
    2288:	51 83       	std	Z+1, r21	; 0x01
				}
				hard_iron[i] >>= 1;
    228a:	88 0f       	add	r24, r24
    228c:	99 1f       	adc	r25, r25
    228e:	fc 01       	movw	r30, r24
    2290:	ee 54       	subi	r30, 0x4E	; 78
    2292:	f5 4b       	sbci	r31, 0xB5	; 181
    2294:	80 81       	ld	r24, Z
    2296:	91 81       	ldd	r25, Z+1	; 0x01
    2298:	95 95       	asr	r25
    229a:	87 95       	ror	r24
    229c:	80 83       	st	Z, r24
    229e:	91 83       	std	Z+1, r25	; 0x01
	}
	window_counter++;
	if (window_counter >= MAG_WINDOW_SIZE){
		window_counter = 0;
		volatile signed long m_xyz_FIP[3] = {0};
		for (unsigned char i=0;i<3;i++){
    22a0:	3f 5f       	subi	r19, 0xFF	; 255
    22a2:	33 30       	cpi	r19, 0x03	; 3
    22a4:	08 f4       	brcc	.+2      	; 0x22a8 <Read_Mag+0x308>
    22a6:	16 cf       	rjmp	.-468    	; 0x20d4 <Read_Mag+0x134>
					hard_iron[i] = m_max[i]-m_min[i];
				}
				hard_iron[i] >>= 1;
			}
		}
		if (g_seconds > 2){
    22a8:	80 91 75 4a 	lds	r24, 0x4A75	; 0x804a75 <g_seconds>
    22ac:	90 91 76 4a 	lds	r25, 0x4A76	; 0x804a76 <g_seconds+0x1>
    22b0:	a0 91 77 4a 	lds	r26, 0x4A77	; 0x804a77 <g_seconds+0x2>
    22b4:	b0 91 78 4a 	lds	r27, 0x4A78	; 0x804a78 <g_seconds+0x3>
    22b8:	03 97       	sbiw	r24, 0x03	; 3
    22ba:	a1 05       	cpc	r26, r1
    22bc:	b1 05       	cpc	r27, r1
    22be:	08 f4       	brcc	.+2      	; 0x22c2 <Read_Mag+0x322>
    22c0:	8a c0       	rjmp	.+276    	; 0x23d6 <Read_Mag+0x436>
			Drone->m_vec[0] = ((float)(m_xyz_FIP[1] - hard_iron[1]))/(hard_iron[1]*2.0);
    22c2:	8b 85       	ldd	r24, Y+11	; 0x0b
    22c4:	9c 85       	ldd	r25, Y+12	; 0x0c
    22c6:	ad 85       	ldd	r26, Y+13	; 0x0d
    22c8:	be 85       	ldd	r27, Y+14	; 0x0e
    22ca:	02 eb       	ldi	r16, 0xB2	; 178
    22cc:	1a e4       	ldi	r17, 0x4A	; 74
    22ce:	f8 01       	movw	r30, r16
    22d0:	82 80       	ldd	r8, Z+2	; 0x02
    22d2:	93 80       	ldd	r9, Z+3	; 0x03
    22d4:	09 2c       	mov	r0, r9
    22d6:	00 0c       	add	r0, r0
    22d8:	aa 08       	sbc	r10, r10
    22da:	bb 08       	sbc	r11, r11
    22dc:	bc 01       	movw	r22, r24
    22de:	cd 01       	movw	r24, r26
    22e0:	68 19       	sub	r22, r8
    22e2:	79 09       	sbc	r23, r9
    22e4:	8a 09       	sbc	r24, r10
    22e6:	9b 09       	sbc	r25, r11
    22e8:	0e 94 ef 1e 	call	0x3dde	; 0x3dde <__floatsisf>
    22ec:	2b 01       	movw	r4, r22
    22ee:	3c 01       	movw	r6, r24
    22f0:	c5 01       	movw	r24, r10
    22f2:	b4 01       	movw	r22, r8
    22f4:	0e 94 ef 1e 	call	0x3dde	; 0x3dde <__floatsisf>
    22f8:	9b 01       	movw	r18, r22
    22fa:	ac 01       	movw	r20, r24
    22fc:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <__addsf3>
    2300:	9b 01       	movw	r18, r22
    2302:	ac 01       	movw	r20, r24
    2304:	c3 01       	movw	r24, r6
    2306:	b2 01       	movw	r22, r4
    2308:	0e 94 45 1e 	call	0x3c8a	; 0x3c8a <__divsf3>
    230c:	d7 01       	movw	r26, r14
    230e:	58 96       	adiw	r26, 0x18	; 24
    2310:	6d 93       	st	X+, r22
    2312:	7d 93       	st	X+, r23
    2314:	8d 93       	st	X+, r24
    2316:	9c 93       	st	X, r25
    2318:	5b 97       	sbiw	r26, 0x1b	; 27
			Drone->m_vec[1] = -((float)(m_xyz_FIP[0]- hard_iron[0]))/(hard_iron[0]*2.0);
    231a:	8f 81       	ldd	r24, Y+7	; 0x07
    231c:	98 85       	ldd	r25, Y+8	; 0x08
    231e:	a9 85       	ldd	r26, Y+9	; 0x09
    2320:	ba 85       	ldd	r27, Y+10	; 0x0a
    2322:	f8 01       	movw	r30, r16
    2324:	80 80       	ld	r8, Z
    2326:	91 80       	ldd	r9, Z+1	; 0x01
    2328:	09 2c       	mov	r0, r9
    232a:	00 0c       	add	r0, r0
    232c:	aa 08       	sbc	r10, r10
    232e:	bb 08       	sbc	r11, r11
    2330:	bc 01       	movw	r22, r24
    2332:	cd 01       	movw	r24, r26
    2334:	68 19       	sub	r22, r8
    2336:	79 09       	sbc	r23, r9
    2338:	8a 09       	sbc	r24, r10
    233a:	9b 09       	sbc	r25, r11
    233c:	0e 94 ef 1e 	call	0x3dde	; 0x3dde <__floatsisf>
    2340:	2b 01       	movw	r4, r22
    2342:	3c 01       	movw	r6, r24
    2344:	77 fa       	bst	r7, 7
    2346:	70 94       	com	r7
    2348:	77 f8       	bld	r7, 7
    234a:	70 94       	com	r7
    234c:	c5 01       	movw	r24, r10
    234e:	b4 01       	movw	r22, r8
    2350:	0e 94 ef 1e 	call	0x3dde	; 0x3dde <__floatsisf>
    2354:	9b 01       	movw	r18, r22
    2356:	ac 01       	movw	r20, r24
    2358:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <__addsf3>
    235c:	9b 01       	movw	r18, r22
    235e:	ac 01       	movw	r20, r24
    2360:	c3 01       	movw	r24, r6
    2362:	b2 01       	movw	r22, r4
    2364:	0e 94 45 1e 	call	0x3c8a	; 0x3c8a <__divsf3>
    2368:	d7 01       	movw	r26, r14
    236a:	5c 96       	adiw	r26, 0x1c	; 28
    236c:	6d 93       	st	X+, r22
    236e:	7d 93       	st	X+, r23
    2370:	8d 93       	st	X+, r24
    2372:	9c 93       	st	X, r25
    2374:	5f 97       	sbiw	r26, 0x1f	; 31
			Drone->m_vec[2] = ((float)(m_xyz_FIP[2] - hard_iron[2]))/(hard_iron[2]*2.0);
    2376:	8f 85       	ldd	r24, Y+15	; 0x0f
    2378:	98 89       	ldd	r25, Y+16	; 0x10
    237a:	a9 89       	ldd	r26, Y+17	; 0x11
    237c:	ba 89       	ldd	r27, Y+18	; 0x12
    237e:	f8 01       	movw	r30, r16
    2380:	84 80       	ldd	r8, Z+4	; 0x04
    2382:	95 80       	ldd	r9, Z+5	; 0x05
    2384:	09 2c       	mov	r0, r9
    2386:	00 0c       	add	r0, r0
    2388:	aa 08       	sbc	r10, r10
    238a:	bb 08       	sbc	r11, r11
    238c:	bc 01       	movw	r22, r24
    238e:	cd 01       	movw	r24, r26
    2390:	68 19       	sub	r22, r8
    2392:	79 09       	sbc	r23, r9
    2394:	8a 09       	sbc	r24, r10
    2396:	9b 09       	sbc	r25, r11
    2398:	0e 94 ef 1e 	call	0x3dde	; 0x3dde <__floatsisf>
    239c:	2b 01       	movw	r4, r22
    239e:	3c 01       	movw	r6, r24
    23a0:	c5 01       	movw	r24, r10
    23a2:	b4 01       	movw	r22, r8
    23a4:	0e 94 ef 1e 	call	0x3dde	; 0x3dde <__floatsisf>
    23a8:	9b 01       	movw	r18, r22
    23aa:	ac 01       	movw	r20, r24
    23ac:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <__addsf3>
    23b0:	9b 01       	movw	r18, r22
    23b2:	ac 01       	movw	r20, r24
    23b4:	c3 01       	movw	r24, r6
    23b6:	b2 01       	movw	r22, r4
    23b8:	0e 94 45 1e 	call	0x3c8a	; 0x3c8a <__divsf3>
    23bc:	d7 01       	movw	r26, r14
    23be:	90 96       	adiw	r26, 0x20	; 32
    23c0:	6d 93       	st	X+, r22
    23c2:	7d 93       	st	X+, r23
    23c4:	8d 93       	st	X+, r24
    23c6:	9c 93       	st	X, r25
    23c8:	93 97       	sbiw	r26, 0x23	; 35
		}
	}
	
	return 1;
    23ca:	81 e0       	ldi	r24, 0x01	; 1
    23cc:	05 c0       	rjmp	.+10     	; 0x23d8 <Read_Mag+0x438>
	static unsigned char window_counter;
	unsigned char Read_status = 0;
	
	unsigned char Data[6] = {0};
	Read_status = Read_SPI(PORT_MAG, CS_MAG, (MAG_DATA_START|0x80), Data, 6);
	if (Read_status != 2){return 0;}
    23ce:	80 e0       	ldi	r24, 0x00	; 0
    23d0:	03 c0       	rjmp	.+6      	; 0x23d8 <Read_Mag+0x438>
			Drone->m_vec[1] = -((float)(m_xyz_FIP[0]- hard_iron[0]))/(hard_iron[0]*2.0);
			Drone->m_vec[2] = ((float)(m_xyz_FIP[2] - hard_iron[2]))/(hard_iron[2]*2.0);
		}
	}
	
	return 1;
    23d2:	81 e0       	ldi	r24, 0x01	; 1
    23d4:	01 c0       	rjmp	.+2      	; 0x23d8 <Read_Mag+0x438>
    23d6:	81 e0       	ldi	r24, 0x01	; 1
}
    23d8:	62 96       	adiw	r28, 0x12	; 18
    23da:	cd bf       	out	0x3d, r28	; 61
    23dc:	de bf       	out	0x3e, r29	; 62
    23de:	df 91       	pop	r29
    23e0:	cf 91       	pop	r28
    23e2:	1f 91       	pop	r17
    23e4:	0f 91       	pop	r16
    23e6:	ff 90       	pop	r15
    23e8:	ef 90       	pop	r14
    23ea:	bf 90       	pop	r11
    23ec:	af 90       	pop	r10
    23ee:	9f 90       	pop	r9
    23f0:	8f 90       	pop	r8
    23f2:	7f 90       	pop	r7
    23f4:	6f 90       	pop	r6
    23f6:	5f 90       	pop	r5
    23f8:	4f 90       	pop	r4
    23fa:	08 95       	ret

000023fc <LLA_to_NED>:
		}
	}
	return 0;
}

unsigned char LLA_to_NED(signed long Latitude, signed long Longitude, float Height, float Position_NED[3]){
    23fc:	4f 92       	push	r4
    23fe:	5f 92       	push	r5
    2400:	6f 92       	push	r6
    2402:	7f 92       	push	r7
    2404:	8f 92       	push	r8
    2406:	9f 92       	push	r9
    2408:	af 92       	push	r10
    240a:	bf 92       	push	r11
    240c:	cf 92       	push	r12
    240e:	df 92       	push	r13
    2410:	ef 92       	push	r14
    2412:	ff 92       	push	r15
    2414:	0f 93       	push	r16
    2416:	1f 93       	push	r17
    2418:	cf 93       	push	r28
    241a:	df 93       	push	r29
    241c:	cd b7       	in	r28, 0x3d	; 61
    241e:	de b7       	in	r29, 0x3e	; 62
    2420:	68 97       	sbiw	r28, 0x18	; 24
    2422:	cd bf       	out	0x3d, r28	; 61
    2424:	de bf       	out	0x3e, r29	; 62
    2426:	29 01       	movw	r4, r18
    2428:	3a 01       	movw	r6, r20
    242a:	ed 86       	std	Y+13, r14	; 0x0d
    242c:	fe 86       	std	Y+14, r15	; 0x0e
    242e:	0f 87       	std	Y+15, r16	; 0x0f
    2430:	18 8b       	std	Y+16, r17	; 0x10
    2432:	86 01       	movw	r16, r12
		c2 = 1.0-c1;
	static float Reference_Position_ecef[3];
	float Position_ecef[3];
	static unsigned char reference_flag = 0;
	
	float Latitude_rad = (((float)Latitude)/6000000)*D2R;
    2434:	0e 94 ef 1e 	call	0x3dde	; 0x3dde <__floatsisf>
    2438:	20 e0       	ldi	r18, 0x00	; 0
    243a:	3b e1       	ldi	r19, 0x1B	; 27
    243c:	47 eb       	ldi	r20, 0xB7	; 183
    243e:	5a e4       	ldi	r21, 0x4A	; 74
    2440:	0e 94 45 1e 	call	0x3c8a	; 0x3c8a <__divsf3>
    2444:	2b ed       	ldi	r18, 0xDB	; 219
    2446:	3f e0       	ldi	r19, 0x0F	; 15
    2448:	49 e4       	ldi	r20, 0x49	; 73
    244a:	50 e4       	ldi	r21, 0x40	; 64
    244c:	0e 94 12 20 	call	0x4024	; 0x4024 <__mulsf3>
    2450:	20 e0       	ldi	r18, 0x00	; 0
    2452:	30 e0       	ldi	r19, 0x00	; 0
    2454:	44 e3       	ldi	r20, 0x34	; 52
    2456:	53 e4       	ldi	r21, 0x43	; 67
    2458:	0e 94 45 1e 	call	0x3c8a	; 0x3c8a <__divsf3>
    245c:	4b 01       	movw	r8, r22
    245e:	5c 01       	movw	r10, r24
	float Longitude_rad = (((float)Longitude)/6000000)*D2R;
    2460:	c3 01       	movw	r24, r6
    2462:	b2 01       	movw	r22, r4
    2464:	0e 94 ef 1e 	call	0x3dde	; 0x3dde <__floatsisf>
    2468:	20 e0       	ldi	r18, 0x00	; 0
    246a:	3b e1       	ldi	r19, 0x1B	; 27
    246c:	47 eb       	ldi	r20, 0xB7	; 183
    246e:	5a e4       	ldi	r21, 0x4A	; 74
    2470:	0e 94 45 1e 	call	0x3c8a	; 0x3c8a <__divsf3>
    2474:	2b ed       	ldi	r18, 0xDB	; 219
    2476:	3f e0       	ldi	r19, 0x0F	; 15
    2478:	49 e4       	ldi	r20, 0x49	; 73
    247a:	50 e4       	ldi	r21, 0x40	; 64
    247c:	0e 94 12 20 	call	0x4024	; 0x4024 <__mulsf3>
    2480:	20 e0       	ldi	r18, 0x00	; 0
    2482:	30 e0       	ldi	r19, 0x00	; 0
    2484:	44 e3       	ldi	r20, 0x34	; 52
    2486:	53 e4       	ldi	r21, 0x43	; 67
    2488:	0e 94 45 1e 	call	0x3c8a	; 0x3c8a <__divsf3>
    248c:	6b 01       	movw	r12, r22
    248e:	7c 01       	movw	r14, r24
	float N_phi = a/sqrt(1.0 - (pow(e,2)*pow(sinf(Latitude_rad),2))); // Prime vertical radius (m)
    2490:	c5 01       	movw	r24, r10
    2492:	b4 01       	movw	r22, r8
    2494:	0e 94 cf 20 	call	0x419e	; 0x419e <sin>
    2498:	6d 83       	std	Y+5, r22	; 0x05
    249a:	7e 83       	std	Y+6, r23	; 0x06
    249c:	8f 83       	std	Y+7, r24	; 0x07
    249e:	98 87       	std	Y+8, r25	; 0x08
    24a0:	20 e0       	ldi	r18, 0x00	; 0
    24a2:	30 e0       	ldi	r19, 0x00	; 0
    24a4:	40 e0       	ldi	r20, 0x00	; 0
    24a6:	50 e4       	ldi	r21, 0x40	; 64
    24a8:	0e 94 7f 20 	call	0x40fe	; 0x40fe <pow>
    24ac:	28 e1       	ldi	r18, 0x18	; 24
    24ae:	36 ef       	ldi	r19, 0xF6	; 246
    24b0:	4b e3       	ldi	r20, 0x3B	; 59
    24b2:	58 e3       	ldi	r21, 0x38	; 56
    24b4:	0e 94 12 20 	call	0x4024	; 0x4024 <__mulsf3>
    24b8:	2b 01       	movw	r4, r22
    24ba:	3c 01       	movw	r6, r24
    24bc:	a3 01       	movw	r20, r6
    24be:	92 01       	movw	r18, r4
    24c0:	60 e0       	ldi	r22, 0x00	; 0
    24c2:	70 e0       	ldi	r23, 0x00	; 0
    24c4:	80 e8       	ldi	r24, 0x80	; 128
    24c6:	9f e3       	ldi	r25, 0x3F	; 63
    24c8:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <__subsf3>
    24cc:	0e 94 dd 20 	call	0x41ba	; 0x41ba <sqrt>
    24d0:	9b 01       	movw	r18, r22
    24d2:	ac 01       	movw	r20, r24
    24d4:	62 e3       	ldi	r22, 0x32	; 50
    24d6:	75 ea       	ldi	r23, 0xA5	; 165
    24d8:	82 ec       	ldi	r24, 0xC2	; 194
    24da:	9a e4       	ldi	r25, 0x4A	; 74
    24dc:	0e 94 45 1e 	call	0x3c8a	; 0x3c8a <__divsf3>
    24e0:	69 83       	std	Y+1, r22	; 0x01
    24e2:	7a 83       	std	Y+2, r23	; 0x02
    24e4:	8b 83       	std	Y+3, r24	; 0x03
    24e6:	9c 83       	std	Y+4, r25	; 0x04
	
	Position_ecef[0] = (N_phi + Height)*cosf(Latitude_rad)*cosf(Longitude_rad);
    24e8:	2d 85       	ldd	r18, Y+13	; 0x0d
    24ea:	3e 85       	ldd	r19, Y+14	; 0x0e
    24ec:	4f 85       	ldd	r20, Y+15	; 0x0f
    24ee:	58 89       	ldd	r21, Y+16	; 0x10
    24f0:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <__addsf3>
    24f4:	2b 01       	movw	r4, r22
    24f6:	3c 01       	movw	r6, r24
    24f8:	c5 01       	movw	r24, r10
    24fa:	b4 01       	movw	r22, r8
    24fc:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <cos>
    2500:	6d 8b       	std	Y+21, r22	; 0x15
    2502:	7e 8b       	std	Y+22, r23	; 0x16
    2504:	8f 8b       	std	Y+23, r24	; 0x17
    2506:	98 8f       	std	Y+24, r25	; 0x18
    2508:	9b 01       	movw	r18, r22
    250a:	ac 01       	movw	r20, r24
    250c:	c3 01       	movw	r24, r6
    250e:	b2 01       	movw	r22, r4
    2510:	0e 94 12 20 	call	0x4024	; 0x4024 <__mulsf3>
    2514:	4b 01       	movw	r8, r22
    2516:	5c 01       	movw	r10, r24
    2518:	c7 01       	movw	r24, r14
    251a:	b6 01       	movw	r22, r12
    251c:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <cos>
    2520:	69 8b       	std	Y+17, r22	; 0x11
    2522:	7a 8b       	std	Y+18, r23	; 0x12
    2524:	8b 8b       	std	Y+19, r24	; 0x13
    2526:	9c 8b       	std	Y+20, r25	; 0x14
    2528:	9b 01       	movw	r18, r22
    252a:	ac 01       	movw	r20, r24
    252c:	c5 01       	movw	r24, r10
    252e:	b4 01       	movw	r22, r8
    2530:	0e 94 12 20 	call	0x4024	; 0x4024 <__mulsf3>
    2534:	69 87       	std	Y+9, r22	; 0x09
    2536:	7a 87       	std	Y+10, r23	; 0x0a
    2538:	8b 87       	std	Y+11, r24	; 0x0b
    253a:	9c 87       	std	Y+12, r25	; 0x0c
	Position_ecef[1] = (N_phi + Height)*cosf(Latitude_rad)*sinf(Longitude_rad);
    253c:	c7 01       	movw	r24, r14
    253e:	b6 01       	movw	r22, r12
    2540:	0e 94 cf 20 	call	0x419e	; 0x419e <sin>
    2544:	2b 01       	movw	r4, r22
    2546:	3c 01       	movw	r6, r24
    2548:	9b 01       	movw	r18, r22
    254a:	ac 01       	movw	r20, r24
    254c:	c5 01       	movw	r24, r10
    254e:	b4 01       	movw	r22, r8
    2550:	0e 94 12 20 	call	0x4024	; 0x4024 <__mulsf3>
    2554:	6b 01       	movw	r12, r22
    2556:	7c 01       	movw	r14, r24
	Position_ecef[2] = (((1.0-pow(e,2))*N_phi) + Height)*sinf(Latitude_rad);
    2558:	20 e1       	ldi	r18, 0x10	; 16
    255a:	3d ef       	ldi	r19, 0xFD	; 253
    255c:	4f e7       	ldi	r20, 0x7F	; 127
    255e:	5f e3       	ldi	r21, 0x3F	; 63
    2560:	69 81       	ldd	r22, Y+1	; 0x01
    2562:	7a 81       	ldd	r23, Y+2	; 0x02
    2564:	8b 81       	ldd	r24, Y+3	; 0x03
    2566:	9c 81       	ldd	r25, Y+4	; 0x04
    2568:	0e 94 12 20 	call	0x4024	; 0x4024 <__mulsf3>
    256c:	9b 01       	movw	r18, r22
    256e:	ac 01       	movw	r20, r24
    2570:	6d 85       	ldd	r22, Y+13	; 0x0d
    2572:	7e 85       	ldd	r23, Y+14	; 0x0e
    2574:	8f 85       	ldd	r24, Y+15	; 0x0f
    2576:	98 89       	ldd	r25, Y+16	; 0x10
    2578:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <__addsf3>
    257c:	9b 01       	movw	r18, r22
    257e:	ac 01       	movw	r20, r24
    2580:	6d 81       	ldd	r22, Y+5	; 0x05
    2582:	7e 81       	ldd	r23, Y+6	; 0x06
    2584:	8f 81       	ldd	r24, Y+7	; 0x07
    2586:	98 85       	ldd	r25, Y+8	; 0x08
    2588:	0e 94 12 20 	call	0x4024	; 0x4024 <__mulsf3>
    258c:	4b 01       	movw	r8, r22
    258e:	5c 01       	movw	r10, r24
	
	if (!reference_flag){
    2590:	80 91 8e 4a 	lds	r24, 0x4A8E	; 0x804a8e <reference_flag.5012>
    2594:	81 11       	cpse	r24, r1
    2596:	17 c0       	rjmp	.+46     	; 0x25c6 <LLA_to_NED+0x1ca>
		++reference_flag;
    2598:	91 e0       	ldi	r25, 0x01	; 1
    259a:	98 0f       	add	r25, r24
    259c:	90 93 8e 4a 	sts	0x4A8E, r25	; 0x804a8e <reference_flag.5012>
		Reference_Position_ecef[0] = Position_ecef[0];
    25a0:	e2 e8       	ldi	r30, 0x82	; 130
    25a2:	fa e4       	ldi	r31, 0x4A	; 74
    25a4:	29 85       	ldd	r18, Y+9	; 0x09
    25a6:	3a 85       	ldd	r19, Y+10	; 0x0a
    25a8:	4b 85       	ldd	r20, Y+11	; 0x0b
    25aa:	5c 85       	ldd	r21, Y+12	; 0x0c
    25ac:	20 83       	st	Z, r18
    25ae:	31 83       	std	Z+1, r19	; 0x01
    25b0:	42 83       	std	Z+2, r20	; 0x02
    25b2:	53 83       	std	Z+3, r21	; 0x03
		Reference_Position_ecef[1] = Position_ecef[1];
    25b4:	c4 82       	std	Z+4, r12	; 0x04
    25b6:	d5 82       	std	Z+5, r13	; 0x05
    25b8:	e6 82       	std	Z+6, r14	; 0x06
    25ba:	f7 82       	std	Z+7, r15	; 0x07
		Reference_Position_ecef[2] = Position_ecef[2];
    25bc:	80 86       	std	Z+8, r8	; 0x08
    25be:	91 86       	std	Z+9, r9	; 0x09
    25c0:	a2 86       	std	Z+10, r10	; 0x0a
    25c2:	b3 86       	std	Z+11, r11	; 0x0b
		return 0;
    25c4:	d1 c0       	rjmp	.+418    	; 0x2768 <LLA_to_NED+0x36c>
	}
	
	// Once a reference ECEF position is established, use that to find the local NED position
	float dx_ecef[3];
	dx_ecef[0] = Position_ecef[0] - Reference_Position_ecef[0];
    25c6:	e2 e8       	ldi	r30, 0x82	; 130
    25c8:	fa e4       	ldi	r31, 0x4A	; 74
    25ca:	20 81       	ld	r18, Z
    25cc:	31 81       	ldd	r19, Z+1	; 0x01
    25ce:	42 81       	ldd	r20, Z+2	; 0x02
    25d0:	53 81       	ldd	r21, Z+3	; 0x03
    25d2:	69 85       	ldd	r22, Y+9	; 0x09
    25d4:	7a 85       	ldd	r23, Y+10	; 0x0a
    25d6:	8b 85       	ldd	r24, Y+11	; 0x0b
    25d8:	9c 85       	ldd	r25, Y+12	; 0x0c
    25da:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <__subsf3>
    25de:	69 83       	std	Y+1, r22	; 0x01
    25e0:	7a 83       	std	Y+2, r23	; 0x02
    25e2:	8b 83       	std	Y+3, r24	; 0x03
    25e4:	9c 83       	std	Y+4, r25	; 0x04
	dx_ecef[1] = Position_ecef[1] - Reference_Position_ecef[1];
    25e6:	20 91 86 4a 	lds	r18, 0x4A86	; 0x804a86 <Reference_Position_ecef.5010+0x4>
    25ea:	30 91 87 4a 	lds	r19, 0x4A87	; 0x804a87 <Reference_Position_ecef.5010+0x5>
    25ee:	40 91 88 4a 	lds	r20, 0x4A88	; 0x804a88 <Reference_Position_ecef.5010+0x6>
    25f2:	50 91 89 4a 	lds	r21, 0x4A89	; 0x804a89 <Reference_Position_ecef.5010+0x7>
    25f6:	c7 01       	movw	r24, r14
    25f8:	b6 01       	movw	r22, r12
    25fa:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <__subsf3>
    25fe:	69 87       	std	Y+9, r22	; 0x09
    2600:	7a 87       	std	Y+10, r23	; 0x0a
    2602:	8b 87       	std	Y+11, r24	; 0x0b
    2604:	9c 87       	std	Y+12, r25	; 0x0c
	dx_ecef[2] = Position_ecef[2] - Reference_Position_ecef[2];
    2606:	20 91 8a 4a 	lds	r18, 0x4A8A	; 0x804a8a <Reference_Position_ecef.5010+0x8>
    260a:	30 91 8b 4a 	lds	r19, 0x4A8B	; 0x804a8b <Reference_Position_ecef.5010+0x9>
    260e:	40 91 8c 4a 	lds	r20, 0x4A8C	; 0x804a8c <Reference_Position_ecef.5010+0xa>
    2612:	50 91 8d 4a 	lds	r21, 0x4A8D	; 0x804a8d <Reference_Position_ecef.5010+0xb>
    2616:	c5 01       	movw	r24, r10
    2618:	b4 01       	movw	r22, r8
    261a:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <__subsf3>
    261e:	4b 01       	movw	r8, r22
    2620:	5c 01       	movw	r10, r24
	
	float P_North= -sinf(Latitude_rad)*cosf(Longitude_rad)*dx_ecef[0] - sinf(Latitude_rad)*sinf(Longitude_rad)*dx_ecef[1] + cosf(Latitude_rad)*dx_ecef[2];
    2622:	2d 81       	ldd	r18, Y+5	; 0x05
    2624:	3e 81       	ldd	r19, Y+6	; 0x06
    2626:	4f 81       	ldd	r20, Y+7	; 0x07
    2628:	58 85       	ldd	r21, Y+8	; 0x08
    262a:	50 58       	subi	r21, 0x80	; 128
    262c:	69 89       	ldd	r22, Y+17	; 0x11
    262e:	7a 89       	ldd	r23, Y+18	; 0x12
    2630:	8b 89       	ldd	r24, Y+19	; 0x13
    2632:	9c 89       	ldd	r25, Y+20	; 0x14
    2634:	0e 94 12 20 	call	0x4024	; 0x4024 <__mulsf3>
    2638:	9b 01       	movw	r18, r22
    263a:	ac 01       	movw	r20, r24
    263c:	69 81       	ldd	r22, Y+1	; 0x01
    263e:	7a 81       	ldd	r23, Y+2	; 0x02
    2640:	8b 81       	ldd	r24, Y+3	; 0x03
    2642:	9c 81       	ldd	r25, Y+4	; 0x04
    2644:	0e 94 12 20 	call	0x4024	; 0x4024 <__mulsf3>
    2648:	6b 01       	movw	r12, r22
    264a:	7c 01       	movw	r14, r24
    264c:	a3 01       	movw	r20, r6
    264e:	92 01       	movw	r18, r4
    2650:	6d 81       	ldd	r22, Y+5	; 0x05
    2652:	7e 81       	ldd	r23, Y+6	; 0x06
    2654:	8f 81       	ldd	r24, Y+7	; 0x07
    2656:	98 85       	ldd	r25, Y+8	; 0x08
    2658:	0e 94 12 20 	call	0x4024	; 0x4024 <__mulsf3>
    265c:	9b 01       	movw	r18, r22
    265e:	ac 01       	movw	r20, r24
    2660:	69 85       	ldd	r22, Y+9	; 0x09
    2662:	7a 85       	ldd	r23, Y+10	; 0x0a
    2664:	8b 85       	ldd	r24, Y+11	; 0x0b
    2666:	9c 85       	ldd	r25, Y+12	; 0x0c
    2668:	0e 94 12 20 	call	0x4024	; 0x4024 <__mulsf3>
    266c:	9b 01       	movw	r18, r22
    266e:	ac 01       	movw	r20, r24
    2670:	c7 01       	movw	r24, r14
    2672:	b6 01       	movw	r22, r12
    2674:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <__subsf3>
    2678:	6b 01       	movw	r12, r22
    267a:	7c 01       	movw	r14, r24
    267c:	a5 01       	movw	r20, r10
    267e:	94 01       	movw	r18, r8
    2680:	6d 89       	ldd	r22, Y+21	; 0x15
    2682:	7e 89       	ldd	r23, Y+22	; 0x16
    2684:	8f 89       	ldd	r24, Y+23	; 0x17
    2686:	98 8d       	ldd	r25, Y+24	; 0x18
    2688:	0e 94 12 20 	call	0x4024	; 0x4024 <__mulsf3>
    268c:	9b 01       	movw	r18, r22
    268e:	ac 01       	movw	r20, r24
    2690:	c7 01       	movw	r24, r14
    2692:	b6 01       	movw	r22, r12
    2694:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <__addsf3>
    2698:	6b 01       	movw	r12, r22
    269a:	7c 01       	movw	r14, r24
	float P_East = -sinf(Longitude_rad)*dx_ecef[0] + cosf(Longitude_rad)*dx_ecef[1];
    269c:	a3 01       	movw	r20, r6
    269e:	92 01       	movw	r18, r4
    26a0:	50 58       	subi	r21, 0x80	; 128
    26a2:	69 81       	ldd	r22, Y+1	; 0x01
    26a4:	7a 81       	ldd	r23, Y+2	; 0x02
    26a6:	8b 81       	ldd	r24, Y+3	; 0x03
    26a8:	9c 81       	ldd	r25, Y+4	; 0x04
    26aa:	0e 94 12 20 	call	0x4024	; 0x4024 <__mulsf3>
    26ae:	4b 01       	movw	r8, r22
    26b0:	5c 01       	movw	r10, r24
    26b2:	29 85       	ldd	r18, Y+9	; 0x09
    26b4:	3a 85       	ldd	r19, Y+10	; 0x0a
    26b6:	4b 85       	ldd	r20, Y+11	; 0x0b
    26b8:	5c 85       	ldd	r21, Y+12	; 0x0c
    26ba:	69 89       	ldd	r22, Y+17	; 0x11
    26bc:	7a 89       	ldd	r23, Y+18	; 0x12
    26be:	8b 89       	ldd	r24, Y+19	; 0x13
    26c0:	9c 89       	ldd	r25, Y+20	; 0x14
    26c2:	0e 94 12 20 	call	0x4024	; 0x4024 <__mulsf3>
    26c6:	9b 01       	movw	r18, r22
    26c8:	ac 01       	movw	r20, r24
    26ca:	c5 01       	movw	r24, r10
    26cc:	b4 01       	movw	r22, r8
    26ce:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <__addsf3>
    26d2:	4b 01       	movw	r8, r22
    26d4:	5c 01       	movw	r10, r24
	Position_NED[0] = Position_NED[0]*c1 + P_North*c2;
    26d6:	f8 01       	movw	r30, r16
    26d8:	60 81       	ld	r22, Z
    26da:	71 81       	ldd	r23, Z+1	; 0x01
    26dc:	82 81       	ldd	r24, Z+2	; 0x02
    26de:	93 81       	ldd	r25, Z+3	; 0x03
    26e0:	26 e6       	ldi	r18, 0x66	; 102
    26e2:	36 e6       	ldi	r19, 0x66	; 102
    26e4:	46 e6       	ldi	r20, 0x66	; 102
    26e6:	5f e3       	ldi	r21, 0x3F	; 63
    26e8:	0e 94 12 20 	call	0x4024	; 0x4024 <__mulsf3>
    26ec:	2b 01       	movw	r4, r22
    26ee:	3c 01       	movw	r6, r24
    26f0:	20 ed       	ldi	r18, 0xD0	; 208
    26f2:	3c ec       	ldi	r19, 0xCC	; 204
    26f4:	4c ec       	ldi	r20, 0xCC	; 204
    26f6:	5d e3       	ldi	r21, 0x3D	; 61
    26f8:	c7 01       	movw	r24, r14
    26fa:	b6 01       	movw	r22, r12
    26fc:	0e 94 12 20 	call	0x4024	; 0x4024 <__mulsf3>
    2700:	9b 01       	movw	r18, r22
    2702:	ac 01       	movw	r20, r24
    2704:	c3 01       	movw	r24, r6
    2706:	b2 01       	movw	r22, r4
    2708:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <__addsf3>
    270c:	f8 01       	movw	r30, r16
    270e:	60 83       	st	Z, r22
    2710:	71 83       	std	Z+1, r23	; 0x01
    2712:	82 83       	std	Z+2, r24	; 0x02
    2714:	93 83       	std	Z+3, r25	; 0x03
	Position_NED[1] = Position_NED[1]*c1 + P_East*c2;
    2716:	64 81       	ldd	r22, Z+4	; 0x04
    2718:	75 81       	ldd	r23, Z+5	; 0x05
    271a:	86 81       	ldd	r24, Z+6	; 0x06
    271c:	97 81       	ldd	r25, Z+7	; 0x07
    271e:	26 e6       	ldi	r18, 0x66	; 102
    2720:	36 e6       	ldi	r19, 0x66	; 102
    2722:	46 e6       	ldi	r20, 0x66	; 102
    2724:	5f e3       	ldi	r21, 0x3F	; 63
    2726:	0e 94 12 20 	call	0x4024	; 0x4024 <__mulsf3>
    272a:	6b 01       	movw	r12, r22
    272c:	7c 01       	movw	r14, r24
    272e:	20 ed       	ldi	r18, 0xD0	; 208
    2730:	3c ec       	ldi	r19, 0xCC	; 204
    2732:	4c ec       	ldi	r20, 0xCC	; 204
    2734:	5d e3       	ldi	r21, 0x3D	; 61
    2736:	c5 01       	movw	r24, r10
    2738:	b4 01       	movw	r22, r8
    273a:	0e 94 12 20 	call	0x4024	; 0x4024 <__mulsf3>
    273e:	9b 01       	movw	r18, r22
    2740:	ac 01       	movw	r20, r24
    2742:	c7 01       	movw	r24, r14
    2744:	b6 01       	movw	r22, r12
    2746:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <__addsf3>
    274a:	f8 01       	movw	r30, r16
    274c:	64 83       	std	Z+4, r22	; 0x04
    274e:	75 83       	std	Z+5, r23	; 0x05
    2750:	86 83       	std	Z+6, r24	; 0x06
    2752:	97 83       	std	Z+7, r25	; 0x07
	Position_NED[2] = -Height;
    2754:	8d 85       	ldd	r24, Y+13	; 0x0d
    2756:	9e 85       	ldd	r25, Y+14	; 0x0e
    2758:	af 85       	ldd	r26, Y+15	; 0x0f
    275a:	b8 89       	ldd	r27, Y+16	; 0x10
    275c:	b0 58       	subi	r27, 0x80	; 128
    275e:	80 87       	std	Z+8, r24	; 0x08
    2760:	91 87       	std	Z+9, r25	; 0x09
    2762:	a2 87       	std	Z+10, r26	; 0x0a
    2764:	b3 87       	std	Z+11, r27	; 0x0b
	
	return 1;
    2766:	81 e0       	ldi	r24, 0x01	; 1
}
    2768:	68 96       	adiw	r28, 0x18	; 24
    276a:	cd bf       	out	0x3d, r28	; 61
    276c:	de bf       	out	0x3e, r29	; 62
    276e:	df 91       	pop	r29
    2770:	cf 91       	pop	r28
    2772:	1f 91       	pop	r17
    2774:	0f 91       	pop	r16
    2776:	ff 90       	pop	r15
    2778:	ef 90       	pop	r14
    277a:	df 90       	pop	r13
    277c:	cf 90       	pop	r12
    277e:	bf 90       	pop	r11
    2780:	af 90       	pop	r10
    2782:	9f 90       	pop	r9
    2784:	8f 90       	pop	r8
    2786:	7f 90       	pop	r7
    2788:	6f 90       	pop	r6
    278a:	5f 90       	pop	r5
    278c:	4f 90       	pop	r4
    278e:	08 95       	ret

00002790 <Read_GPS>:
	USART_Transmit(Enable_GAL_8Hz, sizeof(Enable_GAL_8Hz));

	return (USART3_RXDATAH & USART_FERR_bm) ? 0 : 1;
}

unsigned char Read_GPS(States *Drone){
    2790:	2f 92       	push	r2
    2792:	3f 92       	push	r3
    2794:	4f 92       	push	r4
    2796:	5f 92       	push	r5
    2798:	6f 92       	push	r6
    279a:	7f 92       	push	r7
    279c:	8f 92       	push	r8
    279e:	9f 92       	push	r9
    27a0:	af 92       	push	r10
    27a2:	bf 92       	push	r11
    27a4:	cf 92       	push	r12
    27a6:	df 92       	push	r13
    27a8:	ef 92       	push	r14
    27aa:	ff 92       	push	r15
    27ac:	0f 93       	push	r16
    27ae:	1f 93       	push	r17
    27b0:	cf 93       	push	r28
    27b2:	df 93       	push	r29
    27b4:	cd b7       	in	r28, 0x3d	; 61
    27b6:	de b7       	in	r29, 0x3e	; 62
    27b8:	cc 58       	subi	r28, 0x8C	; 140
    27ba:	d1 09       	sbc	r29, r1
    27bc:	cd bf       	out	0x3d, r28	; 61
    27be:	de bf       	out	0x3e, r29	; 62
    27c0:	4c 01       	movw	r8, r24
		i = 0,
		j = 0;
	signed char 
		start_index = -1,
		end_index = -1,
		comma_indices[13] = {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
    27c2:	8d e0       	ldi	r24, 0x0D	; 13
    27c4:	e7 e4       	ldi	r30, 0x47	; 71
    27c6:	f0 e4       	ldi	r31, 0x40	; 64
    27c8:	de 01       	movw	r26, r28
    27ca:	11 96       	adiw	r26, 0x01	; 1
    27cc:	01 90       	ld	r0, Z+
    27ce:	0d 92       	st	X+, r0
    27d0:	8a 95       	dec	r24
    27d2:	e1 f7       	brne	.-8      	; 0x27cc <Read_GPS+0x3c>
	char 
		GPS_Data[100] = {0},
    27d4:	fe 01       	movw	r30, r28
    27d6:	3e 96       	adiw	r30, 0x0e	; 14
    27d8:	84 e6       	ldi	r24, 0x64	; 100
    27da:	df 01       	movw	r26, r30
    27dc:	1d 92       	st	X+, r1
    27de:	8a 95       	dec	r24
    27e0:	e9 f7       	brne	.-6      	; 0x27dc <Read_GPS+0x4c>
		Check_Sum[2] = {0};
    27e2:	71 2c       	mov	r7, r1
    27e4:	61 2c       	mov	r6, r1
		window_counter;
	unsigned char 
		i = 0,
		j = 0;
	signed char 
		start_index = -1,
    27e6:	9f ef       	ldi	r25, 0xFF	; 255
		GPS_Position_Mode;
	static unsigned char 
		window_counter;
	unsigned char 
		i = 0,
		j = 0;
    27e8:	40 e0       	ldi	r20, 0x00	; 0
		GPS_Position_Status,
		GPS_Position_Mode;
	static unsigned char 
		window_counter;
	unsigned char 
		i = 0,
    27ea:	e0 e0       	ldi	r30, 0x00	; 0
    27ec:	39 2f       	mov	r19, r25
		comma_indices[13] = {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
	char 
		GPS_Data[100] = {0},
		Check_Sum[2] = {0};
	
	while(i != g_GPS_Data_Index){
    27ee:	3e c0       	rjmp	.+124    	; 0x286c <Read_GPS+0xdc>
		if (g_GPS_Data[i] == 36){start_index = i;}
    27f0:	8e 2f       	mov	r24, r30
    27f2:	90 e0       	ldi	r25, 0x00	; 0
    27f4:	dc 01       	movw	r26, r24
    27f6:	a1 53       	subi	r26, 0x31	; 49
    27f8:	b4 4b       	sbci	r27, 0xB4	; 180
    27fa:	2c 91       	ld	r18, X
    27fc:	24 32       	cpi	r18, 0x24	; 36
    27fe:	11 f4       	brne	.+4      	; 0x2804 <Read_GPS+0x74>
    2800:	3e 2f       	mov	r19, r30
    2802:	26 c0       	rjmp	.+76     	; 0x2850 <Read_GPS+0xc0>
		else if ((g_GPS_Data[i] == 42)&&(start_index != -1)){
    2804:	dc 01       	movw	r26, r24
    2806:	a1 53       	subi	r26, 0x31	; 49
    2808:	b4 4b       	sbci	r27, 0xB4	; 180
    280a:	2c 91       	ld	r18, X
    280c:	2a 32       	cpi	r18, 0x2A	; 42
    280e:	81 f4       	brne	.+32     	; 0x2830 <Read_GPS+0xa0>
    2810:	3f 3f       	cpi	r19, 0xFF	; 255
    2812:	71 f0       	breq	.+28     	; 0x2830 <Read_GPS+0xa0>
    2814:	93 2f       	mov	r25, r19
			end_index = i;
    2816:	6e 2f       	mov	r22, r30
			Check_Sum[0] = g_GPS_Data[++i];
    2818:	a1 e0       	ldi	r26, 0x01	; 1
    281a:	ae 0f       	add	r26, r30
    281c:	b0 e0       	ldi	r27, 0x00	; 0
    281e:	a1 53       	subi	r26, 0x31	; 49
    2820:	b4 4b       	sbci	r27, 0xB4	; 180
    2822:	7c 90       	ld	r7, X
			Check_Sum[1] = g_GPS_Data[++i];
    2824:	ee 5f       	subi	r30, 0xFE	; 254
    2826:	f0 e0       	ldi	r31, 0x00	; 0
    2828:	e1 53       	subi	r30, 0x31	; 49
    282a:	f4 4b       	sbci	r31, 0xB4	; 180
    282c:	60 80       	ld	r6, Z
			break;
    282e:	24 c0       	rjmp	.+72     	; 0x2878 <Read_GPS+0xe8>
		}
		else if ((g_GPS_Data[i] == 44)&&(start_index != -1)){comma_indices[j++] = i;}
    2830:	dc 01       	movw	r26, r24
    2832:	a1 53       	subi	r26, 0x31	; 49
    2834:	b4 4b       	sbci	r27, 0xB4	; 180
    2836:	2c 91       	ld	r18, X
    2838:	2c 32       	cpi	r18, 0x2C	; 44
    283a:	51 f4       	brne	.+20     	; 0x2850 <Read_GPS+0xc0>
    283c:	3f 3f       	cpi	r19, 0xFF	; 255
    283e:	41 f0       	breq	.+16     	; 0x2850 <Read_GPS+0xc0>
    2840:	a1 e0       	ldi	r26, 0x01	; 1
    2842:	b0 e0       	ldi	r27, 0x00	; 0
    2844:	ac 0f       	add	r26, r28
    2846:	bd 1f       	adc	r27, r29
    2848:	a4 0f       	add	r26, r20
    284a:	b1 1d       	adc	r27, r1
    284c:	ec 93       	st	X, r30
    284e:	4f 5f       	subi	r20, 0xFF	; 255
		if (start_index != -1){GPS_Data[i] = g_GPS_Data[i];}
    2850:	3f 3f       	cpi	r19, 0xFF	; 255
    2852:	59 f0       	breq	.+22     	; 0x286a <Read_GPS+0xda>
    2854:	dc 01       	movw	r26, r24
    2856:	a1 53       	subi	r26, 0x31	; 49
    2858:	b4 4b       	sbci	r27, 0xB4	; 180
    285a:	2c 91       	ld	r18, X
    285c:	ae e0       	ldi	r26, 0x0E	; 14
    285e:	b0 e0       	ldi	r27, 0x00	; 0
    2860:	ac 0f       	add	r26, r28
    2862:	bd 1f       	adc	r27, r29
    2864:	a8 0f       	add	r26, r24
    2866:	b9 1f       	adc	r27, r25
    2868:	2c 93       	st	X, r18
		i++;
    286a:	ef 5f       	subi	r30, 0xFF	; 255
		comma_indices[13] = {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
	char 
		GPS_Data[100] = {0},
		Check_Sum[2] = {0};
	
	while(i != g_GPS_Data_Index){
    286c:	80 91 ce 4b 	lds	r24, 0x4BCE	; 0x804bce <g_GPS_Data_Index>
    2870:	e8 13       	cpse	r30, r24
    2872:	be cf       	rjmp	.-132    	; 0x27f0 <Read_GPS+0x60>
    2874:	93 2f       	mov	r25, r19
	unsigned char 
		i = 0,
		j = 0;
	signed char 
		start_index = -1,
		end_index = -1,
    2876:	6f ef       	ldi	r22, 0xFF	; 255
		}
		else if ((g_GPS_Data[i] == 44)&&(start_index != -1)){comma_indices[j++] = i;}
		if (start_index != -1){GPS_Data[i] = g_GPS_Data[i];}
		i++;
	}
	g_GPS_Data_Index = 0;
    2878:	10 92 ce 4b 	sts	0x4BCE, r1	; 0x804bce <g_GPS_Data_Index>
	if ((start_index == -1)||(end_index == -1)){return 0;}
    287c:	9f 3f       	cpi	r25, 0xFF	; 255
    287e:	09 f4       	brne	.+2      	; 0x2882 <Read_GPS+0xf2>
    2880:	16 c4       	rjmp	.+2092   	; 0x30ae <Read_GPS+0x91e>
    2882:	6f 3f       	cpi	r22, 0xFF	; 255
    2884:	09 f4       	brne	.+2      	; 0x2888 <Read_GPS+0xf8>
    2886:	15 c4       	rjmp	.+2090   	; 0x30b2 <Read_GPS+0x922>
	
	signed char checksum = GPS_Data[start_index+1];
    2888:	e9 2f       	mov	r30, r25
    288a:	09 2e       	mov	r0, r25
    288c:	00 0c       	add	r0, r0
    288e:	ff 0b       	sbc	r31, r31
    2890:	31 96       	adiw	r30, 0x01	; 1
    2892:	2e e0       	ldi	r18, 0x0E	; 14
    2894:	30 e0       	ldi	r19, 0x00	; 0
    2896:	2c 0f       	add	r18, r28
    2898:	3d 1f       	adc	r19, r29
    289a:	e2 0f       	add	r30, r18
    289c:	f3 1f       	adc	r31, r19
    289e:	80 81       	ld	r24, Z
	for (unsigned char k=start_index+2;k<=end_index;k++){
    28a0:	9e 5f       	subi	r25, 0xFE	; 254
    28a2:	09 c0       	rjmp	.+18     	; 0x28b6 <Read_GPS+0x126>
		checksum ^= GPS_Data[k];
    28a4:	ee e0       	ldi	r30, 0x0E	; 14
    28a6:	f0 e0       	ldi	r31, 0x00	; 0
    28a8:	ec 0f       	add	r30, r28
    28aa:	fd 1f       	adc	r31, r29
    28ac:	e2 0f       	add	r30, r18
    28ae:	f3 1f       	adc	r31, r19
    28b0:	20 81       	ld	r18, Z
    28b2:	82 27       	eor	r24, r18
	}
	g_GPS_Data_Index = 0;
	if ((start_index == -1)||(end_index == -1)){return 0;}
	
	signed char checksum = GPS_Data[start_index+1];
	for (unsigned char k=start_index+2;k<=end_index;k++){
    28b4:	9f 5f       	subi	r25, 0xFF	; 255
    28b6:	29 2f       	mov	r18, r25
    28b8:	30 e0       	ldi	r19, 0x00	; 0
    28ba:	46 2f       	mov	r20, r22
    28bc:	06 2e       	mov	r0, r22
    28be:	00 0c       	add	r0, r0
    28c0:	55 0b       	sbc	r21, r21
    28c2:	42 17       	cp	r20, r18
    28c4:	53 07       	cpc	r21, r19
    28c6:	74 f7       	brge	.-36     	; 0x28a4 <Read_GPS+0x114>
		checksum ^= GPS_Data[k];
	}
	char checksum_hex[3] = {0};
    28c8:	fe 01       	movw	r30, r28
    28ca:	ee 58       	subi	r30, 0x8E	; 142
    28cc:	ff 4f       	sbci	r31, 0xFF	; 255
    28ce:	10 82       	st	Z, r1
    28d0:	11 82       	std	Z+1, r1	; 0x01
    28d2:	12 82       	std	Z+2, r1	; 0x02
	unsigned char converted_length = snprintf(checksum_hex, sizeof(checksum_hex), "%X", checksum);
    28d4:	28 2f       	mov	r18, r24
    28d6:	08 2e       	mov	r0, r24
    28d8:	00 0c       	add	r0, r0
    28da:	33 0b       	sbc	r19, r19
    28dc:	3f 93       	push	r19
    28de:	8f 93       	push	r24
    28e0:	8f ed       	ldi	r24, 0xDF	; 223
    28e2:	91 e4       	ldi	r25, 0x41	; 65
    28e4:	9f 93       	push	r25
    28e6:	8f 93       	push	r24
    28e8:	1f 92       	push	r1
    28ea:	83 e0       	ldi	r24, 0x03	; 3
    28ec:	8f 93       	push	r24
    28ee:	ff 93       	push	r31
    28f0:	ef 93       	push	r30
    28f2:	0e 94 a5 2a 	call	0x554a	; 0x554a <snprintf>
	if (converted_length == 1){ // Won't add the 0 in automatically if the number is less than 8
    28f6:	cd bf       	out	0x3d, r28	; 61
    28f8:	de bf       	out	0x3e, r29	; 62
    28fa:	81 30       	cpi	r24, 0x01	; 1
    28fc:	51 f4       	brne	.+20     	; 0x2912 <Read_GPS+0x182>
		checksum_hex[1] = checksum_hex[0];
    28fe:	e3 96       	adiw	r28, 0x33	; 51
    2900:	8f ad       	ldd	r24, Y+63	; 0x3f
    2902:	e3 97       	sbiw	r28, 0x33	; 51
    2904:	e4 96       	adiw	r28, 0x34	; 52
    2906:	8f af       	std	Y+63, r24	; 0x3f
    2908:	e4 97       	sbiw	r28, 0x34	; 52
		checksum_hex[0] = 48;
    290a:	80 e3       	ldi	r24, 0x30	; 48
    290c:	e3 96       	adiw	r28, 0x33	; 51
    290e:	8f af       	std	Y+63, r24	; 0x3f
    2910:	e3 97       	sbiw	r28, 0x33	; 51
	}
	
	if ((checksum_hex[0] == Check_Sum[0])&&(checksum_hex[1] == Check_Sum[1])){
    2912:	e3 96       	adiw	r28, 0x33	; 51
    2914:	8f ad       	ldd	r24, Y+63	; 0x3f
    2916:	e3 97       	sbiw	r28, 0x33	; 51
    2918:	87 11       	cpse	r24, r7
    291a:	cd c3       	rjmp	.+1946   	; 0x30b6 <Read_GPS+0x926>
    291c:	e4 96       	adiw	r28, 0x34	; 52
    291e:	8f ad       	ldd	r24, Y+63	; 0x3f
    2920:	e4 97       	sbiw	r28, 0x34	; 52
    2922:	86 11       	cpse	r24, r6
    2924:	ca c3       	rjmp	.+1940   	; 0x30ba <Read_GPS+0x92a>
		// If the checksum signifies that the message is valid, then we go through parsing it
		// NMEA RMC information comes in the following order:
		// -> Name, time, status, latitude, NS, longitude, EW, speed, course over ground, date,
		// magnetic variation, magnetic variation EW, position mode, navigation status
		if (comma_indices[2] - comma_indices[1] - 1){
    2926:	2b 81       	ldd	r18, Y+3	; 0x03
    2928:	02 2e       	mov	r0, r18
    292a:	00 0c       	add	r0, r0
    292c:	33 0b       	sbc	r19, r19
    292e:	8a 81       	ldd	r24, Y+2	; 0x02
    2930:	08 2e       	mov	r0, r24
    2932:	00 0c       	add	r0, r0
    2934:	99 0b       	sbc	r25, r25
    2936:	a9 01       	movw	r20, r18
    2938:	48 1b       	sub	r20, r24
    293a:	59 0b       	sbc	r21, r25
    293c:	41 30       	cpi	r20, 0x01	; 1
    293e:	51 05       	cpc	r21, r1
    2940:	51 f0       	breq	.+20     	; 0x2956 <Read_GPS+0x1c6>
			GPS_Position_Status = GPS_Data[comma_indices[1]+1];
    2942:	01 96       	adiw	r24, 0x01	; 1
    2944:	ee e0       	ldi	r30, 0x0E	; 14
    2946:	f0 e0       	ldi	r31, 0x00	; 0
    2948:	ec 0f       	add	r30, r28
    294a:	fd 1f       	adc	r31, r29
    294c:	e8 0f       	add	r30, r24
    294e:	f9 1f       	adc	r31, r25
    2950:	80 81       	ld	r24, Z
    2952:	80 93 b1 4a 	sts	0x4AB1, r24	; 0x804ab1 <GPS_Position_Status.4952>
		}
		if (comma_indices[12] - comma_indices[11] - 1){
    2956:	4d 85       	ldd	r20, Y+13	; 0x0d
    2958:	8c 85       	ldd	r24, Y+12	; 0x0c
    295a:	08 2e       	mov	r0, r24
    295c:	00 0c       	add	r0, r0
    295e:	99 0b       	sbc	r25, r25
    2960:	04 2e       	mov	r0, r20
    2962:	00 0c       	add	r0, r0
    2964:	55 0b       	sbc	r21, r21
    2966:	48 1b       	sub	r20, r24
    2968:	59 0b       	sbc	r21, r25
    296a:	41 30       	cpi	r20, 0x01	; 1
    296c:	51 05       	cpc	r21, r1
    296e:	51 f0       	breq	.+20     	; 0x2984 <Read_GPS+0x1f4>
			GPS_Position_Mode = GPS_Data[comma_indices[11]+1];
    2970:	01 96       	adiw	r24, 0x01	; 1
    2972:	ee e0       	ldi	r30, 0x0E	; 14
    2974:	f0 e0       	ldi	r31, 0x00	; 0
    2976:	ec 0f       	add	r30, r28
    2978:	fd 1f       	adc	r31, r29
    297a:	e8 0f       	add	r30, r24
    297c:	f9 1f       	adc	r31, r25
    297e:	80 81       	ld	r24, Z
    2980:	80 93 b0 4a 	sts	0x4AB0, r24	; 0x804ab0 <GPS_Position_Mode.4953>
		}
		if ((GPS_Position_Status == 'A')&&(GPS_Position_Mode == 'A')){
    2984:	80 91 b1 4a 	lds	r24, 0x4AB1	; 0x804ab1 <GPS_Position_Status.4952>
    2988:	81 34       	cpi	r24, 0x41	; 65
    298a:	09 f0       	breq	.+2      	; 0x298e <Read_GPS+0x1fe>
    298c:	98 c3       	rjmp	.+1840   	; 0x30be <Read_GPS+0x92e>
    298e:	80 91 b0 4a 	lds	r24, 0x4AB0	; 0x804ab0 <GPS_Position_Mode.4953>
    2992:	81 34       	cpi	r24, 0x41	; 65
    2994:	09 f0       	breq	.+2      	; 0x2998 <Read_GPS+0x208>
    2996:	95 c3       	rjmp	.+1834   	; 0x30c2 <Read_GPS+0x932>
			if (comma_indices[3]-comma_indices[2] - 1){
    2998:	6c 80       	ldd	r6, Y+4	; 0x04
    299a:	06 2c       	mov	r0, r6
    299c:	00 0c       	add	r0, r0
    299e:	77 08       	sbc	r7, r7
    29a0:	c3 01       	movw	r24, r6
    29a2:	82 1b       	sub	r24, r18
    29a4:	93 0b       	sbc	r25, r19
    29a6:	01 97       	sbiw	r24, 0x01	; 1
    29a8:	09 f4       	brne	.+2      	; 0x29ac <Read_GPS+0x21c>
    29aa:	96 c0       	rjmp	.+300    	; 0x2ad8 <Read_GPS+0x348>
				char Latitude_degrees[] = {GPS_Data[comma_indices[2]+1], GPS_Data[comma_indices[2]+2], '\0'};
    29ac:	f9 01       	movw	r30, r18
    29ae:	31 96       	adiw	r30, 0x01	; 1
    29b0:	6e e0       	ldi	r22, 0x0E	; 14
    29b2:	70 e0       	ldi	r23, 0x00	; 0
    29b4:	6c 0f       	add	r22, r28
    29b6:	7d 1f       	adc	r23, r29
    29b8:	e6 0f       	add	r30, r22
    29ba:	f7 1f       	adc	r31, r23
    29bc:	80 81       	ld	r24, Z
    29be:	c1 58       	subi	r28, 0x81	; 129
    29c0:	df 4f       	sbci	r29, 0xFF	; 255
    29c2:	88 83       	st	Y, r24
    29c4:	cf 57       	subi	r28, 0x7F	; 127
    29c6:	d0 40       	sbci	r29, 0x00	; 0
    29c8:	f9 01       	movw	r30, r18
    29ca:	32 96       	adiw	r30, 0x02	; 2
    29cc:	e6 0f       	add	r30, r22
    29ce:	f7 1f       	adc	r31, r23
    29d0:	80 81       	ld	r24, Z
    29d2:	c0 58       	subi	r28, 0x80	; 128
    29d4:	df 4f       	sbci	r29, 0xFF	; 255
    29d6:	88 83       	st	Y, r24
    29d8:	c0 58       	subi	r28, 0x80	; 128
    29da:	d0 40       	sbci	r29, 0x00	; 0
    29dc:	cf 57       	subi	r28, 0x7F	; 127
    29de:	df 4f       	sbci	r29, 0xFF	; 255
    29e0:	18 82       	st	Y, r1
    29e2:	c1 58       	subi	r28, 0x81	; 129
    29e4:	d0 40       	sbci	r29, 0x00	; 0
				char Latitude_minutes_integer[] = {GPS_Data[comma_indices[2]+3], GPS_Data[comma_indices[2]+4], '\0'};
    29e6:	f9 01       	movw	r30, r18
    29e8:	33 96       	adiw	r30, 0x03	; 3
    29ea:	e6 0f       	add	r30, r22
    29ec:	f7 1f       	adc	r31, r23
    29ee:	80 81       	ld	r24, Z
    29f0:	ec 96       	adiw	r28, 0x3c	; 60
    29f2:	8f af       	std	Y+63, r24	; 0x3f
    29f4:	ec 97       	sbiw	r28, 0x3c	; 60
    29f6:	f9 01       	movw	r30, r18
    29f8:	34 96       	adiw	r30, 0x04	; 4
    29fa:	e6 0f       	add	r30, r22
    29fc:	f7 1f       	adc	r31, r23
    29fe:	80 81       	ld	r24, Z
    2a00:	ed 96       	adiw	r28, 0x3d	; 61
    2a02:	8f af       	std	Y+63, r24	; 0x3f
    2a04:	ed 97       	sbiw	r28, 0x3d	; 61
    2a06:	ee 96       	adiw	r28, 0x3e	; 62
    2a08:	1f ae       	std	Y+63, r1	; 0x3f
    2a0a:	ee 97       	sbiw	r28, 0x3e	; 62
				char Latitude_minutes_decimal[] = {GPS_Data[comma_indices[2]+6], GPS_Data[comma_indices[2]+7], GPS_Data[comma_indices[2]+8], GPS_Data[comma_indices[2]+9], GPS_Data[comma_indices[2]+10], '\0'};
    2a0c:	f9 01       	movw	r30, r18
    2a0e:	36 96       	adiw	r30, 0x06	; 6
    2a10:	e6 0f       	add	r30, r22
    2a12:	f7 1f       	adc	r31, r23
    2a14:	80 81       	ld	r24, Z
    2a16:	e6 96       	adiw	r28, 0x36	; 54
    2a18:	8f af       	std	Y+63, r24	; 0x3f
    2a1a:	e6 97       	sbiw	r28, 0x36	; 54
    2a1c:	f9 01       	movw	r30, r18
    2a1e:	37 96       	adiw	r30, 0x07	; 7
    2a20:	e6 0f       	add	r30, r22
    2a22:	f7 1f       	adc	r31, r23
    2a24:	80 81       	ld	r24, Z
    2a26:	e7 96       	adiw	r28, 0x37	; 55
    2a28:	8f af       	std	Y+63, r24	; 0x3f
    2a2a:	e7 97       	sbiw	r28, 0x37	; 55
    2a2c:	f9 01       	movw	r30, r18
    2a2e:	38 96       	adiw	r30, 0x08	; 8
    2a30:	e6 0f       	add	r30, r22
    2a32:	f7 1f       	adc	r31, r23
    2a34:	80 81       	ld	r24, Z
    2a36:	e8 96       	adiw	r28, 0x38	; 56
    2a38:	8f af       	std	Y+63, r24	; 0x3f
    2a3a:	e8 97       	sbiw	r28, 0x38	; 56
    2a3c:	f9 01       	movw	r30, r18
    2a3e:	39 96       	adiw	r30, 0x09	; 9
    2a40:	e6 0f       	add	r30, r22
    2a42:	f7 1f       	adc	r31, r23
    2a44:	80 81       	ld	r24, Z
    2a46:	e9 96       	adiw	r28, 0x39	; 57
    2a48:	8f af       	std	Y+63, r24	; 0x3f
    2a4a:	e9 97       	sbiw	r28, 0x39	; 57
    2a4c:	26 5f       	subi	r18, 0xF6	; 246
    2a4e:	3f 4f       	sbci	r19, 0xFF	; 255
    2a50:	fb 01       	movw	r30, r22
    2a52:	e2 0f       	add	r30, r18
    2a54:	f3 1f       	adc	r31, r19
    2a56:	80 81       	ld	r24, Z
    2a58:	ea 96       	adiw	r28, 0x3a	; 58
    2a5a:	8f af       	std	Y+63, r24	; 0x3f
    2a5c:	ea 97       	sbiw	r28, 0x3a	; 58
    2a5e:	eb 96       	adiw	r28, 0x3b	; 59
    2a60:	1f ae       	std	Y+63, r1	; 0x3f
    2a62:	eb 97       	sbiw	r28, 0x3b	; 59
				Latitude_window[window_counter] = ((atol(Latitude_degrees)*60)+atol(Latitude_minutes_integer))*100000 + atol(Latitude_minutes_decimal);
    2a64:	e0 91 af 4a 	lds	r30, 0x4AAF	; 0x804aaf <window_counter.4954>
    2a68:	4e 2e       	mov	r4, r30
    2a6a:	51 2c       	mov	r5, r1
    2a6c:	ce 01       	movw	r24, r28
    2a6e:	81 58       	subi	r24, 0x81	; 129
    2a70:	9f 4f       	sbci	r25, 0xFF	; 255
    2a72:	0e 94 16 29 	call	0x522c	; 0x522c <atol>
    2a76:	9b 01       	movw	r18, r22
    2a78:	ac 01       	movw	r20, r24
    2a7a:	ac e3       	ldi	r26, 0x3C	; 60
    2a7c:	b0 e0       	ldi	r27, 0x00	; 0
    2a7e:	0e 94 25 26 	call	0x4c4a	; 0x4c4a <__muluhisi3>
    2a82:	6b 01       	movw	r12, r22
    2a84:	7c 01       	movw	r14, r24
    2a86:	ce 01       	movw	r24, r28
    2a88:	85 58       	subi	r24, 0x85	; 133
    2a8a:	9f 4f       	sbci	r25, 0xFF	; 255
    2a8c:	0e 94 16 29 	call	0x522c	; 0x522c <atol>
    2a90:	a7 01       	movw	r20, r14
    2a92:	96 01       	movw	r18, r12
    2a94:	26 0f       	add	r18, r22
    2a96:	37 1f       	adc	r19, r23
    2a98:	48 1f       	adc	r20, r24
    2a9a:	59 1f       	adc	r21, r25
    2a9c:	60 ea       	ldi	r22, 0xA0	; 160
    2a9e:	76 e8       	ldi	r23, 0x86	; 134
    2aa0:	81 e0       	ldi	r24, 0x01	; 1
    2aa2:	90 e0       	ldi	r25, 0x00	; 0
    2aa4:	0e 94 0c 26 	call	0x4c18	; 0x4c18 <__mulsi3>
    2aa8:	6b 01       	movw	r12, r22
    2aaa:	7c 01       	movw	r14, r24
    2aac:	ce 01       	movw	r24, r28
    2aae:	8b 58       	subi	r24, 0x8B	; 139
    2ab0:	9f 4f       	sbci	r25, 0xFF	; 255
    2ab2:	0e 94 16 29 	call	0x522c	; 0x522c <atol>
    2ab6:	dc 01       	movw	r26, r24
    2ab8:	cb 01       	movw	r24, r22
    2aba:	8c 0d       	add	r24, r12
    2abc:	9d 1d       	adc	r25, r13
    2abe:	ae 1d       	adc	r26, r14
    2ac0:	bf 1d       	adc	r27, r15
    2ac2:	f2 01       	movw	r30, r4
    2ac4:	ee 0f       	add	r30, r30
    2ac6:	ff 1f       	adc	r31, r31
    2ac8:	ee 0f       	add	r30, r30
    2aca:	ff 1f       	adc	r31, r31
    2acc:	e1 56       	subi	r30, 0x61	; 97
    2ace:	f5 4b       	sbci	r31, 0xB5	; 181
    2ad0:	80 83       	st	Z, r24
    2ad2:	91 83       	std	Z+1, r25	; 0x01
    2ad4:	a2 83       	std	Z+2, r26	; 0x02
    2ad6:	b3 83       	std	Z+3, r27	; 0x03
			}
			if (comma_indices[4] - comma_indices[3] - 1){
    2ad8:	ed 81       	ldd	r30, Y+5	; 0x05
    2ada:	0e 2e       	mov	r0, r30
    2adc:	00 0c       	add	r0, r0
    2ade:	ff 0b       	sbc	r31, r31
    2ae0:	cf 01       	movw	r24, r30
    2ae2:	86 19       	sub	r24, r6
    2ae4:	97 09       	sbc	r25, r7
    2ae6:	01 97       	sbiw	r24, 0x01	; 1
    2ae8:	91 f1       	breq	.+100    	; 0x2b4e <Read_GPS+0x3be>
				Latitude_window[window_counter] *= (GPS_Data[comma_indices[3]+1] == 'N') ? 1 : -1;
    2aea:	80 91 af 4a 	lds	r24, 0x4AAF	; 0x804aaf <window_counter.4954>
    2aee:	08 2f       	mov	r16, r24
    2af0:	10 e0       	ldi	r17, 0x00	; 0
    2af2:	d8 01       	movw	r26, r16
    2af4:	aa 0f       	add	r26, r26
    2af6:	bb 1f       	adc	r27, r27
    2af8:	aa 0f       	add	r26, r26
    2afa:	bb 1f       	adc	r27, r27
    2afc:	a1 56       	subi	r26, 0x61	; 97
    2afe:	b5 4b       	sbci	r27, 0xB5	; 181
    2b00:	6d 91       	ld	r22, X+
    2b02:	7d 91       	ld	r23, X+
    2b04:	8d 91       	ld	r24, X+
    2b06:	9c 91       	ld	r25, X
    2b08:	d3 01       	movw	r26, r6
    2b0a:	11 96       	adiw	r26, 0x01	; 1
    2b0c:	2e e0       	ldi	r18, 0x0E	; 14
    2b0e:	30 e0       	ldi	r19, 0x00	; 0
    2b10:	2c 0f       	add	r18, r28
    2b12:	3d 1f       	adc	r19, r29
    2b14:	a2 0f       	add	r26, r18
    2b16:	b3 1f       	adc	r27, r19
    2b18:	2c 91       	ld	r18, X
    2b1a:	2e 34       	cpi	r18, 0x4E	; 78
    2b1c:	29 f4       	brne	.+10     	; 0x2b28 <Read_GPS+0x398>
    2b1e:	21 e0       	ldi	r18, 0x01	; 1
    2b20:	30 e0       	ldi	r19, 0x00	; 0
    2b22:	40 e0       	ldi	r20, 0x00	; 0
    2b24:	50 e0       	ldi	r21, 0x00	; 0
    2b26:	03 c0       	rjmp	.+6      	; 0x2b2e <Read_GPS+0x39e>
    2b28:	2f ef       	ldi	r18, 0xFF	; 255
    2b2a:	3f ef       	ldi	r19, 0xFF	; 255
    2b2c:	a9 01       	movw	r20, r18
    2b2e:	d8 01       	movw	r26, r16
    2b30:	aa 0f       	add	r26, r26
    2b32:	bb 1f       	adc	r27, r27
    2b34:	aa 0f       	add	r26, r26
    2b36:	bb 1f       	adc	r27, r27
    2b38:	8d 01       	movw	r16, r26
    2b3a:	01 56       	subi	r16, 0x61	; 97
    2b3c:	15 4b       	sbci	r17, 0xB5	; 181
    2b3e:	0e 94 0c 26 	call	0x4c18	; 0x4c18 <__mulsi3>
    2b42:	d8 01       	movw	r26, r16
    2b44:	6d 93       	st	X+, r22
    2b46:	7d 93       	st	X+, r23
    2b48:	8d 93       	st	X+, r24
    2b4a:	9c 93       	st	X, r25
    2b4c:	13 97       	sbiw	r26, 0x03	; 3
			}
			if (comma_indices[5]-comma_indices[4] - 1){
    2b4e:	6e 80       	ldd	r6, Y+6	; 0x06
    2b50:	06 2c       	mov	r0, r6
    2b52:	00 0c       	add	r0, r0
    2b54:	77 08       	sbc	r7, r7
    2b56:	c3 01       	movw	r24, r6
    2b58:	8e 1b       	sub	r24, r30
    2b5a:	9f 0b       	sbc	r25, r31
    2b5c:	01 97       	sbiw	r24, 0x01	; 1
    2b5e:	09 f4       	brne	.+2      	; 0x2b62 <Read_GPS+0x3d2>
    2b60:	9c c0       	rjmp	.+312    	; 0x2c9a <Read_GPS+0x50a>
				char Longitude_degrees[] = {GPS_Data[comma_indices[4]+1], GPS_Data[comma_indices[4]+2], GPS_Data[comma_indices[4]+3], '\0'};
    2b62:	df 01       	movw	r26, r30
    2b64:	11 96       	adiw	r26, 0x01	; 1
    2b66:	2e e0       	ldi	r18, 0x0E	; 14
    2b68:	30 e0       	ldi	r19, 0x00	; 0
    2b6a:	2c 0f       	add	r18, r28
    2b6c:	3d 1f       	adc	r19, r29
    2b6e:	a2 0f       	add	r26, r18
    2b70:	b3 1f       	adc	r27, r19
    2b72:	8c 91       	ld	r24, X
    2b74:	ec 96       	adiw	r28, 0x3c	; 60
    2b76:	8f af       	std	Y+63, r24	; 0x3f
    2b78:	ec 97       	sbiw	r28, 0x3c	; 60
    2b7a:	df 01       	movw	r26, r30
    2b7c:	12 96       	adiw	r26, 0x02	; 2
    2b7e:	a2 0f       	add	r26, r18
    2b80:	b3 1f       	adc	r27, r19
    2b82:	8c 91       	ld	r24, X
    2b84:	ed 96       	adiw	r28, 0x3d	; 61
    2b86:	8f af       	std	Y+63, r24	; 0x3f
    2b88:	ed 97       	sbiw	r28, 0x3d	; 61
    2b8a:	df 01       	movw	r26, r30
    2b8c:	13 96       	adiw	r26, 0x03	; 3
    2b8e:	a2 0f       	add	r26, r18
    2b90:	b3 1f       	adc	r27, r19
    2b92:	8c 91       	ld	r24, X
    2b94:	ee 96       	adiw	r28, 0x3e	; 62
    2b96:	8f af       	std	Y+63, r24	; 0x3f
    2b98:	ee 97       	sbiw	r28, 0x3e	; 62
    2b9a:	ef 96       	adiw	r28, 0x3f	; 63
    2b9c:	1f ae       	std	Y+63, r1	; 0x3f
    2b9e:	ef 97       	sbiw	r28, 0x3f	; 63
				char Longitude_minutes_integer[] = {GPS_Data[comma_indices[4]+4], GPS_Data[comma_indices[4]+5], '\0'};
    2ba0:	df 01       	movw	r26, r30
    2ba2:	14 96       	adiw	r26, 0x04	; 4
    2ba4:	a2 0f       	add	r26, r18
    2ba6:	b3 1f       	adc	r27, r19
    2ba8:	8c 91       	ld	r24, X
    2baa:	c1 58       	subi	r28, 0x81	; 129
    2bac:	df 4f       	sbci	r29, 0xFF	; 255
    2bae:	88 83       	st	Y, r24
    2bb0:	cf 57       	subi	r28, 0x7F	; 127
    2bb2:	d0 40       	sbci	r29, 0x00	; 0
    2bb4:	df 01       	movw	r26, r30
    2bb6:	15 96       	adiw	r26, 0x05	; 5
    2bb8:	a2 0f       	add	r26, r18
    2bba:	b3 1f       	adc	r27, r19
    2bbc:	8c 91       	ld	r24, X
    2bbe:	c0 58       	subi	r28, 0x80	; 128
    2bc0:	df 4f       	sbci	r29, 0xFF	; 255
    2bc2:	88 83       	st	Y, r24
    2bc4:	c0 58       	subi	r28, 0x80	; 128
    2bc6:	d0 40       	sbci	r29, 0x00	; 0
    2bc8:	cf 57       	subi	r28, 0x7F	; 127
    2bca:	df 4f       	sbci	r29, 0xFF	; 255
    2bcc:	18 82       	st	Y, r1
    2bce:	c1 58       	subi	r28, 0x81	; 129
    2bd0:	d0 40       	sbci	r29, 0x00	; 0
				char Longitude_minutes_decimal[] = {GPS_Data[comma_indices[4]+7], GPS_Data[comma_indices[4]+8], GPS_Data[comma_indices[4]+9], GPS_Data[comma_indices[4]+10], GPS_Data[comma_indices[4]+11], '\0'};
    2bd2:	df 01       	movw	r26, r30
    2bd4:	17 96       	adiw	r26, 0x07	; 7
    2bd6:	a2 0f       	add	r26, r18
    2bd8:	b3 1f       	adc	r27, r19
    2bda:	8c 91       	ld	r24, X
    2bdc:	e6 96       	adiw	r28, 0x36	; 54
    2bde:	8f af       	std	Y+63, r24	; 0x3f
    2be0:	e6 97       	sbiw	r28, 0x36	; 54
    2be2:	df 01       	movw	r26, r30
    2be4:	18 96       	adiw	r26, 0x08	; 8
    2be6:	a2 0f       	add	r26, r18
    2be8:	b3 1f       	adc	r27, r19
    2bea:	8c 91       	ld	r24, X
    2bec:	e7 96       	adiw	r28, 0x37	; 55
    2bee:	8f af       	std	Y+63, r24	; 0x3f
    2bf0:	e7 97       	sbiw	r28, 0x37	; 55
    2bf2:	df 01       	movw	r26, r30
    2bf4:	19 96       	adiw	r26, 0x09	; 9
    2bf6:	a2 0f       	add	r26, r18
    2bf8:	b3 1f       	adc	r27, r19
    2bfa:	8c 91       	ld	r24, X
    2bfc:	e8 96       	adiw	r28, 0x38	; 56
    2bfe:	8f af       	std	Y+63, r24	; 0x3f
    2c00:	e8 97       	sbiw	r28, 0x38	; 56
    2c02:	df 01       	movw	r26, r30
    2c04:	1a 96       	adiw	r26, 0x0a	; 10
    2c06:	a2 0f       	add	r26, r18
    2c08:	b3 1f       	adc	r27, r19
    2c0a:	8c 91       	ld	r24, X
    2c0c:	e9 96       	adiw	r28, 0x39	; 57
    2c0e:	8f af       	std	Y+63, r24	; 0x3f
    2c10:	e9 97       	sbiw	r28, 0x39	; 57
    2c12:	3b 96       	adiw	r30, 0x0b	; 11
    2c14:	e2 0f       	add	r30, r18
    2c16:	f3 1f       	adc	r31, r19
    2c18:	80 81       	ld	r24, Z
    2c1a:	ea 96       	adiw	r28, 0x3a	; 58
    2c1c:	8f af       	std	Y+63, r24	; 0x3f
    2c1e:	ea 97       	sbiw	r28, 0x3a	; 58
    2c20:	eb 96       	adiw	r28, 0x3b	; 59
    2c22:	1f ae       	std	Y+63, r1	; 0x3f
    2c24:	eb 97       	sbiw	r28, 0x3b	; 59
				Longitude_window[window_counter] = ((atol(Longitude_degrees)*60)+atol(Longitude_minutes_integer))*100000 + atol(Longitude_minutes_decimal);
    2c26:	e0 91 af 4a 	lds	r30, 0x4AAF	; 0x804aaf <window_counter.4954>
    2c2a:	4e 2e       	mov	r4, r30
    2c2c:	51 2c       	mov	r5, r1
    2c2e:	ce 01       	movw	r24, r28
    2c30:	85 58       	subi	r24, 0x85	; 133
    2c32:	9f 4f       	sbci	r25, 0xFF	; 255
    2c34:	0e 94 16 29 	call	0x522c	; 0x522c <atol>
    2c38:	9b 01       	movw	r18, r22
    2c3a:	ac 01       	movw	r20, r24
    2c3c:	ac e3       	ldi	r26, 0x3C	; 60
    2c3e:	b0 e0       	ldi	r27, 0x00	; 0
    2c40:	0e 94 25 26 	call	0x4c4a	; 0x4c4a <__muluhisi3>
    2c44:	6b 01       	movw	r12, r22
    2c46:	7c 01       	movw	r14, r24
    2c48:	ce 01       	movw	r24, r28
    2c4a:	81 58       	subi	r24, 0x81	; 129
    2c4c:	9f 4f       	sbci	r25, 0xFF	; 255
    2c4e:	0e 94 16 29 	call	0x522c	; 0x522c <atol>
    2c52:	a7 01       	movw	r20, r14
    2c54:	96 01       	movw	r18, r12
    2c56:	26 0f       	add	r18, r22
    2c58:	37 1f       	adc	r19, r23
    2c5a:	48 1f       	adc	r20, r24
    2c5c:	59 1f       	adc	r21, r25
    2c5e:	60 ea       	ldi	r22, 0xA0	; 160
    2c60:	76 e8       	ldi	r23, 0x86	; 134
    2c62:	81 e0       	ldi	r24, 0x01	; 1
    2c64:	90 e0       	ldi	r25, 0x00	; 0
    2c66:	0e 94 0c 26 	call	0x4c18	; 0x4c18 <__mulsi3>
    2c6a:	6b 01       	movw	r12, r22
    2c6c:	7c 01       	movw	r14, r24
    2c6e:	ce 01       	movw	r24, r28
    2c70:	8b 58       	subi	r24, 0x8B	; 139
    2c72:	9f 4f       	sbci	r25, 0xFF	; 255
    2c74:	0e 94 16 29 	call	0x522c	; 0x522c <atol>
    2c78:	dc 01       	movw	r26, r24
    2c7a:	cb 01       	movw	r24, r22
    2c7c:	8c 0d       	add	r24, r12
    2c7e:	9d 1d       	adc	r25, r13
    2c80:	ae 1d       	adc	r26, r14
    2c82:	bf 1d       	adc	r27, r15
    2c84:	f2 01       	movw	r30, r4
    2c86:	ee 0f       	add	r30, r30
    2c88:	ff 1f       	adc	r31, r31
    2c8a:	ee 0f       	add	r30, r30
    2c8c:	ff 1f       	adc	r31, r31
    2c8e:	e1 57       	subi	r30, 0x71	; 113
    2c90:	f5 4b       	sbci	r31, 0xB5	; 181
    2c92:	80 83       	st	Z, r24
    2c94:	91 83       	std	Z+1, r25	; 0x01
    2c96:	a2 83       	std	Z+2, r26	; 0x02
    2c98:	b3 83       	std	Z+3, r27	; 0x03
			}
			if (comma_indices[6] - comma_indices[5] - 1){
    2c9a:	2f 80       	ldd	r2, Y+7	; 0x07
    2c9c:	42 2c       	mov	r4, r2
    2c9e:	02 2c       	mov	r0, r2
    2ca0:	00 0c       	add	r0, r0
    2ca2:	55 08       	sbc	r5, r5
    2ca4:	c2 01       	movw	r24, r4
    2ca6:	86 19       	sub	r24, r6
    2ca8:	97 09       	sbc	r25, r7
    2caa:	01 97       	sbiw	r24, 0x01	; 1
    2cac:	79 f1       	breq	.+94     	; 0x2d0c <Read_GPS+0x57c>
				Longitude_window[window_counter] *= (GPS_Data[comma_indices[5]+1] == 'W') ? -1 : 1;
    2cae:	80 91 af 4a 	lds	r24, 0x4AAF	; 0x804aaf <window_counter.4954>
    2cb2:	a8 2f       	mov	r26, r24
    2cb4:	b0 e0       	ldi	r27, 0x00	; 0
    2cb6:	fd 01       	movw	r30, r26
    2cb8:	ee 0f       	add	r30, r30
    2cba:	ff 1f       	adc	r31, r31
    2cbc:	ee 0f       	add	r30, r30
    2cbe:	ff 1f       	adc	r31, r31
    2cc0:	e1 57       	subi	r30, 0x71	; 113
    2cc2:	f5 4b       	sbci	r31, 0xB5	; 181
    2cc4:	60 81       	ld	r22, Z
    2cc6:	71 81       	ldd	r23, Z+1	; 0x01
    2cc8:	82 81       	ldd	r24, Z+2	; 0x02
    2cca:	93 81       	ldd	r25, Z+3	; 0x03
    2ccc:	f3 01       	movw	r30, r6
    2cce:	31 96       	adiw	r30, 0x01	; 1
    2cd0:	4e e0       	ldi	r20, 0x0E	; 14
    2cd2:	50 e0       	ldi	r21, 0x00	; 0
    2cd4:	4c 0f       	add	r20, r28
    2cd6:	5d 1f       	adc	r21, r29
    2cd8:	e4 0f       	add	r30, r20
    2cda:	f5 1f       	adc	r31, r21
    2cdc:	20 81       	ld	r18, Z
    2cde:	27 35       	cpi	r18, 0x57	; 87
    2ce0:	21 f4       	brne	.+8      	; 0x2cea <Read_GPS+0x55a>
    2ce2:	2f ef       	ldi	r18, 0xFF	; 255
    2ce4:	3f ef       	ldi	r19, 0xFF	; 255
    2ce6:	a9 01       	movw	r20, r18
    2ce8:	04 c0       	rjmp	.+8      	; 0x2cf2 <Read_GPS+0x562>
    2cea:	21 e0       	ldi	r18, 0x01	; 1
    2cec:	30 e0       	ldi	r19, 0x00	; 0
    2cee:	40 e0       	ldi	r20, 0x00	; 0
    2cf0:	50 e0       	ldi	r21, 0x00	; 0
    2cf2:	fd 01       	movw	r30, r26
    2cf4:	ee 0f       	add	r30, r30
    2cf6:	ff 1f       	adc	r31, r31
    2cf8:	ee 0f       	add	r30, r30
    2cfa:	ff 1f       	adc	r31, r31
    2cfc:	e1 57       	subi	r30, 0x71	; 113
    2cfe:	f5 4b       	sbci	r31, 0xB5	; 181
    2d00:	0e 94 0c 26 	call	0x4c18	; 0x4c18 <__mulsi3>
    2d04:	60 83       	st	Z, r22
    2d06:	71 83       	std	Z+1, r23	; 0x01
    2d08:	82 83       	std	Z+2, r24	; 0x02
    2d0a:	93 83       	std	Z+3, r25	; 0x03
			}
			if (comma_indices[7] - comma_indices[6] - 1){
    2d0c:	38 84       	ldd	r3, Y+8	; 0x08
    2d0e:	63 2c       	mov	r6, r3
    2d10:	03 2c       	mov	r0, r3
    2d12:	00 0c       	add	r0, r0
    2d14:	77 08       	sbc	r7, r7
    2d16:	c3 01       	movw	r24, r6
    2d18:	84 19       	sub	r24, r4
    2d1a:	95 09       	sbc	r25, r5
    2d1c:	01 97       	sbiw	r24, 0x01	; 1
    2d1e:	09 f4       	brne	.+2      	; 0x2d22 <Read_GPS+0x592>
    2d20:	4d c0       	rjmp	.+154    	; 0x2dbc <Read_GPS+0x62c>
				unsigned char k = comma_indices[7] - comma_indices[6];
    2d22:	43 2d       	mov	r20, r3
    2d24:	42 19       	sub	r20, r2
				char Speed[6] = {0};
    2d26:	fe 01       	movw	r30, r28
    2d28:	eb 58       	subi	r30, 0x8B	; 139
    2d2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d2c:	86 e0       	ldi	r24, 0x06	; 6
    2d2e:	df 01       	movw	r26, r30
    2d30:	1d 92       	st	X+, r1
    2d32:	8a 95       	dec	r24
    2d34:	e9 f7       	brne	.-6      	; 0x2d30 <Read_GPS+0x5a0>
				char *ptr;
				for (unsigned char index=0;index<k;index++){
    2d36:	20 e0       	ldi	r18, 0x00	; 0
    2d38:	15 c0       	rjmp	.+42     	; 0x2d64 <Read_GPS+0x5d4>
					Speed[index] = GPS_Data[comma_indices[6]+1+index];
    2d3a:	82 2f       	mov	r24, r18
    2d3c:	90 e0       	ldi	r25, 0x00	; 0
    2d3e:	f2 01       	movw	r30, r4
    2d40:	31 96       	adiw	r30, 0x01	; 1
    2d42:	e8 0f       	add	r30, r24
    2d44:	f9 1f       	adc	r31, r25
    2d46:	6e e0       	ldi	r22, 0x0E	; 14
    2d48:	70 e0       	ldi	r23, 0x00	; 0
    2d4a:	6c 0f       	add	r22, r28
    2d4c:	7d 1f       	adc	r23, r29
    2d4e:	e6 0f       	add	r30, r22
    2d50:	f7 1f       	adc	r31, r23
    2d52:	30 81       	ld	r19, Z
    2d54:	e5 e7       	ldi	r30, 0x75	; 117
    2d56:	f0 e0       	ldi	r31, 0x00	; 0
    2d58:	ec 0f       	add	r30, r28
    2d5a:	fd 1f       	adc	r31, r29
    2d5c:	e8 0f       	add	r30, r24
    2d5e:	f9 1f       	adc	r31, r25
    2d60:	30 83       	st	Z, r19
			}
			if (comma_indices[7] - comma_indices[6] - 1){
				unsigned char k = comma_indices[7] - comma_indices[6];
				char Speed[6] = {0};
				char *ptr;
				for (unsigned char index=0;index<k;index++){
    2d62:	2f 5f       	subi	r18, 0xFF	; 255
    2d64:	24 17       	cp	r18, r20
    2d66:	48 f3       	brcs	.-46     	; 0x2d3a <Read_GPS+0x5aa>
					Speed[index] = GPS_Data[comma_indices[6]+1+index];
				}
				Drone->Speed_over_ground = Drone->Speed_over_ground*0.9 + strtod(Speed, &ptr)*0.1;
    2d68:	24 01       	movw	r4, r8
    2d6a:	74 e5       	ldi	r23, 0x54	; 84
    2d6c:	47 0e       	add	r4, r23
    2d6e:	51 1c       	adc	r5, r1
    2d70:	d2 01       	movw	r26, r4
    2d72:	6d 91       	ld	r22, X+
    2d74:	7d 91       	ld	r23, X+
    2d76:	8d 91       	ld	r24, X+
    2d78:	9c 91       	ld	r25, X
    2d7a:	26 e6       	ldi	r18, 0x66	; 102
    2d7c:	36 e6       	ldi	r19, 0x66	; 102
    2d7e:	46 e6       	ldi	r20, 0x66	; 102
    2d80:	5f e3       	ldi	r21, 0x3F	; 63
    2d82:	0e 94 12 20 	call	0x4024	; 0x4024 <__mulsf3>
    2d86:	6b 01       	movw	r12, r22
    2d88:	7c 01       	movw	r14, r24
    2d8a:	be 01       	movw	r22, r28
    2d8c:	65 58       	subi	r22, 0x85	; 133
    2d8e:	7f 4f       	sbci	r23, 0xFF	; 255
    2d90:	ce 01       	movw	r24, r28
    2d92:	8b 58       	subi	r24, 0x8B	; 139
    2d94:	9f 4f       	sbci	r25, 0xFF	; 255
    2d96:	0e 94 9c 27 	call	0x4f38	; 0x4f38 <strtod>
    2d9a:	2d ec       	ldi	r18, 0xCD	; 205
    2d9c:	3c ec       	ldi	r19, 0xCC	; 204
    2d9e:	4c ec       	ldi	r20, 0xCC	; 204
    2da0:	5d e3       	ldi	r21, 0x3D	; 61
    2da2:	0e 94 12 20 	call	0x4024	; 0x4024 <__mulsf3>
    2da6:	9b 01       	movw	r18, r22
    2da8:	ac 01       	movw	r20, r24
    2daa:	c7 01       	movw	r24, r14
    2dac:	b6 01       	movw	r22, r12
    2dae:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <__addsf3>
    2db2:	f2 01       	movw	r30, r4
    2db4:	60 83       	st	Z, r22
    2db6:	71 83       	std	Z+1, r23	; 0x01
    2db8:	82 83       	std	Z+2, r24	; 0x02
    2dba:	93 83       	std	Z+3, r25	; 0x03
			}
			if (comma_indices[8] - comma_indices[7] - 1){
    2dbc:	39 85       	ldd	r19, Y+9	; 0x09
    2dbe:	83 2f       	mov	r24, r19
    2dc0:	03 2e       	mov	r0, r19
    2dc2:	00 0c       	add	r0, r0
    2dc4:	99 0b       	sbc	r25, r25
    2dc6:	86 19       	sub	r24, r6
    2dc8:	97 09       	sbc	r25, r7
    2dca:	01 97       	sbiw	r24, 0x01	; 1
    2dcc:	49 f1       	breq	.+82     	; 0x2e20 <Read_GPS+0x690>
				unsigned char k = comma_indices[8] - comma_indices[7];
    2dce:	33 19       	sub	r19, r3
				char Course[6];
				char *ptr;
				for (unsigned char index=0;index<k;index++){
    2dd0:	20 e0       	ldi	r18, 0x00	; 0
    2dd2:	15 c0       	rjmp	.+42     	; 0x2dfe <Read_GPS+0x66e>
					Course[index] = GPS_Data[comma_indices[7]+1+index];
    2dd4:	82 2f       	mov	r24, r18
    2dd6:	90 e0       	ldi	r25, 0x00	; 0
    2dd8:	f3 01       	movw	r30, r6
    2dda:	31 96       	adiw	r30, 0x01	; 1
    2ddc:	e8 0f       	add	r30, r24
    2dde:	f9 1f       	adc	r31, r25
    2de0:	4e e0       	ldi	r20, 0x0E	; 14
    2de2:	50 e0       	ldi	r21, 0x00	; 0
    2de4:	4c 0f       	add	r20, r28
    2de6:	5d 1f       	adc	r21, r29
    2de8:	e4 0f       	add	r30, r20
    2dea:	f5 1f       	adc	r31, r21
    2dec:	40 81       	ld	r20, Z
    2dee:	e5 e7       	ldi	r30, 0x75	; 117
    2df0:	f0 e0       	ldi	r31, 0x00	; 0
    2df2:	ec 0f       	add	r30, r28
    2df4:	fd 1f       	adc	r31, r29
    2df6:	e8 0f       	add	r30, r24
    2df8:	f9 1f       	adc	r31, r25
    2dfa:	40 83       	st	Z, r20
			}
			if (comma_indices[8] - comma_indices[7] - 1){
				unsigned char k = comma_indices[8] - comma_indices[7];
				char Course[6];
				char *ptr;
				for (unsigned char index=0;index<k;index++){
    2dfc:	2f 5f       	subi	r18, 0xFF	; 255
    2dfe:	23 17       	cp	r18, r19
    2e00:	48 f3       	brcs	.-46     	; 0x2dd4 <Read_GPS+0x644>
					Course[index] = GPS_Data[comma_indices[7]+1+index];
				}
				Drone->Course_over_ground = strtod(Course, &ptr);
    2e02:	be 01       	movw	r22, r28
    2e04:	65 58       	subi	r22, 0x85	; 133
    2e06:	7f 4f       	sbci	r23, 0xFF	; 255
    2e08:	ce 01       	movw	r24, r28
    2e0a:	8b 58       	subi	r24, 0x8B	; 139
    2e0c:	9f 4f       	sbci	r25, 0xFF	; 255
    2e0e:	0e 94 9c 27 	call	0x4f38	; 0x4f38 <strtod>
    2e12:	f4 01       	movw	r30, r8
    2e14:	e8 5a       	subi	r30, 0xA8	; 168
    2e16:	ff 4f       	sbci	r31, 0xFF	; 255
    2e18:	60 83       	st	Z, r22
    2e1a:	71 83       	std	Z+1, r23	; 0x01
    2e1c:	82 83       	std	Z+2, r24	; 0x02
    2e1e:	93 83       	std	Z+3, r25	; 0x03
			}
			
			if (++window_counter >= GPS_WINDOW_SIZE){
    2e20:	80 91 af 4a 	lds	r24, 0x4AAF	; 0x804aaf <window_counter.4954>
    2e24:	8f 5f       	subi	r24, 0xFF	; 255
    2e26:	80 93 af 4a 	sts	0x4AAF, r24	; 0x804aaf <window_counter.4954>
    2e2a:	84 30       	cpi	r24, 0x04	; 4
    2e2c:	08 f4       	brcc	.+2      	; 0x2e30 <Read_GPS+0x6a0>
    2e2e:	4b c1       	rjmp	.+662    	; 0x30c6 <Read_GPS+0x936>
				window_counter = 0;
    2e30:	10 92 af 4a 	sts	0x4AAF, r1	; 0x804aaf <window_counter.4954>
				signed long long Latitude_oversampled = 0;
				signed long long Longitude_oversampled = 0;
				for (unsigned char k=0;k<GPS_WINDOW_SIZE;k++){
    2e34:	61 2c       	mov	r6, r1
			}
			
			if (++window_counter >= GPS_WINDOW_SIZE){
				window_counter = 0;
				signed long long Latitude_oversampled = 0;
				signed long long Longitude_oversampled = 0;
    2e36:	cb 57       	subi	r28, 0x7B	; 123
    2e38:	df 4f       	sbci	r29, 0xFF	; 255
    2e3a:	18 82       	st	Y, r1
    2e3c:	c5 58       	subi	r28, 0x85	; 133
    2e3e:	d0 40       	sbci	r29, 0x00	; 0
    2e40:	ca 57       	subi	r28, 0x7A	; 122
    2e42:	df 4f       	sbci	r29, 0xFF	; 255
    2e44:	18 82       	st	Y, r1
    2e46:	c6 58       	subi	r28, 0x86	; 134
    2e48:	d0 40       	sbci	r29, 0x00	; 0
    2e4a:	c9 57       	subi	r28, 0x79	; 121
    2e4c:	df 4f       	sbci	r29, 0xFF	; 255
    2e4e:	18 82       	st	Y, r1
    2e50:	c7 58       	subi	r28, 0x87	; 135
    2e52:	d0 40       	sbci	r29, 0x00	; 0
    2e54:	c8 57       	subi	r28, 0x78	; 120
    2e56:	df 4f       	sbci	r29, 0xFF	; 255
    2e58:	18 82       	st	Y, r1
    2e5a:	c8 58       	subi	r28, 0x88	; 136
    2e5c:	d0 40       	sbci	r29, 0x00	; 0
    2e5e:	c7 57       	subi	r28, 0x77	; 119
    2e60:	df 4f       	sbci	r29, 0xFF	; 255
    2e62:	18 82       	st	Y, r1
    2e64:	c9 58       	subi	r28, 0x89	; 137
    2e66:	d0 40       	sbci	r29, 0x00	; 0
    2e68:	c6 57       	subi	r28, 0x76	; 118
    2e6a:	df 4f       	sbci	r29, 0xFF	; 255
    2e6c:	18 82       	st	Y, r1
    2e6e:	ca 58       	subi	r28, 0x8A	; 138
    2e70:	d0 40       	sbci	r29, 0x00	; 0
    2e72:	41 2c       	mov	r4, r1
    2e74:	51 2c       	mov	r5, r1
				Drone->Course_over_ground = strtod(Course, &ptr);
			}
			
			if (++window_counter >= GPS_WINDOW_SIZE){
				window_counter = 0;
				signed long long Latitude_oversampled = 0;
    2e76:	71 2c       	mov	r7, r1
    2e78:	b0 e0       	ldi	r27, 0x00	; 0
    2e7a:	a0 e0       	ldi	r26, 0x00	; 0
    2e7c:	ce 57       	subi	r28, 0x7E	; 126
    2e7e:	df 4f       	sbci	r29, 0xFF	; 255
    2e80:	18 82       	st	Y, r1
    2e82:	c2 58       	subi	r28, 0x82	; 130
    2e84:	d0 40       	sbci	r29, 0x00	; 0
    2e86:	cd 57       	subi	r28, 0x7D	; 125
    2e88:	df 4f       	sbci	r29, 0xFF	; 255
    2e8a:	18 82       	st	Y, r1
    2e8c:	c3 58       	subi	r28, 0x83	; 131
    2e8e:	d0 40       	sbci	r29, 0x00	; 0
    2e90:	cc 57       	subi	r28, 0x7C	; 124
    2e92:	df 4f       	sbci	r29, 0xFF	; 255
    2e94:	18 82       	st	Y, r1
    2e96:	c4 58       	subi	r28, 0x84	; 132
    2e98:	d0 40       	sbci	r29, 0x00	; 0
    2e9a:	21 2c       	mov	r2, r1
    2e9c:	31 2c       	mov	r3, r1
				signed long long Longitude_oversampled = 0;
				for (unsigned char k=0;k<GPS_WINDOW_SIZE;k++){
    2e9e:	aa c0       	rjmp	.+340    	; 0x2ff4 <Read_GPS+0x864>
					Latitude_oversampled += Latitude_window[k];
    2ea0:	e6 2d       	mov	r30, r6
    2ea2:	f0 e0       	ldi	r31, 0x00	; 0
    2ea4:	bf 01       	movw	r22, r30
    2ea6:	66 0f       	add	r22, r22
    2ea8:	77 1f       	adc	r23, r23
    2eaa:	66 0f       	add	r22, r22
    2eac:	77 1f       	adc	r23, r23
    2eae:	c5 57       	subi	r28, 0x75	; 117
    2eb0:	df 4f       	sbci	r29, 0xFF	; 255
    2eb2:	68 83       	st	Y, r22
    2eb4:	79 83       	std	Y+1, r23	; 0x01
    2eb6:	cb 58       	subi	r28, 0x8B	; 139
    2eb8:	d0 40       	sbci	r29, 0x00	; 0
    2eba:	cb 01       	movw	r24, r22
    2ebc:	81 56       	subi	r24, 0x61	; 97
    2ebe:	95 4b       	sbci	r25, 0xB5	; 181
    2ec0:	fc 01       	movw	r30, r24
    2ec2:	60 81       	ld	r22, Z
    2ec4:	71 81       	ldd	r23, Z+1	; 0x01
    2ec6:	82 81       	ldd	r24, Z+2	; 0x02
    2ec8:	93 81       	ldd	r25, Z+3	; 0x03
    2eca:	6b 01       	movw	r12, r22
    2ecc:	7c 01       	movw	r14, r24
    2ece:	ff 0c       	add	r15, r15
    2ed0:	cc 08       	sbc	r12, r12
    2ed2:	dc 2c       	mov	r13, r12
    2ed4:	76 01       	movw	r14, r12
    2ed6:	26 2f       	mov	r18, r22
    2ed8:	37 2f       	mov	r19, r23
    2eda:	48 2f       	mov	r20, r24
    2edc:	59 2f       	mov	r21, r25
    2ede:	6c 2d       	mov	r22, r12
    2ee0:	7c 2d       	mov	r23, r12
    2ee2:	8c 2d       	mov	r24, r12
    2ee4:	9c 2d       	mov	r25, r12
    2ee6:	a7 2c       	mov	r10, r7
    2ee8:	bb 2e       	mov	r11, r27
    2eea:	ca 2e       	mov	r12, r26
    2eec:	ce 57       	subi	r28, 0x7E	; 126
    2eee:	df 4f       	sbci	r29, 0xFF	; 255
    2ef0:	d8 80       	ld	r13, Y
    2ef2:	c2 58       	subi	r28, 0x82	; 130
    2ef4:	d0 40       	sbci	r29, 0x00	; 0
    2ef6:	cd 57       	subi	r28, 0x7D	; 125
    2ef8:	df 4f       	sbci	r29, 0xFF	; 255
    2efa:	e8 80       	ld	r14, Y
    2efc:	c3 58       	subi	r28, 0x83	; 131
    2efe:	d0 40       	sbci	r29, 0x00	; 0
    2f00:	cc 57       	subi	r28, 0x7C	; 124
    2f02:	df 4f       	sbci	r29, 0xFF	; 255
    2f04:	f8 80       	ld	r15, Y
    2f06:	c4 58       	subi	r28, 0x84	; 132
    2f08:	d0 40       	sbci	r29, 0x00	; 0
    2f0a:	02 2d       	mov	r16, r2
    2f0c:	13 2d       	mov	r17, r3
    2f0e:	0e 94 4e 26 	call	0x4c9c	; 0x4c9c <__adddi3>
    2f12:	72 2e       	mov	r7, r18
    2f14:	b3 2f       	mov	r27, r19
    2f16:	a4 2f       	mov	r26, r20
    2f18:	ce 57       	subi	r28, 0x7E	; 126
    2f1a:	df 4f       	sbci	r29, 0xFF	; 255
    2f1c:	58 83       	st	Y, r21
    2f1e:	c2 58       	subi	r28, 0x82	; 130
    2f20:	d0 40       	sbci	r29, 0x00	; 0
    2f22:	cd 57       	subi	r28, 0x7D	; 125
    2f24:	df 4f       	sbci	r29, 0xFF	; 255
    2f26:	68 83       	st	Y, r22
    2f28:	c3 58       	subi	r28, 0x83	; 131
    2f2a:	d0 40       	sbci	r29, 0x00	; 0
    2f2c:	cc 57       	subi	r28, 0x7C	; 124
    2f2e:	df 4f       	sbci	r29, 0xFF	; 255
    2f30:	78 83       	st	Y, r23
    2f32:	c4 58       	subi	r28, 0x84	; 132
    2f34:	d0 40       	sbci	r29, 0x00	; 0
    2f36:	28 2e       	mov	r2, r24
    2f38:	39 2e       	mov	r3, r25
					Longitude_oversampled += Longitude_window[k];
    2f3a:	c5 57       	subi	r28, 0x75	; 117
    2f3c:	df 4f       	sbci	r29, 0xFF	; 255
    2f3e:	e8 81       	ld	r30, Y
    2f40:	f9 81       	ldd	r31, Y+1	; 0x01
    2f42:	cb 58       	subi	r28, 0x8B	; 139
    2f44:	d0 40       	sbci	r29, 0x00	; 0
    2f46:	e1 57       	subi	r30, 0x71	; 113
    2f48:	f5 4b       	sbci	r31, 0xB5	; 181
    2f4a:	60 81       	ld	r22, Z
    2f4c:	71 81       	ldd	r23, Z+1	; 0x01
    2f4e:	82 81       	ldd	r24, Z+2	; 0x02
    2f50:	93 81       	ldd	r25, Z+3	; 0x03
    2f52:	6b 01       	movw	r12, r22
    2f54:	7c 01       	movw	r14, r24
    2f56:	ff 0c       	add	r15, r15
    2f58:	cc 08       	sbc	r12, r12
    2f5a:	dc 2c       	mov	r13, r12
    2f5c:	76 01       	movw	r14, r12
    2f5e:	26 2f       	mov	r18, r22
    2f60:	37 2f       	mov	r19, r23
    2f62:	48 2f       	mov	r20, r24
    2f64:	59 2f       	mov	r21, r25
    2f66:	6c 2d       	mov	r22, r12
    2f68:	7c 2d       	mov	r23, r12
    2f6a:	8c 2d       	mov	r24, r12
    2f6c:	9c 2d       	mov	r25, r12
    2f6e:	cb 57       	subi	r28, 0x7B	; 123
    2f70:	df 4f       	sbci	r29, 0xFF	; 255
    2f72:	a8 80       	ld	r10, Y
    2f74:	c5 58       	subi	r28, 0x85	; 133
    2f76:	d0 40       	sbci	r29, 0x00	; 0
    2f78:	ca 57       	subi	r28, 0x7A	; 122
    2f7a:	df 4f       	sbci	r29, 0xFF	; 255
    2f7c:	b8 80       	ld	r11, Y
    2f7e:	c6 58       	subi	r28, 0x86	; 134
    2f80:	d0 40       	sbci	r29, 0x00	; 0
    2f82:	c9 57       	subi	r28, 0x79	; 121
    2f84:	df 4f       	sbci	r29, 0xFF	; 255
    2f86:	c8 80       	ld	r12, Y
    2f88:	c7 58       	subi	r28, 0x87	; 135
    2f8a:	d0 40       	sbci	r29, 0x00	; 0
    2f8c:	c8 57       	subi	r28, 0x78	; 120
    2f8e:	df 4f       	sbci	r29, 0xFF	; 255
    2f90:	d8 80       	ld	r13, Y
    2f92:	c8 58       	subi	r28, 0x88	; 136
    2f94:	d0 40       	sbci	r29, 0x00	; 0
    2f96:	c7 57       	subi	r28, 0x77	; 119
    2f98:	df 4f       	sbci	r29, 0xFF	; 255
    2f9a:	e8 80       	ld	r14, Y
    2f9c:	c9 58       	subi	r28, 0x89	; 137
    2f9e:	d0 40       	sbci	r29, 0x00	; 0
    2fa0:	c6 57       	subi	r28, 0x76	; 118
    2fa2:	df 4f       	sbci	r29, 0xFF	; 255
    2fa4:	f8 80       	ld	r15, Y
    2fa6:	ca 58       	subi	r28, 0x8A	; 138
    2fa8:	d0 40       	sbci	r29, 0x00	; 0
    2faa:	04 2d       	mov	r16, r4
    2fac:	15 2d       	mov	r17, r5
    2fae:	0e 94 4e 26 	call	0x4c9c	; 0x4c9c <__adddi3>
    2fb2:	cb 57       	subi	r28, 0x7B	; 123
    2fb4:	df 4f       	sbci	r29, 0xFF	; 255
    2fb6:	28 83       	st	Y, r18
    2fb8:	c5 58       	subi	r28, 0x85	; 133
    2fba:	d0 40       	sbci	r29, 0x00	; 0
    2fbc:	ca 57       	subi	r28, 0x7A	; 122
    2fbe:	df 4f       	sbci	r29, 0xFF	; 255
    2fc0:	38 83       	st	Y, r19
    2fc2:	c6 58       	subi	r28, 0x86	; 134
    2fc4:	d0 40       	sbci	r29, 0x00	; 0
    2fc6:	c9 57       	subi	r28, 0x79	; 121
    2fc8:	df 4f       	sbci	r29, 0xFF	; 255
    2fca:	48 83       	st	Y, r20
    2fcc:	c7 58       	subi	r28, 0x87	; 135
    2fce:	d0 40       	sbci	r29, 0x00	; 0
    2fd0:	c8 57       	subi	r28, 0x78	; 120
    2fd2:	df 4f       	sbci	r29, 0xFF	; 255
    2fd4:	58 83       	st	Y, r21
    2fd6:	c8 58       	subi	r28, 0x88	; 136
    2fd8:	d0 40       	sbci	r29, 0x00	; 0
    2fda:	c7 57       	subi	r28, 0x77	; 119
    2fdc:	df 4f       	sbci	r29, 0xFF	; 255
    2fde:	68 83       	st	Y, r22
    2fe0:	c9 58       	subi	r28, 0x89	; 137
    2fe2:	d0 40       	sbci	r29, 0x00	; 0
    2fe4:	c6 57       	subi	r28, 0x76	; 118
    2fe6:	df 4f       	sbci	r29, 0xFF	; 255
    2fe8:	78 83       	st	Y, r23
    2fea:	ca 58       	subi	r28, 0x8A	; 138
    2fec:	d0 40       	sbci	r29, 0x00	; 0
    2fee:	48 2e       	mov	r4, r24
    2ff0:	59 2e       	mov	r5, r25
			
			if (++window_counter >= GPS_WINDOW_SIZE){
				window_counter = 0;
				signed long long Latitude_oversampled = 0;
				signed long long Longitude_oversampled = 0;
				for (unsigned char k=0;k<GPS_WINDOW_SIZE;k++){
    2ff2:	63 94       	inc	r6
    2ff4:	f3 e0       	ldi	r31, 0x03	; 3
    2ff6:	f6 15       	cp	r31, r6
    2ff8:	08 f0       	brcs	.+2      	; 0x2ffc <Read_GPS+0x86c>
    2ffa:	52 cf       	rjmp	.-348    	; 0x2ea0 <Read_GPS+0x710>
					Latitude_oversampled += Latitude_window[k];
					Longitude_oversampled += Longitude_window[k];
				}
				Latitude_oversampled >>= 2;
    2ffc:	27 2d       	mov	r18, r7
    2ffe:	3b 2f       	mov	r19, r27
    3000:	4a 2f       	mov	r20, r26
    3002:	ce 57       	subi	r28, 0x7E	; 126
    3004:	df 4f       	sbci	r29, 0xFF	; 255
    3006:	58 81       	ld	r21, Y
    3008:	c2 58       	subi	r28, 0x82	; 130
    300a:	d0 40       	sbci	r29, 0x00	; 0
    300c:	cd 57       	subi	r28, 0x7D	; 125
    300e:	df 4f       	sbci	r29, 0xFF	; 255
    3010:	68 81       	ld	r22, Y
    3012:	c3 58       	subi	r28, 0x83	; 131
    3014:	d0 40       	sbci	r29, 0x00	; 0
    3016:	cc 57       	subi	r28, 0x7C	; 124
    3018:	df 4f       	sbci	r29, 0xFF	; 255
    301a:	78 81       	ld	r23, Y
    301c:	c4 58       	subi	r28, 0x84	; 132
    301e:	d0 40       	sbci	r29, 0x00	; 0
    3020:	82 2d       	mov	r24, r2
    3022:	93 2d       	mov	r25, r3
    3024:	02 e0       	ldi	r16, 0x02	; 2
    3026:	0e 94 30 26 	call	0x4c60	; 0x4c60 <__ashrdi3>
    302a:	62 2e       	mov	r6, r18
    302c:	73 2e       	mov	r7, r19
    302e:	b4 2f       	mov	r27, r20
    3030:	a5 2f       	mov	r26, r21
				Longitude_oversampled >>= 2;
    3032:	cb 57       	subi	r28, 0x7B	; 123
    3034:	df 4f       	sbci	r29, 0xFF	; 255
    3036:	28 81       	ld	r18, Y
    3038:	c5 58       	subi	r28, 0x85	; 133
    303a:	d0 40       	sbci	r29, 0x00	; 0
    303c:	ca 57       	subi	r28, 0x7A	; 122
    303e:	df 4f       	sbci	r29, 0xFF	; 255
    3040:	38 81       	ld	r19, Y
    3042:	c6 58       	subi	r28, 0x86	; 134
    3044:	d0 40       	sbci	r29, 0x00	; 0
    3046:	c9 57       	subi	r28, 0x79	; 121
    3048:	df 4f       	sbci	r29, 0xFF	; 255
    304a:	48 81       	ld	r20, Y
    304c:	c7 58       	subi	r28, 0x87	; 135
    304e:	d0 40       	sbci	r29, 0x00	; 0
    3050:	c8 57       	subi	r28, 0x78	; 120
    3052:	df 4f       	sbci	r29, 0xFF	; 255
    3054:	58 81       	ld	r21, Y
    3056:	c8 58       	subi	r28, 0x88	; 136
    3058:	d0 40       	sbci	r29, 0x00	; 0
    305a:	c7 57       	subi	r28, 0x77	; 119
    305c:	df 4f       	sbci	r29, 0xFF	; 255
    305e:	68 81       	ld	r22, Y
    3060:	c9 58       	subi	r28, 0x89	; 137
    3062:	d0 40       	sbci	r29, 0x00	; 0
    3064:	c6 57       	subi	r28, 0x76	; 118
    3066:	df 4f       	sbci	r29, 0xFF	; 255
    3068:	78 81       	ld	r23, Y
    306a:	ca 58       	subi	r28, 0x8A	; 138
    306c:	d0 40       	sbci	r29, 0x00	; 0
    306e:	84 2d       	mov	r24, r4
    3070:	95 2d       	mov	r25, r5
    3072:	0e 94 30 26 	call	0x4c60	; 0x4c60 <__ashrdi3>
				Drone->Longitude = Longitude_oversampled;
    3076:	f4 01       	movw	r30, r8
    3078:	e0 5c       	subi	r30, 0xC0	; 192
    307a:	ff 4f       	sbci	r31, 0xFF	; 255
    307c:	20 83       	st	Z, r18
    307e:	31 83       	std	Z+1, r19	; 0x01
    3080:	42 83       	std	Z+2, r20	; 0x02
    3082:	53 83       	std	Z+3, r21	; 0x03
				Drone->Latitude = Latitude_oversampled;
    3084:	66 2d       	mov	r22, r6
    3086:	77 2d       	mov	r23, r7
    3088:	8b 2f       	mov	r24, r27
    308a:	9a 2f       	mov	r25, r26
    308c:	34 96       	adiw	r30, 0x04	; 4
    308e:	60 82       	st	Z, r6
    3090:	71 82       	std	Z+1, r7	; 0x01
    3092:	b2 83       	std	Z+2, r27	; 0x02
    3094:	a3 83       	std	Z+3, r26	; 0x03
				unsigned char NED_status = LLA_to_NED(Latitude_oversampled, Longitude_oversampled, Drone->pressure_altitude, Drone->Position_NED);
    3096:	64 01       	movw	r12, r8
    3098:	a4 e3       	ldi	r26, 0x34	; 52
    309a:	ca 0e       	add	r12, r26
    309c:	d1 1c       	adc	r13, r1
    309e:	f4 01       	movw	r30, r8
    30a0:	e0 a8       	ldd	r14, Z+48	; 0x30
    30a2:	f1 a8       	ldd	r15, Z+49	; 0x31
    30a4:	02 a9       	ldd	r16, Z+50	; 0x32
    30a6:	13 a9       	ldd	r17, Z+51	; 0x33
    30a8:	0e 94 fe 11 	call	0x23fc	; 0x23fc <LLA_to_NED>
				return NED_status;
    30ac:	0d c0       	rjmp	.+26     	; 0x30c8 <Read_GPS+0x938>
		else if ((g_GPS_Data[i] == 44)&&(start_index != -1)){comma_indices[j++] = i;}
		if (start_index != -1){GPS_Data[i] = g_GPS_Data[i];}
		i++;
	}
	g_GPS_Data_Index = 0;
	if ((start_index == -1)||(end_index == -1)){return 0;}
    30ae:	80 e0       	ldi	r24, 0x00	; 0
    30b0:	0b c0       	rjmp	.+22     	; 0x30c8 <Read_GPS+0x938>
    30b2:	80 e0       	ldi	r24, 0x00	; 0
    30b4:	09 c0       	rjmp	.+18     	; 0x30c8 <Read_GPS+0x938>
				unsigned char NED_status = LLA_to_NED(Latitude_oversampled, Longitude_oversampled, Drone->pressure_altitude, Drone->Position_NED);
				return NED_status;
			}
		}
	}
	return 0;
    30b6:	80 e0       	ldi	r24, 0x00	; 0
    30b8:	07 c0       	rjmp	.+14     	; 0x30c8 <Read_GPS+0x938>
    30ba:	80 e0       	ldi	r24, 0x00	; 0
    30bc:	05 c0       	rjmp	.+10     	; 0x30c8 <Read_GPS+0x938>
    30be:	80 e0       	ldi	r24, 0x00	; 0
    30c0:	03 c0       	rjmp	.+6      	; 0x30c8 <Read_GPS+0x938>
    30c2:	80 e0       	ldi	r24, 0x00	; 0
    30c4:	01 c0       	rjmp	.+2      	; 0x30c8 <Read_GPS+0x938>
    30c6:	80 e0       	ldi	r24, 0x00	; 0
}
    30c8:	c4 57       	subi	r28, 0x74	; 116
    30ca:	df 4f       	sbci	r29, 0xFF	; 255
    30cc:	cd bf       	out	0x3d, r28	; 61
    30ce:	de bf       	out	0x3e, r29	; 62
    30d0:	df 91       	pop	r29
    30d2:	cf 91       	pop	r28
    30d4:	1f 91       	pop	r17
    30d6:	0f 91       	pop	r16
    30d8:	ff 90       	pop	r15
    30da:	ef 90       	pop	r14
    30dc:	df 90       	pop	r13
    30de:	cf 90       	pop	r12
    30e0:	bf 90       	pop	r11
    30e2:	af 90       	pop	r10
    30e4:	9f 90       	pop	r9
    30e6:	8f 90       	pop	r8
    30e8:	7f 90       	pop	r7
    30ea:	6f 90       	pop	r6
    30ec:	5f 90       	pop	r5
    30ee:	4f 90       	pop	r4
    30f0:	3f 90       	pop	r3
    30f2:	2f 90       	pop	r2
    30f4:	08 95       	ret

000030f6 <USART_Transmit>:
	Position_NED[2] = -Height;
	
	return 1;
}

void USART_Transmit(char* Message, unsigned char length){
    30f6:	fc 01       	movw	r30, r24
	for (unsigned char i=0;i<length;i++){
    30f8:	90 e0       	ldi	r25, 0x00	; 0
    30fa:	0f c0       	rjmp	.+30     	; 0x311a <USART_Transmit+0x24>
		USART3_TXDATAL = *Message++;
    30fc:	9f 01       	movw	r18, r30
    30fe:	2f 5f       	subi	r18, 0xFF	; 255
    3100:	3f 4f       	sbci	r19, 0xFF	; 255
    3102:	80 81       	ld	r24, Z
    3104:	80 93 62 08 	sts	0x0862, r24	; 0x800862 <__TEXT_REGION_LENGTH__+0x7e0862>
		while(!(USART3_STATUS & USART_TXCIF_bm));
    3108:	80 91 64 08 	lds	r24, 0x0864	; 0x800864 <__TEXT_REGION_LENGTH__+0x7e0864>
    310c:	86 ff       	sbrs	r24, 6
    310e:	fc cf       	rjmp	.-8      	; 0x3108 <USART_Transmit+0x12>
		USART3_STATUS = USART_TXCIF_bm;
    3110:	80 e4       	ldi	r24, 0x40	; 64
    3112:	80 93 64 08 	sts	0x0864, r24	; 0x800864 <__TEXT_REGION_LENGTH__+0x7e0864>
	
	return 1;
}

void USART_Transmit(char* Message, unsigned char length){
	for (unsigned char i=0;i<length;i++){
    3116:	9f 5f       	subi	r25, 0xFF	; 255
		USART3_TXDATAL = *Message++;
    3118:	f9 01       	movw	r30, r18
	
	return 1;
}

void USART_Transmit(char* Message, unsigned char length){
	for (unsigned char i=0;i<length;i++){
    311a:	96 17       	cp	r25, r22
    311c:	78 f3       	brcs	.-34     	; 0x30fc <USART_Transmit+0x6>
		USART3_TXDATAL = *Message++;
		while(!(USART3_STATUS & USART_TXCIF_bm));
		USART3_STATUS = USART_TXCIF_bm;
	}
	Delay(1000);
    311e:	28 ee       	ldi	r18, 0xE8	; 232
    3120:	33 e0       	ldi	r19, 0x03	; 3
    3122:	40 e0       	ldi	r20, 0x00	; 0
    3124:	50 e0       	ldi	r21, 0x00	; 0
    3126:	60 e0       	ldi	r22, 0x00	; 0
    3128:	70 e0       	ldi	r23, 0x00	; 0
    312a:	80 e0       	ldi	r24, 0x00	; 0
    312c:	90 e0       	ldi	r25, 0x00	; 0
    312e:	0e 94 80 0b 	call	0x1700	; 0x1700 <Delay>
    3132:	08 95       	ret

00003134 <Setup_GPS>:
// GPS CODE
static volatile char g_GPS_Data[256];
static volatile unsigned char g_GPS_Data_Index;
volatile unsigned char g_GPS_Read_Flag = 0;

unsigned char Setup_GPS(){
    3134:	cf 93       	push	r28
    3136:	df 93       	push	r29
    3138:	cd b7       	in	r28, 0x3d	; 61
    313a:	de b7       	in	r29, 0x3e	; 62
    313c:	c2 58       	subi	r28, 0x82	; 130
    313e:	d1 40       	sbci	r29, 0x01	; 1
    3140:	cd bf       	out	0x3d, r28	; 61
    3142:	de bf       	out	0x3e, r29	; 62
	USART3_BAUD = 2500; // Corresponds to 38400 baud rate
    3144:	84 ec       	ldi	r24, 0xC4	; 196
    3146:	99 e0       	ldi	r25, 0x09	; 9
    3148:	80 93 68 08 	sts	0x0868, r24	; 0x800868 <__TEXT_REGION_LENGTH__+0x7e0868>
    314c:	90 93 69 08 	sts	0x0869, r25	; 0x800869 <__TEXT_REGION_LENGTH__+0x7e0869>
	PORTB_DIR |= (1<<0);
    3150:	e0 e2       	ldi	r30, 0x20	; 32
    3152:	f4 e0       	ldi	r31, 0x04	; 4
    3154:	80 81       	ld	r24, Z
    3156:	81 60       	ori	r24, 0x01	; 1
    3158:	80 83       	st	Z, r24
	USART3_CTRLA |= USART_RXCIE_bm;
    315a:	e5 e6       	ldi	r30, 0x65	; 101
    315c:	f8 e0       	ldi	r31, 0x08	; 8
    315e:	80 81       	ld	r24, Z
    3160:	80 68       	ori	r24, 0x80	; 128
    3162:	80 83       	st	Z, r24
	USART3_CTRLB |= USART_RXEN_bm | USART_TXEN_bm;
    3164:	e6 e6       	ldi	r30, 0x66	; 102
    3166:	f8 e0       	ldi	r31, 0x08	; 8
    3168:	80 81       	ld	r24, Z
    316a:	80 6c       	ori	r24, 0xC0	; 192
    316c:	80 83       	st	Z, r24
	//USART3_DBGCTRL |= 1;
	Delay(10);
    316e:	2a e0       	ldi	r18, 0x0A	; 10
    3170:	30 e0       	ldi	r19, 0x00	; 0
    3172:	40 e0       	ldi	r20, 0x00	; 0
    3174:	50 e0       	ldi	r21, 0x00	; 0
    3176:	60 e0       	ldi	r22, 0x00	; 0
    3178:	70 e0       	ldi	r23, 0x00	; 0
    317a:	80 e0       	ldi	r24, 0x00	; 0
    317c:	90 e0       	ldi	r25, 0x00	; 0
    317e:	0e 94 80 0b 	call	0x1700	; 0x1700 <Delay>
	if (USART3_RXDATAH & USART_FERR_bm){
    3182:	80 91 61 08 	lds	r24, 0x0861	; 0x800861 <__TEXT_REGION_LENGTH__+0x7e0861>
    3186:	82 ff       	sbrs	r24, 2
    3188:	0a c0       	rjmp	.+20     	; 0x319e <Setup_GPS+0x6a>
		USART3_BAUD = 208; // Corresponds to 460800 baud rate
    318a:	80 ed       	ldi	r24, 0xD0	; 208
    318c:	90 e0       	ldi	r25, 0x00	; 0
    318e:	80 93 68 08 	sts	0x0868, r24	; 0x800868 <__TEXT_REGION_LENGTH__+0x7e0868>
    3192:	90 93 69 08 	sts	0x0869, r25	; 0x800869 <__TEXT_REGION_LENGTH__+0x7e0869>
		USART3_RXDATAH = USART_FERR_bm;
    3196:	84 e0       	ldi	r24, 0x04	; 4
    3198:	80 93 61 08 	sts	0x0861, r24	; 0x800861 <__TEXT_REGION_LENGTH__+0x7e0861>
    319c:	16 c0       	rjmp	.+44     	; 0x31ca <Setup_GPS+0x96>
	}
	else{
		char Increase_Baud[] = {0xB5,0x62,0x06,0x00,0x14,0x00,0x01,0x00,0x00,0x00,0xD0,0x08,0x00,0x00,0x00,0x08,0x07,0x00,0x07,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x0C,0xBC};
    319e:	8c e1       	ldi	r24, 0x1C	; 28
    31a0:	e4 e5       	ldi	r30, 0x54	; 84
    31a2:	f0 e4       	ldi	r31, 0x40	; 64
    31a4:	de 01       	movw	r26, r28
    31a6:	a9 59       	subi	r26, 0x99	; 153
    31a8:	be 4f       	sbci	r27, 0xFE	; 254
    31aa:	01 90       	ld	r0, Z+
    31ac:	0d 92       	st	X+, r0
    31ae:	8a 95       	dec	r24
    31b0:	e1 f7       	brne	.-8      	; 0x31aa <Setup_GPS+0x76>
		USART_Transmit(Increase_Baud, sizeof(Increase_Baud));
    31b2:	6c e1       	ldi	r22, 0x1C	; 28
    31b4:	ce 01       	movw	r24, r28
    31b6:	89 59       	subi	r24, 0x99	; 153
    31b8:	9e 4f       	sbci	r25, 0xFE	; 254
    31ba:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <USART_Transmit>
		USART3_BAUD = 208; // Corresponds to 460800 baud rate
    31be:	80 ed       	ldi	r24, 0xD0	; 208
    31c0:	90 e0       	ldi	r25, 0x00	; 0
    31c2:	80 93 68 08 	sts	0x0868, r24	; 0x800868 <__TEXT_REGION_LENGTH__+0x7e0868>
    31c6:	90 93 69 08 	sts	0x0869, r25	; 0x800869 <__TEXT_REGION_LENGTH__+0x7e0869>
	}
	Delay(100000);
    31ca:	20 ea       	ldi	r18, 0xA0	; 160
    31cc:	36 e8       	ldi	r19, 0x86	; 134
    31ce:	41 e0       	ldi	r20, 0x01	; 1
    31d0:	50 e0       	ldi	r21, 0x00	; 0
    31d2:	60 e0       	ldi	r22, 0x00	; 0
    31d4:	70 e0       	ldi	r23, 0x00	; 0
    31d6:	80 e0       	ldi	r24, 0x00	; 0
    31d8:	90 e0       	ldi	r25, 0x00	; 0
    31da:	0e 94 80 0b 	call	0x1700	; 0x1700 <Delay>
	
	// Disable all the messages we don't want
	char Disable_DTM[] = {0xB5,0x62,0x06,0x01,0x08,0x00,0xF0,0x0A,0x00,0x00,0x00,0x00,0x00,0x00,0x09,0x69};
    31de:	80 e1       	ldi	r24, 0x10	; 16
    31e0:	e0 e7       	ldi	r30, 0x70	; 112
    31e2:	f0 e4       	ldi	r31, 0x40	; 64
    31e4:	de 01       	movw	r26, r28
    31e6:	11 96       	adiw	r26, 0x01	; 1
    31e8:	01 90       	ld	r0, Z+
    31ea:	0d 92       	st	X+, r0
    31ec:	8a 95       	dec	r24
    31ee:	e1 f7       	brne	.-8      	; 0x31e8 <Setup_GPS+0xb4>
	USART_Transmit(Disable_DTM, sizeof(Disable_DTM));
    31f0:	60 e1       	ldi	r22, 0x10	; 16
    31f2:	ce 01       	movw	r24, r28
    31f4:	01 96       	adiw	r24, 0x01	; 1
    31f6:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <USART_Transmit>
	char Disable_GBQ[] = {0xB5,0x62,0x06,0x01,0x08,0x00,0xF0,0x44,0x00,0x00,0x00,0x00,0x00,0x00,0x43,0xFF};
    31fa:	80 e1       	ldi	r24, 0x10	; 16
    31fc:	e0 e8       	ldi	r30, 0x80	; 128
    31fe:	f0 e4       	ldi	r31, 0x40	; 64
    3200:	de 01       	movw	r26, r28
    3202:	51 96       	adiw	r26, 0x11	; 17
    3204:	01 90       	ld	r0, Z+
    3206:	0d 92       	st	X+, r0
    3208:	8a 95       	dec	r24
    320a:	e1 f7       	brne	.-8      	; 0x3204 <Setup_GPS+0xd0>
	USART_Transmit(Disable_GBQ, sizeof(Disable_GBQ));
    320c:	60 e1       	ldi	r22, 0x10	; 16
    320e:	ce 01       	movw	r24, r28
    3210:	41 96       	adiw	r24, 0x11	; 17
    3212:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <USART_Transmit>
	char Disable_GBS[] = {0xB5,0x62,0x06,0x01,0x08,0x00,0xF0,0x09,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x62};
    3216:	80 e1       	ldi	r24, 0x10	; 16
    3218:	e0 e9       	ldi	r30, 0x90	; 144
    321a:	f0 e4       	ldi	r31, 0x40	; 64
    321c:	de 01       	movw	r26, r28
    321e:	91 96       	adiw	r26, 0x21	; 33
    3220:	01 90       	ld	r0, Z+
    3222:	0d 92       	st	X+, r0
    3224:	8a 95       	dec	r24
    3226:	e1 f7       	brne	.-8      	; 0x3220 <Setup_GPS+0xec>
	USART_Transmit(Disable_GBS, sizeof(Disable_GBS));
    3228:	60 e1       	ldi	r22, 0x10	; 16
    322a:	ce 01       	movw	r24, r28
    322c:	81 96       	adiw	r24, 0x21	; 33
    322e:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <USART_Transmit>
	char Disable_GGA[] = {0xB5,0x62,0x06,0x01,0x08,0x00,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x23};
    3232:	80 e1       	ldi	r24, 0x10	; 16
    3234:	e0 ea       	ldi	r30, 0xA0	; 160
    3236:	f0 e4       	ldi	r31, 0x40	; 64
    3238:	de 01       	movw	r26, r28
    323a:	d1 96       	adiw	r26, 0x31	; 49
    323c:	01 90       	ld	r0, Z+
    323e:	0d 92       	st	X+, r0
    3240:	8a 95       	dec	r24
    3242:	e1 f7       	brne	.-8      	; 0x323c <Setup_GPS+0x108>
	USART_Transmit(Disable_GGA, sizeof(Disable_GGA));
    3244:	60 e1       	ldi	r22, 0x10	; 16
    3246:	ce 01       	movw	r24, r28
    3248:	c1 96       	adiw	r24, 0x31	; 49
    324a:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <USART_Transmit>
	char Disable_GLL[] = {0xB5,0x62,0x06,0x01,0x08,0x00,0xF0,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x2A};
    324e:	80 e1       	ldi	r24, 0x10	; 16
    3250:	e0 eb       	ldi	r30, 0xB0	; 176
    3252:	f0 e4       	ldi	r31, 0x40	; 64
    3254:	de 01       	movw	r26, r28
    3256:	af 5b       	subi	r26, 0xBF	; 191
    3258:	bf 4f       	sbci	r27, 0xFF	; 255
    325a:	01 90       	ld	r0, Z+
    325c:	0d 92       	st	X+, r0
    325e:	8a 95       	dec	r24
    3260:	e1 f7       	brne	.-8      	; 0x325a <Setup_GPS+0x126>
	USART_Transmit(Disable_GLL, sizeof(Disable_GLL));
    3262:	60 e1       	ldi	r22, 0x10	; 16
    3264:	ce 01       	movw	r24, r28
    3266:	8f 5b       	subi	r24, 0xBF	; 191
    3268:	9f 4f       	sbci	r25, 0xFF	; 255
    326a:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <USART_Transmit>
	char Disable_GLQ[] = {0xB5,0x62,0x06,0x01,0x08,0x00,0xF0,0x43,0x00,0x00,0x00,0x00,0x00,0x00,0x42,0xF8};
    326e:	80 e1       	ldi	r24, 0x10	; 16
    3270:	e0 ec       	ldi	r30, 0xC0	; 192
    3272:	f0 e4       	ldi	r31, 0x40	; 64
    3274:	de 01       	movw	r26, r28
    3276:	af 5a       	subi	r26, 0xAF	; 175
    3278:	bf 4f       	sbci	r27, 0xFF	; 255
    327a:	01 90       	ld	r0, Z+
    327c:	0d 92       	st	X+, r0
    327e:	8a 95       	dec	r24
    3280:	e1 f7       	brne	.-8      	; 0x327a <Setup_GPS+0x146>
	USART_Transmit(Disable_GLQ, sizeof(Disable_GLQ));
    3282:	60 e1       	ldi	r22, 0x10	; 16
    3284:	ce 01       	movw	r24, r28
    3286:	8f 5a       	subi	r24, 0xAF	; 175
    3288:	9f 4f       	sbci	r25, 0xFF	; 255
    328a:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <USART_Transmit>
	char Disable_GNQ[] = {0xB5,0x62,0x06,0x01,0x08,0x00,0xF0,0x42,0x00,0x00,0x00,0x00,0x00,0x00,0x41,0xF1};
    328e:	80 e1       	ldi	r24, 0x10	; 16
    3290:	e0 ed       	ldi	r30, 0xD0	; 208
    3292:	f0 e4       	ldi	r31, 0x40	; 64
    3294:	de 01       	movw	r26, r28
    3296:	af 59       	subi	r26, 0x9F	; 159
    3298:	bf 4f       	sbci	r27, 0xFF	; 255
    329a:	01 90       	ld	r0, Z+
    329c:	0d 92       	st	X+, r0
    329e:	8a 95       	dec	r24
    32a0:	e1 f7       	brne	.-8      	; 0x329a <Setup_GPS+0x166>
	USART_Transmit(Disable_GNQ, sizeof(Disable_GNQ));
    32a2:	60 e1       	ldi	r22, 0x10	; 16
    32a4:	ce 01       	movw	r24, r28
    32a6:	8f 59       	subi	r24, 0x9F	; 159
    32a8:	9f 4f       	sbci	r25, 0xFF	; 255
    32aa:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <USART_Transmit>
	char Disable_GNS[] = {0xB5,0x62,0x06,0x01,0x08,0x00,0xF0,0x0D,0x00,0x00,0x00,0x00,0x00,0x00,0x0C,0x7E};
    32ae:	80 e1       	ldi	r24, 0x10	; 16
    32b0:	e0 ee       	ldi	r30, 0xE0	; 224
    32b2:	f0 e4       	ldi	r31, 0x40	; 64
    32b4:	de 01       	movw	r26, r28
    32b6:	af 58       	subi	r26, 0x8F	; 143
    32b8:	bf 4f       	sbci	r27, 0xFF	; 255
    32ba:	01 90       	ld	r0, Z+
    32bc:	0d 92       	st	X+, r0
    32be:	8a 95       	dec	r24
    32c0:	e1 f7       	brne	.-8      	; 0x32ba <Setup_GPS+0x186>
	USART_Transmit(Disable_GNS, sizeof(Disable_GNS));
    32c2:	60 e1       	ldi	r22, 0x10	; 16
    32c4:	ce 01       	movw	r24, r28
    32c6:	8f 58       	subi	r24, 0x8F	; 143
    32c8:	9f 4f       	sbci	r25, 0xFF	; 255
    32ca:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <USART_Transmit>
	char Disable_GPQ[] = {0xB5,0x62,0x06,0x01,0x08,0x00,0xF0,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xE3};
    32ce:	80 e1       	ldi	r24, 0x10	; 16
    32d0:	e0 ef       	ldi	r30, 0xF0	; 240
    32d2:	f0 e4       	ldi	r31, 0x40	; 64
    32d4:	de 01       	movw	r26, r28
    32d6:	af 57       	subi	r26, 0x7F	; 127
    32d8:	bf 4f       	sbci	r27, 0xFF	; 255
    32da:	01 90       	ld	r0, Z+
    32dc:	0d 92       	st	X+, r0
    32de:	8a 95       	dec	r24
    32e0:	e1 f7       	brne	.-8      	; 0x32da <Setup_GPS+0x1a6>
	USART_Transmit(Disable_GPQ, sizeof(Disable_GPQ));
    32e2:	60 e1       	ldi	r22, 0x10	; 16
    32e4:	ce 01       	movw	r24, r28
    32e6:	8f 57       	subi	r24, 0x7F	; 127
    32e8:	9f 4f       	sbci	r25, 0xFF	; 255
    32ea:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <USART_Transmit>
	char Disable_GRS[] = {0xB5,0x62,0x06,0x01,0x08,0x00,0xF0,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x4D};
    32ee:	80 e1       	ldi	r24, 0x10	; 16
    32f0:	e0 e0       	ldi	r30, 0x00	; 0
    32f2:	f1 e4       	ldi	r31, 0x41	; 65
    32f4:	de 01       	movw	r26, r28
    32f6:	af 56       	subi	r26, 0x6F	; 111
    32f8:	bf 4f       	sbci	r27, 0xFF	; 255
    32fa:	01 90       	ld	r0, Z+
    32fc:	0d 92       	st	X+, r0
    32fe:	8a 95       	dec	r24
    3300:	e1 f7       	brne	.-8      	; 0x32fa <Setup_GPS+0x1c6>
	USART_Transmit(Disable_GRS, sizeof(Disable_GRS));
    3302:	60 e1       	ldi	r22, 0x10	; 16
    3304:	ce 01       	movw	r24, r28
    3306:	8f 56       	subi	r24, 0x6F	; 111
    3308:	9f 4f       	sbci	r25, 0xFF	; 255
    330a:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <USART_Transmit>
	char Disable_GSA[] = {0xB5,0x62,0x06,0x01,0x08,0x00,0xF0,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x31};
    330e:	80 e1       	ldi	r24, 0x10	; 16
    3310:	e0 e1       	ldi	r30, 0x10	; 16
    3312:	f1 e4       	ldi	r31, 0x41	; 65
    3314:	de 01       	movw	r26, r28
    3316:	af 55       	subi	r26, 0x5F	; 95
    3318:	bf 4f       	sbci	r27, 0xFF	; 255
    331a:	01 90       	ld	r0, Z+
    331c:	0d 92       	st	X+, r0
    331e:	8a 95       	dec	r24
    3320:	e1 f7       	brne	.-8      	; 0x331a <Setup_GPS+0x1e6>
	USART_Transmit(Disable_GSA, sizeof(Disable_GSA));
    3322:	60 e1       	ldi	r22, 0x10	; 16
    3324:	ce 01       	movw	r24, r28
    3326:	8f 55       	subi	r24, 0x5F	; 95
    3328:	9f 4f       	sbci	r25, 0xFF	; 255
    332a:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <USART_Transmit>
	char Disable_GST[] = {0xB5,0x62,0x06,0x01,0x08,0x00,0xF0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x54};
    332e:	80 e1       	ldi	r24, 0x10	; 16
    3330:	e0 e2       	ldi	r30, 0x20	; 32
    3332:	f1 e4       	ldi	r31, 0x41	; 65
    3334:	de 01       	movw	r26, r28
    3336:	af 54       	subi	r26, 0x4F	; 79
    3338:	bf 4f       	sbci	r27, 0xFF	; 255
    333a:	01 90       	ld	r0, Z+
    333c:	0d 92       	st	X+, r0
    333e:	8a 95       	dec	r24
    3340:	e1 f7       	brne	.-8      	; 0x333a <Setup_GPS+0x206>
	USART_Transmit(Disable_GST, sizeof(Disable_GST));
    3342:	60 e1       	ldi	r22, 0x10	; 16
    3344:	ce 01       	movw	r24, r28
    3346:	8f 54       	subi	r24, 0x4F	; 79
    3348:	9f 4f       	sbci	r25, 0xFF	; 255
    334a:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <USART_Transmit>
	char Disable_GSV[] = {0xB5,0x62,0x06,0x01,0x08,0x00,0xF0,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x38};
    334e:	80 e1       	ldi	r24, 0x10	; 16
    3350:	e0 e3       	ldi	r30, 0x30	; 48
    3352:	f1 e4       	ldi	r31, 0x41	; 65
    3354:	de 01       	movw	r26, r28
    3356:	af 53       	subi	r26, 0x3F	; 63
    3358:	bf 4f       	sbci	r27, 0xFF	; 255
    335a:	01 90       	ld	r0, Z+
    335c:	0d 92       	st	X+, r0
    335e:	8a 95       	dec	r24
    3360:	e1 f7       	brne	.-8      	; 0x335a <Setup_GPS+0x226>
	USART_Transmit(Disable_GSV, sizeof(Disable_GSV));
    3362:	60 e1       	ldi	r22, 0x10	; 16
    3364:	ce 01       	movw	r24, r28
    3366:	8f 53       	subi	r24, 0x3F	; 63
    3368:	9f 4f       	sbci	r25, 0xFF	; 255
    336a:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <USART_Transmit>
	char Disable_THS[] = {0xB5,0x62,0x06,0x01,0x08,0x00,0xF0,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,0x0D,0x85};
    336e:	80 e1       	ldi	r24, 0x10	; 16
    3370:	e0 e4       	ldi	r30, 0x40	; 64
    3372:	f1 e4       	ldi	r31, 0x41	; 65
    3374:	de 01       	movw	r26, r28
    3376:	af 52       	subi	r26, 0x2F	; 47
    3378:	bf 4f       	sbci	r27, 0xFF	; 255
    337a:	01 90       	ld	r0, Z+
    337c:	0d 92       	st	X+, r0
    337e:	8a 95       	dec	r24
    3380:	e1 f7       	brne	.-8      	; 0x337a <Setup_GPS+0x246>
	USART_Transmit(Disable_THS, sizeof(Disable_THS));
    3382:	60 e1       	ldi	r22, 0x10	; 16
    3384:	ce 01       	movw	r24, r28
    3386:	8f 52       	subi	r24, 0x2F	; 47
    3388:	9f 4f       	sbci	r25, 0xFF	; 255
    338a:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <USART_Transmit>
	char Disable_TXT[] = {0xB5,0x62,0x06,0x01,0x08,0x00,0xF0,0x41,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0xEA};
    338e:	80 e1       	ldi	r24, 0x10	; 16
    3390:	e0 e5       	ldi	r30, 0x50	; 80
    3392:	f1 e4       	ldi	r31, 0x41	; 65
    3394:	de 01       	movw	r26, r28
    3396:	af 51       	subi	r26, 0x1F	; 31
    3398:	bf 4f       	sbci	r27, 0xFF	; 255
    339a:	01 90       	ld	r0, Z+
    339c:	0d 92       	st	X+, r0
    339e:	8a 95       	dec	r24
    33a0:	e1 f7       	brne	.-8      	; 0x339a <Setup_GPS+0x266>
	USART_Transmit(Disable_TXT, sizeof(Disable_TXT));
    33a2:	60 e1       	ldi	r22, 0x10	; 16
    33a4:	ce 01       	movw	r24, r28
    33a6:	8f 51       	subi	r24, 0x1F	; 31
    33a8:	9f 4f       	sbci	r25, 0xFF	; 255
    33aa:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <USART_Transmit>
	char Disable_VLW[] = {0xB5,0x62,0x06,0x01,0x08,0x00,0xF0,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x0E,0x8C};
    33ae:	80 e1       	ldi	r24, 0x10	; 16
    33b0:	e0 e6       	ldi	r30, 0x60	; 96
    33b2:	f1 e4       	ldi	r31, 0x41	; 65
    33b4:	de 01       	movw	r26, r28
    33b6:	af 50       	subi	r26, 0x0F	; 15
    33b8:	bf 4f       	sbci	r27, 0xFF	; 255
    33ba:	01 90       	ld	r0, Z+
    33bc:	0d 92       	st	X+, r0
    33be:	8a 95       	dec	r24
    33c0:	e1 f7       	brne	.-8      	; 0x33ba <Setup_GPS+0x286>
	USART_Transmit(Disable_VLW, sizeof(Disable_VLW));
    33c2:	60 e1       	ldi	r22, 0x10	; 16
    33c4:	ce 01       	movw	r24, r28
    33c6:	8f 50       	subi	r24, 0x0F	; 15
    33c8:	9f 4f       	sbci	r25, 0xFF	; 255
    33ca:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <USART_Transmit>
	char Disable_VTG[] = {0xB5,0x62,0x06,0x01,0x08,0x00,0xF0,0x05,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x46};
    33ce:	80 e1       	ldi	r24, 0x10	; 16
    33d0:	e0 e7       	ldi	r30, 0x70	; 112
    33d2:	f1 e4       	ldi	r31, 0x41	; 65
    33d4:	de 01       	movw	r26, r28
    33d6:	af 5f       	subi	r26, 0xFF	; 255
    33d8:	be 4f       	sbci	r27, 0xFE	; 254
    33da:	01 90       	ld	r0, Z+
    33dc:	0d 92       	st	X+, r0
    33de:	8a 95       	dec	r24
    33e0:	e1 f7       	brne	.-8      	; 0x33da <Setup_GPS+0x2a6>
	USART_Transmit(Disable_VTG, sizeof(Disable_VTG));
    33e2:	60 e1       	ldi	r22, 0x10	; 16
    33e4:	ce 01       	movw	r24, r28
    33e6:	8f 5f       	subi	r24, 0xFF	; 255
    33e8:	9e 4f       	sbci	r25, 0xFE	; 254
    33ea:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <USART_Transmit>
	char Disable_ZDA[] = {0xB5,0x62,0x06,0x01,0x08,0x00,0xF0,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x5B};
    33ee:	80 e1       	ldi	r24, 0x10	; 16
    33f0:	e0 e8       	ldi	r30, 0x80	; 128
    33f2:	f1 e4       	ldi	r31, 0x41	; 65
    33f4:	de 01       	movw	r26, r28
    33f6:	af 5e       	subi	r26, 0xEF	; 239
    33f8:	be 4f       	sbci	r27, 0xFE	; 254
    33fa:	01 90       	ld	r0, Z+
    33fc:	0d 92       	st	X+, r0
    33fe:	8a 95       	dec	r24
    3400:	e1 f7       	brne	.-8      	; 0x33fa <Setup_GPS+0x2c6>
	USART_Transmit(Disable_ZDA, sizeof(Disable_ZDA));
    3402:	60 e1       	ldi	r22, 0x10	; 16
    3404:	ce 01       	movw	r24, r28
    3406:	8f 5e       	subi	r24, 0xEF	; 239
    3408:	9e 4f       	sbci	r25, 0xFE	; 254
    340a:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <USART_Transmit>

	
	// Increase the update rate to 8Hz
	char Enable_UTC_8Hz[] = {0xB5, 0x62, 0x06, 0x08, 0x06, 0x00, 0x7D, 0x00, 0x01, 0x00, 0x00, 0x00, 0x92, 0xA6};
    340e:	8e e0       	ldi	r24, 0x0E	; 14
    3410:	e0 e9       	ldi	r30, 0x90	; 144
    3412:	f1 e4       	ldi	r31, 0x41	; 65
    3414:	de 01       	movw	r26, r28
    3416:	af 5d       	subi	r26, 0xDF	; 223
    3418:	be 4f       	sbci	r27, 0xFE	; 254
    341a:	01 90       	ld	r0, Z+
    341c:	0d 92       	st	X+, r0
    341e:	8a 95       	dec	r24
    3420:	e1 f7       	brne	.-8      	; 0x341a <Setup_GPS+0x2e6>
	USART_Transmit(Enable_UTC_8Hz, sizeof(Enable_UTC_8Hz));
    3422:	6e e0       	ldi	r22, 0x0E	; 14
    3424:	ce 01       	movw	r24, r28
    3426:	8f 5d       	subi	r24, 0xDF	; 223
    3428:	9e 4f       	sbci	r25, 0xFE	; 254
    342a:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <USART_Transmit>
	char Enable_GPS_8Hz[] = {0xB5, 0x62, 0x06, 0x08, 0x06, 0x00, 0x7D, 0x00, 0x01, 0x00, 0x01, 0x00, 0x93, 0xA8};
    342e:	8e e0       	ldi	r24, 0x0E	; 14
    3430:	ee e9       	ldi	r30, 0x9E	; 158
    3432:	f1 e4       	ldi	r31, 0x41	; 65
    3434:	de 01       	movw	r26, r28
    3436:	a1 5d       	subi	r26, 0xD1	; 209
    3438:	be 4f       	sbci	r27, 0xFE	; 254
    343a:	01 90       	ld	r0, Z+
    343c:	0d 92       	st	X+, r0
    343e:	8a 95       	dec	r24
    3440:	e1 f7       	brne	.-8      	; 0x343a <Setup_GPS+0x306>
	USART_Transmit(Enable_GPS_8Hz, sizeof(Enable_GPS_8Hz));
    3442:	6e e0       	ldi	r22, 0x0E	; 14
    3444:	ce 01       	movw	r24, r28
    3446:	81 5d       	subi	r24, 0xD1	; 209
    3448:	9e 4f       	sbci	r25, 0xFE	; 254
    344a:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <USART_Transmit>
	char Enable_GLO_8Hz[] = {0xB5, 0x62, 0x06, 0x08, 0x06, 0x00, 0x7D, 0x00, 0x01, 0x00, 0x02, 0x00, 0x94, 0xAA};
    344e:	8e e0       	ldi	r24, 0x0E	; 14
    3450:	ec ea       	ldi	r30, 0xAC	; 172
    3452:	f1 e4       	ldi	r31, 0x41	; 65
    3454:	de 01       	movw	r26, r28
    3456:	a3 5c       	subi	r26, 0xC3	; 195
    3458:	be 4f       	sbci	r27, 0xFE	; 254
    345a:	01 90       	ld	r0, Z+
    345c:	0d 92       	st	X+, r0
    345e:	8a 95       	dec	r24
    3460:	e1 f7       	brne	.-8      	; 0x345a <Setup_GPS+0x326>
	USART_Transmit(Enable_GLO_8Hz, sizeof(Enable_GLO_8Hz));
    3462:	6e e0       	ldi	r22, 0x0E	; 14
    3464:	ce 01       	movw	r24, r28
    3466:	83 5c       	subi	r24, 0xC3	; 195
    3468:	9e 4f       	sbci	r25, 0xFE	; 254
    346a:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <USART_Transmit>
	char Enable_BDS_8Hz[] = {0xB5, 0x62, 0x06, 0x08, 0x06, 0x00, 0x7D, 0x00, 0x01, 0x00, 0x03, 0x00, 0x95, 0xAC};
    346e:	8e e0       	ldi	r24, 0x0E	; 14
    3470:	ea eb       	ldi	r30, 0xBA	; 186
    3472:	f1 e4       	ldi	r31, 0x41	; 65
    3474:	de 01       	movw	r26, r28
    3476:	a5 5b       	subi	r26, 0xB5	; 181
    3478:	be 4f       	sbci	r27, 0xFE	; 254
    347a:	01 90       	ld	r0, Z+
    347c:	0d 92       	st	X+, r0
    347e:	8a 95       	dec	r24
    3480:	e1 f7       	brne	.-8      	; 0x347a <Setup_GPS+0x346>
	USART_Transmit(Enable_BDS_8Hz, sizeof(Enable_BDS_8Hz));
    3482:	6e e0       	ldi	r22, 0x0E	; 14
    3484:	ce 01       	movw	r24, r28
    3486:	85 5b       	subi	r24, 0xB5	; 181
    3488:	9e 4f       	sbci	r25, 0xFE	; 254
    348a:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <USART_Transmit>
	char Enable_GAL_8Hz[] = {0xB5, 0x62, 0x06, 0x08, 0x06, 0x00, 0x7D, 0x00, 0x01, 0x00, 0x04, 0x00, 0x96, 0xAE};
    348e:	8e e0       	ldi	r24, 0x0E	; 14
    3490:	e8 ec       	ldi	r30, 0xC8	; 200
    3492:	f1 e4       	ldi	r31, 0x41	; 65
    3494:	de 01       	movw	r26, r28
    3496:	a7 5a       	subi	r26, 0xA7	; 167
    3498:	be 4f       	sbci	r27, 0xFE	; 254
    349a:	01 90       	ld	r0, Z+
    349c:	0d 92       	st	X+, r0
    349e:	8a 95       	dec	r24
    34a0:	e1 f7       	brne	.-8      	; 0x349a <Setup_GPS+0x366>
	USART_Transmit(Enable_GAL_8Hz, sizeof(Enable_GAL_8Hz));
    34a2:	6e e0       	ldi	r22, 0x0E	; 14
    34a4:	ce 01       	movw	r24, r28
    34a6:	87 5a       	subi	r24, 0xA7	; 167
    34a8:	9e 4f       	sbci	r25, 0xFE	; 254
    34aa:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <USART_Transmit>

	return (USART3_RXDATAH & USART_FERR_bm) ? 0 : 1;
    34ae:	80 91 61 08 	lds	r24, 0x0861	; 0x800861 <__TEXT_REGION_LENGTH__+0x7e0861>
    34b2:	86 95       	lsr	r24
    34b4:	86 95       	lsr	r24
    34b6:	91 e0       	ldi	r25, 0x01	; 1
    34b8:	89 27       	eor	r24, r25
}
    34ba:	81 70       	andi	r24, 0x01	; 1
    34bc:	ce 57       	subi	r28, 0x7E	; 126
    34be:	de 4f       	sbci	r29, 0xFE	; 254
    34c0:	cd bf       	out	0x3d, r28	; 61
    34c2:	de bf       	out	0x3e, r29	; 62
    34c4:	df 91       	pop	r29
    34c6:	cf 91       	pop	r28
    34c8:	08 95       	ret

000034ca <__vector_53>:
		USART3_STATUS = USART_TXCIF_bm;
	}
	Delay(1000);
}

ISR(USART3_RXC_vect){
    34ca:	1f 92       	push	r1
    34cc:	0f 92       	push	r0
    34ce:	0f b6       	in	r0, 0x3f	; 63
    34d0:	0f 92       	push	r0
    34d2:	11 24       	eor	r1, r1
    34d4:	0b b6       	in	r0, 0x3b	; 59
    34d6:	0f 92       	push	r0
    34d8:	8f 93       	push	r24
    34da:	9f 93       	push	r25
    34dc:	ef 93       	push	r30
    34de:	ff 93       	push	r31
	while(USART3_STATUS & USART_RXCIF_bm){
    34e0:	11 c0       	rjmp	.+34     	; 0x3504 <__vector_53+0x3a>
		char temp = USART3_RXDATAL;
    34e2:	80 91 60 08 	lds	r24, 0x0860	; 0x800860 <__TEXT_REGION_LENGTH__+0x7e0860>
		if (temp == 10){g_GPS_Read_Flag = 1;}
    34e6:	8a 30       	cpi	r24, 0x0A	; 10
    34e8:	19 f4       	brne	.+6      	; 0x34f0 <__vector_53+0x26>
    34ea:	91 e0       	ldi	r25, 0x01	; 1
    34ec:	90 93 cd 4b 	sts	0x4BCD, r25	; 0x804bcd <g_GPS_Read_Flag>
		g_GPS_Data[g_GPS_Data_Index++] = temp;
    34f0:	e0 91 ce 4b 	lds	r30, 0x4BCE	; 0x804bce <g_GPS_Data_Index>
    34f4:	91 e0       	ldi	r25, 0x01	; 1
    34f6:	9e 0f       	add	r25, r30
    34f8:	90 93 ce 4b 	sts	0x4BCE, r25	; 0x804bce <g_GPS_Data_Index>
    34fc:	f0 e0       	ldi	r31, 0x00	; 0
    34fe:	e1 53       	subi	r30, 0x31	; 49
    3500:	f4 4b       	sbci	r31, 0xB4	; 180
    3502:	80 83       	st	Z, r24
	}
	Delay(1000);
}

ISR(USART3_RXC_vect){
	while(USART3_STATUS & USART_RXCIF_bm){
    3504:	80 91 64 08 	lds	r24, 0x0864	; 0x800864 <__TEXT_REGION_LENGTH__+0x7e0864>
    3508:	88 23       	and	r24, r24
    350a:	5c f3       	brlt	.-42     	; 0x34e2 <__vector_53+0x18>
		char temp = USART3_RXDATAL;
		if (temp == 10){g_GPS_Read_Flag = 1;}
		g_GPS_Data[g_GPS_Data_Index++] = temp;
	}
}
    350c:	ff 91       	pop	r31
    350e:	ef 91       	pop	r30
    3510:	9f 91       	pop	r25
    3512:	8f 91       	pop	r24
    3514:	0f 90       	pop	r0
    3516:	0b be       	out	0x3b, r0	; 59
    3518:	0f 90       	pop	r0
    351a:	0f be       	out	0x3f, r0	; 63
    351c:	0f 90       	pop	r0
    351e:	1f 90       	pop	r1
    3520:	18 95       	reti

00003522 <Observer>:

// OBSERVER CODE
void Observer(States *Drone){
    3522:	4f 92       	push	r4
    3524:	5f 92       	push	r5
    3526:	6f 92       	push	r6
    3528:	7f 92       	push	r7
    352a:	8f 92       	push	r8
    352c:	9f 92       	push	r9
    352e:	af 92       	push	r10
    3530:	bf 92       	push	r11
    3532:	cf 92       	push	r12
    3534:	df 92       	push	r13
    3536:	ef 92       	push	r14
    3538:	ff 92       	push	r15
    353a:	cf 93       	push	r28
    353c:	df 93       	push	r29
    353e:	cd b7       	in	r28, 0x3d	; 61
    3540:	de b7       	in	r29, 0x3e	; 62
    3542:	aa 97       	sbiw	r28, 0x2a	; 42
    3544:	cd bf       	out	0x3d, r28	; 61
    3546:	de bf       	out	0x3e, r29	; 62
    3548:	89 a7       	std	Y+41, r24	; 0x29
    354a:	9a a7       	std	Y+42, r25	; 0x2a
	// and decreasing it increases the trust on the measurement (accelerometer and magnetometer)
		dt = 0.04, // Time between integrations
		Gimbal_Lock_Check_Angle = 5.0*D2R;
	// Measure
	
	float phi_m = atan2f(Drone->g_vec[1], Drone->g_vec[2]);
    354c:	dc 01       	movw	r26, r24
    354e:	54 96       	adiw	r26, 0x14	; 20
    3550:	8d 90       	ld	r8, X+
    3552:	9d 90       	ld	r9, X+
    3554:	ad 90       	ld	r10, X+
    3556:	bc 90       	ld	r11, X
    3558:	57 97       	sbiw	r26, 0x17	; 23
    355a:	50 96       	adiw	r26, 0x10	; 16
    355c:	cd 90       	ld	r12, X+
    355e:	dd 90       	ld	r13, X+
    3560:	ed 90       	ld	r14, X+
    3562:	fc 90       	ld	r15, X
    3564:	53 97       	sbiw	r26, 0x13	; 19
    3566:	a5 01       	movw	r20, r10
    3568:	94 01       	movw	r18, r8
    356a:	c7 01       	movw	r24, r14
    356c:	b6 01       	movw	r22, r12
    356e:	0e 94 dc 1d 	call	0x3bb8	; 0x3bb8 <atan2>
    3572:	69 8b       	std	Y+17, r22	; 0x11
    3574:	7a 8b       	std	Y+18, r23	; 0x12
    3576:	8b 8b       	std	Y+19, r24	; 0x13
    3578:	9c 8b       	std	Y+20, r25	; 0x14
	if (isnan(phi_m)){
    357a:	9b 01       	movw	r18, r22
    357c:	ac 01       	movw	r20, r24
    357e:	0e 94 46 21 	call	0x428c	; 0x428c <__unordsf2>
    3582:	88 23       	and	r24, r24
    3584:	61 f0       	breq	.+24     	; 0x359e <Observer+0x7c>
		phi_m = Drone->Euler[0];
    3586:	a9 a5       	ldd	r26, Y+41	; 0x29
    3588:	ba a5       	ldd	r27, Y+42	; 0x2a
    358a:	94 96       	adiw	r26, 0x24	; 36
    358c:	2d 91       	ld	r18, X+
    358e:	3d 91       	ld	r19, X+
    3590:	4d 91       	ld	r20, X+
    3592:	5c 91       	ld	r21, X
    3594:	97 97       	sbiw	r26, 0x27	; 39
    3596:	29 8b       	std	Y+17, r18	; 0x11
    3598:	3a 8b       	std	Y+18, r19	; 0x12
    359a:	4b 8b       	std	Y+19, r20	; 0x13
    359c:	5c 8b       	std	Y+20, r21	; 0x14
	}
	float theta_m = atan2f(-Drone->g_vec[0], sqrt(pow(Drone->g_vec[1],2) + pow(Drone->g_vec[2],2)));
    359e:	20 e0       	ldi	r18, 0x00	; 0
    35a0:	30 e0       	ldi	r19, 0x00	; 0
    35a2:	40 e0       	ldi	r20, 0x00	; 0
    35a4:	50 e4       	ldi	r21, 0x40	; 64
    35a6:	c7 01       	movw	r24, r14
    35a8:	b6 01       	movw	r22, r12
    35aa:	0e 94 7f 20 	call	0x40fe	; 0x40fe <pow>
    35ae:	6b 01       	movw	r12, r22
    35b0:	7c 01       	movw	r14, r24
    35b2:	20 e0       	ldi	r18, 0x00	; 0
    35b4:	30 e0       	ldi	r19, 0x00	; 0
    35b6:	40 e0       	ldi	r20, 0x00	; 0
    35b8:	50 e4       	ldi	r21, 0x40	; 64
    35ba:	c5 01       	movw	r24, r10
    35bc:	b4 01       	movw	r22, r8
    35be:	0e 94 7f 20 	call	0x40fe	; 0x40fe <pow>
    35c2:	4b 01       	movw	r8, r22
    35c4:	5c 01       	movw	r10, r24
    35c6:	a5 01       	movw	r20, r10
    35c8:	94 01       	movw	r18, r8
    35ca:	c7 01       	movw	r24, r14
    35cc:	b6 01       	movw	r22, r12
    35ce:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <__addsf3>
    35d2:	0e 94 dd 20 	call	0x41ba	; 0x41ba <sqrt>
    35d6:	9b 01       	movw	r18, r22
    35d8:	ac 01       	movw	r20, r24
    35da:	e9 a5       	ldd	r30, Y+41	; 0x29
    35dc:	fa a5       	ldd	r31, Y+42	; 0x2a
    35de:	84 85       	ldd	r24, Z+12	; 0x0c
    35e0:	95 85       	ldd	r25, Z+13	; 0x0d
    35e2:	a6 85       	ldd	r26, Z+14	; 0x0e
    35e4:	b7 85       	ldd	r27, Z+15	; 0x0f
    35e6:	bc 01       	movw	r22, r24
    35e8:	cd 01       	movw	r24, r26
    35ea:	90 58       	subi	r25, 0x80	; 128
    35ec:	0e 94 dc 1d 	call	0x3bb8	; 0x3bb8 <atan2>
    35f0:	6d 8b       	std	Y+21, r22	; 0x15
    35f2:	7e 8b       	std	Y+22, r23	; 0x16
    35f4:	8f 8b       	std	Y+23, r24	; 0x17
    35f6:	98 8f       	std	Y+24, r25	; 0x18
	if (isnan(theta_m)){
    35f8:	9b 01       	movw	r18, r22
    35fa:	ac 01       	movw	r20, r24
    35fc:	0e 94 46 21 	call	0x428c	; 0x428c <__unordsf2>
    3600:	88 23       	and	r24, r24
    3602:	61 f0       	breq	.+24     	; 0x361c <Observer+0xfa>
		theta_m = Drone->Euler[1];
    3604:	a9 a5       	ldd	r26, Y+41	; 0x29
    3606:	ba a5       	ldd	r27, Y+42	; 0x2a
    3608:	98 96       	adiw	r26, 0x28	; 40
    360a:	2d 91       	ld	r18, X+
    360c:	3d 91       	ld	r19, X+
    360e:	4d 91       	ld	r20, X+
    3610:	5c 91       	ld	r21, X
    3612:	9b 97       	sbiw	r26, 0x2b	; 43
    3614:	2d 8b       	std	Y+21, r18	; 0x15
    3616:	3e 8b       	std	Y+22, r19	; 0x16
    3618:	4f 8b       	std	Y+23, r20	; 0x17
    361a:	58 8f       	std	Y+24, r21	; 0x18
	}
	float mag_x_NED = cosf(Drone->Euler[1])*Drone->m_vec[0] + sinf(Drone->Euler[0])*sinf(Drone->Euler[1])*Drone->m_vec[1] + cosf(Drone->Euler[0])*sinf(Drone->Euler[1])*Drone->m_vec[2];
    361c:	a9 a5       	ldd	r26, Y+41	; 0x29
    361e:	ba a5       	ldd	r27, Y+42	; 0x2a
    3620:	98 96       	adiw	r26, 0x28	; 40
    3622:	2d 91       	ld	r18, X+
    3624:	3d 91       	ld	r19, X+
    3626:	4d 91       	ld	r20, X+
    3628:	5c 91       	ld	r21, X
    362a:	9b 97       	sbiw	r26, 0x2b	; 43
    362c:	29 83       	std	Y+1, r18	; 0x01
    362e:	3a 83       	std	Y+2, r19	; 0x02
    3630:	4b 83       	std	Y+3, r20	; 0x03
    3632:	5c 83       	std	Y+4, r21	; 0x04
    3634:	ca 01       	movw	r24, r20
    3636:	b9 01       	movw	r22, r18
    3638:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <cos>
    363c:	69 8f       	std	Y+25, r22	; 0x19
    363e:	7a 8f       	std	Y+26, r23	; 0x1a
    3640:	8b 8f       	std	Y+27, r24	; 0x1b
    3642:	9c 8f       	std	Y+28, r25	; 0x1c
    3644:	e9 a5       	ldd	r30, Y+41	; 0x29
    3646:	fa a5       	ldd	r31, Y+42	; 0x2a
    3648:	20 8d       	ldd	r18, Z+24	; 0x18
    364a:	31 8d       	ldd	r19, Z+25	; 0x19
    364c:	42 8d       	ldd	r20, Z+26	; 0x1a
    364e:	53 8d       	ldd	r21, Z+27	; 0x1b
    3650:	0e 94 12 20 	call	0x4024	; 0x4024 <__mulsf3>
    3654:	2b 01       	movw	r4, r22
    3656:	3c 01       	movw	r6, r24
    3658:	a9 a5       	ldd	r26, Y+41	; 0x29
    365a:	ba a5       	ldd	r27, Y+42	; 0x2a
    365c:	94 96       	adiw	r26, 0x24	; 36
    365e:	2d 91       	ld	r18, X+
    3660:	3d 91       	ld	r19, X+
    3662:	4d 91       	ld	r20, X+
    3664:	5c 91       	ld	r21, X
    3666:	97 97       	sbiw	r26, 0x27	; 39
    3668:	2d 83       	std	Y+5, r18	; 0x05
    366a:	3e 83       	std	Y+6, r19	; 0x06
    366c:	4f 83       	std	Y+7, r20	; 0x07
    366e:	58 87       	std	Y+8, r21	; 0x08
    3670:	ca 01       	movw	r24, r20
    3672:	b9 01       	movw	r22, r18
    3674:	0e 94 cf 20 	call	0x419e	; 0x419e <sin>
    3678:	69 87       	std	Y+9, r22	; 0x09
    367a:	7a 87       	std	Y+10, r23	; 0x0a
    367c:	8b 87       	std	Y+11, r24	; 0x0b
    367e:	9c 87       	std	Y+12, r25	; 0x0c
    3680:	69 81       	ldd	r22, Y+1	; 0x01
    3682:	7a 81       	ldd	r23, Y+2	; 0x02
    3684:	8b 81       	ldd	r24, Y+3	; 0x03
    3686:	9c 81       	ldd	r25, Y+4	; 0x04
    3688:	0e 94 cf 20 	call	0x419e	; 0x419e <sin>
    368c:	6b 01       	movw	r12, r22
    368e:	7c 01       	movw	r14, r24
    3690:	9b 01       	movw	r18, r22
    3692:	ac 01       	movw	r20, r24
    3694:	69 85       	ldd	r22, Y+9	; 0x09
    3696:	7a 85       	ldd	r23, Y+10	; 0x0a
    3698:	8b 85       	ldd	r24, Y+11	; 0x0b
    369a:	9c 85       	ldd	r25, Y+12	; 0x0c
    369c:	0e 94 12 20 	call	0x4024	; 0x4024 <__mulsf3>
    36a0:	e9 a5       	ldd	r30, Y+41	; 0x29
    36a2:	fa a5       	ldd	r31, Y+42	; 0x2a
    36a4:	84 8c       	ldd	r8, Z+28	; 0x1c
    36a6:	95 8c       	ldd	r9, Z+29	; 0x1d
    36a8:	a6 8c       	ldd	r10, Z+30	; 0x1e
    36aa:	b7 8c       	ldd	r11, Z+31	; 0x1f
    36ac:	a5 01       	movw	r20, r10
    36ae:	94 01       	movw	r18, r8
    36b0:	0e 94 12 20 	call	0x4024	; 0x4024 <__mulsf3>
    36b4:	9b 01       	movw	r18, r22
    36b6:	ac 01       	movw	r20, r24
    36b8:	c3 01       	movw	r24, r6
    36ba:	b2 01       	movw	r22, r4
    36bc:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <__addsf3>
    36c0:	2b 01       	movw	r4, r22
    36c2:	3c 01       	movw	r6, r24
    36c4:	6d 81       	ldd	r22, Y+5	; 0x05
    36c6:	7e 81       	ldd	r23, Y+6	; 0x06
    36c8:	8f 81       	ldd	r24, Y+7	; 0x07
    36ca:	98 85       	ldd	r25, Y+8	; 0x08
    36cc:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <cos>
    36d0:	6d 87       	std	Y+13, r22	; 0x0d
    36d2:	7e 87       	std	Y+14, r23	; 0x0e
    36d4:	8f 87       	std	Y+15, r24	; 0x0f
    36d6:	98 8b       	std	Y+16, r25	; 0x10
    36d8:	9b 01       	movw	r18, r22
    36da:	ac 01       	movw	r20, r24
    36dc:	c7 01       	movw	r24, r14
    36de:	b6 01       	movw	r22, r12
    36e0:	0e 94 12 20 	call	0x4024	; 0x4024 <__mulsf3>
    36e4:	a9 a5       	ldd	r26, Y+41	; 0x29
    36e6:	ba a5       	ldd	r27, Y+42	; 0x2a
    36e8:	90 96       	adiw	r26, 0x20	; 32
    36ea:	cd 90       	ld	r12, X+
    36ec:	dd 90       	ld	r13, X+
    36ee:	ed 90       	ld	r14, X+
    36f0:	fc 90       	ld	r15, X
    36f2:	93 97       	sbiw	r26, 0x23	; 35
    36f4:	a7 01       	movw	r20, r14
    36f6:	96 01       	movw	r18, r12
    36f8:	0e 94 12 20 	call	0x4024	; 0x4024 <__mulsf3>
    36fc:	9b 01       	movw	r18, r22
    36fe:	ac 01       	movw	r20, r24
    3700:	c3 01       	movw	r24, r6
    3702:	b2 01       	movw	r22, r4
    3704:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <__addsf3>
    3708:	2b 01       	movw	r4, r22
    370a:	3c 01       	movw	r6, r24
	float mag_y_NED = cosf(Drone->Euler[0])*Drone->m_vec[1] - sinf(Drone->Euler[0])*Drone->m_vec[2];
    370c:	2d 85       	ldd	r18, Y+13	; 0x0d
    370e:	3e 85       	ldd	r19, Y+14	; 0x0e
    3710:	4f 85       	ldd	r20, Y+15	; 0x0f
    3712:	58 89       	ldd	r21, Y+16	; 0x10
    3714:	c5 01       	movw	r24, r10
    3716:	b4 01       	movw	r22, r8
    3718:	0e 94 12 20 	call	0x4024	; 0x4024 <__mulsf3>
    371c:	4b 01       	movw	r8, r22
    371e:	5c 01       	movw	r10, r24
    3720:	a7 01       	movw	r20, r14
    3722:	96 01       	movw	r18, r12
    3724:	69 85       	ldd	r22, Y+9	; 0x09
    3726:	7a 85       	ldd	r23, Y+10	; 0x0a
    3728:	8b 85       	ldd	r24, Y+11	; 0x0b
    372a:	9c 85       	ldd	r25, Y+12	; 0x0c
    372c:	0e 94 12 20 	call	0x4024	; 0x4024 <__mulsf3>
    3730:	9b 01       	movw	r18, r22
    3732:	ac 01       	movw	r20, r24
    3734:	c5 01       	movw	r24, r10
    3736:	b4 01       	movw	r22, r8
    3738:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <__subsf3>
	float psi_m = -atan2f(mag_y_NED, mag_x_NED);
    373c:	a3 01       	movw	r20, r6
    373e:	92 01       	movw	r18, r4
    3740:	0e 94 dc 1d 	call	0x3bb8	; 0x3bb8 <atan2>
    3744:	2b 01       	movw	r4, r22
    3746:	3c 01       	movw	r6, r24
    3748:	77 fa       	bst	r7, 7
    374a:	70 94       	com	r7
    374c:	77 f8       	bld	r7, 7
    374e:	70 94       	com	r7
	if (isnan(psi_m)){
    3750:	a3 01       	movw	r20, r6
    3752:	92 01       	movw	r18, r4
    3754:	c3 01       	movw	r24, r6
    3756:	b2 01       	movw	r22, r4
    3758:	0e 94 46 21 	call	0x428c	; 0x428c <__unordsf2>
    375c:	88 23       	and	r24, r24
    375e:	31 f0       	breq	.+12     	; 0x376c <Observer+0x24a>
		psi_m = Drone->Euler[2];
    3760:	e9 a5       	ldd	r30, Y+41	; 0x29
    3762:	fa a5       	ldd	r31, Y+42	; 0x2a
    3764:	44 a4       	ldd	r4, Z+44	; 0x2c
    3766:	55 a4       	ldd	r5, Z+45	; 0x2d
    3768:	66 a4       	ldd	r6, Z+46	; 0x2e
    376a:	77 a4       	ldd	r7, Z+47	; 0x2f
	}
	if (psi_m <= 0){
    376c:	20 e0       	ldi	r18, 0x00	; 0
    376e:	30 e0       	ldi	r19, 0x00	; 0
    3770:	a9 01       	movw	r20, r18
    3772:	c3 01       	movw	r24, r6
    3774:	b2 01       	movw	r22, r4
    3776:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <__cmpsf2>
    377a:	18 16       	cp	r1, r24
    377c:	54 f0       	brlt	.+20     	; 0x3792 <Observer+0x270>
		psi_m += 2.0*M_PI;
    377e:	2b ed       	ldi	r18, 0xDB	; 219
    3780:	3f e0       	ldi	r19, 0x0F	; 15
    3782:	49 ec       	ldi	r20, 0xC9	; 201
    3784:	50 e4       	ldi	r21, 0x40	; 64
    3786:	c3 01       	movw	r24, r6
    3788:	b2 01       	movw	r22, r4
    378a:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <__addsf3>
    378e:	2b 01       	movw	r4, r22
    3790:	3c 01       	movw	r6, r24
	}
	
	// Predict
	float phi_hat = Drone->Euler[0];
	float theta_hat = Drone->Euler[1];
	float psi_hat = Drone->Euler[2];
    3792:	a9 a5       	ldd	r26, Y+41	; 0x29
    3794:	ba a5       	ldd	r27, Y+42	; 0x2a
    3796:	9c 96       	adiw	r26, 0x2c	; 44
    3798:	8d 90       	ld	r8, X+
    379a:	9d 90       	ld	r9, X+
    379c:	ad 90       	ld	r10, X+
    379e:	bc 90       	ld	r11, X
    37a0:	9f 97       	sbiw	r26, 0x2f	; 47
	if (abs(abs(Drone->Euler[1]) - M_PI_2) > Gimbal_Lock_Check_Angle){
    37a2:	69 81       	ldd	r22, Y+1	; 0x01
    37a4:	7a 81       	ldd	r23, Y+2	; 0x02
    37a6:	8b 81       	ldd	r24, Y+3	; 0x03
    37a8:	9c 81       	ldd	r25, Y+4	; 0x04
    37aa:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <__fixsfsi>
    37ae:	9b 01       	movw	r18, r22
    37b0:	77 23       	and	r23, r23
    37b2:	24 f4       	brge	.+8      	; 0x37bc <Observer+0x29a>
    37b4:	22 27       	eor	r18, r18
    37b6:	33 27       	eor	r19, r19
    37b8:	26 1b       	sub	r18, r22
    37ba:	37 0b       	sbc	r19, r23
    37bc:	b9 01       	movw	r22, r18
    37be:	33 0f       	add	r19, r19
    37c0:	88 0b       	sbc	r24, r24
    37c2:	99 0b       	sbc	r25, r25
    37c4:	0e 94 ef 1e 	call	0x3dde	; 0x3dde <__floatsisf>
    37c8:	2b ed       	ldi	r18, 0xDB	; 219
    37ca:	3f e0       	ldi	r19, 0x0F	; 15
    37cc:	49 ec       	ldi	r20, 0xC9	; 201
    37ce:	5f e3       	ldi	r21, 0x3F	; 63
    37d0:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <__subsf3>
    37d4:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <__fixsfsi>
    37d8:	9b 01       	movw	r18, r22
    37da:	77 23       	and	r23, r23
    37dc:	24 f4       	brge	.+8      	; 0x37e6 <Observer+0x2c4>
    37de:	22 27       	eor	r18, r18
    37e0:	33 27       	eor	r19, r19
    37e2:	26 1b       	sub	r18, r22
    37e4:	37 0b       	sbc	r19, r23
    37e6:	b9 01       	movw	r22, r18
    37e8:	33 0f       	add	r19, r19
    37ea:	88 0b       	sbc	r24, r24
    37ec:	99 0b       	sbc	r25, r25
    37ee:	0e 94 ef 1e 	call	0x3dde	; 0x3dde <__floatsisf>
    37f2:	23 ec       	ldi	r18, 0xC3	; 195
    37f4:	38 eb       	ldi	r19, 0xB8	; 184
    37f6:	42 eb       	ldi	r20, 0xB2	; 178
    37f8:	5d e3       	ldi	r21, 0x3D	; 61
    37fa:	0e 94 05 20 	call	0x400a	; 0x400a <__gesf2>
    37fe:	18 16       	cp	r1, r24
    3800:	0c f0       	brlt	.+2      	; 0x3804 <Observer+0x2e2>
    3802:	ca c0       	rjmp	.+404    	; 0x3998 <Observer+0x476>
		phi_hat += (Drone->w[0] + sinf(Drone->Euler[0])*tanf(Drone->Euler[1])*Drone->w[1] + cosf(Drone->Euler[0])*tanf(Drone->Euler[1])*Drone->w[2])*dt;
    3804:	e9 a5       	ldd	r30, Y+41	; 0x29
    3806:	fa a5       	ldd	r31, Y+42	; 0x2a
    3808:	c0 80       	ld	r12, Z
    380a:	d1 80       	ldd	r13, Z+1	; 0x01
    380c:	e2 80       	ldd	r14, Z+2	; 0x02
    380e:	f3 80       	ldd	r15, Z+3	; 0x03
    3810:	69 81       	ldd	r22, Y+1	; 0x01
    3812:	7a 81       	ldd	r23, Y+2	; 0x02
    3814:	8b 81       	ldd	r24, Y+3	; 0x03
    3816:	9c 81       	ldd	r25, Y+4	; 0x04
    3818:	0e 94 21 21 	call	0x4242	; 0x4242 <tan>
    381c:	6d 8f       	std	Y+29, r22	; 0x1d
    381e:	7e 8f       	std	Y+30, r23	; 0x1e
    3820:	8f 8f       	std	Y+31, r24	; 0x1f
    3822:	98 a3       	std	Y+32, r25	; 0x20
    3824:	9b 01       	movw	r18, r22
    3826:	ac 01       	movw	r20, r24
    3828:	69 85       	ldd	r22, Y+9	; 0x09
    382a:	7a 85       	ldd	r23, Y+10	; 0x0a
    382c:	8b 85       	ldd	r24, Y+11	; 0x0b
    382e:	9c 85       	ldd	r25, Y+12	; 0x0c
    3830:	0e 94 12 20 	call	0x4024	; 0x4024 <__mulsf3>
    3834:	a9 a5       	ldd	r26, Y+41	; 0x29
    3836:	ba a5       	ldd	r27, Y+42	; 0x2a
    3838:	14 96       	adiw	r26, 0x04	; 4
    383a:	2d 91       	ld	r18, X+
    383c:	3d 91       	ld	r19, X+
    383e:	4d 91       	ld	r20, X+
    3840:	5c 91       	ld	r21, X
    3842:	17 97       	sbiw	r26, 0x07	; 7
    3844:	29 a3       	std	Y+33, r18	; 0x21
    3846:	3a a3       	std	Y+34, r19	; 0x22
    3848:	4b a3       	std	Y+35, r20	; 0x23
    384a:	5c a3       	std	Y+36, r21	; 0x24
    384c:	0e 94 12 20 	call	0x4024	; 0x4024 <__mulsf3>
    3850:	9b 01       	movw	r18, r22
    3852:	ac 01       	movw	r20, r24
    3854:	c7 01       	movw	r24, r14
    3856:	b6 01       	movw	r22, r12
    3858:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <__addsf3>
    385c:	6d a3       	std	Y+37, r22	; 0x25
    385e:	7e a3       	std	Y+38, r23	; 0x26
    3860:	8f a3       	std	Y+39, r24	; 0x27
    3862:	98 a7       	std	Y+40, r25	; 0x28
    3864:	2d 8d       	ldd	r18, Y+29	; 0x1d
    3866:	3e 8d       	ldd	r19, Y+30	; 0x1e
    3868:	4f 8d       	ldd	r20, Y+31	; 0x1f
    386a:	58 a1       	ldd	r21, Y+32	; 0x20
    386c:	6d 85       	ldd	r22, Y+13	; 0x0d
    386e:	7e 85       	ldd	r23, Y+14	; 0x0e
    3870:	8f 85       	ldd	r24, Y+15	; 0x0f
    3872:	98 89       	ldd	r25, Y+16	; 0x10
    3874:	0e 94 12 20 	call	0x4024	; 0x4024 <__mulsf3>
    3878:	e9 a5       	ldd	r30, Y+41	; 0x29
    387a:	fa a5       	ldd	r31, Y+42	; 0x2a
    387c:	c0 84       	ldd	r12, Z+8	; 0x08
    387e:	d1 84       	ldd	r13, Z+9	; 0x09
    3880:	e2 84       	ldd	r14, Z+10	; 0x0a
    3882:	f3 84       	ldd	r15, Z+11	; 0x0b
    3884:	a7 01       	movw	r20, r14
    3886:	96 01       	movw	r18, r12
    3888:	0e 94 12 20 	call	0x4024	; 0x4024 <__mulsf3>
    388c:	9b 01       	movw	r18, r22
    388e:	ac 01       	movw	r20, r24
    3890:	6d a1       	ldd	r22, Y+37	; 0x25
    3892:	7e a1       	ldd	r23, Y+38	; 0x26
    3894:	8f a1       	ldd	r24, Y+39	; 0x27
    3896:	98 a5       	ldd	r25, Y+40	; 0x28
    3898:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <__addsf3>
    389c:	2a e0       	ldi	r18, 0x0A	; 10
    389e:	37 ed       	ldi	r19, 0xD7	; 215
    38a0:	43 e2       	ldi	r20, 0x23	; 35
    38a2:	5d e3       	ldi	r21, 0x3D	; 61
    38a4:	0e 94 12 20 	call	0x4024	; 0x4024 <__mulsf3>
    38a8:	9b 01       	movw	r18, r22
    38aa:	ac 01       	movw	r20, r24
    38ac:	6d 81       	ldd	r22, Y+5	; 0x05
    38ae:	7e 81       	ldd	r23, Y+6	; 0x06
    38b0:	8f 81       	ldd	r24, Y+7	; 0x07
    38b2:	98 85       	ldd	r25, Y+8	; 0x08
    38b4:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <__addsf3>
    38b8:	6d 83       	std	Y+5, r22	; 0x05
    38ba:	7e 83       	std	Y+6, r23	; 0x06
    38bc:	8f 83       	std	Y+7, r24	; 0x07
    38be:	98 87       	std	Y+8, r25	; 0x08
		theta_hat += (cosf(Drone->Euler[0])*Drone->w[1] - sinf(Drone->Euler[0])*Drone->w[2])*dt;
    38c0:	29 a1       	ldd	r18, Y+33	; 0x21
    38c2:	3a a1       	ldd	r19, Y+34	; 0x22
    38c4:	4b a1       	ldd	r20, Y+35	; 0x23
    38c6:	5c a1       	ldd	r21, Y+36	; 0x24
    38c8:	6d 85       	ldd	r22, Y+13	; 0x0d
    38ca:	7e 85       	ldd	r23, Y+14	; 0x0e
    38cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    38ce:	98 89       	ldd	r25, Y+16	; 0x10
    38d0:	0e 94 12 20 	call	0x4024	; 0x4024 <__mulsf3>
    38d4:	6d 8f       	std	Y+29, r22	; 0x1d
    38d6:	7e 8f       	std	Y+30, r23	; 0x1e
    38d8:	8f 8f       	std	Y+31, r24	; 0x1f
    38da:	98 a3       	std	Y+32, r25	; 0x20
    38dc:	a7 01       	movw	r20, r14
    38de:	96 01       	movw	r18, r12
    38e0:	69 85       	ldd	r22, Y+9	; 0x09
    38e2:	7a 85       	ldd	r23, Y+10	; 0x0a
    38e4:	8b 85       	ldd	r24, Y+11	; 0x0b
    38e6:	9c 85       	ldd	r25, Y+12	; 0x0c
    38e8:	0e 94 12 20 	call	0x4024	; 0x4024 <__mulsf3>
    38ec:	9b 01       	movw	r18, r22
    38ee:	ac 01       	movw	r20, r24
    38f0:	6d 8d       	ldd	r22, Y+29	; 0x1d
    38f2:	7e 8d       	ldd	r23, Y+30	; 0x1e
    38f4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    38f6:	98 a1       	ldd	r25, Y+32	; 0x20
    38f8:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <__subsf3>
    38fc:	2a e0       	ldi	r18, 0x0A	; 10
    38fe:	37 ed       	ldi	r19, 0xD7	; 215
    3900:	43 e2       	ldi	r20, 0x23	; 35
    3902:	5d e3       	ldi	r21, 0x3D	; 61
    3904:	0e 94 12 20 	call	0x4024	; 0x4024 <__mulsf3>
    3908:	9b 01       	movw	r18, r22
    390a:	ac 01       	movw	r20, r24
    390c:	69 81       	ldd	r22, Y+1	; 0x01
    390e:	7a 81       	ldd	r23, Y+2	; 0x02
    3910:	8b 81       	ldd	r24, Y+3	; 0x03
    3912:	9c 81       	ldd	r25, Y+4	; 0x04
    3914:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <__addsf3>
    3918:	69 83       	std	Y+1, r22	; 0x01
    391a:	7a 83       	std	Y+2, r23	; 0x02
    391c:	8b 83       	std	Y+3, r24	; 0x03
    391e:	9c 83       	std	Y+4, r25	; 0x04
		psi_hat += ((sinf(Drone->Euler[0])/cosf(Drone->Euler[1]))*Drone->w[1] + (cosf(Drone->Euler[0])/cosf(Drone->Euler[1]))*Drone->w[2])*dt;
    3920:	29 8d       	ldd	r18, Y+25	; 0x19
    3922:	3a 8d       	ldd	r19, Y+26	; 0x1a
    3924:	4b 8d       	ldd	r20, Y+27	; 0x1b
    3926:	5c 8d       	ldd	r21, Y+28	; 0x1c
    3928:	69 85       	ldd	r22, Y+9	; 0x09
    392a:	7a 85       	ldd	r23, Y+10	; 0x0a
    392c:	8b 85       	ldd	r24, Y+11	; 0x0b
    392e:	9c 85       	ldd	r25, Y+12	; 0x0c
    3930:	0e 94 45 1e 	call	0x3c8a	; 0x3c8a <__divsf3>
    3934:	9b 01       	movw	r18, r22
    3936:	ac 01       	movw	r20, r24
    3938:	69 a1       	ldd	r22, Y+33	; 0x21
    393a:	7a a1       	ldd	r23, Y+34	; 0x22
    393c:	8b a1       	ldd	r24, Y+35	; 0x23
    393e:	9c a1       	ldd	r25, Y+36	; 0x24
    3940:	0e 94 12 20 	call	0x4024	; 0x4024 <__mulsf3>
    3944:	69 87       	std	Y+9, r22	; 0x09
    3946:	7a 87       	std	Y+10, r23	; 0x0a
    3948:	8b 87       	std	Y+11, r24	; 0x0b
    394a:	9c 87       	std	Y+12, r25	; 0x0c
    394c:	29 8d       	ldd	r18, Y+25	; 0x19
    394e:	3a 8d       	ldd	r19, Y+26	; 0x1a
    3950:	4b 8d       	ldd	r20, Y+27	; 0x1b
    3952:	5c 8d       	ldd	r21, Y+28	; 0x1c
    3954:	6d 85       	ldd	r22, Y+13	; 0x0d
    3956:	7e 85       	ldd	r23, Y+14	; 0x0e
    3958:	8f 85       	ldd	r24, Y+15	; 0x0f
    395a:	98 89       	ldd	r25, Y+16	; 0x10
    395c:	0e 94 45 1e 	call	0x3c8a	; 0x3c8a <__divsf3>
    3960:	9b 01       	movw	r18, r22
    3962:	ac 01       	movw	r20, r24
    3964:	c7 01       	movw	r24, r14
    3966:	b6 01       	movw	r22, r12
    3968:	0e 94 12 20 	call	0x4024	; 0x4024 <__mulsf3>
    396c:	9b 01       	movw	r18, r22
    396e:	ac 01       	movw	r20, r24
    3970:	69 85       	ldd	r22, Y+9	; 0x09
    3972:	7a 85       	ldd	r23, Y+10	; 0x0a
    3974:	8b 85       	ldd	r24, Y+11	; 0x0b
    3976:	9c 85       	ldd	r25, Y+12	; 0x0c
    3978:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <__addsf3>
    397c:	2a e0       	ldi	r18, 0x0A	; 10
    397e:	37 ed       	ldi	r19, 0xD7	; 215
    3980:	43 e2       	ldi	r20, 0x23	; 35
    3982:	5d e3       	ldi	r21, 0x3D	; 61
    3984:	0e 94 12 20 	call	0x4024	; 0x4024 <__mulsf3>
    3988:	9b 01       	movw	r18, r22
    398a:	ac 01       	movw	r20, r24
    398c:	c5 01       	movw	r24, r10
    398e:	b4 01       	movw	r22, r8
    3990:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <__addsf3>
    3994:	4b 01       	movw	r8, r22
    3996:	5c 01       	movw	r10, r24
	}
	// Update
	Drone->Euler[0] = phi_hat + L*(phi_m-phi_hat);
    3998:	2d 81       	ldd	r18, Y+5	; 0x05
    399a:	3e 81       	ldd	r19, Y+6	; 0x06
    399c:	4f 81       	ldd	r20, Y+7	; 0x07
    399e:	58 85       	ldd	r21, Y+8	; 0x08
    39a0:	69 89       	ldd	r22, Y+17	; 0x11
    39a2:	7a 89       	ldd	r23, Y+18	; 0x12
    39a4:	8b 89       	ldd	r24, Y+19	; 0x13
    39a6:	9c 89       	ldd	r25, Y+20	; 0x14
    39a8:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <__subsf3>
    39ac:	2d ec       	ldi	r18, 0xCD	; 205
    39ae:	3c ec       	ldi	r19, 0xCC	; 204
    39b0:	4c e4       	ldi	r20, 0x4C	; 76
    39b2:	5d e3       	ldi	r21, 0x3D	; 61
    39b4:	0e 94 12 20 	call	0x4024	; 0x4024 <__mulsf3>
    39b8:	9b 01       	movw	r18, r22
    39ba:	ac 01       	movw	r20, r24
    39bc:	6d 81       	ldd	r22, Y+5	; 0x05
    39be:	7e 81       	ldd	r23, Y+6	; 0x06
    39c0:	8f 81       	ldd	r24, Y+7	; 0x07
    39c2:	98 85       	ldd	r25, Y+8	; 0x08
    39c4:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <__addsf3>
    39c8:	a9 a5       	ldd	r26, Y+41	; 0x29
    39ca:	ba a5       	ldd	r27, Y+42	; 0x2a
    39cc:	94 96       	adiw	r26, 0x24	; 36
    39ce:	6d 93       	st	X+, r22
    39d0:	7d 93       	st	X+, r23
    39d2:	8d 93       	st	X+, r24
    39d4:	9c 93       	st	X, r25
    39d6:	97 97       	sbiw	r26, 0x27	; 39
	Drone->Euler[1] = theta_hat + L*(theta_m-theta_hat);
    39d8:	29 81       	ldd	r18, Y+1	; 0x01
    39da:	3a 81       	ldd	r19, Y+2	; 0x02
    39dc:	4b 81       	ldd	r20, Y+3	; 0x03
    39de:	5c 81       	ldd	r21, Y+4	; 0x04
    39e0:	6d 89       	ldd	r22, Y+21	; 0x15
    39e2:	7e 89       	ldd	r23, Y+22	; 0x16
    39e4:	8f 89       	ldd	r24, Y+23	; 0x17
    39e6:	98 8d       	ldd	r25, Y+24	; 0x18
    39e8:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <__subsf3>
    39ec:	2d ec       	ldi	r18, 0xCD	; 205
    39ee:	3c ec       	ldi	r19, 0xCC	; 204
    39f0:	4c e4       	ldi	r20, 0x4C	; 76
    39f2:	5d e3       	ldi	r21, 0x3D	; 61
    39f4:	0e 94 12 20 	call	0x4024	; 0x4024 <__mulsf3>
    39f8:	9b 01       	movw	r18, r22
    39fa:	ac 01       	movw	r20, r24
    39fc:	69 81       	ldd	r22, Y+1	; 0x01
    39fe:	7a 81       	ldd	r23, Y+2	; 0x02
    3a00:	8b 81       	ldd	r24, Y+3	; 0x03
    3a02:	9c 81       	ldd	r25, Y+4	; 0x04
    3a04:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <__addsf3>
    3a08:	e9 a5       	ldd	r30, Y+41	; 0x29
    3a0a:	fa a5       	ldd	r31, Y+42	; 0x2a
    3a0c:	60 a7       	std	Z+40, r22	; 0x28
    3a0e:	71 a7       	std	Z+41, r23	; 0x29
    3a10:	82 a7       	std	Z+42, r24	; 0x2a
    3a12:	93 a7       	std	Z+43, r25	; 0x2b
	// Prevent yaw angle discontinuity at 2pi - 0 to cause the filter to slowly cycle between them
	Drone->Euler[2] = (abs(psi_m-psi_hat)>M_PI)?(psi_m):(psi_hat + L*(psi_m-psi_hat));
    3a14:	a5 01       	movw	r20, r10
    3a16:	94 01       	movw	r18, r8
    3a18:	c3 01       	movw	r24, r6
    3a1a:	b2 01       	movw	r22, r4
    3a1c:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <__subsf3>
    3a20:	6b 01       	movw	r12, r22
    3a22:	7c 01       	movw	r14, r24
    3a24:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <__fixsfsi>
    3a28:	9b 01       	movw	r18, r22
    3a2a:	77 23       	and	r23, r23
    3a2c:	24 f4       	brge	.+8      	; 0x3a36 <Observer+0x514>
    3a2e:	22 27       	eor	r18, r18
    3a30:	33 27       	eor	r19, r19
    3a32:	26 1b       	sub	r18, r22
    3a34:	37 0b       	sbc	r19, r23
    3a36:	b9 01       	movw	r22, r18
    3a38:	33 0f       	add	r19, r19
    3a3a:	88 0b       	sbc	r24, r24
    3a3c:	99 0b       	sbc	r25, r25
    3a3e:	0e 94 ef 1e 	call	0x3dde	; 0x3dde <__floatsisf>
    3a42:	2b ed       	ldi	r18, 0xDB	; 219
    3a44:	3f e0       	ldi	r19, 0x0F	; 15
    3a46:	49 e4       	ldi	r20, 0x49	; 73
    3a48:	50 e4       	ldi	r21, 0x40	; 64
    3a4a:	0e 94 05 20 	call	0x400a	; 0x400a <__gesf2>
    3a4e:	18 16       	cp	r1, r24
    3a50:	8c f0       	brlt	.+34     	; 0x3a74 <Observer+0x552>
    3a52:	2d ec       	ldi	r18, 0xCD	; 205
    3a54:	3c ec       	ldi	r19, 0xCC	; 204
    3a56:	4c e4       	ldi	r20, 0x4C	; 76
    3a58:	5d e3       	ldi	r21, 0x3D	; 61
    3a5a:	c7 01       	movw	r24, r14
    3a5c:	b6 01       	movw	r22, r12
    3a5e:	0e 94 12 20 	call	0x4024	; 0x4024 <__mulsf3>
    3a62:	9b 01       	movw	r18, r22
    3a64:	ac 01       	movw	r20, r24
    3a66:	c5 01       	movw	r24, r10
    3a68:	b4 01       	movw	r22, r8
    3a6a:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <__addsf3>
    3a6e:	36 2f       	mov	r19, r22
    3a70:	27 2f       	mov	r18, r23
    3a72:	04 c0       	rjmp	.+8      	; 0x3a7c <Observer+0x55a>
    3a74:	34 2d       	mov	r19, r4
    3a76:	25 2d       	mov	r18, r5
    3a78:	86 2d       	mov	r24, r6
    3a7a:	97 2d       	mov	r25, r7
    3a7c:	43 2f       	mov	r20, r19
    3a7e:	52 2f       	mov	r21, r18
    3a80:	68 2f       	mov	r22, r24
    3a82:	79 2f       	mov	r23, r25
    3a84:	a9 a5       	ldd	r26, Y+41	; 0x29
    3a86:	ba a5       	ldd	r27, Y+42	; 0x2a
    3a88:	9c 96       	adiw	r26, 0x2c	; 44
    3a8a:	4d 93       	st	X+, r20
    3a8c:	5d 93       	st	X+, r21
    3a8e:	6d 93       	st	X+, r22
    3a90:	7c 93       	st	X, r23
    3a92:	9f 97       	sbiw	r26, 0x2f	; 47
    3a94:	aa 96       	adiw	r28, 0x2a	; 42
    3a96:	cd bf       	out	0x3d, r28	; 61
    3a98:	de bf       	out	0x3e, r29	; 62
    3a9a:	df 91       	pop	r29
    3a9c:	cf 91       	pop	r28
    3a9e:	ff 90       	pop	r15
    3aa0:	ef 90       	pop	r14
    3aa2:	df 90       	pop	r13
    3aa4:	cf 90       	pop	r12
    3aa6:	bf 90       	pop	r11
    3aa8:	af 90       	pop	r10
    3aaa:	9f 90       	pop	r9
    3aac:	8f 90       	pop	r8
    3aae:	7f 90       	pop	r7
    3ab0:	6f 90       	pop	r6
    3ab2:	5f 90       	pop	r5
    3ab4:	4f 90       	pop	r4
    3ab6:	08 95       	ret

00003ab8 <__subsf3>:
    3ab8:	50 58       	subi	r21, 0x80	; 128

00003aba <__addsf3>:
    3aba:	bb 27       	eor	r27, r27
    3abc:	aa 27       	eor	r26, r26
    3abe:	0e 94 74 1d 	call	0x3ae8	; 0x3ae8 <__addsf3x>
    3ac2:	0c 94 b7 1f 	jmp	0x3f6e	; 0x3f6e <__fp_round>
    3ac6:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <__fp_pscA>
    3aca:	38 f0       	brcs	.+14     	; 0x3ada <__addsf3+0x20>
    3acc:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <__fp_pscB>
    3ad0:	20 f0       	brcs	.+8      	; 0x3ada <__addsf3+0x20>
    3ad2:	39 f4       	brne	.+14     	; 0x3ae2 <__addsf3+0x28>
    3ad4:	9f 3f       	cpi	r25, 0xFF	; 255
    3ad6:	19 f4       	brne	.+6      	; 0x3ade <__addsf3+0x24>
    3ad8:	26 f4       	brtc	.+8      	; 0x3ae2 <__addsf3+0x28>
    3ada:	0c 94 54 1f 	jmp	0x3ea8	; 0x3ea8 <__fp_nan>
    3ade:	0e f4       	brtc	.+2      	; 0x3ae2 <__addsf3+0x28>
    3ae0:	e0 95       	com	r30
    3ae2:	e7 fb       	bst	r30, 7
    3ae4:	0c 94 4e 1f 	jmp	0x3e9c	; 0x3e9c <__fp_inf>

00003ae8 <__addsf3x>:
    3ae8:	e9 2f       	mov	r30, r25
    3aea:	0e 94 dc 1f 	call	0x3fb8	; 0x3fb8 <__fp_split3>
    3aee:	58 f3       	brcs	.-42     	; 0x3ac6 <__addsf3+0xc>
    3af0:	ba 17       	cp	r27, r26
    3af2:	62 07       	cpc	r22, r18
    3af4:	73 07       	cpc	r23, r19
    3af6:	84 07       	cpc	r24, r20
    3af8:	95 07       	cpc	r25, r21
    3afa:	20 f0       	brcs	.+8      	; 0x3b04 <__addsf3x+0x1c>
    3afc:	79 f4       	brne	.+30     	; 0x3b1c <__addsf3x+0x34>
    3afe:	a6 f5       	brtc	.+104    	; 0x3b68 <__addsf3x+0x80>
    3b00:	0c 94 fe 1f 	jmp	0x3ffc	; 0x3ffc <__fp_zero>
    3b04:	0e f4       	brtc	.+2      	; 0x3b08 <__addsf3x+0x20>
    3b06:	e0 95       	com	r30
    3b08:	0b 2e       	mov	r0, r27
    3b0a:	ba 2f       	mov	r27, r26
    3b0c:	a0 2d       	mov	r26, r0
    3b0e:	0b 01       	movw	r0, r22
    3b10:	b9 01       	movw	r22, r18
    3b12:	90 01       	movw	r18, r0
    3b14:	0c 01       	movw	r0, r24
    3b16:	ca 01       	movw	r24, r20
    3b18:	a0 01       	movw	r20, r0
    3b1a:	11 24       	eor	r1, r1
    3b1c:	ff 27       	eor	r31, r31
    3b1e:	59 1b       	sub	r21, r25
    3b20:	99 f0       	breq	.+38     	; 0x3b48 <__addsf3x+0x60>
    3b22:	59 3f       	cpi	r21, 0xF9	; 249
    3b24:	50 f4       	brcc	.+20     	; 0x3b3a <__addsf3x+0x52>
    3b26:	50 3e       	cpi	r21, 0xE0	; 224
    3b28:	68 f1       	brcs	.+90     	; 0x3b84 <__addsf3x+0x9c>
    3b2a:	1a 16       	cp	r1, r26
    3b2c:	f0 40       	sbci	r31, 0x00	; 0
    3b2e:	a2 2f       	mov	r26, r18
    3b30:	23 2f       	mov	r18, r19
    3b32:	34 2f       	mov	r19, r20
    3b34:	44 27       	eor	r20, r20
    3b36:	58 5f       	subi	r21, 0xF8	; 248
    3b38:	f3 cf       	rjmp	.-26     	; 0x3b20 <__addsf3x+0x38>
    3b3a:	46 95       	lsr	r20
    3b3c:	37 95       	ror	r19
    3b3e:	27 95       	ror	r18
    3b40:	a7 95       	ror	r26
    3b42:	f0 40       	sbci	r31, 0x00	; 0
    3b44:	53 95       	inc	r21
    3b46:	c9 f7       	brne	.-14     	; 0x3b3a <__addsf3x+0x52>
    3b48:	7e f4       	brtc	.+30     	; 0x3b68 <__addsf3x+0x80>
    3b4a:	1f 16       	cp	r1, r31
    3b4c:	ba 0b       	sbc	r27, r26
    3b4e:	62 0b       	sbc	r22, r18
    3b50:	73 0b       	sbc	r23, r19
    3b52:	84 0b       	sbc	r24, r20
    3b54:	ba f0       	brmi	.+46     	; 0x3b84 <__addsf3x+0x9c>
    3b56:	91 50       	subi	r25, 0x01	; 1
    3b58:	a1 f0       	breq	.+40     	; 0x3b82 <__addsf3x+0x9a>
    3b5a:	ff 0f       	add	r31, r31
    3b5c:	bb 1f       	adc	r27, r27
    3b5e:	66 1f       	adc	r22, r22
    3b60:	77 1f       	adc	r23, r23
    3b62:	88 1f       	adc	r24, r24
    3b64:	c2 f7       	brpl	.-16     	; 0x3b56 <__addsf3x+0x6e>
    3b66:	0e c0       	rjmp	.+28     	; 0x3b84 <__addsf3x+0x9c>
    3b68:	ba 0f       	add	r27, r26
    3b6a:	62 1f       	adc	r22, r18
    3b6c:	73 1f       	adc	r23, r19
    3b6e:	84 1f       	adc	r24, r20
    3b70:	48 f4       	brcc	.+18     	; 0x3b84 <__addsf3x+0x9c>
    3b72:	87 95       	ror	r24
    3b74:	77 95       	ror	r23
    3b76:	67 95       	ror	r22
    3b78:	b7 95       	ror	r27
    3b7a:	f7 95       	ror	r31
    3b7c:	9e 3f       	cpi	r25, 0xFE	; 254
    3b7e:	08 f0       	brcs	.+2      	; 0x3b82 <__addsf3x+0x9a>
    3b80:	b0 cf       	rjmp	.-160    	; 0x3ae2 <__addsf3+0x28>
    3b82:	93 95       	inc	r25
    3b84:	88 0f       	add	r24, r24
    3b86:	08 f0       	brcs	.+2      	; 0x3b8a <__addsf3x+0xa2>
    3b88:	99 27       	eor	r25, r25
    3b8a:	ee 0f       	add	r30, r30
    3b8c:	97 95       	ror	r25
    3b8e:	87 95       	ror	r24
    3b90:	08 95       	ret
    3b92:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <__fp_pscA>
    3b96:	60 f0       	brcs	.+24     	; 0x3bb0 <__addsf3x+0xc8>
    3b98:	80 e8       	ldi	r24, 0x80	; 128
    3b9a:	91 e0       	ldi	r25, 0x01	; 1
    3b9c:	09 f4       	brne	.+2      	; 0x3ba0 <__addsf3x+0xb8>
    3b9e:	9e ef       	ldi	r25, 0xFE	; 254
    3ba0:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <__fp_pscB>
    3ba4:	28 f0       	brcs	.+10     	; 0x3bb0 <__addsf3x+0xc8>
    3ba6:	40 e8       	ldi	r20, 0x80	; 128
    3ba8:	51 e0       	ldi	r21, 0x01	; 1
    3baa:	71 f4       	brne	.+28     	; 0x3bc8 <atan2+0x10>
    3bac:	5e ef       	ldi	r21, 0xFE	; 254
    3bae:	0c c0       	rjmp	.+24     	; 0x3bc8 <atan2+0x10>
    3bb0:	0c 94 54 1f 	jmp	0x3ea8	; 0x3ea8 <__fp_nan>
    3bb4:	0c 94 fe 1f 	jmp	0x3ffc	; 0x3ffc <__fp_zero>

00003bb8 <atan2>:
    3bb8:	e9 2f       	mov	r30, r25
    3bba:	e0 78       	andi	r30, 0x80	; 128
    3bbc:	0e 94 dc 1f 	call	0x3fb8	; 0x3fb8 <__fp_split3>
    3bc0:	40 f3       	brcs	.-48     	; 0x3b92 <__addsf3x+0xaa>
    3bc2:	09 2e       	mov	r0, r25
    3bc4:	05 2a       	or	r0, r21
    3bc6:	b1 f3       	breq	.-20     	; 0x3bb4 <__addsf3x+0xcc>
    3bc8:	26 17       	cp	r18, r22
    3bca:	37 07       	cpc	r19, r23
    3bcc:	48 07       	cpc	r20, r24
    3bce:	59 07       	cpc	r21, r25
    3bd0:	38 f0       	brcs	.+14     	; 0x3be0 <atan2+0x28>
    3bd2:	0e 2e       	mov	r0, r30
    3bd4:	07 f8       	bld	r0, 7
    3bd6:	e0 25       	eor	r30, r0
    3bd8:	69 f0       	breq	.+26     	; 0x3bf4 <atan2+0x3c>
    3bda:	e0 25       	eor	r30, r0
    3bdc:	e0 64       	ori	r30, 0x40	; 64
    3bde:	0a c0       	rjmp	.+20     	; 0x3bf4 <atan2+0x3c>
    3be0:	ef 63       	ori	r30, 0x3F	; 63
    3be2:	07 f8       	bld	r0, 7
    3be4:	00 94       	com	r0
    3be6:	07 fa       	bst	r0, 7
    3be8:	db 01       	movw	r26, r22
    3bea:	b9 01       	movw	r22, r18
    3bec:	9d 01       	movw	r18, r26
    3bee:	dc 01       	movw	r26, r24
    3bf0:	ca 01       	movw	r24, r20
    3bf2:	ad 01       	movw	r20, r26
    3bf4:	ef 93       	push	r30
    3bf6:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <__divsf3_pse>
    3bfa:	0e 94 b7 1f 	call	0x3f6e	; 0x3f6e <__fp_round>
    3bfe:	0e 94 0c 1e 	call	0x3c18	; 0x3c18 <atan>
    3c02:	5f 91       	pop	r21
    3c04:	55 23       	and	r21, r21
    3c06:	39 f0       	breq	.+14     	; 0x3c16 <atan2+0x5e>
    3c08:	2b ed       	ldi	r18, 0xDB	; 219
    3c0a:	3f e0       	ldi	r19, 0x0F	; 15
    3c0c:	49 e4       	ldi	r20, 0x49	; 73
    3c0e:	50 fd       	sbrc	r21, 0
    3c10:	49 ec       	ldi	r20, 0xC9	; 201
    3c12:	0c 94 5d 1d 	jmp	0x3aba	; 0x3aba <__addsf3>
    3c16:	08 95       	ret

00003c18 <atan>:
    3c18:	df 93       	push	r29
    3c1a:	dd 27       	eor	r29, r29
    3c1c:	b9 2f       	mov	r27, r25
    3c1e:	bf 77       	andi	r27, 0x7F	; 127
    3c20:	40 e8       	ldi	r20, 0x80	; 128
    3c22:	5f e3       	ldi	r21, 0x3F	; 63
    3c24:	16 16       	cp	r1, r22
    3c26:	17 06       	cpc	r1, r23
    3c28:	48 07       	cpc	r20, r24
    3c2a:	5b 07       	cpc	r21, r27
    3c2c:	18 f4       	brcc	.+6      	; 0x3c34 <atan+0x1c>
    3c2e:	d9 2f       	mov	r29, r25
    3c30:	0e 94 0a 20 	call	0x4014	; 0x4014 <inverse>
    3c34:	9f 93       	push	r25
    3c36:	8f 93       	push	r24
    3c38:	7f 93       	push	r23
    3c3a:	6f 93       	push	r22
    3c3c:	0e 94 1d 21 	call	0x423a	; 0x423a <square>
    3c40:	e0 e7       	ldi	r30, 0x70	; 112
    3c42:	f1 e0       	ldi	r31, 0x01	; 1
    3c44:	0e 94 57 1f 	call	0x3eae	; 0x3eae <__fp_powser>
    3c48:	0e 94 b7 1f 	call	0x3f6e	; 0x3f6e <__fp_round>
    3c4c:	2f 91       	pop	r18
    3c4e:	3f 91       	pop	r19
    3c50:	4f 91       	pop	r20
    3c52:	5f 91       	pop	r21
    3c54:	0e 94 25 20 	call	0x404a	; 0x404a <__mulsf3x>
    3c58:	dd 23       	and	r29, r29
    3c5a:	51 f0       	breq	.+20     	; 0x3c70 <atan+0x58>
    3c5c:	90 58       	subi	r25, 0x80	; 128
    3c5e:	a2 ea       	ldi	r26, 0xA2	; 162
    3c60:	2a ed       	ldi	r18, 0xDA	; 218
    3c62:	3f e0       	ldi	r19, 0x0F	; 15
    3c64:	49 ec       	ldi	r20, 0xC9	; 201
    3c66:	5f e3       	ldi	r21, 0x3F	; 63
    3c68:	d0 78       	andi	r29, 0x80	; 128
    3c6a:	5d 27       	eor	r21, r29
    3c6c:	0e 94 74 1d 	call	0x3ae8	; 0x3ae8 <__addsf3x>
    3c70:	df 91       	pop	r29
    3c72:	0c 94 b7 1f 	jmp	0x3f6e	; 0x3f6e <__fp_round>

00003c76 <__cmpsf2>:
    3c76:	0e 94 2a 1f 	call	0x3e54	; 0x3e54 <__fp_cmp>
    3c7a:	08 f4       	brcc	.+2      	; 0x3c7e <__cmpsf2+0x8>
    3c7c:	81 e0       	ldi	r24, 0x01	; 1
    3c7e:	08 95       	ret

00003c80 <cos>:
    3c80:	0e 94 8e 1f 	call	0x3f1c	; 0x3f1c <__fp_rempio2>
    3c84:	e3 95       	inc	r30
    3c86:	0c 94 c8 1f 	jmp	0x3f90	; 0x3f90 <__fp_sinus>

00003c8a <__divsf3>:
    3c8a:	0e 94 59 1e 	call	0x3cb2	; 0x3cb2 <__divsf3x>
    3c8e:	0c 94 b7 1f 	jmp	0x3f6e	; 0x3f6e <__fp_round>
    3c92:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <__fp_pscB>
    3c96:	58 f0       	brcs	.+22     	; 0x3cae <__divsf3+0x24>
    3c98:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <__fp_pscA>
    3c9c:	40 f0       	brcs	.+16     	; 0x3cae <__divsf3+0x24>
    3c9e:	29 f4       	brne	.+10     	; 0x3caa <__divsf3+0x20>
    3ca0:	5f 3f       	cpi	r21, 0xFF	; 255
    3ca2:	29 f0       	breq	.+10     	; 0x3cae <__divsf3+0x24>
    3ca4:	0c 94 4e 1f 	jmp	0x3e9c	; 0x3e9c <__fp_inf>
    3ca8:	51 11       	cpse	r21, r1
    3caa:	0c 94 ff 1f 	jmp	0x3ffe	; 0x3ffe <__fp_szero>
    3cae:	0c 94 54 1f 	jmp	0x3ea8	; 0x3ea8 <__fp_nan>

00003cb2 <__divsf3x>:
    3cb2:	0e 94 dc 1f 	call	0x3fb8	; 0x3fb8 <__fp_split3>
    3cb6:	68 f3       	brcs	.-38     	; 0x3c92 <__divsf3+0x8>

00003cb8 <__divsf3_pse>:
    3cb8:	99 23       	and	r25, r25
    3cba:	b1 f3       	breq	.-20     	; 0x3ca8 <__divsf3+0x1e>
    3cbc:	55 23       	and	r21, r21
    3cbe:	91 f3       	breq	.-28     	; 0x3ca4 <__divsf3+0x1a>
    3cc0:	95 1b       	sub	r25, r21
    3cc2:	55 0b       	sbc	r21, r21
    3cc4:	bb 27       	eor	r27, r27
    3cc6:	aa 27       	eor	r26, r26
    3cc8:	62 17       	cp	r22, r18
    3cca:	73 07       	cpc	r23, r19
    3ccc:	84 07       	cpc	r24, r20
    3cce:	38 f0       	brcs	.+14     	; 0x3cde <__divsf3_pse+0x26>
    3cd0:	9f 5f       	subi	r25, 0xFF	; 255
    3cd2:	5f 4f       	sbci	r21, 0xFF	; 255
    3cd4:	22 0f       	add	r18, r18
    3cd6:	33 1f       	adc	r19, r19
    3cd8:	44 1f       	adc	r20, r20
    3cda:	aa 1f       	adc	r26, r26
    3cdc:	a9 f3       	breq	.-22     	; 0x3cc8 <__divsf3_pse+0x10>
    3cde:	35 d0       	rcall	.+106    	; 0x3d4a <__divsf3_pse+0x92>
    3ce0:	0e 2e       	mov	r0, r30
    3ce2:	3a f0       	brmi	.+14     	; 0x3cf2 <__divsf3_pse+0x3a>
    3ce4:	e0 e8       	ldi	r30, 0x80	; 128
    3ce6:	32 d0       	rcall	.+100    	; 0x3d4c <__divsf3_pse+0x94>
    3ce8:	91 50       	subi	r25, 0x01	; 1
    3cea:	50 40       	sbci	r21, 0x00	; 0
    3cec:	e6 95       	lsr	r30
    3cee:	00 1c       	adc	r0, r0
    3cf0:	ca f7       	brpl	.-14     	; 0x3ce4 <__divsf3_pse+0x2c>
    3cf2:	2b d0       	rcall	.+86     	; 0x3d4a <__divsf3_pse+0x92>
    3cf4:	fe 2f       	mov	r31, r30
    3cf6:	29 d0       	rcall	.+82     	; 0x3d4a <__divsf3_pse+0x92>
    3cf8:	66 0f       	add	r22, r22
    3cfa:	77 1f       	adc	r23, r23
    3cfc:	88 1f       	adc	r24, r24
    3cfe:	bb 1f       	adc	r27, r27
    3d00:	26 17       	cp	r18, r22
    3d02:	37 07       	cpc	r19, r23
    3d04:	48 07       	cpc	r20, r24
    3d06:	ab 07       	cpc	r26, r27
    3d08:	b0 e8       	ldi	r27, 0x80	; 128
    3d0a:	09 f0       	breq	.+2      	; 0x3d0e <__divsf3_pse+0x56>
    3d0c:	bb 0b       	sbc	r27, r27
    3d0e:	80 2d       	mov	r24, r0
    3d10:	bf 01       	movw	r22, r30
    3d12:	ff 27       	eor	r31, r31
    3d14:	93 58       	subi	r25, 0x83	; 131
    3d16:	5f 4f       	sbci	r21, 0xFF	; 255
    3d18:	3a f0       	brmi	.+14     	; 0x3d28 <__divsf3_pse+0x70>
    3d1a:	9e 3f       	cpi	r25, 0xFE	; 254
    3d1c:	51 05       	cpc	r21, r1
    3d1e:	78 f0       	brcs	.+30     	; 0x3d3e <__divsf3_pse+0x86>
    3d20:	0c 94 4e 1f 	jmp	0x3e9c	; 0x3e9c <__fp_inf>
    3d24:	0c 94 ff 1f 	jmp	0x3ffe	; 0x3ffe <__fp_szero>
    3d28:	5f 3f       	cpi	r21, 0xFF	; 255
    3d2a:	e4 f3       	brlt	.-8      	; 0x3d24 <__divsf3_pse+0x6c>
    3d2c:	98 3e       	cpi	r25, 0xE8	; 232
    3d2e:	d4 f3       	brlt	.-12     	; 0x3d24 <__divsf3_pse+0x6c>
    3d30:	86 95       	lsr	r24
    3d32:	77 95       	ror	r23
    3d34:	67 95       	ror	r22
    3d36:	b7 95       	ror	r27
    3d38:	f7 95       	ror	r31
    3d3a:	9f 5f       	subi	r25, 0xFF	; 255
    3d3c:	c9 f7       	brne	.-14     	; 0x3d30 <__divsf3_pse+0x78>
    3d3e:	88 0f       	add	r24, r24
    3d40:	91 1d       	adc	r25, r1
    3d42:	96 95       	lsr	r25
    3d44:	87 95       	ror	r24
    3d46:	97 f9       	bld	r25, 7
    3d48:	08 95       	ret
    3d4a:	e1 e0       	ldi	r30, 0x01	; 1
    3d4c:	66 0f       	add	r22, r22
    3d4e:	77 1f       	adc	r23, r23
    3d50:	88 1f       	adc	r24, r24
    3d52:	bb 1f       	adc	r27, r27
    3d54:	62 17       	cp	r22, r18
    3d56:	73 07       	cpc	r23, r19
    3d58:	84 07       	cpc	r24, r20
    3d5a:	ba 07       	cpc	r27, r26
    3d5c:	20 f0       	brcs	.+8      	; 0x3d66 <__divsf3_pse+0xae>
    3d5e:	62 1b       	sub	r22, r18
    3d60:	73 0b       	sbc	r23, r19
    3d62:	84 0b       	sbc	r24, r20
    3d64:	ba 0b       	sbc	r27, r26
    3d66:	ee 1f       	adc	r30, r30
    3d68:	88 f7       	brcc	.-30     	; 0x3d4c <__divsf3_pse+0x94>
    3d6a:	e0 95       	com	r30
    3d6c:	08 95       	ret

00003d6e <__fixsfsi>:
    3d6e:	0e 94 be 1e 	call	0x3d7c	; 0x3d7c <__fixunssfsi>
    3d72:	68 94       	set
    3d74:	b1 11       	cpse	r27, r1
    3d76:	0c 94 ff 1f 	jmp	0x3ffe	; 0x3ffe <__fp_szero>
    3d7a:	08 95       	ret

00003d7c <__fixunssfsi>:
    3d7c:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <__fp_splitA>
    3d80:	88 f0       	brcs	.+34     	; 0x3da4 <__fixunssfsi+0x28>
    3d82:	9f 57       	subi	r25, 0x7F	; 127
    3d84:	98 f0       	brcs	.+38     	; 0x3dac <__fixunssfsi+0x30>
    3d86:	b9 2f       	mov	r27, r25
    3d88:	99 27       	eor	r25, r25
    3d8a:	b7 51       	subi	r27, 0x17	; 23
    3d8c:	b0 f0       	brcs	.+44     	; 0x3dba <__fixunssfsi+0x3e>
    3d8e:	e1 f0       	breq	.+56     	; 0x3dc8 <__fixunssfsi+0x4c>
    3d90:	66 0f       	add	r22, r22
    3d92:	77 1f       	adc	r23, r23
    3d94:	88 1f       	adc	r24, r24
    3d96:	99 1f       	adc	r25, r25
    3d98:	1a f0       	brmi	.+6      	; 0x3da0 <__fixunssfsi+0x24>
    3d9a:	ba 95       	dec	r27
    3d9c:	c9 f7       	brne	.-14     	; 0x3d90 <__fixunssfsi+0x14>
    3d9e:	14 c0       	rjmp	.+40     	; 0x3dc8 <__fixunssfsi+0x4c>
    3da0:	b1 30       	cpi	r27, 0x01	; 1
    3da2:	91 f0       	breq	.+36     	; 0x3dc8 <__fixunssfsi+0x4c>
    3da4:	0e 94 fe 1f 	call	0x3ffc	; 0x3ffc <__fp_zero>
    3da8:	b1 e0       	ldi	r27, 0x01	; 1
    3daa:	08 95       	ret
    3dac:	0c 94 fe 1f 	jmp	0x3ffc	; 0x3ffc <__fp_zero>
    3db0:	67 2f       	mov	r22, r23
    3db2:	78 2f       	mov	r23, r24
    3db4:	88 27       	eor	r24, r24
    3db6:	b8 5f       	subi	r27, 0xF8	; 248
    3db8:	39 f0       	breq	.+14     	; 0x3dc8 <__fixunssfsi+0x4c>
    3dba:	b9 3f       	cpi	r27, 0xF9	; 249
    3dbc:	cc f3       	brlt	.-14     	; 0x3db0 <__fixunssfsi+0x34>
    3dbe:	86 95       	lsr	r24
    3dc0:	77 95       	ror	r23
    3dc2:	67 95       	ror	r22
    3dc4:	b3 95       	inc	r27
    3dc6:	d9 f7       	brne	.-10     	; 0x3dbe <__fixunssfsi+0x42>
    3dc8:	3e f4       	brtc	.+14     	; 0x3dd8 <__fixunssfsi+0x5c>
    3dca:	90 95       	com	r25
    3dcc:	80 95       	com	r24
    3dce:	70 95       	com	r23
    3dd0:	61 95       	neg	r22
    3dd2:	7f 4f       	sbci	r23, 0xFF	; 255
    3dd4:	8f 4f       	sbci	r24, 0xFF	; 255
    3dd6:	9f 4f       	sbci	r25, 0xFF	; 255
    3dd8:	08 95       	ret

00003dda <__floatunsisf>:
    3dda:	e8 94       	clt
    3ddc:	09 c0       	rjmp	.+18     	; 0x3df0 <__floatsisf+0x12>

00003dde <__floatsisf>:
    3dde:	97 fb       	bst	r25, 7
    3de0:	3e f4       	brtc	.+14     	; 0x3df0 <__floatsisf+0x12>
    3de2:	90 95       	com	r25
    3de4:	80 95       	com	r24
    3de6:	70 95       	com	r23
    3de8:	61 95       	neg	r22
    3dea:	7f 4f       	sbci	r23, 0xFF	; 255
    3dec:	8f 4f       	sbci	r24, 0xFF	; 255
    3dee:	9f 4f       	sbci	r25, 0xFF	; 255
    3df0:	99 23       	and	r25, r25
    3df2:	a9 f0       	breq	.+42     	; 0x3e1e <__floatsisf+0x40>
    3df4:	f9 2f       	mov	r31, r25
    3df6:	96 e9       	ldi	r25, 0x96	; 150
    3df8:	bb 27       	eor	r27, r27
    3dfa:	93 95       	inc	r25
    3dfc:	f6 95       	lsr	r31
    3dfe:	87 95       	ror	r24
    3e00:	77 95       	ror	r23
    3e02:	67 95       	ror	r22
    3e04:	b7 95       	ror	r27
    3e06:	f1 11       	cpse	r31, r1
    3e08:	f8 cf       	rjmp	.-16     	; 0x3dfa <__floatsisf+0x1c>
    3e0a:	fa f4       	brpl	.+62     	; 0x3e4a <__floatsisf+0x6c>
    3e0c:	bb 0f       	add	r27, r27
    3e0e:	11 f4       	brne	.+4      	; 0x3e14 <__floatsisf+0x36>
    3e10:	60 ff       	sbrs	r22, 0
    3e12:	1b c0       	rjmp	.+54     	; 0x3e4a <__floatsisf+0x6c>
    3e14:	6f 5f       	subi	r22, 0xFF	; 255
    3e16:	7f 4f       	sbci	r23, 0xFF	; 255
    3e18:	8f 4f       	sbci	r24, 0xFF	; 255
    3e1a:	9f 4f       	sbci	r25, 0xFF	; 255
    3e1c:	16 c0       	rjmp	.+44     	; 0x3e4a <__floatsisf+0x6c>
    3e1e:	88 23       	and	r24, r24
    3e20:	11 f0       	breq	.+4      	; 0x3e26 <__floatsisf+0x48>
    3e22:	96 e9       	ldi	r25, 0x96	; 150
    3e24:	11 c0       	rjmp	.+34     	; 0x3e48 <__floatsisf+0x6a>
    3e26:	77 23       	and	r23, r23
    3e28:	21 f0       	breq	.+8      	; 0x3e32 <__floatsisf+0x54>
    3e2a:	9e e8       	ldi	r25, 0x8E	; 142
    3e2c:	87 2f       	mov	r24, r23
    3e2e:	76 2f       	mov	r23, r22
    3e30:	05 c0       	rjmp	.+10     	; 0x3e3c <__floatsisf+0x5e>
    3e32:	66 23       	and	r22, r22
    3e34:	71 f0       	breq	.+28     	; 0x3e52 <__floatsisf+0x74>
    3e36:	96 e8       	ldi	r25, 0x86	; 134
    3e38:	86 2f       	mov	r24, r22
    3e3a:	70 e0       	ldi	r23, 0x00	; 0
    3e3c:	60 e0       	ldi	r22, 0x00	; 0
    3e3e:	2a f0       	brmi	.+10     	; 0x3e4a <__floatsisf+0x6c>
    3e40:	9a 95       	dec	r25
    3e42:	66 0f       	add	r22, r22
    3e44:	77 1f       	adc	r23, r23
    3e46:	88 1f       	adc	r24, r24
    3e48:	da f7       	brpl	.-10     	; 0x3e40 <__floatsisf+0x62>
    3e4a:	88 0f       	add	r24, r24
    3e4c:	96 95       	lsr	r25
    3e4e:	87 95       	ror	r24
    3e50:	97 f9       	bld	r25, 7
    3e52:	08 95       	ret

00003e54 <__fp_cmp>:
    3e54:	99 0f       	add	r25, r25
    3e56:	00 08       	sbc	r0, r0
    3e58:	55 0f       	add	r21, r21
    3e5a:	aa 0b       	sbc	r26, r26
    3e5c:	e0 e8       	ldi	r30, 0x80	; 128
    3e5e:	fe ef       	ldi	r31, 0xFE	; 254
    3e60:	16 16       	cp	r1, r22
    3e62:	17 06       	cpc	r1, r23
    3e64:	e8 07       	cpc	r30, r24
    3e66:	f9 07       	cpc	r31, r25
    3e68:	c0 f0       	brcs	.+48     	; 0x3e9a <__fp_cmp+0x46>
    3e6a:	12 16       	cp	r1, r18
    3e6c:	13 06       	cpc	r1, r19
    3e6e:	e4 07       	cpc	r30, r20
    3e70:	f5 07       	cpc	r31, r21
    3e72:	98 f0       	brcs	.+38     	; 0x3e9a <__fp_cmp+0x46>
    3e74:	62 1b       	sub	r22, r18
    3e76:	73 0b       	sbc	r23, r19
    3e78:	84 0b       	sbc	r24, r20
    3e7a:	95 0b       	sbc	r25, r21
    3e7c:	39 f4       	brne	.+14     	; 0x3e8c <__fp_cmp+0x38>
    3e7e:	0a 26       	eor	r0, r26
    3e80:	61 f0       	breq	.+24     	; 0x3e9a <__fp_cmp+0x46>
    3e82:	23 2b       	or	r18, r19
    3e84:	24 2b       	or	r18, r20
    3e86:	25 2b       	or	r18, r21
    3e88:	21 f4       	brne	.+8      	; 0x3e92 <__fp_cmp+0x3e>
    3e8a:	08 95       	ret
    3e8c:	0a 26       	eor	r0, r26
    3e8e:	09 f4       	brne	.+2      	; 0x3e92 <__fp_cmp+0x3e>
    3e90:	a1 40       	sbci	r26, 0x01	; 1
    3e92:	a6 95       	lsr	r26
    3e94:	8f ef       	ldi	r24, 0xFF	; 255
    3e96:	81 1d       	adc	r24, r1
    3e98:	81 1d       	adc	r24, r1
    3e9a:	08 95       	ret

00003e9c <__fp_inf>:
    3e9c:	97 f9       	bld	r25, 7
    3e9e:	9f 67       	ori	r25, 0x7F	; 127
    3ea0:	80 e8       	ldi	r24, 0x80	; 128
    3ea2:	70 e0       	ldi	r23, 0x00	; 0
    3ea4:	60 e0       	ldi	r22, 0x00	; 0
    3ea6:	08 95       	ret

00003ea8 <__fp_nan>:
    3ea8:	9f ef       	ldi	r25, 0xFF	; 255
    3eaa:	80 ec       	ldi	r24, 0xC0	; 192
    3eac:	08 95       	ret

00003eae <__fp_powser>:
    3eae:	df 93       	push	r29
    3eb0:	cf 93       	push	r28
    3eb2:	1f 93       	push	r17
    3eb4:	0f 93       	push	r16
    3eb6:	ff 92       	push	r15
    3eb8:	ef 92       	push	r14
    3eba:	df 92       	push	r13
    3ebc:	7b 01       	movw	r14, r22
    3ebe:	8c 01       	movw	r16, r24
    3ec0:	68 94       	set
    3ec2:	06 c0       	rjmp	.+12     	; 0x3ed0 <__fp_powser+0x22>
    3ec4:	da 2e       	mov	r13, r26
    3ec6:	ef 01       	movw	r28, r30
    3ec8:	0e 94 25 20 	call	0x404a	; 0x404a <__mulsf3x>
    3ecc:	fe 01       	movw	r30, r28
    3ece:	e8 94       	clt
    3ed0:	a5 91       	lpm	r26, Z+
    3ed2:	25 91       	lpm	r18, Z+
    3ed4:	35 91       	lpm	r19, Z+
    3ed6:	45 91       	lpm	r20, Z+
    3ed8:	55 91       	lpm	r21, Z+
    3eda:	a6 f3       	brts	.-24     	; 0x3ec4 <__fp_powser+0x16>
    3edc:	ef 01       	movw	r28, r30
    3ede:	0e 94 74 1d 	call	0x3ae8	; 0x3ae8 <__addsf3x>
    3ee2:	fe 01       	movw	r30, r28
    3ee4:	97 01       	movw	r18, r14
    3ee6:	a8 01       	movw	r20, r16
    3ee8:	da 94       	dec	r13
    3eea:	69 f7       	brne	.-38     	; 0x3ec6 <__fp_powser+0x18>
    3eec:	df 90       	pop	r13
    3eee:	ef 90       	pop	r14
    3ef0:	ff 90       	pop	r15
    3ef2:	0f 91       	pop	r16
    3ef4:	1f 91       	pop	r17
    3ef6:	cf 91       	pop	r28
    3ef8:	df 91       	pop	r29
    3efa:	08 95       	ret

00003efc <__fp_pscA>:
    3efc:	00 24       	eor	r0, r0
    3efe:	0a 94       	dec	r0
    3f00:	16 16       	cp	r1, r22
    3f02:	17 06       	cpc	r1, r23
    3f04:	18 06       	cpc	r1, r24
    3f06:	09 06       	cpc	r0, r25
    3f08:	08 95       	ret

00003f0a <__fp_pscB>:
    3f0a:	00 24       	eor	r0, r0
    3f0c:	0a 94       	dec	r0
    3f0e:	12 16       	cp	r1, r18
    3f10:	13 06       	cpc	r1, r19
    3f12:	14 06       	cpc	r1, r20
    3f14:	05 06       	cpc	r0, r21
    3f16:	08 95       	ret
    3f18:	0c 94 54 1f 	jmp	0x3ea8	; 0x3ea8 <__fp_nan>

00003f1c <__fp_rempio2>:
    3f1c:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <__fp_splitA>
    3f20:	d8 f3       	brcs	.-10     	; 0x3f18 <__fp_pscB+0xe>
    3f22:	e8 94       	clt
    3f24:	e0 e0       	ldi	r30, 0x00	; 0
    3f26:	bb 27       	eor	r27, r27
    3f28:	9f 57       	subi	r25, 0x7F	; 127
    3f2a:	f0 f0       	brcs	.+60     	; 0x3f68 <__fp_rempio2+0x4c>
    3f2c:	2a ed       	ldi	r18, 0xDA	; 218
    3f2e:	3f e0       	ldi	r19, 0x0F	; 15
    3f30:	49 ec       	ldi	r20, 0xC9	; 201
    3f32:	06 c0       	rjmp	.+12     	; 0x3f40 <__fp_rempio2+0x24>
    3f34:	ee 0f       	add	r30, r30
    3f36:	bb 0f       	add	r27, r27
    3f38:	66 1f       	adc	r22, r22
    3f3a:	77 1f       	adc	r23, r23
    3f3c:	88 1f       	adc	r24, r24
    3f3e:	28 f0       	brcs	.+10     	; 0x3f4a <__fp_rempio2+0x2e>
    3f40:	b2 3a       	cpi	r27, 0xA2	; 162
    3f42:	62 07       	cpc	r22, r18
    3f44:	73 07       	cpc	r23, r19
    3f46:	84 07       	cpc	r24, r20
    3f48:	28 f0       	brcs	.+10     	; 0x3f54 <__fp_rempio2+0x38>
    3f4a:	b2 5a       	subi	r27, 0xA2	; 162
    3f4c:	62 0b       	sbc	r22, r18
    3f4e:	73 0b       	sbc	r23, r19
    3f50:	84 0b       	sbc	r24, r20
    3f52:	e3 95       	inc	r30
    3f54:	9a 95       	dec	r25
    3f56:	72 f7       	brpl	.-36     	; 0x3f34 <__fp_rempio2+0x18>
    3f58:	80 38       	cpi	r24, 0x80	; 128
    3f5a:	30 f4       	brcc	.+12     	; 0x3f68 <__fp_rempio2+0x4c>
    3f5c:	9a 95       	dec	r25
    3f5e:	bb 0f       	add	r27, r27
    3f60:	66 1f       	adc	r22, r22
    3f62:	77 1f       	adc	r23, r23
    3f64:	88 1f       	adc	r24, r24
    3f66:	d2 f7       	brpl	.-12     	; 0x3f5c <__fp_rempio2+0x40>
    3f68:	90 48       	sbci	r25, 0x80	; 128
    3f6a:	0c 94 87 21 	jmp	0x430e	; 0x430e <__fp_mpack_finite>

00003f6e <__fp_round>:
    3f6e:	09 2e       	mov	r0, r25
    3f70:	03 94       	inc	r0
    3f72:	00 0c       	add	r0, r0
    3f74:	11 f4       	brne	.+4      	; 0x3f7a <__fp_round+0xc>
    3f76:	88 23       	and	r24, r24
    3f78:	52 f0       	brmi	.+20     	; 0x3f8e <__fp_round+0x20>
    3f7a:	bb 0f       	add	r27, r27
    3f7c:	40 f4       	brcc	.+16     	; 0x3f8e <__fp_round+0x20>
    3f7e:	bf 2b       	or	r27, r31
    3f80:	11 f4       	brne	.+4      	; 0x3f86 <__fp_round+0x18>
    3f82:	60 ff       	sbrs	r22, 0
    3f84:	04 c0       	rjmp	.+8      	; 0x3f8e <__fp_round+0x20>
    3f86:	6f 5f       	subi	r22, 0xFF	; 255
    3f88:	7f 4f       	sbci	r23, 0xFF	; 255
    3f8a:	8f 4f       	sbci	r24, 0xFF	; 255
    3f8c:	9f 4f       	sbci	r25, 0xFF	; 255
    3f8e:	08 95       	ret

00003f90 <__fp_sinus>:
    3f90:	ef 93       	push	r30
    3f92:	e0 ff       	sbrs	r30, 0
    3f94:	07 c0       	rjmp	.+14     	; 0x3fa4 <__fp_sinus+0x14>
    3f96:	a2 ea       	ldi	r26, 0xA2	; 162
    3f98:	2a ed       	ldi	r18, 0xDA	; 218
    3f9a:	3f e0       	ldi	r19, 0x0F	; 15
    3f9c:	49 ec       	ldi	r20, 0xC9	; 201
    3f9e:	5f eb       	ldi	r21, 0xBF	; 191
    3fa0:	0e 94 74 1d 	call	0x3ae8	; 0x3ae8 <__addsf3x>
    3fa4:	0e 94 b7 1f 	call	0x3f6e	; 0x3f6e <__fp_round>
    3fa8:	0f 90       	pop	r0
    3faa:	03 94       	inc	r0
    3fac:	01 fc       	sbrc	r0, 1
    3fae:	90 58       	subi	r25, 0x80	; 128
    3fb0:	ed e9       	ldi	r30, 0x9D	; 157
    3fb2:	f1 e0       	ldi	r31, 0x01	; 1
    3fb4:	0c 94 9a 21 	jmp	0x4334	; 0x4334 <__fp_powsodd>

00003fb8 <__fp_split3>:
    3fb8:	57 fd       	sbrc	r21, 7
    3fba:	90 58       	subi	r25, 0x80	; 128
    3fbc:	44 0f       	add	r20, r20
    3fbe:	55 1f       	adc	r21, r21
    3fc0:	59 f0       	breq	.+22     	; 0x3fd8 <__fp_splitA+0x10>
    3fc2:	5f 3f       	cpi	r21, 0xFF	; 255
    3fc4:	71 f0       	breq	.+28     	; 0x3fe2 <__fp_splitA+0x1a>
    3fc6:	47 95       	ror	r20

00003fc8 <__fp_splitA>:
    3fc8:	88 0f       	add	r24, r24
    3fca:	97 fb       	bst	r25, 7
    3fcc:	99 1f       	adc	r25, r25
    3fce:	61 f0       	breq	.+24     	; 0x3fe8 <__fp_splitA+0x20>
    3fd0:	9f 3f       	cpi	r25, 0xFF	; 255
    3fd2:	79 f0       	breq	.+30     	; 0x3ff2 <__fp_splitA+0x2a>
    3fd4:	87 95       	ror	r24
    3fd6:	08 95       	ret
    3fd8:	12 16       	cp	r1, r18
    3fda:	13 06       	cpc	r1, r19
    3fdc:	14 06       	cpc	r1, r20
    3fde:	55 1f       	adc	r21, r21
    3fe0:	f2 cf       	rjmp	.-28     	; 0x3fc6 <__fp_split3+0xe>
    3fe2:	46 95       	lsr	r20
    3fe4:	f1 df       	rcall	.-30     	; 0x3fc8 <__fp_splitA>
    3fe6:	08 c0       	rjmp	.+16     	; 0x3ff8 <__fp_splitA+0x30>
    3fe8:	16 16       	cp	r1, r22
    3fea:	17 06       	cpc	r1, r23
    3fec:	18 06       	cpc	r1, r24
    3fee:	99 1f       	adc	r25, r25
    3ff0:	f1 cf       	rjmp	.-30     	; 0x3fd4 <__fp_splitA+0xc>
    3ff2:	86 95       	lsr	r24
    3ff4:	71 05       	cpc	r23, r1
    3ff6:	61 05       	cpc	r22, r1
    3ff8:	08 94       	sec
    3ffa:	08 95       	ret

00003ffc <__fp_zero>:
    3ffc:	e8 94       	clt

00003ffe <__fp_szero>:
    3ffe:	bb 27       	eor	r27, r27
    4000:	66 27       	eor	r22, r22
    4002:	77 27       	eor	r23, r23
    4004:	cb 01       	movw	r24, r22
    4006:	97 f9       	bld	r25, 7
    4008:	08 95       	ret

0000400a <__gesf2>:
    400a:	0e 94 2a 1f 	call	0x3e54	; 0x3e54 <__fp_cmp>
    400e:	08 f4       	brcc	.+2      	; 0x4012 <__gesf2+0x8>
    4010:	8f ef       	ldi	r24, 0xFF	; 255
    4012:	08 95       	ret

00004014 <inverse>:
    4014:	9b 01       	movw	r18, r22
    4016:	ac 01       	movw	r20, r24
    4018:	60 e0       	ldi	r22, 0x00	; 0
    401a:	70 e0       	ldi	r23, 0x00	; 0
    401c:	80 e8       	ldi	r24, 0x80	; 128
    401e:	9f e3       	ldi	r25, 0x3F	; 63
    4020:	0c 94 45 1e 	jmp	0x3c8a	; 0x3c8a <__divsf3>

00004024 <__mulsf3>:
    4024:	0e 94 25 20 	call	0x404a	; 0x404a <__mulsf3x>
    4028:	0c 94 b7 1f 	jmp	0x3f6e	; 0x3f6e <__fp_round>
    402c:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <__fp_pscA>
    4030:	38 f0       	brcs	.+14     	; 0x4040 <__mulsf3+0x1c>
    4032:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <__fp_pscB>
    4036:	20 f0       	brcs	.+8      	; 0x4040 <__mulsf3+0x1c>
    4038:	95 23       	and	r25, r21
    403a:	11 f0       	breq	.+4      	; 0x4040 <__mulsf3+0x1c>
    403c:	0c 94 4e 1f 	jmp	0x3e9c	; 0x3e9c <__fp_inf>
    4040:	0c 94 54 1f 	jmp	0x3ea8	; 0x3ea8 <__fp_nan>
    4044:	11 24       	eor	r1, r1
    4046:	0c 94 ff 1f 	jmp	0x3ffe	; 0x3ffe <__fp_szero>

0000404a <__mulsf3x>:
    404a:	0e 94 dc 1f 	call	0x3fb8	; 0x3fb8 <__fp_split3>
    404e:	70 f3       	brcs	.-36     	; 0x402c <__mulsf3+0x8>

00004050 <__mulsf3_pse>:
    4050:	95 9f       	mul	r25, r21
    4052:	c1 f3       	breq	.-16     	; 0x4044 <__mulsf3+0x20>
    4054:	95 0f       	add	r25, r21
    4056:	50 e0       	ldi	r21, 0x00	; 0
    4058:	55 1f       	adc	r21, r21
    405a:	62 9f       	mul	r22, r18
    405c:	f0 01       	movw	r30, r0
    405e:	72 9f       	mul	r23, r18
    4060:	bb 27       	eor	r27, r27
    4062:	f0 0d       	add	r31, r0
    4064:	b1 1d       	adc	r27, r1
    4066:	63 9f       	mul	r22, r19
    4068:	aa 27       	eor	r26, r26
    406a:	f0 0d       	add	r31, r0
    406c:	b1 1d       	adc	r27, r1
    406e:	aa 1f       	adc	r26, r26
    4070:	64 9f       	mul	r22, r20
    4072:	66 27       	eor	r22, r22
    4074:	b0 0d       	add	r27, r0
    4076:	a1 1d       	adc	r26, r1
    4078:	66 1f       	adc	r22, r22
    407a:	82 9f       	mul	r24, r18
    407c:	22 27       	eor	r18, r18
    407e:	b0 0d       	add	r27, r0
    4080:	a1 1d       	adc	r26, r1
    4082:	62 1f       	adc	r22, r18
    4084:	73 9f       	mul	r23, r19
    4086:	b0 0d       	add	r27, r0
    4088:	a1 1d       	adc	r26, r1
    408a:	62 1f       	adc	r22, r18
    408c:	83 9f       	mul	r24, r19
    408e:	a0 0d       	add	r26, r0
    4090:	61 1d       	adc	r22, r1
    4092:	22 1f       	adc	r18, r18
    4094:	74 9f       	mul	r23, r20
    4096:	33 27       	eor	r19, r19
    4098:	a0 0d       	add	r26, r0
    409a:	61 1d       	adc	r22, r1
    409c:	23 1f       	adc	r18, r19
    409e:	84 9f       	mul	r24, r20
    40a0:	60 0d       	add	r22, r0
    40a2:	21 1d       	adc	r18, r1
    40a4:	82 2f       	mov	r24, r18
    40a6:	76 2f       	mov	r23, r22
    40a8:	6a 2f       	mov	r22, r26
    40aa:	11 24       	eor	r1, r1
    40ac:	9f 57       	subi	r25, 0x7F	; 127
    40ae:	50 40       	sbci	r21, 0x00	; 0
    40b0:	9a f0       	brmi	.+38     	; 0x40d8 <__mulsf3_pse+0x88>
    40b2:	f1 f0       	breq	.+60     	; 0x40f0 <__mulsf3_pse+0xa0>
    40b4:	88 23       	and	r24, r24
    40b6:	4a f0       	brmi	.+18     	; 0x40ca <__mulsf3_pse+0x7a>
    40b8:	ee 0f       	add	r30, r30
    40ba:	ff 1f       	adc	r31, r31
    40bc:	bb 1f       	adc	r27, r27
    40be:	66 1f       	adc	r22, r22
    40c0:	77 1f       	adc	r23, r23
    40c2:	88 1f       	adc	r24, r24
    40c4:	91 50       	subi	r25, 0x01	; 1
    40c6:	50 40       	sbci	r21, 0x00	; 0
    40c8:	a9 f7       	brne	.-22     	; 0x40b4 <__mulsf3_pse+0x64>
    40ca:	9e 3f       	cpi	r25, 0xFE	; 254
    40cc:	51 05       	cpc	r21, r1
    40ce:	80 f0       	brcs	.+32     	; 0x40f0 <__mulsf3_pse+0xa0>
    40d0:	0c 94 4e 1f 	jmp	0x3e9c	; 0x3e9c <__fp_inf>
    40d4:	0c 94 ff 1f 	jmp	0x3ffe	; 0x3ffe <__fp_szero>
    40d8:	5f 3f       	cpi	r21, 0xFF	; 255
    40da:	e4 f3       	brlt	.-8      	; 0x40d4 <__mulsf3_pse+0x84>
    40dc:	98 3e       	cpi	r25, 0xE8	; 232
    40de:	d4 f3       	brlt	.-12     	; 0x40d4 <__mulsf3_pse+0x84>
    40e0:	86 95       	lsr	r24
    40e2:	77 95       	ror	r23
    40e4:	67 95       	ror	r22
    40e6:	b7 95       	ror	r27
    40e8:	f7 95       	ror	r31
    40ea:	e7 95       	ror	r30
    40ec:	9f 5f       	subi	r25, 0xFF	; 255
    40ee:	c1 f7       	brne	.-16     	; 0x40e0 <__mulsf3_pse+0x90>
    40f0:	fe 2b       	or	r31, r30
    40f2:	88 0f       	add	r24, r24
    40f4:	91 1d       	adc	r25, r1
    40f6:	96 95       	lsr	r25
    40f8:	87 95       	ror	r24
    40fa:	97 f9       	bld	r25, 7
    40fc:	08 95       	ret

000040fe <pow>:
    40fe:	fa 01       	movw	r30, r20
    4100:	ee 0f       	add	r30, r30
    4102:	ff 1f       	adc	r31, r31
    4104:	30 96       	adiw	r30, 0x00	; 0
    4106:	21 05       	cpc	r18, r1
    4108:	31 05       	cpc	r19, r1
    410a:	a1 f1       	breq	.+104    	; 0x4174 <pow+0x76>
    410c:	61 15       	cp	r22, r1
    410e:	71 05       	cpc	r23, r1
    4110:	61 f4       	brne	.+24     	; 0x412a <pow+0x2c>
    4112:	80 38       	cpi	r24, 0x80	; 128
    4114:	bf e3       	ldi	r27, 0x3F	; 63
    4116:	9b 07       	cpc	r25, r27
    4118:	49 f1       	breq	.+82     	; 0x416c <pow+0x6e>
    411a:	68 94       	set
    411c:	90 38       	cpi	r25, 0x80	; 128
    411e:	81 05       	cpc	r24, r1
    4120:	61 f0       	breq	.+24     	; 0x413a <pow+0x3c>
    4122:	80 38       	cpi	r24, 0x80	; 128
    4124:	bf ef       	ldi	r27, 0xFF	; 255
    4126:	9b 07       	cpc	r25, r27
    4128:	41 f0       	breq	.+16     	; 0x413a <pow+0x3c>
    412a:	99 23       	and	r25, r25
    412c:	4a f5       	brpl	.+82     	; 0x4180 <pow+0x82>
    412e:	ff 3f       	cpi	r31, 0xFF	; 255
    4130:	e1 05       	cpc	r30, r1
    4132:	31 05       	cpc	r19, r1
    4134:	21 05       	cpc	r18, r1
    4136:	19 f1       	breq	.+70     	; 0x417e <pow+0x80>
    4138:	e8 94       	clt
    413a:	08 94       	sec
    413c:	e7 95       	ror	r30
    413e:	d9 01       	movw	r26, r18
    4140:	aa 23       	and	r26, r26
    4142:	29 f4       	brne	.+10     	; 0x414e <pow+0x50>
    4144:	ab 2f       	mov	r26, r27
    4146:	be 2f       	mov	r27, r30
    4148:	f8 5f       	subi	r31, 0xF8	; 248
    414a:	d0 f3       	brcs	.-12     	; 0x4140 <pow+0x42>
    414c:	10 c0       	rjmp	.+32     	; 0x416e <pow+0x70>
    414e:	ff 5f       	subi	r31, 0xFF	; 255
    4150:	70 f4       	brcc	.+28     	; 0x416e <pow+0x70>
    4152:	a6 95       	lsr	r26
    4154:	e0 f7       	brcc	.-8      	; 0x414e <pow+0x50>
    4156:	f7 39       	cpi	r31, 0x97	; 151
    4158:	50 f0       	brcs	.+20     	; 0x416e <pow+0x70>
    415a:	19 f0       	breq	.+6      	; 0x4162 <pow+0x64>
    415c:	ff 3a       	cpi	r31, 0xAF	; 175
    415e:	38 f4       	brcc	.+14     	; 0x416e <pow+0x70>
    4160:	9f 77       	andi	r25, 0x7F	; 127
    4162:	9f 93       	push	r25
    4164:	0d d0       	rcall	.+26     	; 0x4180 <pow+0x82>
    4166:	0f 90       	pop	r0
    4168:	07 fc       	sbrc	r0, 7
    416a:	90 58       	subi	r25, 0x80	; 128
    416c:	08 95       	ret
    416e:	46 f0       	brts	.+16     	; 0x4180 <pow+0x82>
    4170:	0c 94 54 1f 	jmp	0x3ea8	; 0x3ea8 <__fp_nan>
    4174:	60 e0       	ldi	r22, 0x00	; 0
    4176:	70 e0       	ldi	r23, 0x00	; 0
    4178:	80 e8       	ldi	r24, 0x80	; 128
    417a:	9f e3       	ldi	r25, 0x3F	; 63
    417c:	08 95       	ret
    417e:	4f e7       	ldi	r20, 0x7F	; 127
    4180:	9f 77       	andi	r25, 0x7F	; 127
    4182:	5f 93       	push	r21
    4184:	4f 93       	push	r20
    4186:	3f 93       	push	r19
    4188:	2f 93       	push	r18
    418a:	0e 94 f0 21 	call	0x43e0	; 0x43e0 <log>
    418e:	2f 91       	pop	r18
    4190:	3f 91       	pop	r19
    4192:	4f 91       	pop	r20
    4194:	5f 91       	pop	r21
    4196:	0e 94 12 20 	call	0x4024	; 0x4024 <__mulsf3>
    419a:	0c 94 53 21 	jmp	0x42a6	; 0x42a6 <exp>

0000419e <sin>:
    419e:	9f 93       	push	r25
    41a0:	0e 94 8e 1f 	call	0x3f1c	; 0x3f1c <__fp_rempio2>
    41a4:	0f 90       	pop	r0
    41a6:	07 fc       	sbrc	r0, 7
    41a8:	ee 5f       	subi	r30, 0xFE	; 254
    41aa:	0c 94 c8 1f 	jmp	0x3f90	; 0x3f90 <__fp_sinus>
    41ae:	19 f4       	brne	.+6      	; 0x41b6 <sin+0x18>
    41b0:	16 f4       	brtc	.+4      	; 0x41b6 <sin+0x18>
    41b2:	0c 94 54 1f 	jmp	0x3ea8	; 0x3ea8 <__fp_nan>
    41b6:	0c 94 85 21 	jmp	0x430a	; 0x430a <__fp_mpack>

000041ba <sqrt>:
    41ba:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <__fp_splitA>
    41be:	b8 f3       	brcs	.-18     	; 0x41ae <sin+0x10>
    41c0:	99 23       	and	r25, r25
    41c2:	c9 f3       	breq	.-14     	; 0x41b6 <sin+0x18>
    41c4:	b6 f3       	brts	.-20     	; 0x41b2 <sin+0x14>
    41c6:	9f 57       	subi	r25, 0x7F	; 127
    41c8:	55 0b       	sbc	r21, r21
    41ca:	87 ff       	sbrs	r24, 7
    41cc:	0e 94 93 21 	call	0x4326	; 0x4326 <__fp_norm2>
    41d0:	00 24       	eor	r0, r0
    41d2:	a0 e6       	ldi	r26, 0x60	; 96
    41d4:	40 ea       	ldi	r20, 0xA0	; 160
    41d6:	90 01       	movw	r18, r0
    41d8:	80 58       	subi	r24, 0x80	; 128
    41da:	56 95       	lsr	r21
    41dc:	97 95       	ror	r25
    41de:	28 f4       	brcc	.+10     	; 0x41ea <sqrt+0x30>
    41e0:	80 5c       	subi	r24, 0xC0	; 192
    41e2:	66 0f       	add	r22, r22
    41e4:	77 1f       	adc	r23, r23
    41e6:	88 1f       	adc	r24, r24
    41e8:	20 f0       	brcs	.+8      	; 0x41f2 <sqrt+0x38>
    41ea:	26 17       	cp	r18, r22
    41ec:	37 07       	cpc	r19, r23
    41ee:	48 07       	cpc	r20, r24
    41f0:	30 f4       	brcc	.+12     	; 0x41fe <sqrt+0x44>
    41f2:	62 1b       	sub	r22, r18
    41f4:	73 0b       	sbc	r23, r19
    41f6:	84 0b       	sbc	r24, r20
    41f8:	20 29       	or	r18, r0
    41fa:	31 29       	or	r19, r1
    41fc:	4a 2b       	or	r20, r26
    41fe:	a6 95       	lsr	r26
    4200:	17 94       	ror	r1
    4202:	07 94       	ror	r0
    4204:	20 25       	eor	r18, r0
    4206:	31 25       	eor	r19, r1
    4208:	4a 27       	eor	r20, r26
    420a:	58 f7       	brcc	.-42     	; 0x41e2 <sqrt+0x28>
    420c:	66 0f       	add	r22, r22
    420e:	77 1f       	adc	r23, r23
    4210:	88 1f       	adc	r24, r24
    4212:	20 f0       	brcs	.+8      	; 0x421c <sqrt+0x62>
    4214:	26 17       	cp	r18, r22
    4216:	37 07       	cpc	r19, r23
    4218:	48 07       	cpc	r20, r24
    421a:	30 f4       	brcc	.+12     	; 0x4228 <sqrt+0x6e>
    421c:	62 0b       	sbc	r22, r18
    421e:	73 0b       	sbc	r23, r19
    4220:	84 0b       	sbc	r24, r20
    4222:	20 0d       	add	r18, r0
    4224:	31 1d       	adc	r19, r1
    4226:	41 1d       	adc	r20, r1
    4228:	a0 95       	com	r26
    422a:	81 f7       	brne	.-32     	; 0x420c <sqrt+0x52>
    422c:	b9 01       	movw	r22, r18
    422e:	84 2f       	mov	r24, r20
    4230:	91 58       	subi	r25, 0x81	; 129
    4232:	88 0f       	add	r24, r24
    4234:	96 95       	lsr	r25
    4236:	87 95       	ror	r24
    4238:	08 95       	ret

0000423a <square>:
    423a:	9b 01       	movw	r18, r22
    423c:	ac 01       	movw	r20, r24
    423e:	0c 94 12 20 	jmp	0x4024	; 0x4024 <__mulsf3>

00004242 <tan>:
    4242:	df 93       	push	r29
    4244:	d9 2f       	mov	r29, r25
    4246:	0e 94 8e 1f 	call	0x3f1c	; 0x3f1c <__fp_rempio2>
    424a:	e6 95       	lsr	r30
    424c:	d7 95       	ror	r29
    424e:	2a ed       	ldi	r18, 0xDA	; 218
    4250:	3f e0       	ldi	r19, 0x0F	; 15
    4252:	49 e4       	ldi	r20, 0x49	; 73
    4254:	5f e3       	ldi	r21, 0x3F	; 63
    4256:	b3 3a       	cpi	r27, 0xA3	; 163
    4258:	62 07       	cpc	r22, r18
    425a:	73 07       	cpc	r23, r19
    425c:	84 07       	cpc	r24, r20
    425e:	95 07       	cpc	r25, r21
    4260:	d7 95       	ror	r29
    4262:	3a f0       	brmi	.+14     	; 0x4272 <tan+0x30>
    4264:	a2 ea       	ldi	r26, 0xA2	; 162
    4266:	49 ec       	ldi	r20, 0xC9	; 201
    4268:	90 68       	ori	r25, 0x80	; 128
    426a:	0e 94 74 1d 	call	0x3ae8	; 0x3ae8 <__addsf3x>
    426e:	0e 94 b7 1f 	call	0x3f6e	; 0x3f6e <__fp_round>
    4272:	eb eb       	ldi	r30, 0xBB	; 187
    4274:	f1 e0       	ldi	r31, 0x01	; 1
    4276:	0e 94 9a 21 	call	0x4334	; 0x4334 <__fp_powsodd>
    427a:	dd 0f       	add	r29, r29
    427c:	13 f0       	brvs	.+4      	; 0x4282 <tan+0x40>
    427e:	0e 94 0a 20 	call	0x4014	; 0x4014 <inverse>
    4282:	dd 0f       	add	r29, r29
    4284:	0b f4       	brvc	.+2      	; 0x4288 <tan+0x46>
    4286:	90 58       	subi	r25, 0x80	; 128
    4288:	df 91       	pop	r29
    428a:	08 95       	ret

0000428c <__unordsf2>:
    428c:	0e 94 2a 1f 	call	0x3e54	; 0x3e54 <__fp_cmp>
    4290:	88 0b       	sbc	r24, r24
    4292:	99 0b       	sbc	r25, r25
    4294:	08 95       	ret
    4296:	29 f4       	brne	.+10     	; 0x42a2 <__unordsf2+0x16>
    4298:	16 f0       	brts	.+4      	; 0x429e <__unordsf2+0x12>
    429a:	0c 94 4e 1f 	jmp	0x3e9c	; 0x3e9c <__fp_inf>
    429e:	0c 94 fe 1f 	jmp	0x3ffc	; 0x3ffc <__fp_zero>
    42a2:	0c 94 54 1f 	jmp	0x3ea8	; 0x3ea8 <__fp_nan>

000042a6 <exp>:
    42a6:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <__fp_splitA>
    42aa:	a8 f3       	brcs	.-22     	; 0x4296 <__unordsf2+0xa>
    42ac:	96 38       	cpi	r25, 0x86	; 134
    42ae:	a0 f7       	brcc	.-24     	; 0x4298 <__unordsf2+0xc>
    42b0:	07 f8       	bld	r0, 7
    42b2:	0f 92       	push	r0
    42b4:	e8 94       	clt
    42b6:	2b e3       	ldi	r18, 0x3B	; 59
    42b8:	3a ea       	ldi	r19, 0xAA	; 170
    42ba:	48 eb       	ldi	r20, 0xB8	; 184
    42bc:	5f e7       	ldi	r21, 0x7F	; 127
    42be:	0e 94 28 20 	call	0x4050	; 0x4050 <__mulsf3_pse>
    42c2:	0f 92       	push	r0
    42c4:	0f 92       	push	r0
    42c6:	0f 92       	push	r0
    42c8:	4d b7       	in	r20, 0x3d	; 61
    42ca:	5e b7       	in	r21, 0x3e	; 62
    42cc:	0f 92       	push	r0
    42ce:	0e 94 38 22 	call	0x4470	; 0x4470 <modf>
    42d2:	ee ed       	ldi	r30, 0xDE	; 222
    42d4:	f1 e0       	ldi	r31, 0x01	; 1
    42d6:	0e 94 57 1f 	call	0x3eae	; 0x3eae <__fp_powser>
    42da:	4f 91       	pop	r20
    42dc:	5f 91       	pop	r21
    42de:	ef 91       	pop	r30
    42e0:	ff 91       	pop	r31
    42e2:	e5 95       	asr	r30
    42e4:	ee 1f       	adc	r30, r30
    42e6:	ff 1f       	adc	r31, r31
    42e8:	49 f0       	breq	.+18     	; 0x42fc <exp+0x56>
    42ea:	fe 57       	subi	r31, 0x7E	; 126
    42ec:	e0 68       	ori	r30, 0x80	; 128
    42ee:	44 27       	eor	r20, r20
    42f0:	ee 0f       	add	r30, r30
    42f2:	44 1f       	adc	r20, r20
    42f4:	fa 95       	dec	r31
    42f6:	e1 f7       	brne	.-8      	; 0x42f0 <exp+0x4a>
    42f8:	41 95       	neg	r20
    42fa:	55 0b       	sbc	r21, r21
    42fc:	0e 94 b2 21 	call	0x4364	; 0x4364 <ldexp>
    4300:	0f 90       	pop	r0
    4302:	07 fe       	sbrs	r0, 7
    4304:	0c 94 0a 20 	jmp	0x4014	; 0x4014 <inverse>
    4308:	08 95       	ret

0000430a <__fp_mpack>:
    430a:	9f 3f       	cpi	r25, 0xFF	; 255
    430c:	31 f0       	breq	.+12     	; 0x431a <__fp_mpack_finite+0xc>

0000430e <__fp_mpack_finite>:
    430e:	91 50       	subi	r25, 0x01	; 1
    4310:	20 f4       	brcc	.+8      	; 0x431a <__fp_mpack_finite+0xc>
    4312:	87 95       	ror	r24
    4314:	77 95       	ror	r23
    4316:	67 95       	ror	r22
    4318:	b7 95       	ror	r27
    431a:	88 0f       	add	r24, r24
    431c:	91 1d       	adc	r25, r1
    431e:	96 95       	lsr	r25
    4320:	87 95       	ror	r24
    4322:	97 f9       	bld	r25, 7
    4324:	08 95       	ret

00004326 <__fp_norm2>:
    4326:	91 50       	subi	r25, 0x01	; 1
    4328:	50 40       	sbci	r21, 0x00	; 0
    432a:	66 0f       	add	r22, r22
    432c:	77 1f       	adc	r23, r23
    432e:	88 1f       	adc	r24, r24
    4330:	d2 f7       	brpl	.-12     	; 0x4326 <__fp_norm2>
    4332:	08 95       	ret

00004334 <__fp_powsodd>:
    4334:	9f 93       	push	r25
    4336:	8f 93       	push	r24
    4338:	7f 93       	push	r23
    433a:	6f 93       	push	r22
    433c:	ff 93       	push	r31
    433e:	ef 93       	push	r30
    4340:	9b 01       	movw	r18, r22
    4342:	ac 01       	movw	r20, r24
    4344:	0e 94 12 20 	call	0x4024	; 0x4024 <__mulsf3>
    4348:	ef 91       	pop	r30
    434a:	ff 91       	pop	r31
    434c:	0e 94 57 1f 	call	0x3eae	; 0x3eae <__fp_powser>
    4350:	2f 91       	pop	r18
    4352:	3f 91       	pop	r19
    4354:	4f 91       	pop	r20
    4356:	5f 91       	pop	r21
    4358:	0c 94 12 20 	jmp	0x4024	; 0x4024 <__mulsf3>
    435c:	0c 94 4e 1f 	jmp	0x3e9c	; 0x3e9c <__fp_inf>
    4360:	0c 94 85 21 	jmp	0x430a	; 0x430a <__fp_mpack>

00004364 <ldexp>:
    4364:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <__fp_splitA>
    4368:	d8 f3       	brcs	.-10     	; 0x4360 <__fp_powsodd+0x2c>
    436a:	99 23       	and	r25, r25
    436c:	c9 f3       	breq	.-14     	; 0x4360 <__fp_powsodd+0x2c>
    436e:	94 0f       	add	r25, r20
    4370:	51 1d       	adc	r21, r1
    4372:	a3 f3       	brvs	.-24     	; 0x435c <__fp_powsodd+0x28>
    4374:	91 50       	subi	r25, 0x01	; 1
    4376:	50 40       	sbci	r21, 0x00	; 0
    4378:	94 f0       	brlt	.+36     	; 0x439e <ldexp+0x3a>
    437a:	59 f0       	breq	.+22     	; 0x4392 <ldexp+0x2e>
    437c:	88 23       	and	r24, r24
    437e:	32 f0       	brmi	.+12     	; 0x438c <ldexp+0x28>
    4380:	66 0f       	add	r22, r22
    4382:	77 1f       	adc	r23, r23
    4384:	88 1f       	adc	r24, r24
    4386:	91 50       	subi	r25, 0x01	; 1
    4388:	50 40       	sbci	r21, 0x00	; 0
    438a:	c1 f7       	brne	.-16     	; 0x437c <ldexp+0x18>
    438c:	9e 3f       	cpi	r25, 0xFE	; 254
    438e:	51 05       	cpc	r21, r1
    4390:	2c f7       	brge	.-54     	; 0x435c <__fp_powsodd+0x28>
    4392:	88 0f       	add	r24, r24
    4394:	91 1d       	adc	r25, r1
    4396:	96 95       	lsr	r25
    4398:	87 95       	ror	r24
    439a:	97 f9       	bld	r25, 7
    439c:	08 95       	ret
    439e:	5f 3f       	cpi	r21, 0xFF	; 255
    43a0:	ac f0       	brlt	.+42     	; 0x43cc <ldexp+0x68>
    43a2:	98 3e       	cpi	r25, 0xE8	; 232
    43a4:	9c f0       	brlt	.+38     	; 0x43cc <ldexp+0x68>
    43a6:	bb 27       	eor	r27, r27
    43a8:	86 95       	lsr	r24
    43aa:	77 95       	ror	r23
    43ac:	67 95       	ror	r22
    43ae:	b7 95       	ror	r27
    43b0:	08 f4       	brcc	.+2      	; 0x43b4 <ldexp+0x50>
    43b2:	b1 60       	ori	r27, 0x01	; 1
    43b4:	93 95       	inc	r25
    43b6:	c1 f7       	brne	.-16     	; 0x43a8 <ldexp+0x44>
    43b8:	bb 0f       	add	r27, r27
    43ba:	58 f7       	brcc	.-42     	; 0x4392 <ldexp+0x2e>
    43bc:	11 f4       	brne	.+4      	; 0x43c2 <ldexp+0x5e>
    43be:	60 ff       	sbrs	r22, 0
    43c0:	e8 cf       	rjmp	.-48     	; 0x4392 <ldexp+0x2e>
    43c2:	6f 5f       	subi	r22, 0xFF	; 255
    43c4:	7f 4f       	sbci	r23, 0xFF	; 255
    43c6:	8f 4f       	sbci	r24, 0xFF	; 255
    43c8:	9f 4f       	sbci	r25, 0xFF	; 255
    43ca:	e3 cf       	rjmp	.-58     	; 0x4392 <ldexp+0x2e>
    43cc:	0c 94 ff 1f 	jmp	0x3ffe	; 0x3ffe <__fp_szero>
    43d0:	16 f0       	brts	.+4      	; 0x43d6 <ldexp+0x72>
    43d2:	0c 94 85 21 	jmp	0x430a	; 0x430a <__fp_mpack>
    43d6:	0c 94 54 1f 	jmp	0x3ea8	; 0x3ea8 <__fp_nan>
    43da:	68 94       	set
    43dc:	0c 94 4e 1f 	jmp	0x3e9c	; 0x3e9c <__fp_inf>

000043e0 <log>:
    43e0:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <__fp_splitA>
    43e4:	a8 f3       	brcs	.-22     	; 0x43d0 <ldexp+0x6c>
    43e6:	99 23       	and	r25, r25
    43e8:	c1 f3       	breq	.-16     	; 0x43da <ldexp+0x76>
    43ea:	ae f3       	brts	.-22     	; 0x43d6 <ldexp+0x72>
    43ec:	df 93       	push	r29
    43ee:	cf 93       	push	r28
    43f0:	1f 93       	push	r17
    43f2:	0f 93       	push	r16
    43f4:	ff 92       	push	r15
    43f6:	c9 2f       	mov	r28, r25
    43f8:	dd 27       	eor	r29, r29
    43fa:	88 23       	and	r24, r24
    43fc:	2a f0       	brmi	.+10     	; 0x4408 <log+0x28>
    43fe:	21 97       	sbiw	r28, 0x01	; 1
    4400:	66 0f       	add	r22, r22
    4402:	77 1f       	adc	r23, r23
    4404:	88 1f       	adc	r24, r24
    4406:	da f7       	brpl	.-10     	; 0x43fe <log+0x1e>
    4408:	20 e0       	ldi	r18, 0x00	; 0
    440a:	30 e0       	ldi	r19, 0x00	; 0
    440c:	40 e8       	ldi	r20, 0x80	; 128
    440e:	5f eb       	ldi	r21, 0xBF	; 191
    4410:	9f e3       	ldi	r25, 0x3F	; 63
    4412:	88 39       	cpi	r24, 0x98	; 152
    4414:	20 f0       	brcs	.+8      	; 0x441e <log+0x3e>
    4416:	80 3e       	cpi	r24, 0xE0	; 224
    4418:	38 f0       	brcs	.+14     	; 0x4428 <log+0x48>
    441a:	21 96       	adiw	r28, 0x01	; 1
    441c:	8f 77       	andi	r24, 0x7F	; 127
    441e:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <__addsf3>
    4422:	e6 e0       	ldi	r30, 0x06	; 6
    4424:	f2 e0       	ldi	r31, 0x02	; 2
    4426:	04 c0       	rjmp	.+8      	; 0x4430 <log+0x50>
    4428:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <__addsf3>
    442c:	e3 e3       	ldi	r30, 0x33	; 51
    442e:	f2 e0       	ldi	r31, 0x02	; 2
    4430:	0e 94 57 1f 	call	0x3eae	; 0x3eae <__fp_powser>
    4434:	8b 01       	movw	r16, r22
    4436:	be 01       	movw	r22, r28
    4438:	ec 01       	movw	r28, r24
    443a:	fb 2e       	mov	r15, r27
    443c:	6f 57       	subi	r22, 0x7F	; 127
    443e:	71 09       	sbc	r23, r1
    4440:	75 95       	asr	r23
    4442:	77 1f       	adc	r23, r23
    4444:	88 0b       	sbc	r24, r24
    4446:	99 0b       	sbc	r25, r25
    4448:	0e 94 ef 1e 	call	0x3dde	; 0x3dde <__floatsisf>
    444c:	28 e1       	ldi	r18, 0x18	; 24
    444e:	32 e7       	ldi	r19, 0x72	; 114
    4450:	41 e3       	ldi	r20, 0x31	; 49
    4452:	5f e3       	ldi	r21, 0x3F	; 63
    4454:	0e 94 25 20 	call	0x404a	; 0x404a <__mulsf3x>
    4458:	af 2d       	mov	r26, r15
    445a:	98 01       	movw	r18, r16
    445c:	ae 01       	movw	r20, r28
    445e:	ff 90       	pop	r15
    4460:	0f 91       	pop	r16
    4462:	1f 91       	pop	r17
    4464:	cf 91       	pop	r28
    4466:	df 91       	pop	r29
    4468:	0e 94 74 1d 	call	0x3ae8	; 0x3ae8 <__addsf3x>
    446c:	0c 94 b7 1f 	jmp	0x3f6e	; 0x3f6e <__fp_round>

00004470 <modf>:
    4470:	fa 01       	movw	r30, r20
    4472:	dc 01       	movw	r26, r24
    4474:	aa 0f       	add	r26, r26
    4476:	bb 1f       	adc	r27, r27
    4478:	9b 01       	movw	r18, r22
    447a:	ac 01       	movw	r20, r24
    447c:	bf 57       	subi	r27, 0x7F	; 127
    447e:	28 f4       	brcc	.+10     	; 0x448a <modf+0x1a>
    4480:	22 27       	eor	r18, r18
    4482:	33 27       	eor	r19, r19
    4484:	44 27       	eor	r20, r20
    4486:	50 78       	andi	r21, 0x80	; 128
    4488:	20 c0       	rjmp	.+64     	; 0x44ca <modf+0x5a>
    448a:	b7 51       	subi	r27, 0x17	; 23
    448c:	90 f4       	brcc	.+36     	; 0x44b2 <modf+0x42>
    448e:	ab 2f       	mov	r26, r27
    4490:	00 24       	eor	r0, r0
    4492:	46 95       	lsr	r20
    4494:	37 95       	ror	r19
    4496:	27 95       	ror	r18
    4498:	01 1c       	adc	r0, r1
    449a:	a3 95       	inc	r26
    449c:	d2 f3       	brmi	.-12     	; 0x4492 <modf+0x22>
    449e:	00 20       	and	r0, r0
    44a0:	71 f0       	breq	.+28     	; 0x44be <modf+0x4e>
    44a2:	22 0f       	add	r18, r18
    44a4:	33 1f       	adc	r19, r19
    44a6:	44 1f       	adc	r20, r20
    44a8:	b3 95       	inc	r27
    44aa:	da f3       	brmi	.-10     	; 0x44a2 <modf+0x32>
    44ac:	0e d0       	rcall	.+28     	; 0x44ca <modf+0x5a>
    44ae:	0c 94 5c 1d 	jmp	0x3ab8	; 0x3ab8 <__subsf3>
    44b2:	61 30       	cpi	r22, 0x01	; 1
    44b4:	71 05       	cpc	r23, r1
    44b6:	a0 e8       	ldi	r26, 0x80	; 128
    44b8:	8a 07       	cpc	r24, r26
    44ba:	b9 46       	sbci	r27, 0x69	; 105
    44bc:	30 f4       	brcc	.+12     	; 0x44ca <modf+0x5a>
    44be:	9b 01       	movw	r18, r22
    44c0:	ac 01       	movw	r20, r24
    44c2:	66 27       	eor	r22, r22
    44c4:	77 27       	eor	r23, r23
    44c6:	88 27       	eor	r24, r24
    44c8:	90 78       	andi	r25, 0x80	; 128
    44ca:	30 96       	adiw	r30, 0x00	; 0
    44cc:	21 f0       	breq	.+8      	; 0x44d6 <modf+0x66>
    44ce:	20 83       	st	Z, r18
    44d0:	31 83       	std	Z+1, r19	; 0x01
    44d2:	42 83       	std	Z+2, r20	; 0x02
    44d4:	53 83       	std	Z+3, r21	; 0x03
    44d6:	08 95       	ret

000044d8 <vfprintf>:
    44d8:	2f 92       	push	r2
    44da:	3f 92       	push	r3
    44dc:	4f 92       	push	r4
    44de:	5f 92       	push	r5
    44e0:	6f 92       	push	r6
    44e2:	7f 92       	push	r7
    44e4:	8f 92       	push	r8
    44e6:	9f 92       	push	r9
    44e8:	af 92       	push	r10
    44ea:	bf 92       	push	r11
    44ec:	cf 92       	push	r12
    44ee:	df 92       	push	r13
    44f0:	ef 92       	push	r14
    44f2:	ff 92       	push	r15
    44f4:	0f 93       	push	r16
    44f6:	1f 93       	push	r17
    44f8:	cf 93       	push	r28
    44fa:	df 93       	push	r29
    44fc:	cd b7       	in	r28, 0x3d	; 61
    44fe:	de b7       	in	r29, 0x3e	; 62
    4500:	60 97       	sbiw	r28, 0x10	; 16
    4502:	cd bf       	out	0x3d, r28	; 61
    4504:	de bf       	out	0x3e, r29	; 62
    4506:	7c 01       	movw	r14, r24
    4508:	1b 01       	movw	r2, r22
    450a:	6a 01       	movw	r12, r20
    450c:	fc 01       	movw	r30, r24
    450e:	16 82       	std	Z+6, r1	; 0x06
    4510:	17 82       	std	Z+7, r1	; 0x07
    4512:	83 81       	ldd	r24, Z+3	; 0x03
    4514:	81 ff       	sbrs	r24, 1
    4516:	44 c3       	rjmp	.+1672   	; 0x4ba0 <vfprintf+0x6c8>
    4518:	9e 01       	movw	r18, r28
    451a:	2f 5f       	subi	r18, 0xFF	; 255
    451c:	3f 4f       	sbci	r19, 0xFF	; 255
    451e:	39 01       	movw	r6, r18
    4520:	f7 01       	movw	r30, r14
    4522:	93 81       	ldd	r25, Z+3	; 0x03
    4524:	f1 01       	movw	r30, r2
    4526:	93 fd       	sbrc	r25, 3
    4528:	85 91       	lpm	r24, Z+
    452a:	93 ff       	sbrs	r25, 3
    452c:	81 91       	ld	r24, Z+
    452e:	1f 01       	movw	r2, r30
    4530:	88 23       	and	r24, r24
    4532:	09 f4       	brne	.+2      	; 0x4536 <vfprintf+0x5e>
    4534:	31 c3       	rjmp	.+1634   	; 0x4b98 <vfprintf+0x6c0>
    4536:	85 32       	cpi	r24, 0x25	; 37
    4538:	39 f4       	brne	.+14     	; 0x4548 <vfprintf+0x70>
    453a:	93 fd       	sbrc	r25, 3
    453c:	85 91       	lpm	r24, Z+
    453e:	93 ff       	sbrs	r25, 3
    4540:	81 91       	ld	r24, Z+
    4542:	1f 01       	movw	r2, r30
    4544:	85 32       	cpi	r24, 0x25	; 37
    4546:	39 f4       	brne	.+14     	; 0x4556 <vfprintf+0x7e>
    4548:	b7 01       	movw	r22, r14
    454a:	90 e0       	ldi	r25, 0x00	; 0
    454c:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <fputc>
    4550:	56 01       	movw	r10, r12
    4552:	65 01       	movw	r12, r10
    4554:	e5 cf       	rjmp	.-54     	; 0x4520 <vfprintf+0x48>
    4556:	10 e0       	ldi	r17, 0x00	; 0
    4558:	51 2c       	mov	r5, r1
    455a:	91 2c       	mov	r9, r1
    455c:	ff e1       	ldi	r31, 0x1F	; 31
    455e:	f9 15       	cp	r31, r9
    4560:	d8 f0       	brcs	.+54     	; 0x4598 <vfprintf+0xc0>
    4562:	8b 32       	cpi	r24, 0x2B	; 43
    4564:	79 f0       	breq	.+30     	; 0x4584 <vfprintf+0xac>
    4566:	38 f4       	brcc	.+14     	; 0x4576 <vfprintf+0x9e>
    4568:	80 32       	cpi	r24, 0x20	; 32
    456a:	79 f0       	breq	.+30     	; 0x458a <vfprintf+0xb2>
    456c:	83 32       	cpi	r24, 0x23	; 35
    456e:	a1 f4       	brne	.+40     	; 0x4598 <vfprintf+0xc0>
    4570:	f9 2d       	mov	r31, r9
    4572:	f0 61       	ori	r31, 0x10	; 16
    4574:	2e c0       	rjmp	.+92     	; 0x45d2 <vfprintf+0xfa>
    4576:	8d 32       	cpi	r24, 0x2D	; 45
    4578:	61 f0       	breq	.+24     	; 0x4592 <vfprintf+0xba>
    457a:	80 33       	cpi	r24, 0x30	; 48
    457c:	69 f4       	brne	.+26     	; 0x4598 <vfprintf+0xc0>
    457e:	29 2d       	mov	r18, r9
    4580:	21 60       	ori	r18, 0x01	; 1
    4582:	2d c0       	rjmp	.+90     	; 0x45de <vfprintf+0x106>
    4584:	39 2d       	mov	r19, r9
    4586:	32 60       	ori	r19, 0x02	; 2
    4588:	93 2e       	mov	r9, r19
    458a:	89 2d       	mov	r24, r9
    458c:	84 60       	ori	r24, 0x04	; 4
    458e:	98 2e       	mov	r9, r24
    4590:	2a c0       	rjmp	.+84     	; 0x45e6 <vfprintf+0x10e>
    4592:	e9 2d       	mov	r30, r9
    4594:	e8 60       	ori	r30, 0x08	; 8
    4596:	15 c0       	rjmp	.+42     	; 0x45c2 <vfprintf+0xea>
    4598:	97 fc       	sbrc	r9, 7
    459a:	2d c0       	rjmp	.+90     	; 0x45f6 <vfprintf+0x11e>
    459c:	20 ed       	ldi	r18, 0xD0	; 208
    459e:	28 0f       	add	r18, r24
    45a0:	2a 30       	cpi	r18, 0x0A	; 10
    45a2:	88 f4       	brcc	.+34     	; 0x45c6 <vfprintf+0xee>
    45a4:	96 fe       	sbrs	r9, 6
    45a6:	06 c0       	rjmp	.+12     	; 0x45b4 <vfprintf+0xdc>
    45a8:	3a e0       	ldi	r19, 0x0A	; 10
    45aa:	13 9f       	mul	r17, r19
    45ac:	20 0d       	add	r18, r0
    45ae:	11 24       	eor	r1, r1
    45b0:	12 2f       	mov	r17, r18
    45b2:	19 c0       	rjmp	.+50     	; 0x45e6 <vfprintf+0x10e>
    45b4:	8a e0       	ldi	r24, 0x0A	; 10
    45b6:	58 9e       	mul	r5, r24
    45b8:	20 0d       	add	r18, r0
    45ba:	11 24       	eor	r1, r1
    45bc:	52 2e       	mov	r5, r18
    45be:	e9 2d       	mov	r30, r9
    45c0:	e0 62       	ori	r30, 0x20	; 32
    45c2:	9e 2e       	mov	r9, r30
    45c4:	10 c0       	rjmp	.+32     	; 0x45e6 <vfprintf+0x10e>
    45c6:	8e 32       	cpi	r24, 0x2E	; 46
    45c8:	31 f4       	brne	.+12     	; 0x45d6 <vfprintf+0xfe>
    45ca:	96 fc       	sbrc	r9, 6
    45cc:	e5 c2       	rjmp	.+1482   	; 0x4b98 <vfprintf+0x6c0>
    45ce:	f9 2d       	mov	r31, r9
    45d0:	f0 64       	ori	r31, 0x40	; 64
    45d2:	9f 2e       	mov	r9, r31
    45d4:	08 c0       	rjmp	.+16     	; 0x45e6 <vfprintf+0x10e>
    45d6:	8c 36       	cpi	r24, 0x6C	; 108
    45d8:	21 f4       	brne	.+8      	; 0x45e2 <vfprintf+0x10a>
    45da:	29 2d       	mov	r18, r9
    45dc:	20 68       	ori	r18, 0x80	; 128
    45de:	92 2e       	mov	r9, r18
    45e0:	02 c0       	rjmp	.+4      	; 0x45e6 <vfprintf+0x10e>
    45e2:	88 36       	cpi	r24, 0x68	; 104
    45e4:	41 f4       	brne	.+16     	; 0x45f6 <vfprintf+0x11e>
    45e6:	f1 01       	movw	r30, r2
    45e8:	93 fd       	sbrc	r25, 3
    45ea:	85 91       	lpm	r24, Z+
    45ec:	93 ff       	sbrs	r25, 3
    45ee:	81 91       	ld	r24, Z+
    45f0:	1f 01       	movw	r2, r30
    45f2:	81 11       	cpse	r24, r1
    45f4:	b3 cf       	rjmp	.-154    	; 0x455c <vfprintf+0x84>
    45f6:	9b eb       	ldi	r25, 0xBB	; 187
    45f8:	98 0f       	add	r25, r24
    45fa:	93 30       	cpi	r25, 0x03	; 3
    45fc:	20 f4       	brcc	.+8      	; 0x4606 <vfprintf+0x12e>
    45fe:	99 2d       	mov	r25, r9
    4600:	90 61       	ori	r25, 0x10	; 16
    4602:	80 5e       	subi	r24, 0xE0	; 224
    4604:	07 c0       	rjmp	.+14     	; 0x4614 <vfprintf+0x13c>
    4606:	9b e9       	ldi	r25, 0x9B	; 155
    4608:	98 0f       	add	r25, r24
    460a:	93 30       	cpi	r25, 0x03	; 3
    460c:	08 f0       	brcs	.+2      	; 0x4610 <vfprintf+0x138>
    460e:	66 c1       	rjmp	.+716    	; 0x48dc <vfprintf+0x404>
    4610:	99 2d       	mov	r25, r9
    4612:	9f 7e       	andi	r25, 0xEF	; 239
    4614:	96 ff       	sbrs	r25, 6
    4616:	16 e0       	ldi	r17, 0x06	; 6
    4618:	9f 73       	andi	r25, 0x3F	; 63
    461a:	99 2e       	mov	r9, r25
    461c:	85 36       	cpi	r24, 0x65	; 101
    461e:	19 f4       	brne	.+6      	; 0x4626 <vfprintf+0x14e>
    4620:	90 64       	ori	r25, 0x40	; 64
    4622:	99 2e       	mov	r9, r25
    4624:	08 c0       	rjmp	.+16     	; 0x4636 <vfprintf+0x15e>
    4626:	86 36       	cpi	r24, 0x66	; 102
    4628:	21 f4       	brne	.+8      	; 0x4632 <vfprintf+0x15a>
    462a:	39 2f       	mov	r19, r25
    462c:	30 68       	ori	r19, 0x80	; 128
    462e:	93 2e       	mov	r9, r19
    4630:	02 c0       	rjmp	.+4      	; 0x4636 <vfprintf+0x15e>
    4632:	11 11       	cpse	r17, r1
    4634:	11 50       	subi	r17, 0x01	; 1
    4636:	97 fe       	sbrs	r9, 7
    4638:	07 c0       	rjmp	.+14     	; 0x4648 <vfprintf+0x170>
    463a:	1c 33       	cpi	r17, 0x3C	; 60
    463c:	50 f4       	brcc	.+20     	; 0x4652 <vfprintf+0x17a>
    463e:	44 24       	eor	r4, r4
    4640:	43 94       	inc	r4
    4642:	41 0e       	add	r4, r17
    4644:	27 e0       	ldi	r18, 0x07	; 7
    4646:	0b c0       	rjmp	.+22     	; 0x465e <vfprintf+0x186>
    4648:	18 30       	cpi	r17, 0x08	; 8
    464a:	38 f0       	brcs	.+14     	; 0x465a <vfprintf+0x182>
    464c:	27 e0       	ldi	r18, 0x07	; 7
    464e:	17 e0       	ldi	r17, 0x07	; 7
    4650:	05 c0       	rjmp	.+10     	; 0x465c <vfprintf+0x184>
    4652:	27 e0       	ldi	r18, 0x07	; 7
    4654:	9c e3       	ldi	r25, 0x3C	; 60
    4656:	49 2e       	mov	r4, r25
    4658:	02 c0       	rjmp	.+4      	; 0x465e <vfprintf+0x186>
    465a:	21 2f       	mov	r18, r17
    465c:	41 2c       	mov	r4, r1
    465e:	56 01       	movw	r10, r12
    4660:	84 e0       	ldi	r24, 0x04	; 4
    4662:	a8 0e       	add	r10, r24
    4664:	b1 1c       	adc	r11, r1
    4666:	f6 01       	movw	r30, r12
    4668:	60 81       	ld	r22, Z
    466a:	71 81       	ldd	r23, Z+1	; 0x01
    466c:	82 81       	ldd	r24, Z+2	; 0x02
    466e:	93 81       	ldd	r25, Z+3	; 0x03
    4670:	04 2d       	mov	r16, r4
    4672:	a3 01       	movw	r20, r6
    4674:	0e 94 3d 29 	call	0x527a	; 0x527a <__ftoa_engine>
    4678:	6c 01       	movw	r12, r24
    467a:	f9 81       	ldd	r31, Y+1	; 0x01
    467c:	fc 87       	std	Y+12, r31	; 0x0c
    467e:	f0 ff       	sbrs	r31, 0
    4680:	02 c0       	rjmp	.+4      	; 0x4686 <vfprintf+0x1ae>
    4682:	f3 ff       	sbrs	r31, 3
    4684:	06 c0       	rjmp	.+12     	; 0x4692 <vfprintf+0x1ba>
    4686:	91 fc       	sbrc	r9, 1
    4688:	06 c0       	rjmp	.+12     	; 0x4696 <vfprintf+0x1be>
    468a:	92 fe       	sbrs	r9, 2
    468c:	06 c0       	rjmp	.+12     	; 0x469a <vfprintf+0x1c2>
    468e:	00 e2       	ldi	r16, 0x20	; 32
    4690:	05 c0       	rjmp	.+10     	; 0x469c <vfprintf+0x1c4>
    4692:	0d e2       	ldi	r16, 0x2D	; 45
    4694:	03 c0       	rjmp	.+6      	; 0x469c <vfprintf+0x1c4>
    4696:	0b e2       	ldi	r16, 0x2B	; 43
    4698:	01 c0       	rjmp	.+2      	; 0x469c <vfprintf+0x1c4>
    469a:	00 e0       	ldi	r16, 0x00	; 0
    469c:	8c 85       	ldd	r24, Y+12	; 0x0c
    469e:	8c 70       	andi	r24, 0x0C	; 12
    46a0:	19 f0       	breq	.+6      	; 0x46a8 <vfprintf+0x1d0>
    46a2:	01 11       	cpse	r16, r1
    46a4:	5a c2       	rjmp	.+1204   	; 0x4b5a <vfprintf+0x682>
    46a6:	9b c2       	rjmp	.+1334   	; 0x4bde <vfprintf+0x706>
    46a8:	97 fe       	sbrs	r9, 7
    46aa:	10 c0       	rjmp	.+32     	; 0x46cc <vfprintf+0x1f4>
    46ac:	4c 0c       	add	r4, r12
    46ae:	fc 85       	ldd	r31, Y+12	; 0x0c
    46b0:	f4 ff       	sbrs	r31, 4
    46b2:	04 c0       	rjmp	.+8      	; 0x46bc <vfprintf+0x1e4>
    46b4:	8a 81       	ldd	r24, Y+2	; 0x02
    46b6:	81 33       	cpi	r24, 0x31	; 49
    46b8:	09 f4       	brne	.+2      	; 0x46bc <vfprintf+0x1e4>
    46ba:	4a 94       	dec	r4
    46bc:	14 14       	cp	r1, r4
    46be:	74 f5       	brge	.+92     	; 0x471c <vfprintf+0x244>
    46c0:	28 e0       	ldi	r18, 0x08	; 8
    46c2:	24 15       	cp	r18, r4
    46c4:	78 f5       	brcc	.+94     	; 0x4724 <vfprintf+0x24c>
    46c6:	88 e0       	ldi	r24, 0x08	; 8
    46c8:	48 2e       	mov	r4, r24
    46ca:	2c c0       	rjmp	.+88     	; 0x4724 <vfprintf+0x24c>
    46cc:	96 fc       	sbrc	r9, 6
    46ce:	2a c0       	rjmp	.+84     	; 0x4724 <vfprintf+0x24c>
    46d0:	81 2f       	mov	r24, r17
    46d2:	90 e0       	ldi	r25, 0x00	; 0
    46d4:	8c 15       	cp	r24, r12
    46d6:	9d 05       	cpc	r25, r13
    46d8:	9c f0       	brlt	.+38     	; 0x4700 <vfprintf+0x228>
    46da:	3c ef       	ldi	r19, 0xFC	; 252
    46dc:	c3 16       	cp	r12, r19
    46de:	3f ef       	ldi	r19, 0xFF	; 255
    46e0:	d3 06       	cpc	r13, r19
    46e2:	74 f0       	brlt	.+28     	; 0x4700 <vfprintf+0x228>
    46e4:	89 2d       	mov	r24, r9
    46e6:	80 68       	ori	r24, 0x80	; 128
    46e8:	98 2e       	mov	r9, r24
    46ea:	0a c0       	rjmp	.+20     	; 0x4700 <vfprintf+0x228>
    46ec:	e2 e0       	ldi	r30, 0x02	; 2
    46ee:	f0 e0       	ldi	r31, 0x00	; 0
    46f0:	ec 0f       	add	r30, r28
    46f2:	fd 1f       	adc	r31, r29
    46f4:	e1 0f       	add	r30, r17
    46f6:	f1 1d       	adc	r31, r1
    46f8:	80 81       	ld	r24, Z
    46fa:	80 33       	cpi	r24, 0x30	; 48
    46fc:	19 f4       	brne	.+6      	; 0x4704 <vfprintf+0x22c>
    46fe:	11 50       	subi	r17, 0x01	; 1
    4700:	11 11       	cpse	r17, r1
    4702:	f4 cf       	rjmp	.-24     	; 0x46ec <vfprintf+0x214>
    4704:	97 fe       	sbrs	r9, 7
    4706:	0e c0       	rjmp	.+28     	; 0x4724 <vfprintf+0x24c>
    4708:	44 24       	eor	r4, r4
    470a:	43 94       	inc	r4
    470c:	41 0e       	add	r4, r17
    470e:	81 2f       	mov	r24, r17
    4710:	90 e0       	ldi	r25, 0x00	; 0
    4712:	c8 16       	cp	r12, r24
    4714:	d9 06       	cpc	r13, r25
    4716:	2c f4       	brge	.+10     	; 0x4722 <vfprintf+0x24a>
    4718:	1c 19       	sub	r17, r12
    471a:	04 c0       	rjmp	.+8      	; 0x4724 <vfprintf+0x24c>
    471c:	44 24       	eor	r4, r4
    471e:	43 94       	inc	r4
    4720:	01 c0       	rjmp	.+2      	; 0x4724 <vfprintf+0x24c>
    4722:	10 e0       	ldi	r17, 0x00	; 0
    4724:	97 fe       	sbrs	r9, 7
    4726:	06 c0       	rjmp	.+12     	; 0x4734 <vfprintf+0x25c>
    4728:	1c 14       	cp	r1, r12
    472a:	1d 04       	cpc	r1, r13
    472c:	34 f4       	brge	.+12     	; 0x473a <vfprintf+0x262>
    472e:	c6 01       	movw	r24, r12
    4730:	01 96       	adiw	r24, 0x01	; 1
    4732:	05 c0       	rjmp	.+10     	; 0x473e <vfprintf+0x266>
    4734:	85 e0       	ldi	r24, 0x05	; 5
    4736:	90 e0       	ldi	r25, 0x00	; 0
    4738:	02 c0       	rjmp	.+4      	; 0x473e <vfprintf+0x266>
    473a:	81 e0       	ldi	r24, 0x01	; 1
    473c:	90 e0       	ldi	r25, 0x00	; 0
    473e:	01 11       	cpse	r16, r1
    4740:	01 96       	adiw	r24, 0x01	; 1
    4742:	11 23       	and	r17, r17
    4744:	31 f0       	breq	.+12     	; 0x4752 <vfprintf+0x27a>
    4746:	21 2f       	mov	r18, r17
    4748:	30 e0       	ldi	r19, 0x00	; 0
    474a:	2f 5f       	subi	r18, 0xFF	; 255
    474c:	3f 4f       	sbci	r19, 0xFF	; 255
    474e:	82 0f       	add	r24, r18
    4750:	93 1f       	adc	r25, r19
    4752:	25 2d       	mov	r18, r5
    4754:	30 e0       	ldi	r19, 0x00	; 0
    4756:	82 17       	cp	r24, r18
    4758:	93 07       	cpc	r25, r19
    475a:	14 f4       	brge	.+4      	; 0x4760 <vfprintf+0x288>
    475c:	58 1a       	sub	r5, r24
    475e:	01 c0       	rjmp	.+2      	; 0x4762 <vfprintf+0x28a>
    4760:	51 2c       	mov	r5, r1
    4762:	89 2d       	mov	r24, r9
    4764:	89 70       	andi	r24, 0x09	; 9
    4766:	49 f4       	brne	.+18     	; 0x477a <vfprintf+0x2a2>
    4768:	55 20       	and	r5, r5
    476a:	39 f0       	breq	.+14     	; 0x477a <vfprintf+0x2a2>
    476c:	b7 01       	movw	r22, r14
    476e:	80 e2       	ldi	r24, 0x20	; 32
    4770:	90 e0       	ldi	r25, 0x00	; 0
    4772:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <fputc>
    4776:	5a 94       	dec	r5
    4778:	f7 cf       	rjmp	.-18     	; 0x4768 <vfprintf+0x290>
    477a:	00 23       	and	r16, r16
    477c:	29 f0       	breq	.+10     	; 0x4788 <vfprintf+0x2b0>
    477e:	b7 01       	movw	r22, r14
    4780:	80 2f       	mov	r24, r16
    4782:	90 e0       	ldi	r25, 0x00	; 0
    4784:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <fputc>
    4788:	93 fc       	sbrc	r9, 3
    478a:	09 c0       	rjmp	.+18     	; 0x479e <vfprintf+0x2c6>
    478c:	55 20       	and	r5, r5
    478e:	39 f0       	breq	.+14     	; 0x479e <vfprintf+0x2c6>
    4790:	b7 01       	movw	r22, r14
    4792:	80 e3       	ldi	r24, 0x30	; 48
    4794:	90 e0       	ldi	r25, 0x00	; 0
    4796:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <fputc>
    479a:	5a 94       	dec	r5
    479c:	f7 cf       	rjmp	.-18     	; 0x478c <vfprintf+0x2b4>
    479e:	97 fe       	sbrs	r9, 7
    47a0:	4c c0       	rjmp	.+152    	; 0x483a <vfprintf+0x362>
    47a2:	46 01       	movw	r8, r12
    47a4:	d7 fe       	sbrs	r13, 7
    47a6:	02 c0       	rjmp	.+4      	; 0x47ac <vfprintf+0x2d4>
    47a8:	81 2c       	mov	r8, r1
    47aa:	91 2c       	mov	r9, r1
    47ac:	c6 01       	movw	r24, r12
    47ae:	88 19       	sub	r24, r8
    47b0:	99 09       	sbc	r25, r9
    47b2:	f3 01       	movw	r30, r6
    47b4:	e8 0f       	add	r30, r24
    47b6:	f9 1f       	adc	r31, r25
    47b8:	ed 87       	std	Y+13, r30	; 0x0d
    47ba:	fe 87       	std	Y+14, r31	; 0x0e
    47bc:	96 01       	movw	r18, r12
    47be:	24 19       	sub	r18, r4
    47c0:	31 09       	sbc	r19, r1
    47c2:	2f 87       	std	Y+15, r18	; 0x0f
    47c4:	38 8b       	std	Y+16, r19	; 0x10
    47c6:	01 2f       	mov	r16, r17
    47c8:	10 e0       	ldi	r17, 0x00	; 0
    47ca:	11 95       	neg	r17
    47cc:	01 95       	neg	r16
    47ce:	11 09       	sbc	r17, r1
    47d0:	3f ef       	ldi	r19, 0xFF	; 255
    47d2:	83 16       	cp	r8, r19
    47d4:	93 06       	cpc	r9, r19
    47d6:	29 f4       	brne	.+10     	; 0x47e2 <vfprintf+0x30a>
    47d8:	b7 01       	movw	r22, r14
    47da:	8e e2       	ldi	r24, 0x2E	; 46
    47dc:	90 e0       	ldi	r25, 0x00	; 0
    47de:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <fputc>
    47e2:	c8 14       	cp	r12, r8
    47e4:	d9 04       	cpc	r13, r9
    47e6:	4c f0       	brlt	.+18     	; 0x47fa <vfprintf+0x322>
    47e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    47ea:	98 89       	ldd	r25, Y+16	; 0x10
    47ec:	88 15       	cp	r24, r8
    47ee:	99 05       	cpc	r25, r9
    47f0:	24 f4       	brge	.+8      	; 0x47fa <vfprintf+0x322>
    47f2:	ed 85       	ldd	r30, Y+13	; 0x0d
    47f4:	fe 85       	ldd	r31, Y+14	; 0x0e
    47f6:	81 81       	ldd	r24, Z+1	; 0x01
    47f8:	01 c0       	rjmp	.+2      	; 0x47fc <vfprintf+0x324>
    47fa:	80 e3       	ldi	r24, 0x30	; 48
    47fc:	f1 e0       	ldi	r31, 0x01	; 1
    47fe:	8f 1a       	sub	r8, r31
    4800:	91 08       	sbc	r9, r1
    4802:	2d 85       	ldd	r18, Y+13	; 0x0d
    4804:	3e 85       	ldd	r19, Y+14	; 0x0e
    4806:	2f 5f       	subi	r18, 0xFF	; 255
    4808:	3f 4f       	sbci	r19, 0xFF	; 255
    480a:	2d 87       	std	Y+13, r18	; 0x0d
    480c:	3e 87       	std	Y+14, r19	; 0x0e
    480e:	80 16       	cp	r8, r16
    4810:	91 06       	cpc	r9, r17
    4812:	2c f0       	brlt	.+10     	; 0x481e <vfprintf+0x346>
    4814:	b7 01       	movw	r22, r14
    4816:	90 e0       	ldi	r25, 0x00	; 0
    4818:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <fputc>
    481c:	d9 cf       	rjmp	.-78     	; 0x47d0 <vfprintf+0x2f8>
    481e:	c8 14       	cp	r12, r8
    4820:	d9 04       	cpc	r13, r9
    4822:	41 f4       	brne	.+16     	; 0x4834 <vfprintf+0x35c>
    4824:	9a 81       	ldd	r25, Y+2	; 0x02
    4826:	96 33       	cpi	r25, 0x36	; 54
    4828:	20 f4       	brcc	.+8      	; 0x4832 <vfprintf+0x35a>
    482a:	95 33       	cpi	r25, 0x35	; 53
    482c:	19 f4       	brne	.+6      	; 0x4834 <vfprintf+0x35c>
    482e:	3c 85       	ldd	r19, Y+12	; 0x0c
    4830:	34 ff       	sbrs	r19, 4
    4832:	81 e3       	ldi	r24, 0x31	; 49
    4834:	b7 01       	movw	r22, r14
    4836:	90 e0       	ldi	r25, 0x00	; 0
    4838:	4e c0       	rjmp	.+156    	; 0x48d6 <vfprintf+0x3fe>
    483a:	8a 81       	ldd	r24, Y+2	; 0x02
    483c:	81 33       	cpi	r24, 0x31	; 49
    483e:	19 f0       	breq	.+6      	; 0x4846 <vfprintf+0x36e>
    4840:	9c 85       	ldd	r25, Y+12	; 0x0c
    4842:	9f 7e       	andi	r25, 0xEF	; 239
    4844:	9c 87       	std	Y+12, r25	; 0x0c
    4846:	b7 01       	movw	r22, r14
    4848:	90 e0       	ldi	r25, 0x00	; 0
    484a:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <fputc>
    484e:	11 11       	cpse	r17, r1
    4850:	05 c0       	rjmp	.+10     	; 0x485c <vfprintf+0x384>
    4852:	94 fc       	sbrc	r9, 4
    4854:	18 c0       	rjmp	.+48     	; 0x4886 <vfprintf+0x3ae>
    4856:	85 e6       	ldi	r24, 0x65	; 101
    4858:	90 e0       	ldi	r25, 0x00	; 0
    485a:	17 c0       	rjmp	.+46     	; 0x488a <vfprintf+0x3b2>
    485c:	b7 01       	movw	r22, r14
    485e:	8e e2       	ldi	r24, 0x2E	; 46
    4860:	90 e0       	ldi	r25, 0x00	; 0
    4862:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <fputc>
    4866:	1e 5f       	subi	r17, 0xFE	; 254
    4868:	82 e0       	ldi	r24, 0x02	; 2
    486a:	01 e0       	ldi	r16, 0x01	; 1
    486c:	08 0f       	add	r16, r24
    486e:	f3 01       	movw	r30, r6
    4870:	e8 0f       	add	r30, r24
    4872:	f1 1d       	adc	r31, r1
    4874:	80 81       	ld	r24, Z
    4876:	b7 01       	movw	r22, r14
    4878:	90 e0       	ldi	r25, 0x00	; 0
    487a:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <fputc>
    487e:	80 2f       	mov	r24, r16
    4880:	01 13       	cpse	r16, r17
    4882:	f3 cf       	rjmp	.-26     	; 0x486a <vfprintf+0x392>
    4884:	e6 cf       	rjmp	.-52     	; 0x4852 <vfprintf+0x37a>
    4886:	85 e4       	ldi	r24, 0x45	; 69
    4888:	90 e0       	ldi	r25, 0x00	; 0
    488a:	b7 01       	movw	r22, r14
    488c:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <fputc>
    4890:	d7 fc       	sbrc	r13, 7
    4892:	06 c0       	rjmp	.+12     	; 0x48a0 <vfprintf+0x3c8>
    4894:	c1 14       	cp	r12, r1
    4896:	d1 04       	cpc	r13, r1
    4898:	41 f4       	brne	.+16     	; 0x48aa <vfprintf+0x3d2>
    489a:	ec 85       	ldd	r30, Y+12	; 0x0c
    489c:	e4 ff       	sbrs	r30, 4
    489e:	05 c0       	rjmp	.+10     	; 0x48aa <vfprintf+0x3d2>
    48a0:	d1 94       	neg	r13
    48a2:	c1 94       	neg	r12
    48a4:	d1 08       	sbc	r13, r1
    48a6:	8d e2       	ldi	r24, 0x2D	; 45
    48a8:	01 c0       	rjmp	.+2      	; 0x48ac <vfprintf+0x3d4>
    48aa:	8b e2       	ldi	r24, 0x2B	; 43
    48ac:	b7 01       	movw	r22, r14
    48ae:	90 e0       	ldi	r25, 0x00	; 0
    48b0:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <fputc>
    48b4:	80 e3       	ldi	r24, 0x30	; 48
    48b6:	2a e0       	ldi	r18, 0x0A	; 10
    48b8:	c2 16       	cp	r12, r18
    48ba:	d1 04       	cpc	r13, r1
    48bc:	2c f0       	brlt	.+10     	; 0x48c8 <vfprintf+0x3f0>
    48be:	8f 5f       	subi	r24, 0xFF	; 255
    48c0:	fa e0       	ldi	r31, 0x0A	; 10
    48c2:	cf 1a       	sub	r12, r31
    48c4:	d1 08       	sbc	r13, r1
    48c6:	f7 cf       	rjmp	.-18     	; 0x48b6 <vfprintf+0x3de>
    48c8:	b7 01       	movw	r22, r14
    48ca:	90 e0       	ldi	r25, 0x00	; 0
    48cc:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <fputc>
    48d0:	b7 01       	movw	r22, r14
    48d2:	c6 01       	movw	r24, r12
    48d4:	c0 96       	adiw	r24, 0x30	; 48
    48d6:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <fputc>
    48da:	54 c1       	rjmp	.+680    	; 0x4b84 <vfprintf+0x6ac>
    48dc:	83 36       	cpi	r24, 0x63	; 99
    48de:	31 f0       	breq	.+12     	; 0x48ec <vfprintf+0x414>
    48e0:	83 37       	cpi	r24, 0x73	; 115
    48e2:	79 f0       	breq	.+30     	; 0x4902 <vfprintf+0x42a>
    48e4:	83 35       	cpi	r24, 0x53	; 83
    48e6:	09 f0       	breq	.+2      	; 0x48ea <vfprintf+0x412>
    48e8:	56 c0       	rjmp	.+172    	; 0x4996 <vfprintf+0x4be>
    48ea:	20 c0       	rjmp	.+64     	; 0x492c <vfprintf+0x454>
    48ec:	56 01       	movw	r10, r12
    48ee:	32 e0       	ldi	r19, 0x02	; 2
    48f0:	a3 0e       	add	r10, r19
    48f2:	b1 1c       	adc	r11, r1
    48f4:	f6 01       	movw	r30, r12
    48f6:	80 81       	ld	r24, Z
    48f8:	89 83       	std	Y+1, r24	; 0x01
    48fa:	01 e0       	ldi	r16, 0x01	; 1
    48fc:	10 e0       	ldi	r17, 0x00	; 0
    48fe:	63 01       	movw	r12, r6
    4900:	12 c0       	rjmp	.+36     	; 0x4926 <vfprintf+0x44e>
    4902:	56 01       	movw	r10, r12
    4904:	f2 e0       	ldi	r31, 0x02	; 2
    4906:	af 0e       	add	r10, r31
    4908:	b1 1c       	adc	r11, r1
    490a:	f6 01       	movw	r30, r12
    490c:	c0 80       	ld	r12, Z
    490e:	d1 80       	ldd	r13, Z+1	; 0x01
    4910:	96 fe       	sbrs	r9, 6
    4912:	03 c0       	rjmp	.+6      	; 0x491a <vfprintf+0x442>
    4914:	61 2f       	mov	r22, r17
    4916:	70 e0       	ldi	r23, 0x00	; 0
    4918:	02 c0       	rjmp	.+4      	; 0x491e <vfprintf+0x446>
    491a:	6f ef       	ldi	r22, 0xFF	; 255
    491c:	7f ef       	ldi	r23, 0xFF	; 255
    491e:	c6 01       	movw	r24, r12
    4920:	0e 94 41 2a 	call	0x5482	; 0x5482 <strnlen>
    4924:	8c 01       	movw	r16, r24
    4926:	f9 2d       	mov	r31, r9
    4928:	ff 77       	andi	r31, 0x7F	; 127
    492a:	14 c0       	rjmp	.+40     	; 0x4954 <vfprintf+0x47c>
    492c:	56 01       	movw	r10, r12
    492e:	22 e0       	ldi	r18, 0x02	; 2
    4930:	a2 0e       	add	r10, r18
    4932:	b1 1c       	adc	r11, r1
    4934:	f6 01       	movw	r30, r12
    4936:	c0 80       	ld	r12, Z
    4938:	d1 80       	ldd	r13, Z+1	; 0x01
    493a:	96 fe       	sbrs	r9, 6
    493c:	03 c0       	rjmp	.+6      	; 0x4944 <vfprintf+0x46c>
    493e:	61 2f       	mov	r22, r17
    4940:	70 e0       	ldi	r23, 0x00	; 0
    4942:	02 c0       	rjmp	.+4      	; 0x4948 <vfprintf+0x470>
    4944:	6f ef       	ldi	r22, 0xFF	; 255
    4946:	7f ef       	ldi	r23, 0xFF	; 255
    4948:	c6 01       	movw	r24, r12
    494a:	0e 94 36 2a 	call	0x546c	; 0x546c <strnlen_P>
    494e:	8c 01       	movw	r16, r24
    4950:	f9 2d       	mov	r31, r9
    4952:	f0 68       	ori	r31, 0x80	; 128
    4954:	9f 2e       	mov	r9, r31
    4956:	f3 fd       	sbrc	r31, 3
    4958:	1a c0       	rjmp	.+52     	; 0x498e <vfprintf+0x4b6>
    495a:	85 2d       	mov	r24, r5
    495c:	90 e0       	ldi	r25, 0x00	; 0
    495e:	08 17       	cp	r16, r24
    4960:	19 07       	cpc	r17, r25
    4962:	a8 f4       	brcc	.+42     	; 0x498e <vfprintf+0x4b6>
    4964:	b7 01       	movw	r22, r14
    4966:	80 e2       	ldi	r24, 0x20	; 32
    4968:	90 e0       	ldi	r25, 0x00	; 0
    496a:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <fputc>
    496e:	5a 94       	dec	r5
    4970:	f4 cf       	rjmp	.-24     	; 0x495a <vfprintf+0x482>
    4972:	f6 01       	movw	r30, r12
    4974:	97 fc       	sbrc	r9, 7
    4976:	85 91       	lpm	r24, Z+
    4978:	97 fe       	sbrs	r9, 7
    497a:	81 91       	ld	r24, Z+
    497c:	6f 01       	movw	r12, r30
    497e:	b7 01       	movw	r22, r14
    4980:	90 e0       	ldi	r25, 0x00	; 0
    4982:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <fputc>
    4986:	51 10       	cpse	r5, r1
    4988:	5a 94       	dec	r5
    498a:	01 50       	subi	r16, 0x01	; 1
    498c:	11 09       	sbc	r17, r1
    498e:	01 15       	cp	r16, r1
    4990:	11 05       	cpc	r17, r1
    4992:	79 f7       	brne	.-34     	; 0x4972 <vfprintf+0x49a>
    4994:	f7 c0       	rjmp	.+494    	; 0x4b84 <vfprintf+0x6ac>
    4996:	84 36       	cpi	r24, 0x64	; 100
    4998:	11 f0       	breq	.+4      	; 0x499e <vfprintf+0x4c6>
    499a:	89 36       	cpi	r24, 0x69	; 105
    499c:	61 f5       	brne	.+88     	; 0x49f6 <vfprintf+0x51e>
    499e:	56 01       	movw	r10, r12
    49a0:	97 fe       	sbrs	r9, 7
    49a2:	09 c0       	rjmp	.+18     	; 0x49b6 <vfprintf+0x4de>
    49a4:	24 e0       	ldi	r18, 0x04	; 4
    49a6:	a2 0e       	add	r10, r18
    49a8:	b1 1c       	adc	r11, r1
    49aa:	f6 01       	movw	r30, r12
    49ac:	60 81       	ld	r22, Z
    49ae:	71 81       	ldd	r23, Z+1	; 0x01
    49b0:	82 81       	ldd	r24, Z+2	; 0x02
    49b2:	93 81       	ldd	r25, Z+3	; 0x03
    49b4:	0a c0       	rjmp	.+20     	; 0x49ca <vfprintf+0x4f2>
    49b6:	f2 e0       	ldi	r31, 0x02	; 2
    49b8:	af 0e       	add	r10, r31
    49ba:	b1 1c       	adc	r11, r1
    49bc:	f6 01       	movw	r30, r12
    49be:	60 81       	ld	r22, Z
    49c0:	71 81       	ldd	r23, Z+1	; 0x01
    49c2:	07 2e       	mov	r0, r23
    49c4:	00 0c       	add	r0, r0
    49c6:	88 0b       	sbc	r24, r24
    49c8:	99 0b       	sbc	r25, r25
    49ca:	f9 2d       	mov	r31, r9
    49cc:	ff 76       	andi	r31, 0x6F	; 111
    49ce:	9f 2e       	mov	r9, r31
    49d0:	97 ff       	sbrs	r25, 7
    49d2:	09 c0       	rjmp	.+18     	; 0x49e6 <vfprintf+0x50e>
    49d4:	90 95       	com	r25
    49d6:	80 95       	com	r24
    49d8:	70 95       	com	r23
    49da:	61 95       	neg	r22
    49dc:	7f 4f       	sbci	r23, 0xFF	; 255
    49de:	8f 4f       	sbci	r24, 0xFF	; 255
    49e0:	9f 4f       	sbci	r25, 0xFF	; 255
    49e2:	f0 68       	ori	r31, 0x80	; 128
    49e4:	9f 2e       	mov	r9, r31
    49e6:	2a e0       	ldi	r18, 0x0A	; 10
    49e8:	30 e0       	ldi	r19, 0x00	; 0
    49ea:	a3 01       	movw	r20, r6
    49ec:	0e 94 dc 2a 	call	0x55b8	; 0x55b8 <__ultoa_invert>
    49f0:	c8 2e       	mov	r12, r24
    49f2:	c6 18       	sub	r12, r6
    49f4:	3f c0       	rjmp	.+126    	; 0x4a74 <vfprintf+0x59c>
    49f6:	09 2d       	mov	r16, r9
    49f8:	85 37       	cpi	r24, 0x75	; 117
    49fa:	21 f4       	brne	.+8      	; 0x4a04 <vfprintf+0x52c>
    49fc:	0f 7e       	andi	r16, 0xEF	; 239
    49fe:	2a e0       	ldi	r18, 0x0A	; 10
    4a00:	30 e0       	ldi	r19, 0x00	; 0
    4a02:	1d c0       	rjmp	.+58     	; 0x4a3e <vfprintf+0x566>
    4a04:	09 7f       	andi	r16, 0xF9	; 249
    4a06:	8f 36       	cpi	r24, 0x6F	; 111
    4a08:	91 f0       	breq	.+36     	; 0x4a2e <vfprintf+0x556>
    4a0a:	18 f4       	brcc	.+6      	; 0x4a12 <vfprintf+0x53a>
    4a0c:	88 35       	cpi	r24, 0x58	; 88
    4a0e:	59 f0       	breq	.+22     	; 0x4a26 <vfprintf+0x54e>
    4a10:	c3 c0       	rjmp	.+390    	; 0x4b98 <vfprintf+0x6c0>
    4a12:	80 37       	cpi	r24, 0x70	; 112
    4a14:	19 f0       	breq	.+6      	; 0x4a1c <vfprintf+0x544>
    4a16:	88 37       	cpi	r24, 0x78	; 120
    4a18:	11 f0       	breq	.+4      	; 0x4a1e <vfprintf+0x546>
    4a1a:	be c0       	rjmp	.+380    	; 0x4b98 <vfprintf+0x6c0>
    4a1c:	00 61       	ori	r16, 0x10	; 16
    4a1e:	04 ff       	sbrs	r16, 4
    4a20:	09 c0       	rjmp	.+18     	; 0x4a34 <vfprintf+0x55c>
    4a22:	04 60       	ori	r16, 0x04	; 4
    4a24:	07 c0       	rjmp	.+14     	; 0x4a34 <vfprintf+0x55c>
    4a26:	94 fe       	sbrs	r9, 4
    4a28:	08 c0       	rjmp	.+16     	; 0x4a3a <vfprintf+0x562>
    4a2a:	06 60       	ori	r16, 0x06	; 6
    4a2c:	06 c0       	rjmp	.+12     	; 0x4a3a <vfprintf+0x562>
    4a2e:	28 e0       	ldi	r18, 0x08	; 8
    4a30:	30 e0       	ldi	r19, 0x00	; 0
    4a32:	05 c0       	rjmp	.+10     	; 0x4a3e <vfprintf+0x566>
    4a34:	20 e1       	ldi	r18, 0x10	; 16
    4a36:	30 e0       	ldi	r19, 0x00	; 0
    4a38:	02 c0       	rjmp	.+4      	; 0x4a3e <vfprintf+0x566>
    4a3a:	20 e1       	ldi	r18, 0x10	; 16
    4a3c:	32 e0       	ldi	r19, 0x02	; 2
    4a3e:	56 01       	movw	r10, r12
    4a40:	07 ff       	sbrs	r16, 7
    4a42:	09 c0       	rjmp	.+18     	; 0x4a56 <vfprintf+0x57e>
    4a44:	84 e0       	ldi	r24, 0x04	; 4
    4a46:	a8 0e       	add	r10, r24
    4a48:	b1 1c       	adc	r11, r1
    4a4a:	f6 01       	movw	r30, r12
    4a4c:	60 81       	ld	r22, Z
    4a4e:	71 81       	ldd	r23, Z+1	; 0x01
    4a50:	82 81       	ldd	r24, Z+2	; 0x02
    4a52:	93 81       	ldd	r25, Z+3	; 0x03
    4a54:	08 c0       	rjmp	.+16     	; 0x4a66 <vfprintf+0x58e>
    4a56:	f2 e0       	ldi	r31, 0x02	; 2
    4a58:	af 0e       	add	r10, r31
    4a5a:	b1 1c       	adc	r11, r1
    4a5c:	f6 01       	movw	r30, r12
    4a5e:	60 81       	ld	r22, Z
    4a60:	71 81       	ldd	r23, Z+1	; 0x01
    4a62:	80 e0       	ldi	r24, 0x00	; 0
    4a64:	90 e0       	ldi	r25, 0x00	; 0
    4a66:	a3 01       	movw	r20, r6
    4a68:	0e 94 dc 2a 	call	0x55b8	; 0x55b8 <__ultoa_invert>
    4a6c:	c8 2e       	mov	r12, r24
    4a6e:	c6 18       	sub	r12, r6
    4a70:	0f 77       	andi	r16, 0x7F	; 127
    4a72:	90 2e       	mov	r9, r16
    4a74:	96 fe       	sbrs	r9, 6
    4a76:	0b c0       	rjmp	.+22     	; 0x4a8e <vfprintf+0x5b6>
    4a78:	09 2d       	mov	r16, r9
    4a7a:	0e 7f       	andi	r16, 0xFE	; 254
    4a7c:	c1 16       	cp	r12, r17
    4a7e:	50 f4       	brcc	.+20     	; 0x4a94 <vfprintf+0x5bc>
    4a80:	94 fe       	sbrs	r9, 4
    4a82:	0a c0       	rjmp	.+20     	; 0x4a98 <vfprintf+0x5c0>
    4a84:	92 fc       	sbrc	r9, 2
    4a86:	08 c0       	rjmp	.+16     	; 0x4a98 <vfprintf+0x5c0>
    4a88:	09 2d       	mov	r16, r9
    4a8a:	0e 7e       	andi	r16, 0xEE	; 238
    4a8c:	05 c0       	rjmp	.+10     	; 0x4a98 <vfprintf+0x5c0>
    4a8e:	dc 2c       	mov	r13, r12
    4a90:	09 2d       	mov	r16, r9
    4a92:	03 c0       	rjmp	.+6      	; 0x4a9a <vfprintf+0x5c2>
    4a94:	dc 2c       	mov	r13, r12
    4a96:	01 c0       	rjmp	.+2      	; 0x4a9a <vfprintf+0x5c2>
    4a98:	d1 2e       	mov	r13, r17
    4a9a:	04 ff       	sbrs	r16, 4
    4a9c:	0d c0       	rjmp	.+26     	; 0x4ab8 <vfprintf+0x5e0>
    4a9e:	fe 01       	movw	r30, r28
    4aa0:	ec 0d       	add	r30, r12
    4aa2:	f1 1d       	adc	r31, r1
    4aa4:	80 81       	ld	r24, Z
    4aa6:	80 33       	cpi	r24, 0x30	; 48
    4aa8:	11 f4       	brne	.+4      	; 0x4aae <vfprintf+0x5d6>
    4aaa:	09 7e       	andi	r16, 0xE9	; 233
    4aac:	09 c0       	rjmp	.+18     	; 0x4ac0 <vfprintf+0x5e8>
    4aae:	02 ff       	sbrs	r16, 2
    4ab0:	06 c0       	rjmp	.+12     	; 0x4abe <vfprintf+0x5e6>
    4ab2:	d3 94       	inc	r13
    4ab4:	d3 94       	inc	r13
    4ab6:	04 c0       	rjmp	.+8      	; 0x4ac0 <vfprintf+0x5e8>
    4ab8:	80 2f       	mov	r24, r16
    4aba:	86 78       	andi	r24, 0x86	; 134
    4abc:	09 f0       	breq	.+2      	; 0x4ac0 <vfprintf+0x5e8>
    4abe:	d3 94       	inc	r13
    4ac0:	03 fd       	sbrc	r16, 3
    4ac2:	11 c0       	rjmp	.+34     	; 0x4ae6 <vfprintf+0x60e>
    4ac4:	00 ff       	sbrs	r16, 0
    4ac6:	06 c0       	rjmp	.+12     	; 0x4ad4 <vfprintf+0x5fc>
    4ac8:	1c 2d       	mov	r17, r12
    4aca:	d5 14       	cp	r13, r5
    4acc:	80 f4       	brcc	.+32     	; 0x4aee <vfprintf+0x616>
    4ace:	15 0d       	add	r17, r5
    4ad0:	1d 19       	sub	r17, r13
    4ad2:	0d c0       	rjmp	.+26     	; 0x4aee <vfprintf+0x616>
    4ad4:	d5 14       	cp	r13, r5
    4ad6:	58 f4       	brcc	.+22     	; 0x4aee <vfprintf+0x616>
    4ad8:	b7 01       	movw	r22, r14
    4ada:	80 e2       	ldi	r24, 0x20	; 32
    4adc:	90 e0       	ldi	r25, 0x00	; 0
    4ade:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <fputc>
    4ae2:	d3 94       	inc	r13
    4ae4:	f7 cf       	rjmp	.-18     	; 0x4ad4 <vfprintf+0x5fc>
    4ae6:	d5 14       	cp	r13, r5
    4ae8:	10 f4       	brcc	.+4      	; 0x4aee <vfprintf+0x616>
    4aea:	5d 18       	sub	r5, r13
    4aec:	01 c0       	rjmp	.+2      	; 0x4af0 <vfprintf+0x618>
    4aee:	51 2c       	mov	r5, r1
    4af0:	04 ff       	sbrs	r16, 4
    4af2:	10 c0       	rjmp	.+32     	; 0x4b14 <vfprintf+0x63c>
    4af4:	b7 01       	movw	r22, r14
    4af6:	80 e3       	ldi	r24, 0x30	; 48
    4af8:	90 e0       	ldi	r25, 0x00	; 0
    4afa:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <fputc>
    4afe:	02 ff       	sbrs	r16, 2
    4b00:	17 c0       	rjmp	.+46     	; 0x4b30 <vfprintf+0x658>
    4b02:	01 fd       	sbrc	r16, 1
    4b04:	03 c0       	rjmp	.+6      	; 0x4b0c <vfprintf+0x634>
    4b06:	88 e7       	ldi	r24, 0x78	; 120
    4b08:	90 e0       	ldi	r25, 0x00	; 0
    4b0a:	02 c0       	rjmp	.+4      	; 0x4b10 <vfprintf+0x638>
    4b0c:	88 e5       	ldi	r24, 0x58	; 88
    4b0e:	90 e0       	ldi	r25, 0x00	; 0
    4b10:	b7 01       	movw	r22, r14
    4b12:	0c c0       	rjmp	.+24     	; 0x4b2c <vfprintf+0x654>
    4b14:	80 2f       	mov	r24, r16
    4b16:	86 78       	andi	r24, 0x86	; 134
    4b18:	59 f0       	breq	.+22     	; 0x4b30 <vfprintf+0x658>
    4b1a:	01 ff       	sbrs	r16, 1
    4b1c:	02 c0       	rjmp	.+4      	; 0x4b22 <vfprintf+0x64a>
    4b1e:	8b e2       	ldi	r24, 0x2B	; 43
    4b20:	01 c0       	rjmp	.+2      	; 0x4b24 <vfprintf+0x64c>
    4b22:	80 e2       	ldi	r24, 0x20	; 32
    4b24:	07 fd       	sbrc	r16, 7
    4b26:	8d e2       	ldi	r24, 0x2D	; 45
    4b28:	b7 01       	movw	r22, r14
    4b2a:	90 e0       	ldi	r25, 0x00	; 0
    4b2c:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <fputc>
    4b30:	c1 16       	cp	r12, r17
    4b32:	38 f4       	brcc	.+14     	; 0x4b42 <vfprintf+0x66a>
    4b34:	b7 01       	movw	r22, r14
    4b36:	80 e3       	ldi	r24, 0x30	; 48
    4b38:	90 e0       	ldi	r25, 0x00	; 0
    4b3a:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <fputc>
    4b3e:	11 50       	subi	r17, 0x01	; 1
    4b40:	f7 cf       	rjmp	.-18     	; 0x4b30 <vfprintf+0x658>
    4b42:	ca 94       	dec	r12
    4b44:	f3 01       	movw	r30, r6
    4b46:	ec 0d       	add	r30, r12
    4b48:	f1 1d       	adc	r31, r1
    4b4a:	80 81       	ld	r24, Z
    4b4c:	b7 01       	movw	r22, r14
    4b4e:	90 e0       	ldi	r25, 0x00	; 0
    4b50:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <fputc>
    4b54:	c1 10       	cpse	r12, r1
    4b56:	f5 cf       	rjmp	.-22     	; 0x4b42 <vfprintf+0x66a>
    4b58:	15 c0       	rjmp	.+42     	; 0x4b84 <vfprintf+0x6ac>
    4b5a:	f4 e0       	ldi	r31, 0x04	; 4
    4b5c:	f5 15       	cp	r31, r5
    4b5e:	60 f5       	brcc	.+88     	; 0x4bb8 <vfprintf+0x6e0>
    4b60:	84 e0       	ldi	r24, 0x04	; 4
    4b62:	58 1a       	sub	r5, r24
    4b64:	93 fe       	sbrs	r9, 3
    4b66:	1f c0       	rjmp	.+62     	; 0x4ba6 <vfprintf+0x6ce>
    4b68:	01 11       	cpse	r16, r1
    4b6a:	27 c0       	rjmp	.+78     	; 0x4bba <vfprintf+0x6e2>
    4b6c:	2c 85       	ldd	r18, Y+12	; 0x0c
    4b6e:	23 ff       	sbrs	r18, 3
    4b70:	2a c0       	rjmp	.+84     	; 0x4bc6 <vfprintf+0x6ee>
    4b72:	00 e6       	ldi	r16, 0x60	; 96
    4b74:	12 e0       	ldi	r17, 0x02	; 2
    4b76:	39 2d       	mov	r19, r9
    4b78:	30 71       	andi	r19, 0x10	; 16
    4b7a:	93 2e       	mov	r9, r19
    4b7c:	f8 01       	movw	r30, r16
    4b7e:	84 91       	lpm	r24, Z
    4b80:	81 11       	cpse	r24, r1
    4b82:	24 c0       	rjmp	.+72     	; 0x4bcc <vfprintf+0x6f4>
    4b84:	55 20       	and	r5, r5
    4b86:	09 f4       	brne	.+2      	; 0x4b8a <vfprintf+0x6b2>
    4b88:	e4 cc       	rjmp	.-1592   	; 0x4552 <vfprintf+0x7a>
    4b8a:	b7 01       	movw	r22, r14
    4b8c:	80 e2       	ldi	r24, 0x20	; 32
    4b8e:	90 e0       	ldi	r25, 0x00	; 0
    4b90:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <fputc>
    4b94:	5a 94       	dec	r5
    4b96:	f6 cf       	rjmp	.-20     	; 0x4b84 <vfprintf+0x6ac>
    4b98:	f7 01       	movw	r30, r14
    4b9a:	86 81       	ldd	r24, Z+6	; 0x06
    4b9c:	97 81       	ldd	r25, Z+7	; 0x07
    4b9e:	26 c0       	rjmp	.+76     	; 0x4bec <vfprintf+0x714>
    4ba0:	8f ef       	ldi	r24, 0xFF	; 255
    4ba2:	9f ef       	ldi	r25, 0xFF	; 255
    4ba4:	23 c0       	rjmp	.+70     	; 0x4bec <vfprintf+0x714>
    4ba6:	b7 01       	movw	r22, r14
    4ba8:	80 e2       	ldi	r24, 0x20	; 32
    4baa:	90 e0       	ldi	r25, 0x00	; 0
    4bac:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <fputc>
    4bb0:	5a 94       	dec	r5
    4bb2:	51 10       	cpse	r5, r1
    4bb4:	f8 cf       	rjmp	.-16     	; 0x4ba6 <vfprintf+0x6ce>
    4bb6:	d8 cf       	rjmp	.-80     	; 0x4b68 <vfprintf+0x690>
    4bb8:	51 2c       	mov	r5, r1
    4bba:	b7 01       	movw	r22, r14
    4bbc:	80 2f       	mov	r24, r16
    4bbe:	90 e0       	ldi	r25, 0x00	; 0
    4bc0:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <fputc>
    4bc4:	d3 cf       	rjmp	.-90     	; 0x4b6c <vfprintf+0x694>
    4bc6:	04 e6       	ldi	r16, 0x64	; 100
    4bc8:	12 e0       	ldi	r17, 0x02	; 2
    4bca:	d5 cf       	rjmp	.-86     	; 0x4b76 <vfprintf+0x69e>
    4bcc:	91 10       	cpse	r9, r1
    4bce:	80 52       	subi	r24, 0x20	; 32
    4bd0:	b7 01       	movw	r22, r14
    4bd2:	90 e0       	ldi	r25, 0x00	; 0
    4bd4:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <fputc>
    4bd8:	0f 5f       	subi	r16, 0xFF	; 255
    4bda:	1f 4f       	sbci	r17, 0xFF	; 255
    4bdc:	cf cf       	rjmp	.-98     	; 0x4b7c <vfprintf+0x6a4>
    4bde:	23 e0       	ldi	r18, 0x03	; 3
    4be0:	25 15       	cp	r18, r5
    4be2:	10 f4       	brcc	.+4      	; 0x4be8 <vfprintf+0x710>
    4be4:	83 e0       	ldi	r24, 0x03	; 3
    4be6:	bd cf       	rjmp	.-134    	; 0x4b62 <vfprintf+0x68a>
    4be8:	51 2c       	mov	r5, r1
    4bea:	c0 cf       	rjmp	.-128    	; 0x4b6c <vfprintf+0x694>
    4bec:	60 96       	adiw	r28, 0x10	; 16
    4bee:	cd bf       	out	0x3d, r28	; 61
    4bf0:	de bf       	out	0x3e, r29	; 62
    4bf2:	df 91       	pop	r29
    4bf4:	cf 91       	pop	r28
    4bf6:	1f 91       	pop	r17
    4bf8:	0f 91       	pop	r16
    4bfa:	ff 90       	pop	r15
    4bfc:	ef 90       	pop	r14
    4bfe:	df 90       	pop	r13
    4c00:	cf 90       	pop	r12
    4c02:	bf 90       	pop	r11
    4c04:	af 90       	pop	r10
    4c06:	9f 90       	pop	r9
    4c08:	8f 90       	pop	r8
    4c0a:	7f 90       	pop	r7
    4c0c:	6f 90       	pop	r6
    4c0e:	5f 90       	pop	r5
    4c10:	4f 90       	pop	r4
    4c12:	3f 90       	pop	r3
    4c14:	2f 90       	pop	r2
    4c16:	08 95       	ret

00004c18 <__mulsi3>:
    4c18:	db 01       	movw	r26, r22
    4c1a:	8f 93       	push	r24
    4c1c:	9f 93       	push	r25
    4c1e:	0e 94 25 26 	call	0x4c4a	; 0x4c4a <__muluhisi3>
    4c22:	bf 91       	pop	r27
    4c24:	af 91       	pop	r26
    4c26:	a2 9f       	mul	r26, r18
    4c28:	80 0d       	add	r24, r0
    4c2a:	91 1d       	adc	r25, r1
    4c2c:	a3 9f       	mul	r26, r19
    4c2e:	90 0d       	add	r25, r0
    4c30:	b2 9f       	mul	r27, r18
    4c32:	90 0d       	add	r25, r0
    4c34:	11 24       	eor	r1, r1
    4c36:	08 95       	ret

00004c38 <__tablejump2__>:
    4c38:	ee 0f       	add	r30, r30
    4c3a:	ff 1f       	adc	r31, r31
    4c3c:	00 24       	eor	r0, r0
    4c3e:	00 1c       	adc	r0, r0
    4c40:	0b be       	out	0x3b, r0	; 59
    4c42:	07 90       	elpm	r0, Z+
    4c44:	f6 91       	elpm	r31, Z
    4c46:	e0 2d       	mov	r30, r0
    4c48:	09 94       	ijmp

00004c4a <__muluhisi3>:
    4c4a:	0e 94 6c 26 	call	0x4cd8	; 0x4cd8 <__umulhisi3>
    4c4e:	a5 9f       	mul	r26, r21
    4c50:	90 0d       	add	r25, r0
    4c52:	b4 9f       	mul	r27, r20
    4c54:	90 0d       	add	r25, r0
    4c56:	a4 9f       	mul	r26, r20
    4c58:	80 0d       	add	r24, r0
    4c5a:	91 1d       	adc	r25, r1
    4c5c:	11 24       	eor	r1, r1
    4c5e:	08 95       	ret

00004c60 <__ashrdi3>:
    4c60:	97 fb       	bst	r25, 7
    4c62:	10 f8       	bld	r1, 0

00004c64 <__lshrdi3>:
    4c64:	16 94       	lsr	r1
    4c66:	00 08       	sbc	r0, r0
    4c68:	0f 93       	push	r16
    4c6a:	08 30       	cpi	r16, 0x08	; 8
    4c6c:	98 f0       	brcs	.+38     	; 0x4c94 <__lshrdi3+0x30>
    4c6e:	08 50       	subi	r16, 0x08	; 8
    4c70:	23 2f       	mov	r18, r19
    4c72:	34 2f       	mov	r19, r20
    4c74:	45 2f       	mov	r20, r21
    4c76:	56 2f       	mov	r21, r22
    4c78:	67 2f       	mov	r22, r23
    4c7a:	78 2f       	mov	r23, r24
    4c7c:	89 2f       	mov	r24, r25
    4c7e:	90 2d       	mov	r25, r0
    4c80:	f4 cf       	rjmp	.-24     	; 0x4c6a <__lshrdi3+0x6>
    4c82:	05 94       	asr	r0
    4c84:	97 95       	ror	r25
    4c86:	87 95       	ror	r24
    4c88:	77 95       	ror	r23
    4c8a:	67 95       	ror	r22
    4c8c:	57 95       	ror	r21
    4c8e:	47 95       	ror	r20
    4c90:	37 95       	ror	r19
    4c92:	27 95       	ror	r18
    4c94:	0a 95       	dec	r16
    4c96:	aa f7       	brpl	.-22     	; 0x4c82 <__lshrdi3+0x1e>
    4c98:	0f 91       	pop	r16
    4c9a:	08 95       	ret

00004c9c <__adddi3>:
    4c9c:	2a 0d       	add	r18, r10
    4c9e:	3b 1d       	adc	r19, r11
    4ca0:	4c 1d       	adc	r20, r12
    4ca2:	5d 1d       	adc	r21, r13
    4ca4:	6e 1d       	adc	r22, r14
    4ca6:	7f 1d       	adc	r23, r15
    4ca8:	80 1f       	adc	r24, r16
    4caa:	91 1f       	adc	r25, r17
    4cac:	08 95       	ret

00004cae <__adddi3_s8>:
    4cae:	00 24       	eor	r0, r0
    4cb0:	a7 fd       	sbrc	r26, 7
    4cb2:	00 94       	com	r0
    4cb4:	2a 0f       	add	r18, r26
    4cb6:	30 1d       	adc	r19, r0
    4cb8:	40 1d       	adc	r20, r0
    4cba:	50 1d       	adc	r21, r0
    4cbc:	60 1d       	adc	r22, r0
    4cbe:	70 1d       	adc	r23, r0
    4cc0:	80 1d       	adc	r24, r0
    4cc2:	90 1d       	adc	r25, r0
    4cc4:	08 95       	ret

00004cc6 <__cmpdi2>:
    4cc6:	2a 15       	cp	r18, r10
    4cc8:	3b 05       	cpc	r19, r11
    4cca:	4c 05       	cpc	r20, r12
    4ccc:	5d 05       	cpc	r21, r13
    4cce:	6e 05       	cpc	r22, r14
    4cd0:	7f 05       	cpc	r23, r15
    4cd2:	80 07       	cpc	r24, r16
    4cd4:	91 07       	cpc	r25, r17
    4cd6:	08 95       	ret

00004cd8 <__umulhisi3>:
    4cd8:	a2 9f       	mul	r26, r18
    4cda:	b0 01       	movw	r22, r0
    4cdc:	b3 9f       	mul	r27, r19
    4cde:	c0 01       	movw	r24, r0
    4ce0:	a3 9f       	mul	r26, r19
    4ce2:	70 0d       	add	r23, r0
    4ce4:	81 1d       	adc	r24, r1
    4ce6:	11 24       	eor	r1, r1
    4ce8:	91 1d       	adc	r25, r1
    4cea:	b2 9f       	mul	r27, r18
    4cec:	70 0d       	add	r23, r0
    4cee:	81 1d       	adc	r24, r1
    4cf0:	11 24       	eor	r1, r1
    4cf2:	91 1d       	adc	r25, r1
    4cf4:	08 95       	ret

00004cf6 <malloc>:
    4cf6:	0f 93       	push	r16
    4cf8:	1f 93       	push	r17
    4cfa:	cf 93       	push	r28
    4cfc:	df 93       	push	r29
    4cfe:	82 30       	cpi	r24, 0x02	; 2
    4d00:	91 05       	cpc	r25, r1
    4d02:	10 f4       	brcc	.+4      	; 0x4d08 <malloc+0x12>
    4d04:	82 e0       	ldi	r24, 0x02	; 2
    4d06:	90 e0       	ldi	r25, 0x00	; 0
    4d08:	e0 91 d1 4c 	lds	r30, 0x4CD1	; 0x804cd1 <__flp>
    4d0c:	f0 91 d2 4c 	lds	r31, 0x4CD2	; 0x804cd2 <__flp+0x1>
    4d10:	20 e0       	ldi	r18, 0x00	; 0
    4d12:	30 e0       	ldi	r19, 0x00	; 0
    4d14:	a0 e0       	ldi	r26, 0x00	; 0
    4d16:	b0 e0       	ldi	r27, 0x00	; 0
    4d18:	30 97       	sbiw	r30, 0x00	; 0
    4d1a:	19 f1       	breq	.+70     	; 0x4d62 <malloc+0x6c>
    4d1c:	40 81       	ld	r20, Z
    4d1e:	51 81       	ldd	r21, Z+1	; 0x01
    4d20:	02 81       	ldd	r16, Z+2	; 0x02
    4d22:	13 81       	ldd	r17, Z+3	; 0x03
    4d24:	48 17       	cp	r20, r24
    4d26:	59 07       	cpc	r21, r25
    4d28:	c8 f0       	brcs	.+50     	; 0x4d5c <malloc+0x66>
    4d2a:	84 17       	cp	r24, r20
    4d2c:	95 07       	cpc	r25, r21
    4d2e:	69 f4       	brne	.+26     	; 0x4d4a <malloc+0x54>
    4d30:	10 97       	sbiw	r26, 0x00	; 0
    4d32:	31 f0       	breq	.+12     	; 0x4d40 <malloc+0x4a>
    4d34:	12 96       	adiw	r26, 0x02	; 2
    4d36:	0c 93       	st	X, r16
    4d38:	12 97       	sbiw	r26, 0x02	; 2
    4d3a:	13 96       	adiw	r26, 0x03	; 3
    4d3c:	1c 93       	st	X, r17
    4d3e:	27 c0       	rjmp	.+78     	; 0x4d8e <malloc+0x98>
    4d40:	00 93 d1 4c 	sts	0x4CD1, r16	; 0x804cd1 <__flp>
    4d44:	10 93 d2 4c 	sts	0x4CD2, r17	; 0x804cd2 <__flp+0x1>
    4d48:	22 c0       	rjmp	.+68     	; 0x4d8e <malloc+0x98>
    4d4a:	21 15       	cp	r18, r1
    4d4c:	31 05       	cpc	r19, r1
    4d4e:	19 f0       	breq	.+6      	; 0x4d56 <malloc+0x60>
    4d50:	42 17       	cp	r20, r18
    4d52:	53 07       	cpc	r21, r19
    4d54:	18 f4       	brcc	.+6      	; 0x4d5c <malloc+0x66>
    4d56:	9a 01       	movw	r18, r20
    4d58:	bd 01       	movw	r22, r26
    4d5a:	ef 01       	movw	r28, r30
    4d5c:	df 01       	movw	r26, r30
    4d5e:	f8 01       	movw	r30, r16
    4d60:	db cf       	rjmp	.-74     	; 0x4d18 <malloc+0x22>
    4d62:	21 15       	cp	r18, r1
    4d64:	31 05       	cpc	r19, r1
    4d66:	f9 f0       	breq	.+62     	; 0x4da6 <malloc+0xb0>
    4d68:	28 1b       	sub	r18, r24
    4d6a:	39 0b       	sbc	r19, r25
    4d6c:	24 30       	cpi	r18, 0x04	; 4
    4d6e:	31 05       	cpc	r19, r1
    4d70:	80 f4       	brcc	.+32     	; 0x4d92 <malloc+0x9c>
    4d72:	8a 81       	ldd	r24, Y+2	; 0x02
    4d74:	9b 81       	ldd	r25, Y+3	; 0x03
    4d76:	61 15       	cp	r22, r1
    4d78:	71 05       	cpc	r23, r1
    4d7a:	21 f0       	breq	.+8      	; 0x4d84 <malloc+0x8e>
    4d7c:	fb 01       	movw	r30, r22
    4d7e:	82 83       	std	Z+2, r24	; 0x02
    4d80:	93 83       	std	Z+3, r25	; 0x03
    4d82:	04 c0       	rjmp	.+8      	; 0x4d8c <malloc+0x96>
    4d84:	80 93 d1 4c 	sts	0x4CD1, r24	; 0x804cd1 <__flp>
    4d88:	90 93 d2 4c 	sts	0x4CD2, r25	; 0x804cd2 <__flp+0x1>
    4d8c:	fe 01       	movw	r30, r28
    4d8e:	32 96       	adiw	r30, 0x02	; 2
    4d90:	44 c0       	rjmp	.+136    	; 0x4e1a <malloc+0x124>
    4d92:	fe 01       	movw	r30, r28
    4d94:	e2 0f       	add	r30, r18
    4d96:	f3 1f       	adc	r31, r19
    4d98:	81 93       	st	Z+, r24
    4d9a:	91 93       	st	Z+, r25
    4d9c:	22 50       	subi	r18, 0x02	; 2
    4d9e:	31 09       	sbc	r19, r1
    4da0:	28 83       	st	Y, r18
    4da2:	39 83       	std	Y+1, r19	; 0x01
    4da4:	3a c0       	rjmp	.+116    	; 0x4e1a <malloc+0x124>
    4da6:	20 91 cf 4c 	lds	r18, 0x4CCF	; 0x804ccf <__brkval>
    4daa:	30 91 d0 4c 	lds	r19, 0x4CD0	; 0x804cd0 <__brkval+0x1>
    4dae:	23 2b       	or	r18, r19
    4db0:	41 f4       	brne	.+16     	; 0x4dc2 <malloc+0xcc>
    4db2:	20 91 02 40 	lds	r18, 0x4002	; 0x804002 <__malloc_heap_start>
    4db6:	30 91 03 40 	lds	r19, 0x4003	; 0x804003 <__malloc_heap_start+0x1>
    4dba:	20 93 cf 4c 	sts	0x4CCF, r18	; 0x804ccf <__brkval>
    4dbe:	30 93 d0 4c 	sts	0x4CD0, r19	; 0x804cd0 <__brkval+0x1>
    4dc2:	20 91 00 40 	lds	r18, 0x4000	; 0x804000 <__DATA_REGION_ORIGIN__>
    4dc6:	30 91 01 40 	lds	r19, 0x4001	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
    4dca:	21 15       	cp	r18, r1
    4dcc:	31 05       	cpc	r19, r1
    4dce:	41 f4       	brne	.+16     	; 0x4de0 <malloc+0xea>
    4dd0:	2d b7       	in	r18, 0x3d	; 61
    4dd2:	3e b7       	in	r19, 0x3e	; 62
    4dd4:	40 91 04 40 	lds	r20, 0x4004	; 0x804004 <__malloc_margin>
    4dd8:	50 91 05 40 	lds	r21, 0x4005	; 0x804005 <__malloc_margin+0x1>
    4ddc:	24 1b       	sub	r18, r20
    4dde:	35 0b       	sbc	r19, r21
    4de0:	e0 91 cf 4c 	lds	r30, 0x4CCF	; 0x804ccf <__brkval>
    4de4:	f0 91 d0 4c 	lds	r31, 0x4CD0	; 0x804cd0 <__brkval+0x1>
    4de8:	e2 17       	cp	r30, r18
    4dea:	f3 07       	cpc	r31, r19
    4dec:	a0 f4       	brcc	.+40     	; 0x4e16 <malloc+0x120>
    4dee:	2e 1b       	sub	r18, r30
    4df0:	3f 0b       	sbc	r19, r31
    4df2:	28 17       	cp	r18, r24
    4df4:	39 07       	cpc	r19, r25
    4df6:	78 f0       	brcs	.+30     	; 0x4e16 <malloc+0x120>
    4df8:	ac 01       	movw	r20, r24
    4dfa:	4e 5f       	subi	r20, 0xFE	; 254
    4dfc:	5f 4f       	sbci	r21, 0xFF	; 255
    4dfe:	24 17       	cp	r18, r20
    4e00:	35 07       	cpc	r19, r21
    4e02:	48 f0       	brcs	.+18     	; 0x4e16 <malloc+0x120>
    4e04:	4e 0f       	add	r20, r30
    4e06:	5f 1f       	adc	r21, r31
    4e08:	40 93 cf 4c 	sts	0x4CCF, r20	; 0x804ccf <__brkval>
    4e0c:	50 93 d0 4c 	sts	0x4CD0, r21	; 0x804cd0 <__brkval+0x1>
    4e10:	81 93       	st	Z+, r24
    4e12:	91 93       	st	Z+, r25
    4e14:	02 c0       	rjmp	.+4      	; 0x4e1a <malloc+0x124>
    4e16:	e0 e0       	ldi	r30, 0x00	; 0
    4e18:	f0 e0       	ldi	r31, 0x00	; 0
    4e1a:	cf 01       	movw	r24, r30
    4e1c:	df 91       	pop	r29
    4e1e:	cf 91       	pop	r28
    4e20:	1f 91       	pop	r17
    4e22:	0f 91       	pop	r16
    4e24:	08 95       	ret

00004e26 <free>:
    4e26:	cf 93       	push	r28
    4e28:	df 93       	push	r29
    4e2a:	00 97       	sbiw	r24, 0x00	; 0
    4e2c:	09 f4       	brne	.+2      	; 0x4e30 <free+0xa>
    4e2e:	81 c0       	rjmp	.+258    	; 0x4f32 <free+0x10c>
    4e30:	fc 01       	movw	r30, r24
    4e32:	32 97       	sbiw	r30, 0x02	; 2
    4e34:	12 82       	std	Z+2, r1	; 0x02
    4e36:	13 82       	std	Z+3, r1	; 0x03
    4e38:	a0 91 d1 4c 	lds	r26, 0x4CD1	; 0x804cd1 <__flp>
    4e3c:	b0 91 d2 4c 	lds	r27, 0x4CD2	; 0x804cd2 <__flp+0x1>
    4e40:	10 97       	sbiw	r26, 0x00	; 0
    4e42:	81 f4       	brne	.+32     	; 0x4e64 <free+0x3e>
    4e44:	20 81       	ld	r18, Z
    4e46:	31 81       	ldd	r19, Z+1	; 0x01
    4e48:	82 0f       	add	r24, r18
    4e4a:	93 1f       	adc	r25, r19
    4e4c:	20 91 cf 4c 	lds	r18, 0x4CCF	; 0x804ccf <__brkval>
    4e50:	30 91 d0 4c 	lds	r19, 0x4CD0	; 0x804cd0 <__brkval+0x1>
    4e54:	28 17       	cp	r18, r24
    4e56:	39 07       	cpc	r19, r25
    4e58:	51 f5       	brne	.+84     	; 0x4eae <free+0x88>
    4e5a:	e0 93 cf 4c 	sts	0x4CCF, r30	; 0x804ccf <__brkval>
    4e5e:	f0 93 d0 4c 	sts	0x4CD0, r31	; 0x804cd0 <__brkval+0x1>
    4e62:	67 c0       	rjmp	.+206    	; 0x4f32 <free+0x10c>
    4e64:	ed 01       	movw	r28, r26
    4e66:	20 e0       	ldi	r18, 0x00	; 0
    4e68:	30 e0       	ldi	r19, 0x00	; 0
    4e6a:	ce 17       	cp	r28, r30
    4e6c:	df 07       	cpc	r29, r31
    4e6e:	40 f4       	brcc	.+16     	; 0x4e80 <free+0x5a>
    4e70:	4a 81       	ldd	r20, Y+2	; 0x02
    4e72:	5b 81       	ldd	r21, Y+3	; 0x03
    4e74:	9e 01       	movw	r18, r28
    4e76:	41 15       	cp	r20, r1
    4e78:	51 05       	cpc	r21, r1
    4e7a:	f1 f0       	breq	.+60     	; 0x4eb8 <free+0x92>
    4e7c:	ea 01       	movw	r28, r20
    4e7e:	f5 cf       	rjmp	.-22     	; 0x4e6a <free+0x44>
    4e80:	c2 83       	std	Z+2, r28	; 0x02
    4e82:	d3 83       	std	Z+3, r29	; 0x03
    4e84:	40 81       	ld	r20, Z
    4e86:	51 81       	ldd	r21, Z+1	; 0x01
    4e88:	84 0f       	add	r24, r20
    4e8a:	95 1f       	adc	r25, r21
    4e8c:	c8 17       	cp	r28, r24
    4e8e:	d9 07       	cpc	r29, r25
    4e90:	59 f4       	brne	.+22     	; 0x4ea8 <free+0x82>
    4e92:	88 81       	ld	r24, Y
    4e94:	99 81       	ldd	r25, Y+1	; 0x01
    4e96:	84 0f       	add	r24, r20
    4e98:	95 1f       	adc	r25, r21
    4e9a:	02 96       	adiw	r24, 0x02	; 2
    4e9c:	80 83       	st	Z, r24
    4e9e:	91 83       	std	Z+1, r25	; 0x01
    4ea0:	8a 81       	ldd	r24, Y+2	; 0x02
    4ea2:	9b 81       	ldd	r25, Y+3	; 0x03
    4ea4:	82 83       	std	Z+2, r24	; 0x02
    4ea6:	93 83       	std	Z+3, r25	; 0x03
    4ea8:	21 15       	cp	r18, r1
    4eaa:	31 05       	cpc	r19, r1
    4eac:	29 f4       	brne	.+10     	; 0x4eb8 <free+0x92>
    4eae:	e0 93 d1 4c 	sts	0x4CD1, r30	; 0x804cd1 <__flp>
    4eb2:	f0 93 d2 4c 	sts	0x4CD2, r31	; 0x804cd2 <__flp+0x1>
    4eb6:	3d c0       	rjmp	.+122    	; 0x4f32 <free+0x10c>
    4eb8:	e9 01       	movw	r28, r18
    4eba:	ea 83       	std	Y+2, r30	; 0x02
    4ebc:	fb 83       	std	Y+3, r31	; 0x03
    4ebe:	49 91       	ld	r20, Y+
    4ec0:	59 91       	ld	r21, Y+
    4ec2:	c4 0f       	add	r28, r20
    4ec4:	d5 1f       	adc	r29, r21
    4ec6:	ec 17       	cp	r30, r28
    4ec8:	fd 07       	cpc	r31, r29
    4eca:	61 f4       	brne	.+24     	; 0x4ee4 <free+0xbe>
    4ecc:	80 81       	ld	r24, Z
    4ece:	91 81       	ldd	r25, Z+1	; 0x01
    4ed0:	84 0f       	add	r24, r20
    4ed2:	95 1f       	adc	r25, r21
    4ed4:	02 96       	adiw	r24, 0x02	; 2
    4ed6:	e9 01       	movw	r28, r18
    4ed8:	88 83       	st	Y, r24
    4eda:	99 83       	std	Y+1, r25	; 0x01
    4edc:	82 81       	ldd	r24, Z+2	; 0x02
    4ede:	93 81       	ldd	r25, Z+3	; 0x03
    4ee0:	8a 83       	std	Y+2, r24	; 0x02
    4ee2:	9b 83       	std	Y+3, r25	; 0x03
    4ee4:	e0 e0       	ldi	r30, 0x00	; 0
    4ee6:	f0 e0       	ldi	r31, 0x00	; 0
    4ee8:	12 96       	adiw	r26, 0x02	; 2
    4eea:	8d 91       	ld	r24, X+
    4eec:	9c 91       	ld	r25, X
    4eee:	13 97       	sbiw	r26, 0x03	; 3
    4ef0:	00 97       	sbiw	r24, 0x00	; 0
    4ef2:	19 f0       	breq	.+6      	; 0x4efa <free+0xd4>
    4ef4:	fd 01       	movw	r30, r26
    4ef6:	dc 01       	movw	r26, r24
    4ef8:	f7 cf       	rjmp	.-18     	; 0x4ee8 <free+0xc2>
    4efa:	8d 91       	ld	r24, X+
    4efc:	9c 91       	ld	r25, X
    4efe:	11 97       	sbiw	r26, 0x01	; 1
    4f00:	9d 01       	movw	r18, r26
    4f02:	2e 5f       	subi	r18, 0xFE	; 254
    4f04:	3f 4f       	sbci	r19, 0xFF	; 255
    4f06:	82 0f       	add	r24, r18
    4f08:	93 1f       	adc	r25, r19
    4f0a:	20 91 cf 4c 	lds	r18, 0x4CCF	; 0x804ccf <__brkval>
    4f0e:	30 91 d0 4c 	lds	r19, 0x4CD0	; 0x804cd0 <__brkval+0x1>
    4f12:	28 17       	cp	r18, r24
    4f14:	39 07       	cpc	r19, r25
    4f16:	69 f4       	brne	.+26     	; 0x4f32 <free+0x10c>
    4f18:	30 97       	sbiw	r30, 0x00	; 0
    4f1a:	29 f4       	brne	.+10     	; 0x4f26 <free+0x100>
    4f1c:	10 92 d1 4c 	sts	0x4CD1, r1	; 0x804cd1 <__flp>
    4f20:	10 92 d2 4c 	sts	0x4CD2, r1	; 0x804cd2 <__flp+0x1>
    4f24:	02 c0       	rjmp	.+4      	; 0x4f2a <free+0x104>
    4f26:	12 82       	std	Z+2, r1	; 0x02
    4f28:	13 82       	std	Z+3, r1	; 0x03
    4f2a:	a0 93 cf 4c 	sts	0x4CCF, r26	; 0x804ccf <__brkval>
    4f2e:	b0 93 d0 4c 	sts	0x4CD0, r27	; 0x804cd0 <__brkval+0x1>
    4f32:	df 91       	pop	r29
    4f34:	cf 91       	pop	r28
    4f36:	08 95       	ret

00004f38 <strtod>:
    4f38:	8f 92       	push	r8
    4f3a:	9f 92       	push	r9
    4f3c:	af 92       	push	r10
    4f3e:	bf 92       	push	r11
    4f40:	cf 92       	push	r12
    4f42:	df 92       	push	r13
    4f44:	ef 92       	push	r14
    4f46:	ff 92       	push	r15
    4f48:	0f 93       	push	r16
    4f4a:	1f 93       	push	r17
    4f4c:	cf 93       	push	r28
    4f4e:	df 93       	push	r29
    4f50:	ec 01       	movw	r28, r24
    4f52:	6b 01       	movw	r12, r22
    4f54:	61 15       	cp	r22, r1
    4f56:	71 05       	cpc	r23, r1
    4f58:	19 f0       	breq	.+6      	; 0x4f60 <strtod+0x28>
    4f5a:	fb 01       	movw	r30, r22
    4f5c:	80 83       	st	Z, r24
    4f5e:	91 83       	std	Z+1, r25	; 0x01
    4f60:	7e 01       	movw	r14, r28
    4f62:	ff ef       	ldi	r31, 0xFF	; 255
    4f64:	ef 1a       	sub	r14, r31
    4f66:	ff 0a       	sbc	r15, r31
    4f68:	08 81       	ld	r16, Y
    4f6a:	80 2f       	mov	r24, r16
    4f6c:	90 e0       	ldi	r25, 0x00	; 0
    4f6e:	0e 94 15 2a 	call	0x542a	; 0x542a <isspace>
    4f72:	89 2b       	or	r24, r25
    4f74:	11 f0       	breq	.+4      	; 0x4f7a <strtod+0x42>
    4f76:	e7 01       	movw	r28, r14
    4f78:	f3 cf       	rjmp	.-26     	; 0x4f60 <strtod+0x28>
    4f7a:	0d 32       	cpi	r16, 0x2D	; 45
    4f7c:	39 f4       	brne	.+14     	; 0x4f8c <strtod+0x54>
    4f7e:	7e 01       	movw	r14, r28
    4f80:	82 e0       	ldi	r24, 0x02	; 2
    4f82:	e8 0e       	add	r14, r24
    4f84:	f1 1c       	adc	r15, r1
    4f86:	09 81       	ldd	r16, Y+1	; 0x01
    4f88:	11 e0       	ldi	r17, 0x01	; 1
    4f8a:	08 c0       	rjmp	.+16     	; 0x4f9c <strtod+0x64>
    4f8c:	0b 32       	cpi	r16, 0x2B	; 43
    4f8e:	29 f4       	brne	.+10     	; 0x4f9a <strtod+0x62>
    4f90:	7e 01       	movw	r14, r28
    4f92:	92 e0       	ldi	r25, 0x02	; 2
    4f94:	e9 0e       	add	r14, r25
    4f96:	f1 1c       	adc	r15, r1
    4f98:	09 81       	ldd	r16, Y+1	; 0x01
    4f9a:	10 e0       	ldi	r17, 0x00	; 0
    4f9c:	e7 01       	movw	r28, r14
    4f9e:	21 97       	sbiw	r28, 0x01	; 1
    4fa0:	43 e0       	ldi	r20, 0x03	; 3
    4fa2:	50 e0       	ldi	r21, 0x00	; 0
    4fa4:	60 e7       	ldi	r22, 0x70	; 112
    4fa6:	72 e0       	ldi	r23, 0x02	; 2
    4fa8:	ce 01       	movw	r24, r28
    4faa:	0e 94 1e 2a 	call	0x543c	; 0x543c <strncasecmp_P>
    4fae:	89 2b       	or	r24, r25
    4fb0:	c1 f4       	brne	.+48     	; 0x4fe2 <strtod+0xaa>
    4fb2:	23 96       	adiw	r28, 0x03	; 3
    4fb4:	45 e0       	ldi	r20, 0x05	; 5
    4fb6:	50 e0       	ldi	r21, 0x00	; 0
    4fb8:	6b e6       	ldi	r22, 0x6B	; 107
    4fba:	72 e0       	ldi	r23, 0x02	; 2
    4fbc:	ce 01       	movw	r24, r28
    4fbe:	0e 94 1e 2a 	call	0x543c	; 0x543c <strncasecmp_P>
    4fc2:	89 2b       	or	r24, r25
    4fc4:	09 f4       	brne	.+2      	; 0x4fc8 <strtod+0x90>
    4fc6:	25 96       	adiw	r28, 0x05	; 5
    4fc8:	c1 14       	cp	r12, r1
    4fca:	d1 04       	cpc	r13, r1
    4fcc:	19 f0       	breq	.+6      	; 0x4fd4 <strtod+0x9c>
    4fce:	f6 01       	movw	r30, r12
    4fd0:	c0 83       	st	Z, r28
    4fd2:	d1 83       	std	Z+1, r29	; 0x01
    4fd4:	11 11       	cpse	r17, r1
    4fd6:	f6 c0       	rjmp	.+492    	; 0x51c4 <strtod+0x28c>
    4fd8:	60 e0       	ldi	r22, 0x00	; 0
    4fda:	70 e0       	ldi	r23, 0x00	; 0
    4fdc:	80 e8       	ldi	r24, 0x80	; 128
    4fde:	9f e7       	ldi	r25, 0x7F	; 127
    4fe0:	fa c0       	rjmp	.+500    	; 0x51d6 <strtod+0x29e>
    4fe2:	43 e0       	ldi	r20, 0x03	; 3
    4fe4:	50 e0       	ldi	r21, 0x00	; 0
    4fe6:	68 e6       	ldi	r22, 0x68	; 104
    4fe8:	72 e0       	ldi	r23, 0x02	; 2
    4fea:	ce 01       	movw	r24, r28
    4fec:	0e 94 1e 2a 	call	0x543c	; 0x543c <strncasecmp_P>
    4ff0:	89 2b       	or	r24, r25
    4ff2:	59 f4       	brne	.+22     	; 0x500a <strtod+0xd2>
    4ff4:	c1 14       	cp	r12, r1
    4ff6:	d1 04       	cpc	r13, r1
    4ff8:	09 f4       	brne	.+2      	; 0x4ffc <strtod+0xc4>
    4ffa:	e9 c0       	rjmp	.+466    	; 0x51ce <strtod+0x296>
    4ffc:	f2 e0       	ldi	r31, 0x02	; 2
    4ffe:	ef 0e       	add	r14, r31
    5000:	f1 1c       	adc	r15, r1
    5002:	f6 01       	movw	r30, r12
    5004:	e0 82       	st	Z, r14
    5006:	f1 82       	std	Z+1, r15	; 0x01
    5008:	e2 c0       	rjmp	.+452    	; 0x51ce <strtod+0x296>
    500a:	20 e0       	ldi	r18, 0x00	; 0
    500c:	30 e0       	ldi	r19, 0x00	; 0
    500e:	a9 01       	movw	r20, r18
    5010:	c0 e0       	ldi	r28, 0x00	; 0
    5012:	d0 e0       	ldi	r29, 0x00	; 0
    5014:	f7 01       	movw	r30, r14
    5016:	60 ed       	ldi	r22, 0xD0	; 208
    5018:	a6 2e       	mov	r10, r22
    501a:	a0 0e       	add	r10, r16
    501c:	89 e0       	ldi	r24, 0x09	; 9
    501e:	8a 15       	cp	r24, r10
    5020:	30 f1       	brcs	.+76     	; 0x506e <strtod+0x136>
    5022:	91 2f       	mov	r25, r17
    5024:	92 60       	ori	r25, 0x02	; 2
    5026:	b9 2e       	mov	r11, r25
    5028:	81 2f       	mov	r24, r17
    502a:	88 70       	andi	r24, 0x08	; 8
    502c:	12 ff       	sbrs	r17, 2
    502e:	04 c0       	rjmp	.+8      	; 0x5038 <strtod+0x100>
    5030:	81 11       	cpse	r24, r1
    5032:	24 c0       	rjmp	.+72     	; 0x507c <strtod+0x144>
    5034:	21 96       	adiw	r28, 0x01	; 1
    5036:	22 c0       	rjmp	.+68     	; 0x507c <strtod+0x144>
    5038:	81 11       	cpse	r24, r1
    503a:	21 97       	sbiw	r28, 0x01	; 1
    503c:	a5 e0       	ldi	r26, 0x05	; 5
    503e:	b0 e0       	ldi	r27, 0x00	; 0
    5040:	0e 94 25 26 	call	0x4c4a	; 0x4c4a <__muluhisi3>
    5044:	dc 01       	movw	r26, r24
    5046:	cb 01       	movw	r24, r22
    5048:	88 0f       	add	r24, r24
    504a:	99 1f       	adc	r25, r25
    504c:	aa 1f       	adc	r26, r26
    504e:	bb 1f       	adc	r27, r27
    5050:	9c 01       	movw	r18, r24
    5052:	ad 01       	movw	r20, r26
    5054:	2a 0d       	add	r18, r10
    5056:	31 1d       	adc	r19, r1
    5058:	41 1d       	adc	r20, r1
    505a:	51 1d       	adc	r21, r1
    505c:	28 39       	cpi	r18, 0x98	; 152
    505e:	89 e9       	ldi	r24, 0x99	; 153
    5060:	38 07       	cpc	r19, r24
    5062:	48 07       	cpc	r20, r24
    5064:	89 e1       	ldi	r24, 0x19	; 25
    5066:	58 07       	cpc	r21, r24
    5068:	48 f0       	brcs	.+18     	; 0x507c <strtod+0x144>
    506a:	16 60       	ori	r17, 0x06	; 6
    506c:	06 c0       	rjmp	.+12     	; 0x507a <strtod+0x142>
    506e:	9e ef       	ldi	r25, 0xFE	; 254
    5070:	a9 12       	cpse	r10, r25
    5072:	0a c0       	rjmp	.+20     	; 0x5088 <strtod+0x150>
    5074:	13 fd       	sbrc	r17, 3
    5076:	40 c0       	rjmp	.+128    	; 0x50f8 <strtod+0x1c0>
    5078:	18 60       	ori	r17, 0x08	; 8
    507a:	b1 2e       	mov	r11, r17
    507c:	8f ef       	ldi	r24, 0xFF	; 255
    507e:	e8 1a       	sub	r14, r24
    5080:	f8 0a       	sbc	r15, r24
    5082:	00 81       	ld	r16, Z
    5084:	1b 2d       	mov	r17, r11
    5086:	c6 cf       	rjmp	.-116    	; 0x5014 <strtod+0xdc>
    5088:	80 2f       	mov	r24, r16
    508a:	8f 7d       	andi	r24, 0xDF	; 223
    508c:	85 34       	cpi	r24, 0x45	; 69
    508e:	a1 f5       	brne	.+104    	; 0x50f8 <strtod+0x1c0>
    5090:	80 81       	ld	r24, Z
    5092:	8d 32       	cpi	r24, 0x2D	; 45
    5094:	11 f4       	brne	.+4      	; 0x509a <strtod+0x162>
    5096:	10 61       	ori	r17, 0x10	; 16
    5098:	06 c0       	rjmp	.+12     	; 0x50a6 <strtod+0x16e>
    509a:	8b 32       	cpi	r24, 0x2B	; 43
    509c:	21 f0       	breq	.+8      	; 0x50a6 <strtod+0x16e>
    509e:	31 96       	adiw	r30, 0x01	; 1
    50a0:	61 e0       	ldi	r22, 0x01	; 1
    50a2:	70 e0       	ldi	r23, 0x00	; 0
    50a4:	04 c0       	rjmp	.+8      	; 0x50ae <strtod+0x176>
    50a6:	81 81       	ldd	r24, Z+1	; 0x01
    50a8:	32 96       	adiw	r30, 0x02	; 2
    50aa:	62 e0       	ldi	r22, 0x02	; 2
    50ac:	70 e0       	ldi	r23, 0x00	; 0
    50ae:	80 53       	subi	r24, 0x30	; 48
    50b0:	8a 30       	cpi	r24, 0x0A	; 10
    50b2:	18 f0       	brcs	.+6      	; 0x50ba <strtod+0x182>
    50b4:	e6 1b       	sub	r30, r22
    50b6:	f7 0b       	sbc	r31, r23
    50b8:	1f c0       	rjmp	.+62     	; 0x50f8 <strtod+0x1c0>
    50ba:	60 e0       	ldi	r22, 0x00	; 0
    50bc:	70 e0       	ldi	r23, 0x00	; 0
    50be:	60 38       	cpi	r22, 0x80	; 128
    50c0:	9c e0       	ldi	r25, 0x0C	; 12
    50c2:	79 07       	cpc	r23, r25
    50c4:	5c f4       	brge	.+22     	; 0x50dc <strtod+0x1a4>
    50c6:	db 01       	movw	r26, r22
    50c8:	aa 0f       	add	r26, r26
    50ca:	bb 1f       	adc	r27, r27
    50cc:	aa 0f       	add	r26, r26
    50ce:	bb 1f       	adc	r27, r27
    50d0:	6a 0f       	add	r22, r26
    50d2:	7b 1f       	adc	r23, r27
    50d4:	66 0f       	add	r22, r22
    50d6:	77 1f       	adc	r23, r23
    50d8:	68 0f       	add	r22, r24
    50da:	71 1d       	adc	r23, r1
    50dc:	31 96       	adiw	r30, 0x01	; 1
    50de:	df 01       	movw	r26, r30
    50e0:	11 97       	sbiw	r26, 0x01	; 1
    50e2:	8c 91       	ld	r24, X
    50e4:	80 53       	subi	r24, 0x30	; 48
    50e6:	8a 30       	cpi	r24, 0x0A	; 10
    50e8:	50 f3       	brcs	.-44     	; 0x50be <strtod+0x186>
    50ea:	14 ff       	sbrs	r17, 4
    50ec:	03 c0       	rjmp	.+6      	; 0x50f4 <strtod+0x1bc>
    50ee:	71 95       	neg	r23
    50f0:	61 95       	neg	r22
    50f2:	71 09       	sbc	r23, r1
    50f4:	c6 0f       	add	r28, r22
    50f6:	d7 1f       	adc	r29, r23
    50f8:	11 ff       	sbrs	r17, 1
    50fa:	08 c0       	rjmp	.+16     	; 0x510c <strtod+0x1d4>
    50fc:	c1 14       	cp	r12, r1
    50fe:	d1 04       	cpc	r13, r1
    5100:	29 f0       	breq	.+10     	; 0x510c <strtod+0x1d4>
    5102:	cf 01       	movw	r24, r30
    5104:	01 97       	sbiw	r24, 0x01	; 1
    5106:	f6 01       	movw	r30, r12
    5108:	80 83       	st	Z, r24
    510a:	91 83       	std	Z+1, r25	; 0x01
    510c:	ca 01       	movw	r24, r20
    510e:	b9 01       	movw	r22, r18
    5110:	0e 94 ed 1e 	call	0x3dda	; 0x3dda <__floatunsisf>
    5114:	21 2f       	mov	r18, r17
    5116:	23 70       	andi	r18, 0x03	; 3
    5118:	23 30       	cpi	r18, 0x03	; 3
    511a:	19 f0       	breq	.+6      	; 0x5122 <strtod+0x1ea>
    511c:	4b 01       	movw	r8, r22
    511e:	5c 01       	movw	r10, r24
    5120:	06 c0       	rjmp	.+12     	; 0x512e <strtod+0x1f6>
    5122:	4b 01       	movw	r8, r22
    5124:	5c 01       	movw	r10, r24
    5126:	b7 fa       	bst	r11, 7
    5128:	b0 94       	com	r11
    512a:	b7 f8       	bld	r11, 7
    512c:	b0 94       	com	r11
    512e:	20 e0       	ldi	r18, 0x00	; 0
    5130:	30 e0       	ldi	r19, 0x00	; 0
    5132:	a9 01       	movw	r20, r18
    5134:	c5 01       	movw	r24, r10
    5136:	b4 01       	movw	r22, r8
    5138:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <__cmpsf2>
    513c:	88 23       	and	r24, r24
    513e:	09 f4       	brne	.+2      	; 0x5142 <strtod+0x20a>
    5140:	3e c0       	rjmp	.+124    	; 0x51be <strtod+0x286>
    5142:	d7 ff       	sbrs	r29, 7
    5144:	06 c0       	rjmp	.+12     	; 0x5152 <strtod+0x21a>
    5146:	d1 95       	neg	r29
    5148:	c1 95       	neg	r28
    514a:	d1 09       	sbc	r29, r1
    514c:	07 e8       	ldi	r16, 0x87	; 135
    514e:	12 e0       	ldi	r17, 0x02	; 2
    5150:	02 c0       	rjmp	.+4      	; 0x5156 <strtod+0x21e>
    5152:	0f e9       	ldi	r16, 0x9F	; 159
    5154:	12 e0       	ldi	r17, 0x02	; 2
    5156:	68 01       	movw	r12, r16
    5158:	f8 e1       	ldi	r31, 0x18	; 24
    515a:	cf 1a       	sub	r12, r31
    515c:	d1 08       	sbc	r13, r1
    515e:	90 e2       	ldi	r25, 0x20	; 32
    5160:	e9 2e       	mov	r14, r25
    5162:	f1 2c       	mov	r15, r1
    5164:	ce 15       	cp	r28, r14
    5166:	df 05       	cpc	r29, r15
    5168:	74 f0       	brlt	.+28     	; 0x5186 <strtod+0x24e>
    516a:	f8 01       	movw	r30, r16
    516c:	25 91       	lpm	r18, Z+
    516e:	35 91       	lpm	r19, Z+
    5170:	45 91       	lpm	r20, Z+
    5172:	54 91       	lpm	r21, Z
    5174:	c5 01       	movw	r24, r10
    5176:	b4 01       	movw	r22, r8
    5178:	0e 94 12 20 	call	0x4024	; 0x4024 <__mulsf3>
    517c:	4b 01       	movw	r8, r22
    517e:	5c 01       	movw	r10, r24
    5180:	ce 19       	sub	r28, r14
    5182:	df 09       	sbc	r29, r15
    5184:	ef cf       	rjmp	.-34     	; 0x5164 <strtod+0x22c>
    5186:	04 50       	subi	r16, 0x04	; 4
    5188:	11 09       	sbc	r17, r1
    518a:	f5 94       	asr	r15
    518c:	e7 94       	ror	r14
    518e:	0c 15       	cp	r16, r12
    5190:	1d 05       	cpc	r17, r13
    5192:	41 f7       	brne	.-48     	; 0x5164 <strtod+0x22c>
    5194:	8a 2d       	mov	r24, r10
    5196:	88 0f       	add	r24, r24
    5198:	8b 2d       	mov	r24, r11
    519a:	88 1f       	adc	r24, r24
    519c:	8f 3f       	cpi	r24, 0xFF	; 255
    519e:	49 f0       	breq	.+18     	; 0x51b2 <strtod+0x27a>
    51a0:	20 e0       	ldi	r18, 0x00	; 0
    51a2:	30 e0       	ldi	r19, 0x00	; 0
    51a4:	a9 01       	movw	r20, r18
    51a6:	c5 01       	movw	r24, r10
    51a8:	b4 01       	movw	r22, r8
    51aa:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <__cmpsf2>
    51ae:	81 11       	cpse	r24, r1
    51b0:	06 c0       	rjmp	.+12     	; 0x51be <strtod+0x286>
    51b2:	82 e2       	ldi	r24, 0x22	; 34
    51b4:	90 e0       	ldi	r25, 0x00	; 0
    51b6:	80 93 d3 4c 	sts	0x4CD3, r24	; 0x804cd3 <errno>
    51ba:	90 93 d4 4c 	sts	0x4CD4, r25	; 0x804cd4 <errno+0x1>
    51be:	c5 01       	movw	r24, r10
    51c0:	b4 01       	movw	r22, r8
    51c2:	09 c0       	rjmp	.+18     	; 0x51d6 <strtod+0x29e>
    51c4:	60 e0       	ldi	r22, 0x00	; 0
    51c6:	70 e0       	ldi	r23, 0x00	; 0
    51c8:	80 e8       	ldi	r24, 0x80	; 128
    51ca:	9f ef       	ldi	r25, 0xFF	; 255
    51cc:	04 c0       	rjmp	.+8      	; 0x51d6 <strtod+0x29e>
    51ce:	60 e0       	ldi	r22, 0x00	; 0
    51d0:	70 e0       	ldi	r23, 0x00	; 0
    51d2:	80 ec       	ldi	r24, 0xC0	; 192
    51d4:	9f e7       	ldi	r25, 0x7F	; 127
    51d6:	df 91       	pop	r29
    51d8:	cf 91       	pop	r28
    51da:	1f 91       	pop	r17
    51dc:	0f 91       	pop	r16
    51de:	ff 90       	pop	r15
    51e0:	ef 90       	pop	r14
    51e2:	df 90       	pop	r13
    51e4:	cf 90       	pop	r12
    51e6:	bf 90       	pop	r11
    51e8:	af 90       	pop	r10
    51ea:	9f 90       	pop	r9
    51ec:	8f 90       	pop	r8
    51ee:	08 95       	ret

000051f0 <atoi>:
    51f0:	fc 01       	movw	r30, r24
    51f2:	88 27       	eor	r24, r24
    51f4:	99 27       	eor	r25, r25
    51f6:	e8 94       	clt
    51f8:	21 91       	ld	r18, Z+
    51fa:	20 32       	cpi	r18, 0x20	; 32
    51fc:	e9 f3       	breq	.-6      	; 0x51f8 <atoi+0x8>
    51fe:	29 30       	cpi	r18, 0x09	; 9
    5200:	10 f0       	brcs	.+4      	; 0x5206 <atoi+0x16>
    5202:	2e 30       	cpi	r18, 0x0E	; 14
    5204:	c8 f3       	brcs	.-14     	; 0x51f8 <atoi+0x8>
    5206:	2b 32       	cpi	r18, 0x2B	; 43
    5208:	41 f0       	breq	.+16     	; 0x521a <atoi+0x2a>
    520a:	2d 32       	cpi	r18, 0x2D	; 45
    520c:	39 f4       	brne	.+14     	; 0x521c <atoi+0x2c>
    520e:	68 94       	set
    5210:	04 c0       	rjmp	.+8      	; 0x521a <atoi+0x2a>
    5212:	0e 94 61 2a 	call	0x54c2	; 0x54c2 <__mulhi_const_10>
    5216:	82 0f       	add	r24, r18
    5218:	91 1d       	adc	r25, r1
    521a:	21 91       	ld	r18, Z+
    521c:	20 53       	subi	r18, 0x30	; 48
    521e:	2a 30       	cpi	r18, 0x0A	; 10
    5220:	c0 f3       	brcs	.-16     	; 0x5212 <atoi+0x22>
    5222:	1e f4       	brtc	.+6      	; 0x522a <atoi+0x3a>
    5224:	90 95       	com	r25
    5226:	81 95       	neg	r24
    5228:	9f 4f       	sbci	r25, 0xFF	; 255
    522a:	08 95       	ret

0000522c <atol>:
    522c:	1f 93       	push	r17
    522e:	fc 01       	movw	r30, r24
    5230:	99 27       	eor	r25, r25
    5232:	88 27       	eor	r24, r24
    5234:	bc 01       	movw	r22, r24
    5236:	e8 94       	clt
    5238:	11 91       	ld	r17, Z+
    523a:	10 32       	cpi	r17, 0x20	; 32
    523c:	e9 f3       	breq	.-6      	; 0x5238 <atol+0xc>
    523e:	19 30       	cpi	r17, 0x09	; 9
    5240:	10 f0       	brcs	.+4      	; 0x5246 <atol+0x1a>
    5242:	1e 30       	cpi	r17, 0x0E	; 14
    5244:	c8 f3       	brcs	.-14     	; 0x5238 <atol+0xc>
    5246:	1b 32       	cpi	r17, 0x2B	; 43
    5248:	51 f0       	breq	.+20     	; 0x525e <atol+0x32>
    524a:	1d 32       	cpi	r17, 0x2D	; 45
    524c:	49 f4       	brne	.+18     	; 0x5260 <atol+0x34>
    524e:	68 94       	set
    5250:	06 c0       	rjmp	.+12     	; 0x525e <atol+0x32>
    5252:	0e 94 4c 2a 	call	0x5498	; 0x5498 <__mulsi_const_10>
    5256:	61 0f       	add	r22, r17
    5258:	71 1d       	adc	r23, r1
    525a:	81 1d       	adc	r24, r1
    525c:	91 1d       	adc	r25, r1
    525e:	11 91       	ld	r17, Z+
    5260:	10 53       	subi	r17, 0x30	; 48
    5262:	1a 30       	cpi	r17, 0x0A	; 10
    5264:	b0 f3       	brcs	.-20     	; 0x5252 <atol+0x26>
    5266:	3e f4       	brtc	.+14     	; 0x5276 <atol+0x4a>
    5268:	90 95       	com	r25
    526a:	80 95       	com	r24
    526c:	70 95       	com	r23
    526e:	61 95       	neg	r22
    5270:	7f 4f       	sbci	r23, 0xFF	; 255
    5272:	8f 4f       	sbci	r24, 0xFF	; 255
    5274:	9f 4f       	sbci	r25, 0xFF	; 255
    5276:	1f 91       	pop	r17
    5278:	08 95       	ret

0000527a <__ftoa_engine>:
    527a:	28 30       	cpi	r18, 0x08	; 8
    527c:	08 f0       	brcs	.+2      	; 0x5280 <__ftoa_engine+0x6>
    527e:	27 e0       	ldi	r18, 0x07	; 7
    5280:	33 27       	eor	r19, r19
    5282:	da 01       	movw	r26, r20
    5284:	99 0f       	add	r25, r25
    5286:	31 1d       	adc	r19, r1
    5288:	87 fd       	sbrc	r24, 7
    528a:	91 60       	ori	r25, 0x01	; 1
    528c:	00 96       	adiw	r24, 0x00	; 0
    528e:	61 05       	cpc	r22, r1
    5290:	71 05       	cpc	r23, r1
    5292:	39 f4       	brne	.+14     	; 0x52a2 <__ftoa_engine+0x28>
    5294:	32 60       	ori	r19, 0x02	; 2
    5296:	2e 5f       	subi	r18, 0xFE	; 254
    5298:	3d 93       	st	X+, r19
    529a:	30 e3       	ldi	r19, 0x30	; 48
    529c:	2a 95       	dec	r18
    529e:	e1 f7       	brne	.-8      	; 0x5298 <__ftoa_engine+0x1e>
    52a0:	08 95       	ret
    52a2:	9f 3f       	cpi	r25, 0xFF	; 255
    52a4:	30 f0       	brcs	.+12     	; 0x52b2 <__ftoa_engine+0x38>
    52a6:	80 38       	cpi	r24, 0x80	; 128
    52a8:	71 05       	cpc	r23, r1
    52aa:	61 05       	cpc	r22, r1
    52ac:	09 f0       	breq	.+2      	; 0x52b0 <__ftoa_engine+0x36>
    52ae:	3c 5f       	subi	r19, 0xFC	; 252
    52b0:	3c 5f       	subi	r19, 0xFC	; 252
    52b2:	3d 93       	st	X+, r19
    52b4:	91 30       	cpi	r25, 0x01	; 1
    52b6:	08 f0       	brcs	.+2      	; 0x52ba <__ftoa_engine+0x40>
    52b8:	80 68       	ori	r24, 0x80	; 128
    52ba:	91 1d       	adc	r25, r1
    52bc:	df 93       	push	r29
    52be:	cf 93       	push	r28
    52c0:	1f 93       	push	r17
    52c2:	0f 93       	push	r16
    52c4:	ff 92       	push	r15
    52c6:	ef 92       	push	r14
    52c8:	19 2f       	mov	r17, r25
    52ca:	98 7f       	andi	r25, 0xF8	; 248
    52cc:	96 95       	lsr	r25
    52ce:	e9 2f       	mov	r30, r25
    52d0:	96 95       	lsr	r25
    52d2:	96 95       	lsr	r25
    52d4:	e9 0f       	add	r30, r25
    52d6:	ff 27       	eor	r31, r31
    52d8:	e3 50       	subi	r30, 0x03	; 3
    52da:	fd 4f       	sbci	r31, 0xFD	; 253
    52dc:	99 27       	eor	r25, r25
    52de:	33 27       	eor	r19, r19
    52e0:	ee 24       	eor	r14, r14
    52e2:	ff 24       	eor	r15, r15
    52e4:	a7 01       	movw	r20, r14
    52e6:	e7 01       	movw	r28, r14
    52e8:	05 90       	lpm	r0, Z+
    52ea:	08 94       	sec
    52ec:	07 94       	ror	r0
    52ee:	28 f4       	brcc	.+10     	; 0x52fa <__ftoa_engine+0x80>
    52f0:	36 0f       	add	r19, r22
    52f2:	e7 1e       	adc	r14, r23
    52f4:	f8 1e       	adc	r15, r24
    52f6:	49 1f       	adc	r20, r25
    52f8:	51 1d       	adc	r21, r1
    52fa:	66 0f       	add	r22, r22
    52fc:	77 1f       	adc	r23, r23
    52fe:	88 1f       	adc	r24, r24
    5300:	99 1f       	adc	r25, r25
    5302:	06 94       	lsr	r0
    5304:	a1 f7       	brne	.-24     	; 0x52ee <__ftoa_engine+0x74>
    5306:	05 90       	lpm	r0, Z+
    5308:	07 94       	ror	r0
    530a:	28 f4       	brcc	.+10     	; 0x5316 <__ftoa_engine+0x9c>
    530c:	e7 0e       	add	r14, r23
    530e:	f8 1e       	adc	r15, r24
    5310:	49 1f       	adc	r20, r25
    5312:	56 1f       	adc	r21, r22
    5314:	c1 1d       	adc	r28, r1
    5316:	77 0f       	add	r23, r23
    5318:	88 1f       	adc	r24, r24
    531a:	99 1f       	adc	r25, r25
    531c:	66 1f       	adc	r22, r22
    531e:	06 94       	lsr	r0
    5320:	a1 f7       	brne	.-24     	; 0x530a <__ftoa_engine+0x90>
    5322:	05 90       	lpm	r0, Z+
    5324:	07 94       	ror	r0
    5326:	28 f4       	brcc	.+10     	; 0x5332 <__ftoa_engine+0xb8>
    5328:	f8 0e       	add	r15, r24
    532a:	49 1f       	adc	r20, r25
    532c:	56 1f       	adc	r21, r22
    532e:	c7 1f       	adc	r28, r23
    5330:	d1 1d       	adc	r29, r1
    5332:	88 0f       	add	r24, r24
    5334:	99 1f       	adc	r25, r25
    5336:	66 1f       	adc	r22, r22
    5338:	77 1f       	adc	r23, r23
    533a:	06 94       	lsr	r0
    533c:	a1 f7       	brne	.-24     	; 0x5326 <__ftoa_engine+0xac>
    533e:	05 90       	lpm	r0, Z+
    5340:	07 94       	ror	r0
    5342:	20 f4       	brcc	.+8      	; 0x534c <__ftoa_engine+0xd2>
    5344:	49 0f       	add	r20, r25
    5346:	56 1f       	adc	r21, r22
    5348:	c7 1f       	adc	r28, r23
    534a:	d8 1f       	adc	r29, r24
    534c:	99 0f       	add	r25, r25
    534e:	66 1f       	adc	r22, r22
    5350:	77 1f       	adc	r23, r23
    5352:	88 1f       	adc	r24, r24
    5354:	06 94       	lsr	r0
    5356:	a9 f7       	brne	.-22     	; 0x5342 <__ftoa_engine+0xc8>
    5358:	84 91       	lpm	r24, Z
    535a:	10 95       	com	r17
    535c:	17 70       	andi	r17, 0x07	; 7
    535e:	41 f0       	breq	.+16     	; 0x5370 <__ftoa_engine+0xf6>
    5360:	d6 95       	lsr	r29
    5362:	c7 95       	ror	r28
    5364:	57 95       	ror	r21
    5366:	47 95       	ror	r20
    5368:	f7 94       	ror	r15
    536a:	e7 94       	ror	r14
    536c:	1a 95       	dec	r17
    536e:	c1 f7       	brne	.-16     	; 0x5360 <__ftoa_engine+0xe6>
    5370:	e3 ea       	ldi	r30, 0xA3	; 163
    5372:	f2 e0       	ldi	r31, 0x02	; 2
    5374:	68 94       	set
    5376:	15 90       	lpm	r1, Z+
    5378:	15 91       	lpm	r17, Z+
    537a:	35 91       	lpm	r19, Z+
    537c:	65 91       	lpm	r22, Z+
    537e:	95 91       	lpm	r25, Z+
    5380:	05 90       	lpm	r0, Z+
    5382:	7f e2       	ldi	r23, 0x2F	; 47
    5384:	73 95       	inc	r23
    5386:	e1 18       	sub	r14, r1
    5388:	f1 0a       	sbc	r15, r17
    538a:	43 0b       	sbc	r20, r19
    538c:	56 0b       	sbc	r21, r22
    538e:	c9 0b       	sbc	r28, r25
    5390:	d0 09       	sbc	r29, r0
    5392:	c0 f7       	brcc	.-16     	; 0x5384 <__ftoa_engine+0x10a>
    5394:	e1 0c       	add	r14, r1
    5396:	f1 1e       	adc	r15, r17
    5398:	43 1f       	adc	r20, r19
    539a:	56 1f       	adc	r21, r22
    539c:	c9 1f       	adc	r28, r25
    539e:	d0 1d       	adc	r29, r0
    53a0:	7e f4       	brtc	.+30     	; 0x53c0 <__ftoa_engine+0x146>
    53a2:	70 33       	cpi	r23, 0x30	; 48
    53a4:	11 f4       	brne	.+4      	; 0x53aa <__ftoa_engine+0x130>
    53a6:	8a 95       	dec	r24
    53a8:	e6 cf       	rjmp	.-52     	; 0x5376 <__ftoa_engine+0xfc>
    53aa:	e8 94       	clt
    53ac:	01 50       	subi	r16, 0x01	; 1
    53ae:	30 f0       	brcs	.+12     	; 0x53bc <__ftoa_engine+0x142>
    53b0:	08 0f       	add	r16, r24
    53b2:	0a f4       	brpl	.+2      	; 0x53b6 <__ftoa_engine+0x13c>
    53b4:	00 27       	eor	r16, r16
    53b6:	02 17       	cp	r16, r18
    53b8:	08 f4       	brcc	.+2      	; 0x53bc <__ftoa_engine+0x142>
    53ba:	20 2f       	mov	r18, r16
    53bc:	23 95       	inc	r18
    53be:	02 2f       	mov	r16, r18
    53c0:	7a 33       	cpi	r23, 0x3A	; 58
    53c2:	28 f0       	brcs	.+10     	; 0x53ce <__ftoa_engine+0x154>
    53c4:	79 e3       	ldi	r23, 0x39	; 57
    53c6:	7d 93       	st	X+, r23
    53c8:	2a 95       	dec	r18
    53ca:	e9 f7       	brne	.-6      	; 0x53c6 <__ftoa_engine+0x14c>
    53cc:	10 c0       	rjmp	.+32     	; 0x53ee <__ftoa_engine+0x174>
    53ce:	7d 93       	st	X+, r23
    53d0:	2a 95       	dec	r18
    53d2:	89 f6       	brne	.-94     	; 0x5376 <__ftoa_engine+0xfc>
    53d4:	06 94       	lsr	r0
    53d6:	97 95       	ror	r25
    53d8:	67 95       	ror	r22
    53da:	37 95       	ror	r19
    53dc:	17 95       	ror	r17
    53de:	17 94       	ror	r1
    53e0:	e1 18       	sub	r14, r1
    53e2:	f1 0a       	sbc	r15, r17
    53e4:	43 0b       	sbc	r20, r19
    53e6:	56 0b       	sbc	r21, r22
    53e8:	c9 0b       	sbc	r28, r25
    53ea:	d0 09       	sbc	r29, r0
    53ec:	98 f0       	brcs	.+38     	; 0x5414 <__ftoa_engine+0x19a>
    53ee:	23 95       	inc	r18
    53f0:	7e 91       	ld	r23, -X
    53f2:	73 95       	inc	r23
    53f4:	7a 33       	cpi	r23, 0x3A	; 58
    53f6:	08 f0       	brcs	.+2      	; 0x53fa <__ftoa_engine+0x180>
    53f8:	70 e3       	ldi	r23, 0x30	; 48
    53fa:	7c 93       	st	X, r23
    53fc:	20 13       	cpse	r18, r16
    53fe:	b8 f7       	brcc	.-18     	; 0x53ee <__ftoa_engine+0x174>
    5400:	7e 91       	ld	r23, -X
    5402:	70 61       	ori	r23, 0x10	; 16
    5404:	7d 93       	st	X+, r23
    5406:	30 f0       	brcs	.+12     	; 0x5414 <__ftoa_engine+0x19a>
    5408:	83 95       	inc	r24
    540a:	71 e3       	ldi	r23, 0x31	; 49
    540c:	7d 93       	st	X+, r23
    540e:	70 e3       	ldi	r23, 0x30	; 48
    5410:	2a 95       	dec	r18
    5412:	e1 f7       	brne	.-8      	; 0x540c <__ftoa_engine+0x192>
    5414:	11 24       	eor	r1, r1
    5416:	ef 90       	pop	r14
    5418:	ff 90       	pop	r15
    541a:	0f 91       	pop	r16
    541c:	1f 91       	pop	r17
    541e:	cf 91       	pop	r28
    5420:	df 91       	pop	r29
    5422:	99 27       	eor	r25, r25
    5424:	87 fd       	sbrc	r24, 7
    5426:	90 95       	com	r25
    5428:	08 95       	ret

0000542a <isspace>:
    542a:	91 11       	cpse	r25, r1
    542c:	0c 94 3a 2b 	jmp	0x5674	; 0x5674 <__ctype_isfalse>
    5430:	80 32       	cpi	r24, 0x20	; 32
    5432:	19 f0       	breq	.+6      	; 0x543a <isspace+0x10>
    5434:	89 50       	subi	r24, 0x09	; 9
    5436:	85 50       	subi	r24, 0x05	; 5
    5438:	c8 f7       	brcc	.-14     	; 0x542c <isspace+0x2>
    543a:	08 95       	ret

0000543c <strncasecmp_P>:
    543c:	fb 01       	movw	r30, r22
    543e:	dc 01       	movw	r26, r24
    5440:	41 50       	subi	r20, 0x01	; 1
    5442:	50 40       	sbci	r21, 0x00	; 0
    5444:	88 f0       	brcs	.+34     	; 0x5468 <strncasecmp_P+0x2c>
    5446:	8d 91       	ld	r24, X+
    5448:	81 34       	cpi	r24, 0x41	; 65
    544a:	1c f0       	brlt	.+6      	; 0x5452 <strncasecmp_P+0x16>
    544c:	8b 35       	cpi	r24, 0x5B	; 91
    544e:	0c f4       	brge	.+2      	; 0x5452 <strncasecmp_P+0x16>
    5450:	80 5e       	subi	r24, 0xE0	; 224
    5452:	65 91       	lpm	r22, Z+
    5454:	61 34       	cpi	r22, 0x41	; 65
    5456:	1c f0       	brlt	.+6      	; 0x545e <strncasecmp_P+0x22>
    5458:	6b 35       	cpi	r22, 0x5B	; 91
    545a:	0c f4       	brge	.+2      	; 0x545e <strncasecmp_P+0x22>
    545c:	60 5e       	subi	r22, 0xE0	; 224
    545e:	86 1b       	sub	r24, r22
    5460:	61 11       	cpse	r22, r1
    5462:	71 f3       	breq	.-36     	; 0x5440 <strncasecmp_P+0x4>
    5464:	99 0b       	sbc	r25, r25
    5466:	08 95       	ret
    5468:	88 1b       	sub	r24, r24
    546a:	fc cf       	rjmp	.-8      	; 0x5464 <strncasecmp_P+0x28>

0000546c <strnlen_P>:
    546c:	fc 01       	movw	r30, r24
    546e:	05 90       	lpm	r0, Z+
    5470:	61 50       	subi	r22, 0x01	; 1
    5472:	70 40       	sbci	r23, 0x00	; 0
    5474:	01 10       	cpse	r0, r1
    5476:	d8 f7       	brcc	.-10     	; 0x546e <strnlen_P+0x2>
    5478:	80 95       	com	r24
    547a:	90 95       	com	r25
    547c:	8e 0f       	add	r24, r30
    547e:	9f 1f       	adc	r25, r31
    5480:	08 95       	ret

00005482 <strnlen>:
    5482:	fc 01       	movw	r30, r24
    5484:	61 50       	subi	r22, 0x01	; 1
    5486:	70 40       	sbci	r23, 0x00	; 0
    5488:	01 90       	ld	r0, Z+
    548a:	01 10       	cpse	r0, r1
    548c:	d8 f7       	brcc	.-10     	; 0x5484 <strnlen+0x2>
    548e:	80 95       	com	r24
    5490:	90 95       	com	r25
    5492:	8e 0f       	add	r24, r30
    5494:	9f 1f       	adc	r25, r31
    5496:	08 95       	ret

00005498 <__mulsi_const_10>:
    5498:	59 2f       	mov	r21, r25
    549a:	48 2f       	mov	r20, r24
    549c:	37 2f       	mov	r19, r23
    549e:	26 2f       	mov	r18, r22
    54a0:	66 0f       	add	r22, r22
    54a2:	77 1f       	adc	r23, r23
    54a4:	88 1f       	adc	r24, r24
    54a6:	99 1f       	adc	r25, r25
    54a8:	66 0f       	add	r22, r22
    54aa:	77 1f       	adc	r23, r23
    54ac:	88 1f       	adc	r24, r24
    54ae:	99 1f       	adc	r25, r25
    54b0:	62 0f       	add	r22, r18
    54b2:	73 1f       	adc	r23, r19
    54b4:	84 1f       	adc	r24, r20
    54b6:	95 1f       	adc	r25, r21
    54b8:	66 0f       	add	r22, r22
    54ba:	77 1f       	adc	r23, r23
    54bc:	88 1f       	adc	r24, r24
    54be:	99 1f       	adc	r25, r25
    54c0:	08 95       	ret

000054c2 <__mulhi_const_10>:
    54c2:	7a e0       	ldi	r23, 0x0A	; 10
    54c4:	97 9f       	mul	r25, r23
    54c6:	90 2d       	mov	r25, r0
    54c8:	87 9f       	mul	r24, r23
    54ca:	80 2d       	mov	r24, r0
    54cc:	91 0d       	add	r25, r1
    54ce:	11 24       	eor	r1, r1
    54d0:	08 95       	ret

000054d2 <fputc>:
    54d2:	0f 93       	push	r16
    54d4:	1f 93       	push	r17
    54d6:	cf 93       	push	r28
    54d8:	df 93       	push	r29
    54da:	fb 01       	movw	r30, r22
    54dc:	23 81       	ldd	r18, Z+3	; 0x03
    54de:	21 fd       	sbrc	r18, 1
    54e0:	03 c0       	rjmp	.+6      	; 0x54e8 <fputc+0x16>
    54e2:	8f ef       	ldi	r24, 0xFF	; 255
    54e4:	9f ef       	ldi	r25, 0xFF	; 255
    54e6:	2c c0       	rjmp	.+88     	; 0x5540 <fputc+0x6e>
    54e8:	22 ff       	sbrs	r18, 2
    54ea:	16 c0       	rjmp	.+44     	; 0x5518 <fputc+0x46>
    54ec:	46 81       	ldd	r20, Z+6	; 0x06
    54ee:	57 81       	ldd	r21, Z+7	; 0x07
    54f0:	24 81       	ldd	r18, Z+4	; 0x04
    54f2:	35 81       	ldd	r19, Z+5	; 0x05
    54f4:	42 17       	cp	r20, r18
    54f6:	53 07       	cpc	r21, r19
    54f8:	44 f4       	brge	.+16     	; 0x550a <fputc+0x38>
    54fa:	a0 81       	ld	r26, Z
    54fc:	b1 81       	ldd	r27, Z+1	; 0x01
    54fe:	9d 01       	movw	r18, r26
    5500:	2f 5f       	subi	r18, 0xFF	; 255
    5502:	3f 4f       	sbci	r19, 0xFF	; 255
    5504:	20 83       	st	Z, r18
    5506:	31 83       	std	Z+1, r19	; 0x01
    5508:	8c 93       	st	X, r24
    550a:	26 81       	ldd	r18, Z+6	; 0x06
    550c:	37 81       	ldd	r19, Z+7	; 0x07
    550e:	2f 5f       	subi	r18, 0xFF	; 255
    5510:	3f 4f       	sbci	r19, 0xFF	; 255
    5512:	26 83       	std	Z+6, r18	; 0x06
    5514:	37 83       	std	Z+7, r19	; 0x07
    5516:	14 c0       	rjmp	.+40     	; 0x5540 <fputc+0x6e>
    5518:	8b 01       	movw	r16, r22
    551a:	ec 01       	movw	r28, r24
    551c:	fb 01       	movw	r30, r22
    551e:	00 84       	ldd	r0, Z+8	; 0x08
    5520:	f1 85       	ldd	r31, Z+9	; 0x09
    5522:	e0 2d       	mov	r30, r0
    5524:	09 95       	icall
    5526:	89 2b       	or	r24, r25
    5528:	e1 f6       	brne	.-72     	; 0x54e2 <fputc+0x10>
    552a:	d8 01       	movw	r26, r16
    552c:	16 96       	adiw	r26, 0x06	; 6
    552e:	8d 91       	ld	r24, X+
    5530:	9c 91       	ld	r25, X
    5532:	17 97       	sbiw	r26, 0x07	; 7
    5534:	01 96       	adiw	r24, 0x01	; 1
    5536:	16 96       	adiw	r26, 0x06	; 6
    5538:	8d 93       	st	X+, r24
    553a:	9c 93       	st	X, r25
    553c:	17 97       	sbiw	r26, 0x07	; 7
    553e:	ce 01       	movw	r24, r28
    5540:	df 91       	pop	r29
    5542:	cf 91       	pop	r28
    5544:	1f 91       	pop	r17
    5546:	0f 91       	pop	r16
    5548:	08 95       	ret

0000554a <snprintf>:
    554a:	0f 93       	push	r16
    554c:	1f 93       	push	r17
    554e:	cf 93       	push	r28
    5550:	df 93       	push	r29
    5552:	cd b7       	in	r28, 0x3d	; 61
    5554:	de b7       	in	r29, 0x3e	; 62
    5556:	2e 97       	sbiw	r28, 0x0e	; 14
    5558:	cd bf       	out	0x3d, r28	; 61
    555a:	de bf       	out	0x3e, r29	; 62
    555c:	0d 89       	ldd	r16, Y+21	; 0x15
    555e:	1e 89       	ldd	r17, Y+22	; 0x16
    5560:	8f 89       	ldd	r24, Y+23	; 0x17
    5562:	98 8d       	ldd	r25, Y+24	; 0x18
    5564:	26 e0       	ldi	r18, 0x06	; 6
    5566:	2c 83       	std	Y+4, r18	; 0x04
    5568:	09 83       	std	Y+1, r16	; 0x01
    556a:	1a 83       	std	Y+2, r17	; 0x02
    556c:	97 ff       	sbrs	r25, 7
    556e:	02 c0       	rjmp	.+4      	; 0x5574 <snprintf+0x2a>
    5570:	80 e0       	ldi	r24, 0x00	; 0
    5572:	90 e8       	ldi	r25, 0x80	; 128
    5574:	01 97       	sbiw	r24, 0x01	; 1
    5576:	8d 83       	std	Y+5, r24	; 0x05
    5578:	9e 83       	std	Y+6, r25	; 0x06
    557a:	ae 01       	movw	r20, r28
    557c:	45 5e       	subi	r20, 0xE5	; 229
    557e:	5f 4f       	sbci	r21, 0xFF	; 255
    5580:	69 8d       	ldd	r22, Y+25	; 0x19
    5582:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5584:	ce 01       	movw	r24, r28
    5586:	01 96       	adiw	r24, 0x01	; 1
    5588:	0e 94 6c 22 	call	0x44d8	; 0x44d8 <vfprintf>
    558c:	4d 81       	ldd	r20, Y+5	; 0x05
    558e:	5e 81       	ldd	r21, Y+6	; 0x06
    5590:	57 fd       	sbrc	r21, 7
    5592:	0a c0       	rjmp	.+20     	; 0x55a8 <snprintf+0x5e>
    5594:	2f 81       	ldd	r18, Y+7	; 0x07
    5596:	38 85       	ldd	r19, Y+8	; 0x08
    5598:	42 17       	cp	r20, r18
    559a:	53 07       	cpc	r21, r19
    559c:	0c f4       	brge	.+2      	; 0x55a0 <snprintf+0x56>
    559e:	9a 01       	movw	r18, r20
    55a0:	f8 01       	movw	r30, r16
    55a2:	e2 0f       	add	r30, r18
    55a4:	f3 1f       	adc	r31, r19
    55a6:	10 82       	st	Z, r1
    55a8:	2e 96       	adiw	r28, 0x0e	; 14
    55aa:	cd bf       	out	0x3d, r28	; 61
    55ac:	de bf       	out	0x3e, r29	; 62
    55ae:	df 91       	pop	r29
    55b0:	cf 91       	pop	r28
    55b2:	1f 91       	pop	r17
    55b4:	0f 91       	pop	r16
    55b6:	08 95       	ret

000055b8 <__ultoa_invert>:
    55b8:	fa 01       	movw	r30, r20
    55ba:	aa 27       	eor	r26, r26
    55bc:	28 30       	cpi	r18, 0x08	; 8
    55be:	51 f1       	breq	.+84     	; 0x5614 <__ultoa_invert+0x5c>
    55c0:	20 31       	cpi	r18, 0x10	; 16
    55c2:	81 f1       	breq	.+96     	; 0x5624 <__ultoa_invert+0x6c>
    55c4:	e8 94       	clt
    55c6:	6f 93       	push	r22
    55c8:	6e 7f       	andi	r22, 0xFE	; 254
    55ca:	6e 5f       	subi	r22, 0xFE	; 254
    55cc:	7f 4f       	sbci	r23, 0xFF	; 255
    55ce:	8f 4f       	sbci	r24, 0xFF	; 255
    55d0:	9f 4f       	sbci	r25, 0xFF	; 255
    55d2:	af 4f       	sbci	r26, 0xFF	; 255
    55d4:	b1 e0       	ldi	r27, 0x01	; 1
    55d6:	3e d0       	rcall	.+124    	; 0x5654 <__ultoa_invert+0x9c>
    55d8:	b4 e0       	ldi	r27, 0x04	; 4
    55da:	3c d0       	rcall	.+120    	; 0x5654 <__ultoa_invert+0x9c>
    55dc:	67 0f       	add	r22, r23
    55de:	78 1f       	adc	r23, r24
    55e0:	89 1f       	adc	r24, r25
    55e2:	9a 1f       	adc	r25, r26
    55e4:	a1 1d       	adc	r26, r1
    55e6:	68 0f       	add	r22, r24
    55e8:	79 1f       	adc	r23, r25
    55ea:	8a 1f       	adc	r24, r26
    55ec:	91 1d       	adc	r25, r1
    55ee:	a1 1d       	adc	r26, r1
    55f0:	6a 0f       	add	r22, r26
    55f2:	71 1d       	adc	r23, r1
    55f4:	81 1d       	adc	r24, r1
    55f6:	91 1d       	adc	r25, r1
    55f8:	a1 1d       	adc	r26, r1
    55fa:	20 d0       	rcall	.+64     	; 0x563c <__ultoa_invert+0x84>
    55fc:	09 f4       	brne	.+2      	; 0x5600 <__ultoa_invert+0x48>
    55fe:	68 94       	set
    5600:	3f 91       	pop	r19
    5602:	2a e0       	ldi	r18, 0x0A	; 10
    5604:	26 9f       	mul	r18, r22
    5606:	11 24       	eor	r1, r1
    5608:	30 19       	sub	r19, r0
    560a:	30 5d       	subi	r19, 0xD0	; 208
    560c:	31 93       	st	Z+, r19
    560e:	de f6       	brtc	.-74     	; 0x55c6 <__ultoa_invert+0xe>
    5610:	cf 01       	movw	r24, r30
    5612:	08 95       	ret
    5614:	46 2f       	mov	r20, r22
    5616:	47 70       	andi	r20, 0x07	; 7
    5618:	40 5d       	subi	r20, 0xD0	; 208
    561a:	41 93       	st	Z+, r20
    561c:	b3 e0       	ldi	r27, 0x03	; 3
    561e:	0f d0       	rcall	.+30     	; 0x563e <__ultoa_invert+0x86>
    5620:	c9 f7       	brne	.-14     	; 0x5614 <__ultoa_invert+0x5c>
    5622:	f6 cf       	rjmp	.-20     	; 0x5610 <__ultoa_invert+0x58>
    5624:	46 2f       	mov	r20, r22
    5626:	4f 70       	andi	r20, 0x0F	; 15
    5628:	40 5d       	subi	r20, 0xD0	; 208
    562a:	4a 33       	cpi	r20, 0x3A	; 58
    562c:	18 f0       	brcs	.+6      	; 0x5634 <__ultoa_invert+0x7c>
    562e:	49 5d       	subi	r20, 0xD9	; 217
    5630:	31 fd       	sbrc	r19, 1
    5632:	40 52       	subi	r20, 0x20	; 32
    5634:	41 93       	st	Z+, r20
    5636:	02 d0       	rcall	.+4      	; 0x563c <__ultoa_invert+0x84>
    5638:	a9 f7       	brne	.-22     	; 0x5624 <__ultoa_invert+0x6c>
    563a:	ea cf       	rjmp	.-44     	; 0x5610 <__ultoa_invert+0x58>
    563c:	b4 e0       	ldi	r27, 0x04	; 4
    563e:	a6 95       	lsr	r26
    5640:	97 95       	ror	r25
    5642:	87 95       	ror	r24
    5644:	77 95       	ror	r23
    5646:	67 95       	ror	r22
    5648:	ba 95       	dec	r27
    564a:	c9 f7       	brne	.-14     	; 0x563e <__ultoa_invert+0x86>
    564c:	00 97       	sbiw	r24, 0x00	; 0
    564e:	61 05       	cpc	r22, r1
    5650:	71 05       	cpc	r23, r1
    5652:	08 95       	ret
    5654:	9b 01       	movw	r18, r22
    5656:	ac 01       	movw	r20, r24
    5658:	0a 2e       	mov	r0, r26
    565a:	06 94       	lsr	r0
    565c:	57 95       	ror	r21
    565e:	47 95       	ror	r20
    5660:	37 95       	ror	r19
    5662:	27 95       	ror	r18
    5664:	ba 95       	dec	r27
    5666:	c9 f7       	brne	.-14     	; 0x565a <__ultoa_invert+0xa2>
    5668:	62 0f       	add	r22, r18
    566a:	73 1f       	adc	r23, r19
    566c:	84 1f       	adc	r24, r20
    566e:	95 1f       	adc	r25, r21
    5670:	a0 1d       	adc	r26, r0
    5672:	08 95       	ret

00005674 <__ctype_isfalse>:
    5674:	99 27       	eor	r25, r25
    5676:	88 27       	eor	r24, r24

00005678 <__ctype_istrue>:
    5678:	08 95       	ret

0000567a <_exit>:
    567a:	f8 94       	cli

0000567c <__stop_program>:
    567c:	ff cf       	rjmp	.-2      	; 0x567c <__stop_program>
